import (Coroutine) coroutine

define factorial_co(co: Coroutine[Integer, Unit], num: Integer) {
    var f = 1
    for i in 2...num + 1: {
        co.yield(f)
        f *= i
    }
}

define create_tasks(source: List[Integer]): List[Coroutine[Integer, Unit]]
{
    print("Creating {0} tasks:".format(source.size()))

    for i in 0...source.size() - 1: {
        var s = source[i]

        print("Task {0} will last {1} rounds.".format(i, s))
    }

    var result = source.map(|m| Coroutine.build_with_value(factorial_co, m))

    return result
}

var task_list = [
    2,
    4,
    1,
    3,
] |> create_tasks
var total = task_list.size()
var round = 1

while 1: {
    var results = task_list.map(Coroutine.resume)
    var remaining = task_list.select(Coroutine.is_waiting)
                             .size()

    if remaining == 0: {
        break
    }

    print("\nRound {0} with {1} tasks.".format(round, remaining))

    for i in 0...results.size() - 1: {
        var r = results[i]

        match r: {
            case Some(s):
                print("Task {0}: factorial({1}) = {2}".format(i, round, s))
            case None:
        }
    }

    round += 1
}
