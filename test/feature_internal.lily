import test

var t = test.t

t.scope(__file__)

t.interpret("Verify hashes getting a new String key doesn't corrupt.",
    """
    var hash: Hash[String, Integer] = []

    define f: Integer {
        var i = 1
        hash[i ++ i] = i

        return hash["11"]
    }

    f()
    f()
    """)

t.interpret("Return fold with raise.",
    """
    define f(a: Integer) : Integer
    {
        if a == 1: {
            raise ValueError("")
        else:
            raise ValueError("")
        }
    }
    """)

t.interpret("Long method chain.",
    """
    var v = Some(10).and(Some(10)).or(None)
    """)

t.interpret("Return fold with match cases.",
    """
    define f(a: Option[Integer]) : Integer
    {
        match a: {
            case Some(s):
                return 1
            case None:
                return 2
        }
    }
    """)

t.interpret("Return fold with class match case.",
    """
    class One {}
    class Two < One {}
    class Three < Two {}

    define f(input: One): Integer {
        match input: {
            case Three(t):
                return 1
            case Two(t):
                raise ValueError("")
            else:
                return 2
        }
    }
    """)

t.interpret("Return fold with nested if.",
    """
    define f(a: Integer) : Integer
    {
        if a == 1: {
            if a == 2: {
                return 1
            elif a == 3:
                return 2
            else:
                return 3
            }
        else:
            return 4
        }
    }
    """)

t.interpret("Verify the lexer handles long lines.",
    """
    var a = "                                                                                                                                                                                                                                                             "     var b = 10 var c = 11
    """)

t.interpret("Return fold with if.",
    """
    define f(a: Integer) : Integer
    {
        if a == 1: {
            return 1
        elif a == 2:
            return 2
        else:
            return 3
        }
    }
    """)

t.interpret("Return fold with if.",
    """
    # If every branch of an 'if' returns a value, and there is an else, then an
    # explicit return is not necessary at the very end.
    define f(a: Integer) : Integer {
        if a == 1: {
            return 1
        else:
            return 1
        }
    }
    """)

t.interpret("Generic solving for property member of generic class.",
    """
    class Box[A](input: A) {
        public var @contents = [input]
    }

    define f[A, B](in: Box[B])
    {
        in.contents = []
    }
    """)
