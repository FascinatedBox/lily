import (Interpreter,
        LibraryTarget,
        StringTarget,
        TestCase) "../t/testing"

class TestBadManifest < TestCase
{
    private var @t_covlib =
        LibraryTarget(
            :path "covlib",
            :redirect "test/t/backbone"
        )

    private var @t_left =
        StringTarget(
            :path "left",
            :data """\
                var a: Integer
            """
        )

    private var @t_unresolved_target =
        StringTarget(
            :path "unresolved_target",
            :data """\
                import manifest

                forward class Zero { ... }
            """
        )

    public define test_basics
    {
        var t = Interpreter()

        assert_manifest_fails(t, """\
            SyntaxError: Expected a keyword after docblock, but got end of file.
                from [test]:4:
        """,
        """\
            import manifest

            ### example docblock
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Unexpected token '!'.

               |
             3 | !
               | ^

                from [test]:3:
        """,
        """\
            import manifest

            !
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Invalid keyword potato for manifest.

               |
             3 | potato
               | ^

                from [test]:3:
        """,
        """\
            import manifest

            potato
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Unexpected token 'end of file'.
                from [test]:4:
        """,
        """\
            import manifest

            class Example {
        """)

        assert_manifest_fails(t, """\
            SyntaxError: 'predefined' only available to the prelude module.

               |
             3 | predefined Boolean
               | ^

                from [test]:3:
        """,
        """\
            import manifest

            predefined Boolean
            {
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: '}' outside of a block.
                from [test]:3:
        """,
        """\
            import manifest

            }
        """)
    }

    public define test_class
    {
        var t = Interpreter()

        assert_manifest_fails(t, """\
            SyntaxError: Only native classes can have class properties.

               |
             4 | public var @a: Integer
               |        ^

                from [test]:4:
        """,
        """\
            import manifest

            foreign class Example {
                public var @a: Integer
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Only native classes can have class properties.
                from [test]:5:
        """,
        """\
            import manifest

            foreign class Example(public var @a: Integer)
            {
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Class methods defined in manifest mode must be public.

               |
             5 | private define a
               |         ^

                from [test]:5:
        """,
        """\
            import manifest

            class Example
            {
                private define a
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Class methods defined in manifest mode must be public.

               |
             4 | protected define a
               |           ^

                from [test]:4:
        """,
        """\
            import manifest

            class Example {
                protected define a
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Class var declaration must start with a scope.

               |
             4 | var x: Integer
               | ^

                from [test]:4:
        """,
        """\
            import manifest

            class Example {
                var x: Integer
            }
        """)
    }

    public define test_intro
    {
        var t = Interpreter()

        assert_manifest_fails(t, """\
            SyntaxError: Files in manifest mode must start with 'import manifest'.

               |
             1 | import   manifest
               | ^

                from [test]:1:
        """,
        """\
            import   manifest
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Files in manifest mode must start with 'import manifest'.

               |
             1 |  import manifest
               | ^

                from [test]:1:
        """,
        """ \
            import manifest
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Files in manifest mode must start with 'import manifest'.
                from [test]:1:
        """,
        """\n\
            import manifest
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Files in manifest mode must start with 'import manifest'.

               |
             1 | ???
               | ^

                from [test]:1:
        """,
        """\
            ???
        """)
    }

    public define test_import
    {
        var t = Interpreter()

        assert_manifest_fails(t, """\
            SyntaxError: Import keyword should not have a docblock.

               |
             4 | import asdf
               | ^

                from [test]:4:
        """,
        """\
            import manifest

            ### docblock
            import asdf
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Cannot import 'sys' while in manifest mode.

               |
             3 | import sys
               |        ^

                from [test]:3:
        """,
        """\
            import manifest

            import sys
        """)

        t = Interpreter.with_targets(
            @t_covlib,
            @t_left
        )

        assert_manifest_fails(t, """\
            SyntaxError: Cannot import 'covlib' while in manifest mode.

               |
             3 | import covlib
               |        ^

                from [test]:3:
        """,
        """\
            import manifest

            import covlib
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Files in manifest mode must start with 'import manifest'.

               |
             1 | var a: Integer
               | ^

                from left.lily:1:
        """,
        """\
            import manifest

            import left
        """)
    }

    public define test_library
    {
        var t = Interpreter()

        assert_manifest_fails(t, """\
            SyntaxError: Library keyword must be at toplevel.

               |
             4 | library potato
               | ^

                from [test]:4:
        """,
        """\
            import manifest

            class Example {
                library potato
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Library keyword must come before other keywords.

               |
             7 | library example
               | ^

                from [test]:7:
        """,
        """\
            import manifest

            class Example
            {
            }

            library example
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Library keyword must come before other keywords.

               |
             7 | library example
               | ^

                from [test]:7:
        """,
        """\
            import manifest

            foreign class Example
            {
            }

            library example
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Library keyword must come before other keywords.

               |
             9 | library example
               | ^

                from [test]:9:
        """,
        """\
            import manifest

            enum Example
            {
                One,
                Two
            }

            library example
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Library keyword must come before other keywords.

               |
             5 | library example
               | ^

                from [test]:5:
        """,
        """\
            import manifest

            var a: Integer

            library example
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Library keyword has already been used.

               |
             7 | library potato
               | ^

                from [test]:7:
        """,
        """\
            import manifest

            ### example
            library example

            ### potato
            library potato
        """)
    }

    public define test_constant
    {
        var t = Interpreter()

        assert_manifest_fails(t, """\
            SyntaxError: Cannot declare a constant inside a class or enum.

               |
             5 | constant x: Integer
               | ^

                from [test]:5:
        """,
        """\
            import manifest

            class Example
            {
                constant x: Integer
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Cannot declare a constant inside a class or enum.

               |
             8 | constant x: Integer
               | ^

                from [test]:8:
        """,
        """\
            import manifest

            enum Example
            {
                One,
                Two

                constant x: Integer
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Expected 'a label', not 'a property name'.

               |
             3 | constant @x: Integer
               |          ^

                from [test]:3:
        """,
        """\
            import manifest

            constant @x: Integer
        """)

        assert_manifest_fails(t, """\
            SyntaxError: x has already been declared.

               |
             4 | constant x: Integer
               |          ^

                from [test]:4:
        """,
        """\
            import manifest

            var x: Integer
            constant x: Integer
        """)


        assert_manifest_fails(t, """\
            SyntaxError: Constants must have a primitive type (this has List[String]).
                from [test]:4:
        """,
        """\
            import manifest

            constant x: List[String]
        """)
    }

    public define test_var
    {
        var t = Interpreter()

        assert_manifest_fails(t, """\
            SyntaxError: Class var declaration must start with a scope.

               |
             5 | var @x: Integer
               | ^

                from [test]:5:
        """,
        """\
            import manifest

            class Example
            {
                var @x: Integer
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Class properties must start with @.

               |
             5 | public var x: Integer
               |            ^

                from [test]:5:
        """,
        """\
            import manifest

            class Example
            {
                public var x: Integer
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: An enum must have at least two variants.

               |
             5 | var a: Integer
               |     ^

                from [test]:5:
        """,
        """\
            import manifest

            enum Example
            {
                var a: Integer
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Var declaration not allowed inside of an enum.

               |
             7 | var a: Integer
               | ^

                from [test]:7:
        """,
        """\
            import manifest

            enum Example
            {
                One,
                Two
                var a: Integer
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Var declaration not allowed inside of an enum.

               |
             8 | var a: Integer
               | ^

                from [test]:8:
        """,
        """\
            import manifest

            enum Example
            {
                One,
                Two
                define f: Integer
                var a: Integer
            }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Only class properties can use @<name>.

               |
             3 | var @x: Integer
               |     ^

                from [test]:3:
        """,
        """\
            import manifest

            var @x: Integer
        """)
    }

    public define test_forward
    {
        var t = Interpreter.with_targets(
            @t_unresolved_target
        )

        assert_manifest_fails(t, """\
            SyntaxError: Reached end of module with unresolved forward class(es):
            * Zero at line 3
                from unresolved_target.lily:4:
        """,
        """\
            import manifest

            import unresolved_target
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Reached end of module with unresolved forward class(es):
            * One at line 3
                from [test]:4:
        """,
        """\
            import manifest

            forward class One { ... }
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Expected to see 'class' here.

               |
             3 | forward foreign
               |         ^

                from [test]:3:
        """,
        """\
            import manifest

            forward foreign
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Class 'A' does not exist.

               |
             5 | var v: A
               |        ^

                from [test]:5:
        """,
        """\
            import manifest

            forward class One[A] { ... }

            var v: A
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Expected '...', not 'end of file'.
                from [test]:4:
        """,
        """\
            import manifest

            forward class One {
        """)

        assert_manifest_fails(t, """\
            SyntaxError: Expected '}', not 'end of file'.
                from [test]:4:
        """,
        """\
            import manifest

            forward class One { ...
        """)
    }

    public define test_forward_generic_class_generics
    {
        # This is duplicated from test_bad_forward.lily's function of the same
        # name to ensure that manifest classes don't have the same pitfalls.
        var t = Interpreter()

        # Forward has zero, class gives more.

        assert_manifest_fails(t, """\
            SyntaxError: Wrong generics in resolution of Example:
            Expected: Example
            Received: Example[A, B]

               |
             4 | class Example[A, B] {}
               |                     ^

                from [test]:4:
        """,
        """\
            import manifest

            forward class Example { ... }
            class Example[A, B] {}
        """)

        # Forward has non-zero, class gives more.

        assert_manifest_fails(t, """\
            SyntaxError: Wrong generics in resolution of Example:
            Expected: Example[A]
            Received: Example[A, B]

               |
             4 | class Example[A, B] {}
               |                     ^

                from [test]:4:
        """,
        """\
            import manifest

            forward class Example[A] { ... }
            class Example[A, B] {}
        """)

        # Forward has non-zero, class gives less.

        assert_manifest_fails(t, """\
            SyntaxError: Wrong generics in resolution of Example:
            Expected: Example[A, B]
            Received: Example[A]

               |
             4 | class Example[A] {}
               |                  ^

                from [test]:4:
        """,
        """\
            import manifest

            forward class Example[A, B] { ... }
            class Example[A] {}
        """)

        # Forward has non-zero, class gives zero.

        assert_manifest_fails(t, """\
            SyntaxError: Wrong generics in resolution of Example:
            Expected: Example[A, B]
            Received: Example

               |
             4 | class Example {}
               |               ^

                from [test]:4:
        """,
        """\
            import manifest

            forward class Example[A, B] { ... }
            class Example {}
        """)
    }
}
