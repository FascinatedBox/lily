import test

var t = test.t

t.scope(__file__)

t.interpret_for_error("Prevent using type == type matching when solving should be used.",
    """\
    SyntaxError: Argument #2 to f is invalid:\n\
    Expected Type: A\n\
    Received Type: Integer\n    \
        from test\/[subinterp]:10:\
    """,
    """\
    define f[A](v1: A, v2: A) {  }

    define g[A](v1: A) {
    	# It's tempting to use signature == signature comparison to dodge generic
    	# matching. However, this demonstrates a case where that is a bad idea.
    	# In this case, the first argument is A and A is wanted. However, because
    	# the wanted value is a generic, f's A is now g's A.
    	# If generic matching isn't done, then this will succeed because it will
    	# think that 10 is the first thing to resolve f's A (and it isn't).
    	f(v1, 10)
    }
    """)

t.interpret_for_error("Forbid double resolve of a type.",
    """\
    SyntaxError: List elements do not have a consistent type.\n\
    Expected Type: A\n\
    Received Type: List[Integer]\n    \
        from test\/[subinterp]:23:\
    """,
    """\
    class Box(a: Integer) {}

    define f[A, B](one: A, two: B, three: B) {  }

    define g[A](one: A) {
        # Here's what's supposed to happen:
        # The first argument to f is processed as List[Box].
        # f: A = List[Box]
        # The second argument is List[A]
        # f: B = List[A]
        # The third argument is List[Integer].

        # For the third argument, list build will attempt to resolve what B is and
        # find that B = List[A].
        # Correct:
        # [[1]], expect B.       B = List[List[A]]
        #  [1]   expect List[A]. However, the expected signature is resolved.

        # Incorrect:
        # [[1]], expect B.       B = List[List[A]]
        #  [1],  expect List[A]. A = Box (double resolve!)

        f([Box(10)], [one], [[1]])
    }
    """)

t.interpret_for_error("Forbid double resolve in call arguments.",
    """\
    SyntaxError: List elements do not have a consistent type.\n\
    Expected Type: A\n\
    Received Type: Box\n    \
        from test\/[subinterp]:14:\
    """,
    """\
    class Box(a: Integer) {}

    define f[A, B](value: A, value2: B, value3: B) {

    }

    define g[A, B](value: A, value2: B) {
        var a = Box(10)

        # f's A is first resolved as 'Box'.
        # B is then resolved as List[A] but it's g's A.
        # The last part fails: B is a list of g's A (which is quasi-known) but is
        # given a list of any.
        f(a, [value], [a])
    }
    """)

t.interpret_for_error("Allow function returning A to always raise an error.",
    """\
    ValueError: Test.\n\
    Traceback:\n    \
        from test\/[subinterp]:1: in f\n    \
        from test\/[subinterp]:3: in __main__\
    """,
    """\
    define f[A] : A { raise ValueError("Test.") }

    var v: List[Integer] = [f()]
    """)

t.interpret_for_error("Verify usage of ? for unknown type.",
    """\
    SyntaxError: Argument #1 to f is invalid:\n\
    Expected Type: List[?]\n\
    Received Type: Integer\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f[A](a: List[A]) {}

    f(10)
    """)

t.interpret_for_error("Require generics default only types that are resolved.",
    """\
    SyntaxError: Argument #2 to f is invalid:\n\
    Expected Type: Integer\n\
    Received Type: String\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    define f[A](value1: A, value2: A) {  }
    define g[A](value1: A) : A { return value1 }

    # g should not assume any type info for the argument it takes because the
    # A given isn't resolved. If it's pulled in, then the error message is somewhat
    # confusing (it's assumed a bare A is wanted).
    f(10, g("10"))
    """)

t.interpret_for_error("Forbid excessive generics.",
    """\
    SyntaxError: Too many generics.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    enum Test[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a] {
        Test0
        Test1
    }
    """)

t.interpret_for_error("Forbid the wrong quantified generic being passed.",
    """\
    SyntaxError: Argument #1 to g is invalid:\n\
    Expected Type: A\n\
    Received Type: B\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    # This isn't allowed because A and B may be incompatible types.
    # Ex: A being an integer, B as a string.
    define f[A, B](g: Function(A), value: B) {
    	g(value)
    }
    """)

t.interpret_for_error("Forbid quantified A filling in for Integer.",
    """\
    SyntaxError: Argument #2 to f is invalid:\n\
    Expected Type: List[Integer]\n\
    Received Type: List[A]\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    define f[A](a: List[A], b: List[A]) {}

    define g[A](a: List[A]) {
        f([1], a)
    }
    """)

t.interpret_for_error("Check result of unquantified solving.",
    """\
    SyntaxError: Argument #2 to List.push is invalid:\n\
    Expected Type: Integer\n\
    Received Type: String\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = [Some(1)].map(Option.unwrap)
    v.push("")
    """)

t.interpret_for_error("Wrong token collecting generics.",
    """\
    SyntaxError: Expected either ',' or ']', not '&&'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f[A, B &&
    """)

t.interpret_for_error("Wrong generic name.",
    """\
    SyntaxError: Invalid generic name (wanted B, got Q).\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f[A, Q]
    """)
