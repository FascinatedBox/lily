import test

var t = test.t

t.scope(__file__)

t.interpret("Match against class.",
    """
    class One {}
    class Two < One {}
    class Three < Two {}

    define f(input: One): Integer {
        var out = 0

        match input: {
            case Three(t):
                out = 3
            case Two(t):
                out = 2
            else:
                out = 1
        }

        return out
    }

    var v: List[One] = [Three(), Two(), One(), Two(), Three()]

    if v.map(f) != [3, 2, 1, 2, 3]: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Verify that inherited classes have the right layout.",
    """
    class First {
        public var @prop_1 = 10
        public var @prop_2 = 5.5
        public var @prop_3 = "1"
    }

    class Second < First {
        public var @prop_4 = 20
        public var @prop_5 = 55.55
        public var @prop_6 = "11"
    }

    class Third < Second {
        public var @prop_7 = 40
        public var @prop_8 = 777.777
        public var @prop_9 = "333"
    }

    var v = Third()
    var v2 = Second()
    var v3 = First()
    """)

t.interpret("Verify class basics.",
    """
    define f {}

    # The call to f is to make sure classes don't always blindly inject self into
    # every call that is made.

    class One(a: Integer) { public var @a = a  f() }
    class Two(a: Integer, b: String) < One(a) { public var @b = b }
    class Three(a: Integer, b: String, c: List[Integer]) < Two(a, b) { public var @c = c }

    class Four {
        public var @a: Integer = 10
        @a = 11

        public var @b = 12
        @b = 13
    }

    class AccessCheck {
        public define g {
            AccessCheck.g(self)
            self.g()
        }
    }

    define assign_to_better {
        # The type is fixed by the first assignment, but assignments that have
        # 'better', more capable types should succeed.
        var v = One(1)
        v = Two(1, "2")
        v = Three(1, "2", [3])
    }

    define check_layout {
        var v = Three(1, "2", [3])
        if v.a != 1 || v.b != "2" || v.c != [3]: {
            raise Exception("Variables may have been laid out incorrectly.")
        }
    }

    assign_to_better()
    check_layout()
    """)

t.interpret("Verify calls to class methods.",
    """
    class One {
        public define check {}

        public define clone: One {
            One.check(self)
            return One()
        }

        protected var @a = 1
        protected define f { }

        self.check()
    }

    class Two < One {
        One.check(self)
        self.check()

        @a += 1

        f()
        One.f(self)

        public define add {
            if 1: {
                @a += 1
            }
        }
    }
    """)

t.interpret("Verify class generics.",
    """
    class Box[A](a: A)
    {
        public var @a = a
    }

    class BoxTwo[A, B](a: A, b: B) < Box(a)
    {
        public var @b = b
        public define f {
            BoxTwo(1, 2)
        }
    }

    class Container[A](value: A) {
        public var @v: List[A] = [value]
    }

    var v = Box(10)
    v = BoxTwo(1, "2")

    var v2 = BoxTwo([10], "20")
    var check: Integer = v2.a[0]

    var c: Container[Integer] = Container(10)
    c.v.push(10)
    """)

t.interpret("Check short class constructors.",
    """
    class Test1(var @x: Integer, y: Integer, var @z: Integer) {}

    var t1 = Test1(10, 20, 30)
    if t1.x != 10 || t1.z != 30: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Verify class inheritance shorthand.",
    """
    class Base(var @index: Integer) {  }
    class NthBase(index: Integer, var @str: String) < Base(index) {  }

    var v = NthBase(1, "abc")

    if v.index != 1 || v.str != "abc": {
       raise Exception("Failed.")
    }
    """)

t.interpret("Verify class match by calling class methods.",
    """
    class Base { public define base_str: String { return "B" } }
    class Left < Base { public define left_str: String { return "L" } }
    class Right < Base { public define right_str: String { return "R" } }
    class Up < Base {  }

    define f(input: Base): String {
        var out = ""

        match input: {
            case Left(l):
                out = l.left_str()
            case Right(r):
                out = r.right_str()
            else:
                out = input.base_str()
        }

        return out
    }

    var v: List[Base] = [Right(), Left(), Up(), Left(), Right()]

    if v.map(f) != ["R", "L", "B", "L", "R"]: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Allow an inherited constructor to pass 'self'.",
    """
    class Parent(x: Parent) { }

    class Child < Parent(self) { }
    """)

t.interpret("Verify properties being naturally covariant.",
    """
    class One {}
    class Two < One {}

    class Test {
        public var @a: One = Two()
        @a = One()
    }
    """)

t.interpret("Verify unrelated classes not marked as related by accident.",
    """
    # This ensures that the vm does not try to say that Alpha inherits from Beta
    # because Alpha was first (and there is no lineage).
    class Alpha(s: String) {
       public var @s = s
       public define upper: String {
          return @s.upper()
       }
    }
    class Beta(s: String) {
       public var @a = Alpha(s)
       public var @b = @a.upper()
    }
    var b = Beta("hello")
    """)

t.interpret("Verify subscript assignment to property.",
    """
    class Test {
        public var @map = ["one" => ["1"]]

        public define add(key: String, val: String) {
            if ! @map.has_key(key): {
                @map[key] = []
            }

            @map[key].push(val)
        }
    }
    """)

t.interpret("Verify that return of 'self' keeps type information.",
    """
    class First {
        public define doit: self { }
    }

    class Second < First {
        public define amethod {}
    }

    Second().doit().amethod()
    """)

t.interpret("Get class method through instance",
    """
    class Example {
        public define f: List[Integer] { return [1, 2, 3] }
    }

    var v = Example().f

    if v(Example()) != [1, 2, 3]: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Verify class match allowing _ to skip decomposition.",
    """
    class Bottom { }
    class Left < Bottom { }
    class Right < Bottom { }

    var v: Bottom = Right()

    match v: {
        case Left(_):
            raise Exception("Failed.")
        case Right(_):
        else:
            raise Exception("Failed.")
    }
    """)

t.interpret("Verify that a lambda can call class methods through 'self'.",
    """
    class Test {
        public var @v = 10
        public define f {
            @v += 10
        }
        public define g: Function() {
            return (|| self.f() )
        }
    }

    var v = Test()
    var f = v.g()

    f()
    if v.v != 20: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Redeclare private member with new linkage.",
    """
    class One {
        private var @a = 10
        public define one_a: Integer { return @a }
    }

    class Two < One {
        private var @a = 20
        public define two_a: Integer { return @a }

    }

    var v = Two()

    if v.two_a() != 20 || v.one_a() != 10: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Returning the special self type works.",
    """\
    class One {
        public var @a = 1
        public define f: self { @a += 100 }
    }

    class Two < One {
        public var @b = 2
        public define g: self { @b += 1000 }
    }

    var a = Two()

    a = a.f()
         .g()

    a = a.g()
         .f()

    if a.a != 201 || a.b != 2002: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Call a class property that is a function.",
    """
    var v = [1]

    define f(a: Integer): List[Integer] {
        v.push(a)
        return v
    }

    class Example {
        public var @a = f
    }

    if Example().a(2) != [1, 2]: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Define and use a static method.",
    """
    class Example {
        public static define f: Integer {
            return 10
        }
    }

    if Example.f() != 10: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Static method from non-static method.",
    """
    class Example {
        public var @a = 10
        public static define f(x: Integer): Integer { return x * x }

        public define g: Integer {
            @a = f(@a)
            return @a
        }
    }

    if Example().g() != 100: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Usage of a class constructor var.",
    """
    class Example(var @x: Integer) {
        public define f(a: Integer) {}
        public define add_to_x(y: Integer) {
            f(@x)
        }
    }
    """)
