import (Interpreter,
        TestCase) "../t/testing"

class TestVerifyFormat < TestCase
{
    public define test_basic_containers
    {
        var empty_list: List[Integer] = []
        var empty_hash: Hash[Integer, Integer] = []

        assert_equal(
            "{0}".format(empty_list),
            "[]"
        )

        assert_equal(
            "{0}".format([1, 2, 3]),
            "[1, 2, 3]"
        )

        assert_equal(
            "{0}".format(empty_hash),
            "[]"
        )

        assert_equal(
            "{0}".format([1 => 1, 2 => 2, 3 => 3]).split(",").size(),
            3
        )

        assert_equal(
            "{0}".format(<[1, [2], 3.5]>),
            "<[1, [2], 3.5]>"
        )
    }

    public define test_basic_value
    {
        # Interpolation (++) and String.format both use the same mechanism to
        # stringify a value. So this is testing interpolation as well.

        var t = Interpreter()

        assert_equal(
            "{0}".format(5.5),
            "5.5"
        )

        assert_equal(
            "{0}".format('a'),
            "'a'"
        )

        assert_equal(
            "{0}".format('\n'),
            "'\\n'"
        )

        assert_equal(
            "{0}".format('\255'),
            "'\\255'"
        )

        assert_equal(
            "{0}".format(true),
             "true"
        )

        assert_equal(
            "{0}".format(false),
            "false"
        )

        assert_equal(
            "{0}".format(["abc"]),
            "[\"abc\"]"
        )

        assert_equal(
            "{0}".format(B"a\128b\n"),
            "a\\128b\\n"
        )

        assert_equal(
            "{0}".format(unit),
            "unit"
        )
    }

    public define test_enums
    {
        var t = Interpreter()

        assert_parse_string(t, """
            scoped enum ScopedExample {
                Zero,
                One(Integer)
            }

            var zero = ScopedExample.Zero
            var one = ScopedExample.One(1)

            if "{0}".format(zero) != "ScopedExample.Zero": {
                0 / 0
            }

            if "{0}".format(one) != "ScopedExample.One(1)": {
                0 / 0
            }
        """)

        assert_parse_string(t, """
            enum FlatExample {
                FlatZero,
                FlatOne(Integer)
            }

            var flat_zero = FlatExample.FlatZero
            var flat_one = FlatExample.FlatOne(1)

            if "{0}".format(flat_zero) != "FlatZero": {
                0 / 0
            }

            if "{0}".format(flat_one) != "FlatOne(1)": {
                0 / 0
            }
        """)
    }

    public define test_escape_in_bytestring
    {
        var sources = [
            B"\000\001\002\003\004\005\006\007\008\009\010\011\012\013\014\015",
            B"\016\017\018\019\020\021\022\023\024\025\026\027\028\029\030\031",
            B"\032\033\034\035\036\037\038\039\040\041\042\043\044\045\046\047",
            B"\048\049\050\051\052\053\054\055\056\057\058\059\060\061\062\063",
            B"\064\065\066\067\068\069\070\071\072\073\074\075\076\077\078\079",
            B"\080\081\082\083\084\085\086\087\088\089\090\091\092\093\094\095",
            B"\096\097\098\099\100\101\102\103\104\105\106\107\108\109\110\111",
            B"\112\113\114\115\116\117\118\119\120\121\122\123\124\125\126\127",
            B"\128\129\130\131\132\133\134\135\136\137\138\139\140\141\142\143",
            B"\144\145\146\147\148\149\150\151\152\153\154\155\156\157\158\159",
            B"\160\161\162\163\164\165\166\167\168\169\170\171\172\173\174\175",
            B"\176\177\178\179\180\181\182\183\184\185\186\187\188\189\190\191",
            B"\192\193\194\195\196\197\198\199\200\201\202\203\204\205\206\207",
            B"\208\209\210\211\212\213\214\215\216\217\218\219\220\221\222\223",
            B"\224\225\226\227\228\229\230\231\232\233\234\235\236\237\238\239",
            B"\240\241\242\243\244\245\246\247\248\249\250\251\252\253\254\255",
        ]
        var expects = [
            "\\000\\001\\002\\003\\004\\005\\006\\a\\b\\t\\n\\011\\012\\r\\014\\015",
            "\\016\\017\\018\\019\\020\\021\\022\\023\\024\\025\\026\\027\\028\\029\\030\\031",
            " !\\\"#$%&\\'()*+,-./",
            "0123456789:;<=>?",
            "@ABCDEFGHIJKLMNO",
            "PQRSTUVWXYZ[\\\\]^_",
            "`abcdefghijklmno",
            "pqrstuvwxyz{|}~\\127",
            "\\128\\129\\130\\131\\132\\133\\134\\135\\136\\137\\138\\139\\140\\141\\142\\143",
            "\\144\\145\\146\\147\\148\\149\\150\\151\\152\\153\\154\\155\\156\\157\\158\\159",
            "\\160\\161\\162\\163\\164\\165\\166\\167\\168\\169\\170\\171\\172\\173\\174\\175",
            "\\176\\177\\178\\179\\180\\181\\182\\183\\184\\185\\186\\187\\188\\189\\190\\191",
            "\\192\\193\\194\\195\\196\\197\\198\\199\\200\\201\\202\\203\\204\\205\\206\\207",
            "\\208\\209\\210\\211\\212\\213\\214\\215\\216\\217\\218\\219\\220\\221\\222\\223",
            "\\224\\225\\226\\227\\228\\229\\230\\231\\232\\233\\234\\235\\236\\237\\238\\239",
            "\\240\\241\\242\\243\\244\\245\\246\\247\\248\\249\\250\\251\\252\\253\\254\\255",
        ]

        for i in 0...sources.size() - 1: {
            var source = sources[i]
            var expect = expects[i]
            var formatted = source ++ ""

            assert_equal(expect, formatted)
        }
    }

    public define test_escape_in_string
    {
        var sources = [
            "\001\002\003\004\005\006\007\008\009\010\011\012\013\014\015",
            "\016\017\018\019\020\021\022\023\024\025\026\027\028\029\030\031",
            "\032\033\034\035\036\037\038\039\040\041\042\043\044\045\046\047",
            "\048\049\050\051\052\053\054\055\056\057\058\059\060\061\062\063",
            "\064\065\066\067\068\069\070\071\072\073\074\075\076\077\078\079",
            "\080\081\082\083\084\085\086\087\088\089\090\091\092\093\094\095",
            "\096\097\098\099\100\101\102\103\104\105\106\107\108\109\110\111",
            "\112\113\114\115\116\117\118\119\120\121\122\123\124\125\126\127",
        ]
        var expects = [
            "\\001\\002\\003\\004\\005\\006\\a\\b\\t\\n\\011\\012\\r\\014\\015",
            "\\016\\017\\018\\019\\020\\021\\022\\023\\024\\025\\026\\027\\028\\029\\030\\031",
            " !\\\"#$%&\\\'()*+,-./",
            "0123456789:;<=>?",
            "@ABCDEFGHIJKLMNO",
            "PQRSTUVWXYZ[\\\\]^_",
            "`abcdefghijklmno",
            "pqrstuvwxyz{|}~\\127",
        ]

        for i in 0...sources.size() - 1: {
            var source = sources[i]
            var expect = expects[i]
            var formatted = ([source] ++ "").slice(2, -2)

            assert_equal(expect, formatted)
        }
    }

    public define test_file
    {
        var t = Interpreter()

        assert_parse_string(t, """
            stdin.close()

            if "{0}".format(stdout).starts_with("<open file at ") == false: {
                0 / 0
            }

            if "{0}".format(stdin).starts_with("<closed file at ") == false: {
                0 / 0
            }
        """)
    }

    public define test_foreign
    {
        # foreign (toplevel function)

        assert_equal(
            "{0}".format(print),
            "<built-in function print>"
        )

        # foreign (class constructor)

        assert_equal(
            "{0}".format(Exception),
            "<built-in function Exception>"
        )

        # foreign (class method)

        assert_equal(
            "{0}".format(String.parse_i),
            "<built-in function String.parse_i>"
        )

        # foreign (enum method)

        assert_equal(
            "{0}".format(Option.and_then),
            "<built-in function Option.and_then>"
        )
    }

    public define test_native
    {
        var t = Interpreter()

        # native (toplevel function)

        assert_parse_string(t, """
            define f { }

            if "{0}".format(f) != "<function f>": {
                0 / 0
            }
        """)

        # native (class constructor)

        assert_parse_string(t, """
            class Ctor {
            }

            if "{0}".format(Ctor) != "<function Ctor>": {
                0 / 0
            }
        """)

        # native (class method)

        assert_parse_string(t, """
            class Example {
                public define g {}
            }

            if "{0}".format(Example.g) != "<function Example.g>": {
                0 / 0
            }
        """)

        # native (enum method)

        assert_parse_string(t, """
            scoped enum TestEnum {
                TestOne,
                TestTwo
                define g {}
            }

            if "{0}".format(TestEnum.g) != "<function TestEnum.g>": {
                0 / 0
            }
        """)

        # native (cycle tagged value)

        assert_parse_string(t, """
            enum Tree {
                Leaf,
                Map(Hash[Integer, Tree])
            }

            var t1 = Map([1 => Map([2 => Leaf])])
            var t2 = t1 ++ t1

            if t2 != "Map([1 => Map([2 => Leaf])])Map([1 => Map([2 => Leaf])])": {
                0 / 0
            }
        """)

        # native (circular value)

        assert_parse_string(t, """
            var l3 = [1 => Leaf]
            var t3 = Map(l3)

            l3[1] = t3

            var s3 = t3 ++ t3

            if s3 != "Map([1 => [...]])Map([1 => [...]])": {
                0 / 0
            }
        """)
    }
}
