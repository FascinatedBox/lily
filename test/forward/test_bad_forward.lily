import (Interpreter,
        StringTarget,
        TestCase) "../t/testing"

class TestBadForward < TestCase
{
    private var @t_unresolved_target =
        StringTarget(
            :path "unresolved_target",
            :data """
                forward define f { ... }
                forward define g { ... }
                forward define h { ... }
            """
        )

    public define test_bad_resolution
    {
        var t = Interpreter()

        # bad resolution (with scope qualifier)

        assert_parse_fails(t, """\
            SyntaxError: Wrong qualifiers in resolution of Test.f (expected: protected).
                from [test]:3:
        """,
        """\
            class Test {
                forward protected define f(Integer) { ... }
                public define f(a: Integer) {}
            }
        """)

        # bad resolution (with static qualifier)

        assert_parse_fails(t, """\
            SyntaxError: Wrong qualifiers in resolution of Test.f (expected: private static).
                from [test]:3:
        """,
        """\
            class Test {
                forward private static define f(Integer) { ... }
                private define f(a: Integer) {}
            }
        """)

        # bad resolution (expected public)

        assert_parse_fails(t, """\
            SyntaxError: Wrong qualifiers in resolution of Example.f (expected: public).
                from [test]:3:
        """,
        """\
            class Example {
                forward public define f { ... }
                protected define f {}
            }
        """)

        # bad resolution (wrong type)

        assert_parse_fails(t, """\
            SyntaxError: Declaration does not match prior forward declaration at line 2.
            Expected: Function (Test, Integer)
            Received: Function (Test, String)
                from [test]:3:
        """,
        """\
            class Test {
                forward public define f(Integer) { ... }
                public define f(a: String) {}
            }
        """)

        # bad resolution (forward class as flat enum)

        assert_parse_fails(t, """\
            SyntaxError: A class named 'Test' has already been declared.
                from [test]:2:
        """,
        """\
            forward class Test { ... }
            enum Test {
                One,
                Two
            }
        """)

        # bad resolution (forward class as scoped enum)

        assert_parse_fails(t, """\
            SyntaxError: A class named 'Test' has already been declared.
                from [test]:2:
        """,
        """\
            forward class Test { ... }
            scoped enum Test {
                One,
                Two
            }
        """)
    }

    public define test_duplicate
    {
        var t = Interpreter()

        # duplicate forward (of toplevel definition)

        assert_parse_fails(t, """\
            SyntaxError: A forward declaration for f already exists.
                from [test]:2:
        """,
        """\
            forward define f(Integer) { ... }
            forward define f(Integer) { ... }
        """)

        # duplicate forward (of class method)

        assert_parse_fails(t, """\
            SyntaxError: A forward declaration for f already exists.
                from [test]:3:
        """,
        """\
            class Example {
                forward public define f(Integer) { ... }
                forward public define f(Integer) { ... }
            }
        """)

        # duplicate forward (class method and toplevel)
        # Blocked because it's this way for regular method definitions.

        assert_parse_fails(t, """\
            SyntaxError: f has already been declared.
                from [test]:4:
        """,
        """\
            define f {}

            class Example {
                forward public define f(Integer) { ... }
            }
        """)
    }

    public define test_unresolved_at_end
    {
        var t = Interpreter()

        # unresolved at end (of class)

        assert_parse_fails(t, """\
            SyntaxError: Reached end of class with unresolved forward(s):
            * Test.f at line 2
                from [test]:3:
        """,
        """\
            class Test {
                forward public define f(Integer) { ... }
            }
        """)

        # unresolved at end (of first file)

        assert_parse_fails(t, """\
            SyntaxError: Reached end of module with unresolved forward(s):
            * f at line 1
                from [test]:2:
        """,
        """\
            forward define f(String): String { ... }
        """)

        # unresolved at end (of class)

        assert_parse_fails(t, """\
            SyntaxError: Cannot declare a class property when there are unresolved forward(s):
            * Test.f at line 2
                from [test]:3:
        """,
        """\
            class Test {
                forward public define f(Integer) { ... }
                public var @x = 10
            }
        """)

        # unresolved at end (trying to import)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use 'import' when there are unresolved forward(s):
            * f at line 1
                from [test]:2:
        """,
        """\
            forward define f { ... }
            import notachance
        """)

        # unresolved at end (var decl with unresolved)

        assert_parse_fails(t, """\
            SyntaxError: Cannot declare a global var when there are unresolved forward(s):
            * f at line 1
                from [test]:2:
        """,
        """\
            forward define f { ... }
            var v = 10
            define f { }
        """)

        # unresolved at end (import unresolved module)

        t = Interpreter.with_targets(
            @t_unresolved_target
        )

        assert_parse_fails(t, """\
            SyntaxError: Reached end of module with unresolved forward(s):
            * h at line 4
            * g at line 3
            * f at line 2
                from unresolved_target.lily:5:
        """,
        """\
            import unresolved_target
        """)

        # unresolved at end (template not complete)

        t = Interpreter()

        assert_render_fails(t, """\
            SyntaxError: Reached end of module with unresolved forward(s):
            * f at line 1
                from [test]:1:
        """,
        """\
            <?lily forward define f(String): String { ... } ?>
        """)

        # unresolved at end (forward class)

        assert_parse_fails(t, """\
            SyntaxError: Reached end of module with unresolved forward class(es):
            * Three at line 3
            * Two at line 2
            * One at line 1
                from [test]:4:
        """,
        """\
            forward class One { ... }
            forward class Two { ... }
            forward class Three { ... }
        """)
    }

    public define test_forward_collision
    {
        var t = Interpreter()

        # forward collision (against a flat enum)

        assert_parse_fails(t, """\
            SyntaxError: An enum named 'Test' has already been declared.
                from [test]:6:
        """,
        """\
            enum Test {
                One,
                Two
            }

            forward class Test { ... }
        """)

        # forward collision (against a scoped enum)

        assert_parse_fails(t, """\
            SyntaxError: An enum named 'Test' has already been declared.
                from [test]:6:
        """,
        """\
            scoped enum Test {
                One,
                Two
            }

            forward class Test { ... }
        """)

        # forward collision (against a predefined class)

        assert_parse_fails(t, """\
            SyntaxError: A built-in class named 'Exception' already exists.
                from [test]:1:
        """,
        """\
            forward class Exception { ... }
        """)

        # forward collision (against a predefined flat enum)

        assert_parse_fails(t, """\
            SyntaxError: A built-in enum named 'Option' already exists.
                from [test]:1:
        """,
        """\
            forward class Option { ... }
        """)

        # forward collision (against a forward)

        assert_parse_fails(t, """\
            SyntaxError: A class named 'Test' has already been declared.
                from [test]:2:
        """,
        """\
            forward class Test { ... }
            forward class Test { ... }
        """)

        # forward collision (against an existing class)

        assert_parse_fails(t, """\
            SyntaxError: A class named 'Test' has already been declared.
                from [test]:2:
        """,
        """\
            class Test {}
            forward class Test { ... }
        """)
    }
}
