import (Interpreter,
        TestCase) "../t/testing"

class TestBadEnum < TestCase
{
    public define test_bad_decl
    {
        var t = Interpreter()

        # bad decl (flat enum duplicate names)

        assert_parse_fails(t, """\
            SyntaxError: A class with the name 'One' already exists.

               |
             3 | One(A)
               | ^

                from [test]:3:
        """,
        """\
            enum Test[A] {
                One(A),
                One(A)
            }
        """)

        # bad decl (scoped enum duplicate names)

        assert_parse_fails(t, """\
            SyntaxError: A class with the name 'Fast' already exists.

               |
             3 | Fast
               | ^

                from [test]:3:
        """,
        """\
            scoped enum Speed {
                Fast,
                Fast
            }
        """)

        # bad decl (duplicate enum)

        assert_parse_fails(t, """\
            SyntaxError: An enum named 'Example' has already been declared.

               |
             5 | enum Example {
               |      ^

                from [test]:5:
        """,
        """\
            enum Example {
                One,
                Two
            }
            enum Example {
                One,
                Two
            }
        """)

        # bad decl (first variant collide with class)

        assert_parse_fails(t, """\
            SyntaxError: A class with the name 'One' already exists.

               |
             4 | One,
               | ^

                from [test]:4:
        """,
        """\
            class One {}

            enum Example {
                One,
                Two
            }
        """)

        # bad decl (nth variant collide with class)

        assert_parse_fails(t, """\
            SyntaxError: A class with the name 'Four' already exists.

               |
             7 | Four,
               | ^

                from [test]:7:
        """,
        """\
            class Four {}

            enum Example {
                One,
                Two,
                Three,
                Four,
                Five
            }
        """)

        # bad decl (flat enum name too short)

        assert_parse_fails(t, """\
            SyntaxError: 'A' is not a valid class name (too short).

               |
             1 | enum A {
               |      ^

                from [test]:1:
        """,
        """\
            enum A {
                One,
                Two,
                Three
            }
        """)

        # bad decl (scoped enum name too short)

        assert_parse_fails(t, """\
            SyntaxError: 'A' is not a valid class name (too short).

               |
             1 | scoped enum A {
               |             ^

                from [test]:1:
        """,
        """\
            scoped enum A {
                One,
                Two,
                Three
            }
        """)

        # non-identifier on first variant

        assert_parse_fails(t, """\
            SyntaxError: Expected 'a label', not 'a string'.

               |
             2 | "One",
               | ^

                from [test]:2:
        """,
        """\
            enum Example {
                "One",
                Two,
                Three
            }
        """)

        # non-identifier found after first variant

        assert_parse_fails(t, """\
            SyntaxError: Expected a variant name, '}', or 'define' here.

               |
             3 | "Two"
               | ^

                from [test]:3:
        """,
        """\
            enum Example {
                One,
                "Two"
            }
        """)
    }

    public define test_bad_flat
    {
        var t = Interpreter()

        # bad flat (optarg using scoped variant as flat)

        assert_parse_fails(t, """\
            SyntaxError: One has not been declared.

               |
             6 | define f(a: *Test = One) {}
               |                     ^

                from [test]:6:
        """,
        """\
            scoped enum Test {
                One,
                Two
            }

            define f(a: *Test = One) {}
        """)

        # bad flat (assign using scoped enum as flat)

        assert_parse_fails(t, """\
            SyntaxError: One has not been declared.

               |
             6 | var opt: Test[Integer] = One(10)
               |                          ^

                from [test]:6:
        """,
        """\
            scoped enum Test[A] {
                One(A),
                Two
            }

            var opt: Test[Integer] = One(10)
        """)
    }

    public define test_enum_rules
    {
        var t = Interpreter()

        # enum rules (no toplevel code in enum)

        assert_parse_fails(t, """\
            SyntaxError: Expected 'define' or '}', not this (did you forget a comma?)

               |
             8 | var @v = 10
               | ^

                from [test]:8:
        """,
        """\
            enum Test {
                One,
                Two

                define f {
                }

                var @v = 10
            }
        """)

        # enum rules (no implicit constructor)

        assert_parse_fails(t, """\
            SyntaxError: To construct an enum, specify a variant.

               |
             1 | var v = Option(10)
               |               ^

                from [test]:1:
        """,
        """\
            var v = Option(10)
        """)

        # enum rules (at least 2 variants)
        # Blocked since it doesn't seem useful.

        assert_parse_fails(t, """\
            SyntaxError: An enum must have at least two variants.
                from [test]:3:
        """,
        """\
            enum Test[A] {
                One(A)
            }
        """)

        # enum rules (not within a define)

        assert_parse_fails(t, """\
            SyntaxError: Cannot declare an enum while inside a block.

               |
             2 | enum Option[A] {
               | ^

                from [test]:2:
        """,
        """\
            define f {
                enum Option[A] {
                    Some(A)
                    None
                }
            }
        """)

        # enum rules (variant is not a decl type)

        # Forbid using a variant as a type in a declaration.
        assert_parse_fails(t, """\
            SyntaxError: Variant types not allowed in a declaration.

               |
             6 | var v: One[integer] = One(10)
               |        ^

                from [test]:6:
        """,
        """\
            enum Test[A] {
                One(A),
                Two
            }

            var v: One[integer] = One(10)
        """)

        # enum rules (no empty decl parenth)

        assert_parse_fails(t, """\
            SyntaxError: () must be removed if there are no arguments inside.

               |
             2 | One()
               |     ^

                from [test]:2:
        """,
        """\
            enum Example {
                One()
            }
        """)

        # enum rules (blocking variants as properties)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a class property here.

               |
             6 | var v = @One
               |         ^

                from [test]:6:
        """,
        """\
            enum Example {
                One,
                Two

                define f {
                    var v = @One
                }
            }
        """)

        # enum rules (blocking methods as properties)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a class property here.

               |
             9 | var v = @f
               |         ^

                from [test]:9:
        """,
        """\
            enum Example {
                One,
                Two

                define f {
                }

                define g {
                    var v = @f
                }
            }
        """)

        # enum rules (access variant by flat enum instance)

        assert_parse_fails(t, """\
            SyntaxError: Not allowed to access a variant through an enum instance.
                from [test]:6:
        """,
        """\
            enum Example {
                One,
                Two
            }

            var v = One.One
        """)

        # enum rules (access variant by scoped enum instance)

        assert_parse_fails(t, """\
            SyntaxError: Not allowed to access a variant through an enum instance.
                from [test]:6:
        """,
        """\
            scoped enum Example {
                One,
                Two
            }

            var v = Example.One.One
        """)

        # enum rules (must inherit Integer to have values)

        assert_parse_fails(t, """\
            SyntaxError: Enums must inherit from Integer to have values.

               |
             4 | Three = 1,
               |       ^

                from [test]:4:
        """,
        """\
            scoped enum Example {
                One,
                Two,
                Three = 1,
                Four
            }
        """)
    }

    public define test_bad_shorthand
    {
        var t = Interpreter()

        # Bad shorthand (when expecting a non-enum)
        assert_parse_fails(t, """\
            SyntaxError: Cannot use member 'One' of non-enum without a value.
                from [test]:6:
        """,
        """\
            scoped enum Example {
                One,
                Two
            }

            var v: Integer = .One
        """)

        # Bad shorthand (variant not in enum)
        assert_parse_fails(t, """\
            SyntaxError: Example does not have a variant named 'Thre'.
                from [test]:6:
        """,
        """\
            scoped enum Example {
                One,
                Two
            }

            var v: Example = .Thre
        """)

        # Bad shorthand (empty variant given args)
        assert_parse_fails(t, """\
            SyntaxError: Two is an empty variant that should not be called.
                from [test]:6:
        """,
        """\
            scoped enum Example {
                One(Integer),
                Two
            }

            var v: Example = .Two(1)
        """)

        # Bad shorthand (variant expecting args given none)
        assert_parse_fails(t, """\
            SyntaxError: Wrong number of arguments to One (0 for 1).
                from [test]:6:
        """,
        """\
            scoped enum Example {
                One(Integer),
                Two
            }

            var v: Example = .One
        """)
    }

    public define test_bad_value_variant_usage
    {
        var t = Interpreter()

        # bad vv (cannot have generics)
        assert_parse_fails(t, """\
            SyntaxError: Enums with generics are not allowed to inherit.

               |
             1 | scoped enum Example[A] < Integer {
               |                        ^

                from [test]:1:
        """,
        """\
            scoped enum Example[A] < Integer {
                One,
                Two
            }
        """)

        # bad vv (must inherit from Integer)
        # Extending this to other classes is unlikely.
        assert_parse_fails(t, """\
            SyntaxError: Enums are only allowed to inherit from Integer.

               |
             1 | scoped enum Direction < String {
               |                         ^

                from [test]:1:
        """,
        """\
            scoped enum Direction < String {
                One,
                Two
            }
        """)

        # bad vv (cannot take parameters)
        assert_parse_fails(t, """\
            SyntaxError: An enum must have at least two variants.

               |
             2 | North(Integer),
               |      ^

                from [test]:2:
        """,
        """\
            scoped enum Direction < Integer {
                North(Integer),
            }
        """)

        # bad vv (still require 2+ variants)
        assert_parse_fails(t, """\
            SyntaxError: An enum must have at least two variants.
                from [test]:3:
        """,
        """\
            scoped enum Direction < Integer {
                North
            }
        """)

        # bad vv (duplicate value)
        assert_parse_fails(t, """\
            SyntaxError: Duplicate variant value (already in use by North).

               |
             3 | East = 1
               |        ^

                from [test]:3:
        """,
        """\
            scoped enum Direction < Integer {
                North = 1,
                East = 1
            }
        """)

        # These overlap with definition variance testing.
        # However, this is the only time a primitive is inherited from.

        # bad vv (Definitions cannot take Integer if expecting a value enum)
        assert_parse_fails(t, """\
            SyntaxError: Argument #1 to f is invalid:
            Expected Type: LR
            Received Type: Integer
                from [test]:13:
        """,
        """\
            enum LR < Integer {
                Left,
                Right
            }

            define f(a: LR): Integer {
                match a: {
                    case Left, Right:
                        return 0
                }
            }

            f(7)
        """)

        # bad vv (Definitions cannot send Integer if expecting a value enum)
        assert_parse_fails(t, """\
            SyntaxError: return expected type 'LR' but got type 'Integer'.
                from [test]:6:
        """,
        """\
            enum LR < Integer {
                Left,
                Right
            }

            define f: LR { return 1 }
        """)

        # Tests for this feature below this line may eventually work.
        # These tests ensure that the behavior will only change by intention,
        # and not by accident.

        # bad vv (expression value)
        assert_parse_fails(t, """\
            SyntaxError: A number is required here.

               |
             4 | South = (1 << 2)
               |         ^

                from [test]:4:
        """,
        """\
            scoped enum Direction < Integer {
                North,
                East,
                South = (1 << 2)
            }
        """)

        # bad vv (subscript by enum)
        assert_parse_fails(t, """\
            SyntaxError: List index is not an Integer or a Byte.
                from [test]:8:
        """,
        """\
            scoped enum Direction < Integer {
                North,
                East,
                South,
                West
            }

            var v = [1, 2, 3, 4][Direction.North]
        """)

        # bad vv (generic resolution pins on the enum)
        assert_parse_fails(t, """\
            SyntaxError: Argument #2 to x is invalid:
            Expected Type: LR
            Received Type: Integer
                from [test]:8:
        """,
        """\
            enum LR < Integer {
                Left = 0,
                Right = 1
            }

            define x[A](a: A, b: A) { }

            x(Left, 0)
        """)
    }
}
