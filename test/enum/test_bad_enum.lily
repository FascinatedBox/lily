import (Interpreter,
        TestCase) "../t/testing"

class TestBadEnum < TestCase
{
    public define test_bad_decl
    {
        var t = Interpreter()

        # bad decl (flat enum duplicate names)

        assert_parse_fails(t, """\
            SyntaxError: A class with the name 'One' already exists.

               |
             3 | One(A)
               | ^

                from [test]:3:
        """,
        """\
            enum Test[A] {
                One(A),
                One(A)
            }
        """)

        # bad decl (scoped enum duplicate names)

        assert_parse_fails(t, """\
            SyntaxError: A class with the name 'Fast' already exists.

               |
             3 | Fast
               | ^

                from [test]:3:
        """,
        """\
            scoped enum Speed {
                Fast,
                Fast
            }
        """)

        # bad decl (duplicate enum)

        assert_parse_fails(t, """\
            SyntaxError: An enum named 'Example' has already been declared.

               |
             5 | enum Example {
               |      ^

                from [test]:5:
        """,
        """\
            enum Example {
                One,
                Two
            }
            enum Example {
                One,
                Two
            }
        """)

        # bad decl (first variant collide with class)

        assert_parse_fails(t, """\
            SyntaxError: A class with the name 'One' already exists.

               |
             4 | One,
               | ^

                from [test]:4:
        """,
        """\
            class One {}

            enum Example {
                One,
                Two
            }
        """)

        # bad decl (nth variant collide with class)

        assert_parse_fails(t, """\
            SyntaxError: A class with the name 'Four' already exists.

               |
             7 | Four,
               | ^

                from [test]:7:
        """,
        """\
            class Four {}

            enum Example {
                One,
                Two,
                Three,
                Four,
                Five
            }
        """)

        # bad decl (flat enum name too short)

        assert_parse_fails(t, """\
            SyntaxError: 'A' is not a valid class name (too short).

               |
             1 | enum A {
               |      ^

                from [test]:1:
        """,
        """\
            enum A {
                One,
                Two,
                Three
            }
        """)

        # bad decl (scoped enum name too short)

        assert_parse_fails(t, """\
            SyntaxError: 'A' is not a valid class name (too short).

               |
             1 | scoped enum A {
               |             ^

                from [test]:1:
        """,
        """\
            scoped enum A {
                One,
                Two,
                Three
            }
        """)
    }

    public define test_bad_decompose
    {
        var t = Interpreter()

        # bad decompose (duplicate vars)

        assert_parse_fails(t, """\
            SyntaxError: asdf has already been declared.

               |
             9 | case One(asdf, asdf):
               |                ^

                from [test]:9:
        """,
        """\
            enum Test {
                One(Integer, Integer),
                Two
            }

            var v = Two

            match v: {
                case One(asdf, asdf):
                case Two:
            }
        """)

        # bad decompose (empty for variant with args)

        assert_parse_fails(t, """\
            SyntaxError: Expected '(', not ':'.

               |
             4 | case Some:
               |          ^

                from [test]:4:
        """,
        """\
            var v: Option[Integer] = None

            match v: {
                case Some:
                case None:
            }
        """)

        # bad decompose (non-empty for empty variant)

        assert_parse_fails(t, """\
            SyntaxError: Expected ':', not '('.

               |
             4 | case None(a):
               |          ^

                from [test]:4:
        """,
        """\
            var v: Option[Integer] = None

            match v: {
                case None(a):
                case Some(s):
            }
        """)

        # bad decompose (incomplete type)

        assert_parse_fails(t, """\
            SyntaxError: Pattern variable 'x' has an incomplete type (List[?]).

                |
             10 | with Tree([], []) as Tree(x, y): {
                |                            ^

                from [test]:10:
        """,
        """\

            enum Multival[A, B] {
                Tree(A, B),
                ignore
            }

            define f {
                var counter = 3

                with Tree([], []) as Tree(x, y): {
                    var container: List[List[String]] = []

                    while counter != 0: {
                        counter -= 1
                        container.push(x)
                        container.push(y)

                        x.push("x")
                        y.push(1)
                        continue
                    }

                    foreach c in container: {
                        print(c[0].size())
                    }
                }
            }
            f()
        """)
    }

    public define test_bad_flat
    {
        var t = Interpreter()

        # bad flat (optarg using scoped variant as flat)

        assert_parse_fails(t, """\
            SyntaxError: One has not been declared.

               |
             6 | define f(a: *Test = One) {}
               |                     ^

                from [test]:6:
        """,
        """\
            scoped enum Test {
                One,
                Two
            }

            define f(a: *Test = One) {}
        """)

        # bad flat (match using scoped variant as flat)

        assert_parse_fails(t, """\
            SyntaxError: Expected 'Test.<variant>', not 'One' because 'Test' is a scoped enum.

               |
             9 | case One:
               |      ^

                from [test]:9:
        """,
        """\
            scoped enum Test {
                One,
                Two
            }

            var v = Test.One

            match v: {
                case One:
                case Two:
            }
        """)

        # bad flat (assign using scoped enum as flat)

        assert_parse_fails(t, """\
            SyntaxError: One has not been declared.

               |
             6 | var opt: Test[Integer] = One(10)
               |                          ^

                from [test]:6:
        """,
        """\
            scoped enum Test[A] {
                One(A),
                Two
            }

            var opt: Test[Integer] = One(10)
        """)
    }

    public define test_bad_match
    {
        var t = Interpreter()

        # bad match (start without case)

        assert_parse_fails(t, """\
            SyntaxError: match must start with a case.

               |
             4 | v = Some(1)
               | ^

                from [test]:4:
        """,
        """\
            var v: Option[Integer] = None

            match v: {
                v = Some(1)
                case Some(s):
                None:
            }
        """)

        # bad match (not a variant)

        assert_parse_fails(t, """\
            SyntaxError: DoesNotExist is not a member of enum Option.

               |
             2 | case DoesNotExist:
               |      ^

                from [test]:2:
        """,
        """\
            match Some(1): {
                case DoesNotExist:
            }
        """)

        # bad match (multi match starting with filled variant)

        assert_parse_fails(t, """\
            SyntaxError: Multi case match is only available to empty variants.

                |
             10 | case One(s), Two(s):
                |            ^

                from [test]:10:
        """,
        """\
            enum Example {
                One(Integer),
                Two(Integer),
                Three(Integer)
            }

            var v = Three(1)

            match v: {
                case One(s), Two(s):
                else:
            }
        """)

        # bad match (multi match including filled variant)

        assert_parse_fails(t, """\
            SyntaxError: Multi case match is only available to empty variants.

               |
             9 | case Two, One(s):
               |           ^

                from [test]:9:
        """,
        """\
            enum Example {
                One(Integer),
                Two
            }

            var v = Two

            match v: {
                case Two, One(s):
            }
        """)
    }

    public define test_bad_match_logic
    {
        var t = Interpreter()

        # bad match logic (incomplete)

        assert_parse_fails(t, """\
            SyntaxError: Match pattern not exhaustive. The following case(s) are missing:
            * None
                from [test]:6:
        """,
        """\
            var v: Option[Integer] = None

            match v: {
                case Some(s):
                    1
            }
        """)

        # bad match logic (else after else)

        assert_parse_fails(t, """\
            SyntaxError: case in exhaustive match.

               |
             9 | case Two(t):
               |      ^

                from [test]:9:
        """,
        """\
            class One {}
            class Two < One {}

            var v: One = Two()

            match v: {
                case One(o):
                else:
                case Two(t):
            }
        """)

        # bad match logic (duplicate case)

        assert_parse_fails(t, """\
            SyntaxError: Already have a case for One.

               |
             8 | case One(o):
               |      ^

                from [test]:8:
        """,
        """\
            class One {}
            class Two < One {}

            var v: One = Two()

            match v: {
                case One(o):
                case One(o):
            }
        """)

        # bad match logic (else when exhaustive)

        assert_parse_fails(t, """\
            SyntaxError: else in exhaustive match.

               |
             9 | else:
               | ^

                from [test]:9:
        """,
        """\
            class One {}
            class Two < One {}

            var v: One = Two()

            match v: {
                case One(o):
                else:
                else:
            }
        """)

        # bad match logic (new case when exhaustive)

        assert_parse_fails(t, """\
            SyntaxError: case in exhaustive match.

               |
             9 | case Two(t):
               |      ^

                from [test]:9:
        """,
        """\
            class One {}
            class Two < One {}

            var v: One = Two()

            match v: {
                case One(o):
                else:
                case Two(t):
            }
        """)
    }

    public define test_enum_rules
    {
        var t = Interpreter()

        # enum rules (no toplevel code in enum)

        assert_parse_fails(t, """\
            SyntaxError: Expected '}' or 'define', not 'a label'.

               |
             8 | var @v = 10
               | ^

                from [test]:8:
        """,
        """\
            enum Test {
                One,
                Two

                define f {
                }

                var @v = 10
            }
        """)

        # enum rules (no implicit constructor)

        assert_parse_fails(t, """\
            SyntaxError: Cannot implicitly use the constructor of an enum.

               |
             1 | var v = Option(10)
               |               ^

                from [test]:1:
        """,
        """\
            var v = Option(10)
        """)

        # enum rules (at least 2 variants)
        # Blocked since it doesn't seem useful.

        assert_parse_fails(t, """\
            SyntaxError: An enum must have at least two variants.
                from [test]:3:
        """,
        """\
            enum Test[A] {
                One(A)
            }
        """)

        # enum rules (not within a define)

        assert_parse_fails(t, """\
            SyntaxError: Cannot define an enum here.

               |
             2 | enum Option[A] {
               | ^

                from [test]:2:
        """,
        """\
            define f {
                enum Option[A] {
                    Some(A)
                    None
                }
            }
        """)

        # enum rules (variant is not a decl type)

        # Forbid using a variant as a type in a declaration.
        assert_parse_fails(t, """\
            SyntaxError: Variant types not allowed in a declaration.

               |
             6 | var v: One[integer] = One(10)
               |        ^

                from [test]:6:
        """,
        """\
            enum Test[A] {
                One(A),
                Two
            }

            var v: One[integer] = One(10)
        """)

        # enum rules (no empty decl parenth)

        assert_parse_fails(t, """\
            SyntaxError: Empty () found while reading input arguments. Omit instead.

               |
             2 | One()
               |     ^

                from [test]:2:
        """,
        """\
            enum Example {
                One()
            }
        """)

        # enum rules (blocking variants as properties)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a class property here.

               |
             6 | var v = @One
               |         ^

                from [test]:6:
        """,
        """\
            enum Example {
                One,
                Two

                define f {
                    var v = @One
                }
            }
        """)

        # enum rules (blocking methods as properties)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a class property here.

               |
             9 | var v = @f
               |         ^

                from [test]:9:
        """,
        """\
            enum Example {
                One,
                Two

                define f {
                }

                define g {
                    var v = @f
                }
            }
        """)

        # enum rules (access variant by flat enum instance)

        assert_parse_fails(t, """\
            SyntaxError: Not allowed to access a variant through an enum instance.
                from [test]:6:
        """,
        """\
            enum Example {
                One,
                Two
            }

            var v = One.One
        """)

        # enum rules (access variant by scoped enum instance)

        assert_parse_fails(t, """\
            SyntaxError: Not allowed to access a variant through an enum instance.
                from [test]:6:
        """,
        """\
            scoped enum Example {
                One,
                Two
            }

            var v = Example.One.One
        """)
    }
}
