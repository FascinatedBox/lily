import test

var t = test.t

t.scope(__file__)

t.interpret_for_error("Return within a class constructor.",
    """\
    SyntaxError: 'return' not allowed in a class constructor.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    class example {
        if 1: {
            return self
        }
    }
    """)

t.interpret_for_error("Redeclare a class property.",
    """\
    SyntaxError: A property in class Test already has the name @abc.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    class Test {
        public var @abc = 10
        public define abc {

        }
    }
    """)

t.interpret_for_error("Define a class inside of a class.",
    """\
    SyntaxError: Cannot define a class here.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class c1(a: Integer) {
        class c2(b: Integer) {

        }
    }
    """)

t.interpret_for_error("Class property self initialization.",
    """\
    SyntaxError: Invalid use of uninitialized property '@x'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Point {
        public var @x: Integer = @x
    }
    """)

t.interpret_for_error("Redeclare property as method.",
    """\
    SyntaxError: A method in class 'Test' already has the name 'abc'.\n    \
        from test\/[subinterp]:5:\
    """,
    """\
    class Test {
        public define abc {

        }
        public var @abc = 10
    }
    """)

t.interpret_for_error("Declare property twice.",
    """\
    SyntaxError: A property in class ABC already has the name @a.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class ABC { public var @a = 1 public var @a = 1 }
    """)

t.interpret_for_error("Declare method twice.",
    """\
    SyntaxError: A method in class 'ABC' already has the name 'a'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class ABC { public define a {} public define a {} }
    """)

t.interpret_for_error("Attempt to close construct parameters.",
    """\
    SyntaxError: Not allowed to close over variables from a class constructor.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    class Example(a: Integer) {
        public define f {
            var v = a
        }
    }
    """)

t.interpret_for_error("Attempt to close self in a constructor.",
    """\
    SyntaxError: Not allowed to close over self in a class constructor.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    class Example {
        public var @a = 1
        public var @b = (|| @a += 1 )
    }
    """)

t.interpret_for_error("Attempt to use class method of a generic type.",
    """\
    SyntaxError: Class A has no method or property named asdf.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f[A](a: A)
    {
        a.asdf()
    }
    """)

t.interpret_for_error("Attempt to inherit from a builtin class.",
    """\
    SyntaxError: 'Integer' cannot be inherited from.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class abc < Integer {  }
    """)

t.interpret_for_error("Forbid inheritance with misordered generics.",
    """\
    SyntaxError: Argument #1 to First is invalid:\n\
    Expected Type: A\n\
    Received Type: B\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    class First[A](value: A) {  }

    class Second[A, B](v1: A, v2: B) < First(v2) {  }

    # This is prevented so that First's A is the same A of any class inheriting
    # from First. This makes solving generics a lot easier.
    """)

t.interpret_for_error("Attempt to inherit a missing class.",
    """\
    SyntaxError: Class 'invalid' does not exist.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class abc < invalid {  }
    """)

t.interpret_for_error("Attempt to have a class inherit from itself.",
    """\
    SyntaxError: A class cannot inherit from itself!\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class abc < abc {  }
    """)

t.interpret_for_error("Attempt to inherit from a variant.",
    """\
    SyntaxError: 'Two' cannot be inherited from.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    enum Test {
        One,
        Two
    }

    class example < Two { }
    """)

t.interpret_for_error("Attempt to declare a class inside 'if'.",
    """\
    SyntaxError: Cannot define a class here.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    if 1: {
        class abc() {
        }
    }
    """)

t.interpret_for_error("Attempt to declare a class with a short name.",
    """\
    SyntaxError: 'A' is not a valid class name (too short).\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class A() {}
    """)

t.interpret_for_error("Attempt to declare class property without @.",
    """\
    SyntaxError: Class properties must start with @.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class ABC { public var a: integer }
    """)

t.interpret_for_error("Attempt to return 'self' outside a class method.",
    """\
    SyntaxError: 'self' return type only allowed on class methods.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f: self {}
    """)

t.interpret_for_error("Attempt to use @name outside a class.",
    """\
    SyntaxError: Expected either 'a label' or '@(', not 'a property name'.\n    \
        from test\/[subinterp]:5:\
    """,
    """\
    class Test[A](name: String) {
        public var @name = name
    }

    var v = Test("abc").@name
    """)

t.interpret_for_error("Attempt to use a private property outside a class.",
    """\
    SyntaxError: abc.f is marked private, and not available here.\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    class abc {
        private define f { }
    }

    class def < abc {
        abc.f()
    }
    """)

t.interpret_for_error("Class property doesn't exist.",
    """\
    SyntaxError: Property xyz is not in class Test. ('var' keyword missing?)\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    class Test
    {
        @xyz = 10
    }
    """)

t.interpret_for_error("Forbid protected var from being used outside class.",
    """\
    SyntaxError: Test.x is marked protected, and not available here.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    class Test { protected var @x = 10 }

    Test().x = 11
    """)

t.interpret_for_error("Forbid protected method from being used outside class.",
    """\
    SyntaxError: abc.f is marked protected, and not available here.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    class abc {
        protected define f {}
    }

    abc.f(abc())
    """)

t.interpret_for_error("Forbid self.property",
    """\
    SyntaxError: Use @<name> to get/set properties, not self.<name>.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    class Point(x: Integer, y: Integer) {
        public var @x = x
        public var @y = self.x
    }
    """)

t.interpret_for_error("Forbid self being used outside of a class.",
    """\
    SyntaxError: 'self' must be used within a class.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    self
    """)

t.interpret_for_error("Wrong arg count with class method.",
    """\
    SyntaxError: Wrong number of arguments to String.ends_with (3 for 2).\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    String.ends_with("a", "b", "c")
    """)

t.interpret_for_error("Class var without scope.",
    """\
    SyntaxError: Class var declaration must start with a scope.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Test {
        var @a = 1
    }
    """)

t.interpret_for_error("Class method without scope.",
    """\
    SyntaxError: Class method declaration must start with a scope.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Test {
        define f {}
    }
    """)

t.interpret_for_error("Invalid use of public.",
    """\
    SyntaxError: 'public' is not allowed here.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    public define f {}
    """)

t.interpret_for_error("Invalid use of protected.",
    """\
    SyntaxError: 'protected' is not allowed here.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    protected define f {}
    """)

t.interpret_for_error("Invalid use of private.",
    """\
    SyntaxError: 'private' is not allowed here.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    private define f {}
    """)

t.interpret_for_error("Wrong token after a class qualifier.",
    """\
    SyntaxError: Expected 'a label', not '+'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Example {
        public + f {}
    }
    """)

t.interpret_for_error("Class decl wrong token.",
    """\
    SyntaxError: Expected either ',' or ')', not '>='.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class Example(a: Integer >=
    """)

t.interpret_for_error("Class decl empty ().",
    """\
    SyntaxError: Empty () found while reading input arguments. Omit instead.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class Example() {}
    """)

t.interpret_for_error("Constructor wrong token.",
    """\
    SyntaxError: Expected either ',' or ')', not '}'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class One(a: Integer, b: Integer) {}
    class Two(a: Integer, b: Integer) < One(a }
    """)

t.interpret_for_error("Constructor empty ().",
    """\
    SyntaxError: Empty () not needed here for inherited new.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class One {}
    class Two < One() {}
    """)

t.interpret_for_error("Inherit class that doesn't exist.",
    """\
    SyntaxError: Class 'DoesNotExist' does not exist.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class One < DoesNotExist {}
    """)

t.interpret_for_error("Override built-in class.",
    """\
    SyntaxError: A built-in class named 'Exception' already exists.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class Exception {}
    """)

t.interpret_for_error("Duplicate class declaration.",
    """\
    SyntaxError: Class 'AlreadyExists' has already been declared.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class AlreadyExists {}
    class AlreadyExists {}
    """)

t.interpret_for_error("Invalid class declaration location.",
    """\
    SyntaxError: Cannot define a class here.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    if 1: {
        class NotAllowed {}
    }
    """)

t.interpret_for_error("Prop use outside of a class.",
    """\
    SyntaxError: Properties cannot be used outside of a class constructor.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = @abc
    """)

t.interpret_for_error("Dot assign with invalid type.",
    """\
    SyntaxError: Right side of assignment is incomplete type 'Option[?]'.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    class Test {
        public var @v = 0
    }

    var v = Test()
    v.v = None
    """)

t.interpret_for_error("Dot assign to method.",
    """\
    SyntaxError: Left side of = is not assignable.\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    class Test {
        public define f: Integer { return 10 }
        public define g: Integer { return 20 }
    }

    var v = Test()
    v.f = Test.g
    """)

t.interpret_for_error("Inherit class that does not exist.",
    """\
    SyntaxError: Class 'asdf' does not exist.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class Test < asdf {
    }
    """)

t.interpret_for_error("Invalid class declaration location.",
    """\
    SyntaxError: Cannot define a class here.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    if 1: {
        class Test {
        }
    }
    """)

t.interpret_for_error("Private member used directly.",
    """\
    SyntaxError: f is a private member of class One, and not visible here.\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    class One {
        private define f {}
    }

    class Two < One {
        public define g {
            f()
        }
    }
    """)

t.interpret_for_error("Private member used through dot access.",
    """\
    SyntaxError: f is a private member of class One, and not visible here.\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    class One {
        private define f {}
    }

    class Two < One {
        public define g {
            self.f()
        }
    }
    """)

t.interpret_for_error("Shorthand constructor var self-init.",
    """\
    SyntaxError: Invalid use of uninitialized property '@a'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class Test(var @a: *Integer = @a) { }
    """)

t.interpret_for_error("Inner define not made into a method.",
    """\
    SyntaxError: g has not been declared.\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    class Example {
        public define f {
            define g {
            }
        }

        g()
    }
    """)

t.interpret_for_error("Static method using a class property.",
    """\
    SyntaxError: Static methods do not have access to self.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    class Example {
        public var @a = 10
        public static define f {
            @a = 12
        }
    }
    """)

t.interpret_for_error("Static method using a class property.",
    """\
    SyntaxError: Static methods do not have access to self.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    class Example {
        public define f {
        }

        public static define g {
            f()
        }
    }
    """)

t.interpret_for_error("Verify static call argument count.",
    """\
    SyntaxError: Wrong number of arguments to Example.g (2 for 3).\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    class Example {
        public static define g(a: Integer, b: String, c: Integer) {
        }
    }

    Example.g(10, "20")
    """)

t.interpret_for_error("Using static public instead of the reverse.",
    """\
    SyntaxError: 'static' must follow a scope (public, protected, or private).\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Example {
        static public define g(a: Integer) {
        }
    }
    """)

t.interpret_for_error("Misuse a protected static function.",
    """\
    SyntaxError: Example.f is marked protected, and not available here.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    class Example {
        protected static define f { }
    }

    Example.f()
    """)

t.interpret_for_error("Misuse a private static function.",
    """\
    SyntaxError: f is a private member of class One, and not visible here.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    class One {
        private static define f { }
    }

    class Two < One {
        f()
    }
    """)

t.interpret_for_error("Return self from a static method.",
    """\
    SyntaxError: 'self' return type not allowed on a static method.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Test {
        public static define f: self {
        }
    }
    """)
