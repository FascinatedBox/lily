import test

var t = test.t

t.scope(__file__)

t.interpret_for_error("Wrong arg count empty variant",
    """\
    SyntaxError: Variant Gamma should not get args.\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    enum TestE {
        Alpha,
        Beta,
        Gamma
    }
    Gamma()
    """)

t.interpret_for_error("Forbid code inside enum but not in a method.",
    """\
    SyntaxError: Expected '}' or 'define', not 'a label'.\n    \
        from test\/[subinterp]:8:\
    """,
    """\
    enum Test {
        One,
        Two

        define f {
        }

        var @v = 10
    }
    """)

t.interpret_for_error("Forbid enums from using implicit constructor.",
    """\
    SyntaxError: Cannot implicitly use the constructor of an enum.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = Option(10)
    """)

t.interpret_for_error("Require enums to have 2 or more variants.",
    """\
    SyntaxError: An enum must have at least two variants.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    enum Test[A] {
        One(A)
    }
    """)

t.interpret_for_error("Forbid inheriting from an enum.",
    """\
    SyntaxError: 'Option' cannot be inherited from.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    class abc < Option {
    }
    """)

t.interpret_for_error("Forbid enums from being declared within a define.",
    """\
    SyntaxError: Cannot define an enum here.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    define f {
        enum Option[A] {
            Some(A)
            None
        }
    }
    """)

t.interpret_for_error("Require decomposition for variants taking arguments.",
    """\
    SyntaxError: Expected '(', not ':'.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    var v: Option[Integer] = None

    match v: {
        case Some:
        case None:
    }
    """)

t.interpret_for_error("Forbid decomposition on empty variant.",
    """\
    SyntaxError: Expected ':', not '('.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    var v: Option[Integer] = None

    match v: {
        case None(a):
        case Some(s):
    }
    """)

t.interpret_for_error("Forbid match else after else.",
    """\
    SyntaxError: 'case' in exhaustive match.\n    \
        from test\/[subinterp]:9:\
    """,
    """\
    class One {}
    class Two < One {}

    var v: One = Two()

    match v: {
        case One(o):
        else:
        case Two(t):
    }
    """)

t.interpret_for_error("Forbid match class that doesn't inherit from the base.",
    """\
    SyntaxError: Class Three does not inherit from matching class One.\n    \
        from test\/[subinterp]:8:\
    """,
    """\
    class One {}
    class Two < One {}
    class Three {}

    var v: One = Two()

    match v: {
        case Three(t):
    }
    """)

t.interpret_for_error("Forbid match having a duplicate case.",
    """\
    SyntaxError: Already have a case for class One.\n    \
        from test\/[subinterp]:8:\
    """,
    """\
    class One {}
    class Two < One {}

    var v: One = Two()

    match v: {
        case One(o):
        case One(o):
    }
    """)

t.interpret_for_error("Forbid match else in exhaustive class match.",
    """\
    SyntaxError: 'else' in exhaustive match.\n    \
        from test\/[subinterp]:9:\
    """,
    """\
    class One {}
    class Two < One {}

    var v: One = Two()

    match v: {
        case One(o):
        else:
        else:
    }
    """)

t.interpret_for_error("Forbid match case in exhaustive class match.",
    """\
    SyntaxError: 'case' in exhaustive match.\n    \
        from test\/[subinterp]:9:\
    """,
    """\
    class One {}
    class Two < One {}

    var v: One = Two()

    match v: {
        case One(o):
        else:
        case Two(t):
    }
    """)

t.interpret_for_error("Forbid match on class using generics.",
    """\
    SyntaxError: Class matching only works for types without generics.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    class One[A](a: A) {}

    var v = One(1)

    match v: {
        case One(o):
    }
    """)

t.interpret_for_error("Forbid match else in exhaustive enum match.",
    """\
    SyntaxError: 'else' in exhaustive match.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    match Some(0): {
        case Some(s):
        else:
        else:
    }
    """)

t.interpret_for_error("Forbid match case in exhaustive enum match.",
    """\
    SyntaxError: 'case' in exhaustive match.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    match Some(0): {
        case Some(s):
        else:
        case None:
    }
    """)

t.interpret_for_error("Forbid incomplete match.",
    """\
    SyntaxError: Match pattern not exhaustive. The following case(s) are missing:\n\
    * None\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    var v: Option[Integer] = None

    match v: {
        case Some(s):
            1
    }
    """)

t.interpret_for_error("Forbid match using bare variant when enum is scoped.",
    """\
    SyntaxError: Expected 'Test.<variant>', not 'One' because 'Test' is a scoped enum.\n    \
        from test\/[subinterp]:9:\
    """,
    """\
    scoped enum Test {
        One,
        Two
    }

    var v = Test.One

    match v: {
        case One:
        case Two:
    }
    """)

t.interpret_for_error("Require class match to have else clause.",
    """\
    SyntaxError: Match against a class must have an 'else' case.\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    class One {}

    var v = One()

    match v: {
        case One(o):
    }
    """)

t.interpret_for_error("Require that 'match' starts with a case.",
    """\
    SyntaxError: 'match' must start with a case.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    var v: Option[Integer] = None

    match v: {
        v = Some(1)
        case Some(s):
        None:
    }
    """)

t.interpret_for_error("Forbid optarg using a bare variant for a scoped enum.",
    """\
    SyntaxError: One has not been declared.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    scoped enum Test {
        One,
        Two
    }

    define f(a: *Test = One) {}
    """)

t.interpret_for_error("Forbid assign from using a bare variant for a scoped enum.",
    """\
    SyntaxError: One has not been declared.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    scoped enum Test[A] {
        One(A),
        Two
    }

    var opt: Test[Integer] = One(10)
    """)

t.interpret_for_error("Forbid duplicate names for scoped enums.",
    """\
    SyntaxError: A class with the name 'Fast' already exists.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    scoped enum Speed {
        Fast,
        Fast
    }
    """)

t.interpret_for_error("Forbid using a variant as a type in a declaration.",
    """\
    SyntaxError: Variant types not allowed in a declaration.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    enum Test[A] {
        One(A),
        Two
    }

    var v: One[integer] = One(10)
    """)

t.interpret_for_error("Require comma between variant usages if arguments.",
    """\
    SyntaxError: Unexpected token 'a label'.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    enum Object {
        Value,
        ObjList(Object...)
    }

    ObjList(ObjList() ObjList())
    """)

t.interpret_for_error("Forbid duplicate names for a flat enum.",
    """\
    SyntaxError: A class with the name 'One' already exists.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    enum Test[A] {
        One(A),
        One(A)
    }
    """)

t.interpret_for_error("Wrong arg count scoped enum with args.",
    """\
    SyntaxError: Wrong number of arguments to One (2 for 1).\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    scoped enum Test[A] {
        One(A),
        Two
    }

    var opt: Test[Integer] = Test.One(1, 2)
    """)

t.interpret_for_error("Wrong arg count of variant with args.",
    """\
    SyntaxError: Wrong number of arguments to Some (none for 1).\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = Some
    """)

t.interpret_for_error("Require variant with varargs be called with at least 0 args.",
    """\
    SyntaxError: Wrong number of arguments to One (none for 0+).\n    \
        from test\/[subinterp]:11:\
    """,
    """\
    # This is an artificial restriction. The reason that I've placed it is for
    # consistency. You can't invoke a function without () even if it takes no
    # arguments. The same should hold for variants.

    enum Test[A]
    {
        One(A...),
        Two
    }

    var v = One
    """)

t.interpret_for_error("Wrong arg count flat variant.",
    """\
    SyntaxError: Wrong number of arguments to Some (2 for 1).\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = Some(1, 2)
    """)

t.interpret_for_error("'else' in exhaustive match.",
    """\
    SyntaxError: 'else' in exhaustive match.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    var v = Some(1)

    match v: {
        case Some(_):
        case None:
        else:
    }
    """)

t.interpret_for_error("case outside of match.",
    """\
    SyntaxError: 'case' not allowed outside of 'match'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    case 1
    """)

t.interpret_for_error("Duplicate enum match member.",
    """\
    SyntaxError: Already have a case for variant Some.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    match Some(1): {
        case Some(s):
        case Some(s):
    }
    """)

t.interpret_for_error("Enum match with non-variant.",
    """\
    SyntaxError: DoesNotExist is not a member of enum Option.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    match Some(1): {
        case DoesNotExist:
    }
    """)

t.interpret_for_error("Enum match with non-variant.",
    """\
    SyntaxError: Expected 'enum' after 'scoped'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    scoped asdf
    """)

t.interpret_for_error("Variant decl wrong token.",
    """\
    SyntaxError: Expected either ',' or ')', not '+'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    enum Example {
        One(Integer +
    """)

t.interpret_for_error("Variant decl empty ().",
    """\
    SyntaxError: Empty () found while reading input arguments. Omit instead.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    enum Example {
        One()
    }
    """)

t.interpret_for_error("Decomposition case with duplicate vars.",
    """\
    SyntaxError: asdf has already been declared.\n    \
        from test\/[subinterp]:9:\
    """,
    """\
    enum Test {
        One(Integer, Integer),
        Two
    }

    var v = Two

    match v: {
        case One(asdf, asdf):
        case Two:
    }
    """)
