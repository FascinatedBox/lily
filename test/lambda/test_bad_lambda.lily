import (Interpreter,
        TestCase) "../t/testing"

class TestBadLambda < TestCase
{
    public define test_bad_break
    {
        var t = Interpreter()

        # bad break (for loop)

        assert_parse_fails(t, """\
            SyntaxError: 'break' used outside of a loop.
                from [test]:2:
        """,
        """\
            for i in 0...10: {
                var v = (|| break )
            }
        """)

        # bad break (while loop)

        assert_parse_fails(t, """\
            SyntaxError: 'break' used outside of a loop.
                from [test]:2:
        """,
        """\
            while 0: {
                var v = (|| break )
            }
        """)

        # bad break (do while loop)

        assert_parse_fails(t, """\
            SyntaxError: 'break' used outside of a loop.
                from [test]:2:
        """,
        """\
            do: {
                var v = (|| break )
            } while 0
        """)
    }

    public define test_bad_continue
    {
        var t = Interpreter()

        # bad continue (for loop)

        assert_parse_fails(t, """\
            SyntaxError: 'continue' used outside of a loop.
                from [test]:2:
        """,
        """\
            for i in 0...10: {
                var v = (|| continue )
            }
        """)

        # bad continue (while loop)

        assert_parse_fails(t, """\
            SyntaxError: 'continue' used outside of a loop.
                from [test]:2:
        """,
        """\
            while 0: {
                var v = (|| continue )
            }
        """)

        # bad continue (do while loop)

        assert_parse_fails(t, """\
            SyntaxError: 'continue' used outside of a loop.
                from [test]:2:
        """,
        """\
            do: {
                var v = (|| continue )
            } while 0
        """)
    }

    public define test_bad_result
    {
        var t = Interpreter()

        # bad result (concrete type mismatch)

        assert_parse_fails(t, """\
            SyntaxError: Lambda result should be type 'Integer', but got type 'String'.
                from [test]:3:
        """,
        """\
            define f(a: Function( => Integer)) {}

            f((|| "x" ))
        """)

        # bad result (generic mismatched)

        assert_parse_fails(t, """\
            SyntaxError: Lambda result should be type 'Integer', but got type 'String'.
                from [test]:3:
        """,
        """\
            define f[A](a: A, b: Function( => A)) {}

            f(1, (|| "1" ))
        """)

        # bad result (assignment at end)

        assert_parse_fails(t, """\
            SyntaxError: Lambda result should be type 'Integer', but got type 'Unit'.
                from [test]:5:
        """,
        """\
            define f(a: Function( => Integer)) {}

            var a = 10

            f((|| a = 11 ))
        """)

        # bad result (assignment at end against generic type)

        assert_parse_fails(t, """\
            SyntaxError: Lambda result should be type 'Integer', but none given.
                from [test]:3:
        """,
        """\
            define f[A](a: Integer, b: Function( => Integer)) {}

            f(1, (|| var a = 11 ))
        """)

        # bad result (no expression against concrete type)

        assert_parse_fails(t, """\
            SyntaxError: Lambda result should be type 'Integer', but none given.
                from [test]:3:
        """,
        """\
            define f(a: Function( => Integer)) {}

            f((|| if 1: {} ))
        """)

        # bad result (no expression against generic type)

        assert_parse_fails(t, """\
            SyntaxError: Lambda result should be type 'Integer', but none given.
                from [test]:3:
        """,
        """\
            define f[A](a: A, b: Function( => A)) {}

            f(1, (|| if 1: {} ))
        """)

        # bad result (inconsistent enum directly used)

        assert_parse_fails(t, """\
            SyntaxError: Argument #1 to Some is invalid:
            Expected Type: Integer
            Received Type: String
                from [test]:10:
        """,
        """\
            var a = 10
            define f[A](b: Function( => A)) {}

            f((||
                if a == 10: {
                    return Some(1)
                elif a == 20:
                    return None
                elif a == 30:
                    return Some("")
                }

                return None
            ))
        """)

        # bad result (inconsistent enum with var)

        assert_parse_fails(t, """\
            SyntaxError: return expected type 'Option[Integer]' but got type 'Option[String]'.
                from [test]:11:
        """,
        """\
            var a = 10
            var b = Some("")
            define f[A](c: Function( => A)) {}

            f((||
                if a == 10: {
                    return Some(1)
                elif a == 20:
                    return None
                elif a == 30:
                    return b
                }

                return None
            ))
        """)

        # bad result (no inference)

        assert_parse_fails(t, """\
            SyntaxError: 'return' inside of a lambda requires inference, but none given.
                from [test]:3:
        """,
        """\
            var v = (||
                if 1 == 1: {
                    return 10
                }
            )
        """)
    }

    public define test_lambda_rules
    {
        var t = Interpreter()

        # lambda rules (no unresolved parameters)
        # Blocked because this makes the type system MUCH more difficult.
        assert_parse_fails(t, """\
            SyntaxError: 'a' has an incomplete inferred type (?).
                from [test]:5:
        """,
        """\
            define f[A](g: Function(A => A)) {

            }

            f((|a| a))
        """)

        # lambda rules (unresolved parameter in container)

        assert_parse_fails(t, """\
            SyntaxError: 'a' has an incomplete inferred type (List[?]).
                from [test]:5:
        """,
        """\
            define f[A](g: Function(List[A] => List[A])) {

            }

            f((|a| a))
        """)

        # lambda rules (must not be empty)

        assert_parse_fails(t, """\
            SyntaxError: Lambda does not have a value.
                from [test]:1:
        """,
        """\
            var v = (|| )
        """)

        # lambda rules (incomplete block at end)

        assert_parse_fails(t, """\
            SyntaxError: End of lambda while inside a block.
                from [test]:1:
        """,
        """\
            var v = (|| if 1: { )
        """)

        # lambda rules (excess block exits)

        assert_parse_fails(t, """\
            SyntaxError: '}' outside of a block.
                from [test]:1:
        """,
        """\
            var v = (|| } 1 )
        """)
    }

    public define test_unterminated
    {
        var t = Interpreter()

        # unterminated (with last line being '#')
        # The blank line at start is intentional.

        assert_parse_fails(t, """\
            SyntaxError: Unterminated lambda (started at line 2).
                from [test]:6:
        """,
        """\

            var v = (||
                var w
                =
            #
        """)

        # unterminated (single-line string)

        assert_parse_fails(t, """\
            SyntaxError: Newline in single-line string.

               |
             2 | (|| "
               |     ^

                from [test]:2:
        """,
        """\
            var v =
                    (|| "\
        """)

        # unterminated (newline in single-line string)

        assert_parse_fails(t, """\
            SyntaxError: Newline in single-line string.

               |
             1 | var v = (|| "
               |             ^

                from [test]:1:
        """,
        """\
            var v = (|| "
                    ")
        """)
    }

    public define test_missing_inference
    {
        var t = Interpreter()

        # missing inference (because of too many args)

        assert_parse_fails(t, """\
            SyntaxError: 'b_' has an incomplete inferred type (?).
                from [test]:3:
        """,
        """\
            define f[A, B](a: Hash[A, B], fn: Function(B)) {}

            f([1 => 2], (|a_, b_|))
        """)

        # missing inference (expecting a different type)

        assert_parse_fails(t, """\
            SyntaxError: Lambda given where non-Function value expected (List[Integer]).
                from [test]:3:
        """,
        """\
            define f(a: List[Integer], b: Function(Integer => Integer)) {}

            f((|a| a * 2), [1, 2, 3])
        """)
    }
}
