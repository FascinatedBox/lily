import (Interpreter,
        TestCase) "../t/testing"

class TestBadLambda < TestCase
{
    public define test_bad_break
    {
        var t = Interpreter()

        # bad break (for loop)

        assert_parse_fails(t, """\
            SyntaxError: 'break' used outside of a loop.\n    \
                from [test]:2:\n\
        """,
        """\
            for i in 0...10: {
                var v = (|| break )
            }
        """)

        # bad break (while loop)

        assert_parse_fails(t, """\
            SyntaxError: 'break' used outside of a loop.\n    \
                from [test]:2:\n\
        """,
        """\
            while 0: {
                var v = (|| break )
            }
        """)

        # bad break (do while loop)

        assert_parse_fails(t, """\
            SyntaxError: 'break' used outside of a loop.\n    \
                from [test]:2:\n\
        """,
        """\
            do: {
                var v = (|| break )
            } while 0
        """)
    }

    public define test_bad_continue
    {
        var t = Interpreter()

        # bad continue (for loop)

        assert_parse_fails(t, """\
            SyntaxError: 'continue' used outside of a loop.\n    \
                from [test]:2:\n\
        """,
        """\
            for i in 0...10: {
                var v = (|| continue )
            }
        """)

        # bad continue (while loop)

        assert_parse_fails(t, """\
            SyntaxError: 'continue' used outside of a loop.\n    \
                from [test]:2:\n\
        """,
        """\
            while 0: {
                var v = (|| continue )
            }
        """)

        # bad continue (do while loop)

        assert_parse_fails(t, """\
            SyntaxError: 'continue' used outside of a loop.\n    \
                from [test]:2:\n\
        """,
        """\
            do: {
                var v = (|| continue )
            } while 0
        """)
    }

    public define test_lambda_rules
    {
        var t = Interpreter()

        # lambda rules (no unresolved parameters)
        # Blocked because this makes the type system MUCH more difficult.
        assert_parse_fails(t, """\
            SyntaxError: Cannot infer type of 'a'.\n    \
                from [test]:5:\n\
        """,
        """\
            define f[A](g: Function(A => A)) {

            }

            f((|a| a))
        """)

        # lambda rules (must not be empty)

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token 'end of lambda'.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = (|| )
        """)

        # lambda rules (return not allowed)

        assert_parse_fails(t, """\
            SyntaxError: 'return' not allowed in a lambda.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = (|| return )
        """)

        # lambda rules (incomplete block at end)

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token 'end of lambda'.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = (|| if 1: { )
        """)
    }

    public define test_unterminated
    {
        var t = Interpreter()

        # unterminated (with last line being '#')
        # The blank line at start is intentional.

        assert_parse_fails(t, """\
            SyntaxError: Unterminated lambda (started at line 2).\n    \
                from [test]:6:\n\
        """,
        """\

            var v = (||
                var w
                =
            #
        """)

        # unterminated (single-line string)

        assert_parse_fails(t, """\
            SyntaxError: Unterminated string (started at line 2).\n    \
                from [test]:2:\n\
        """,
        """\
            var v =
                    (|| "\
        """)

        # unterminated (newline in single-line string)

        assert_parse_fails(t, """\
            SyntaxError: Newline in single-line string.\n    \
                from [test]:2:\n\
        """,
        """\
            var v = (|| "
                    ")
        """)
    }

    public define test_missing_inference
    {
        var t = Interpreter()

        # missing inference (because of too many args)

        assert_parse_fails(t, """\
            SyntaxError: Cannot infer type of 'b_'.\n    \
                from [test]:3:\n\
        """,
        """\
            define f[A, B](a: Hash[A, B], fn: Function(B)) {}

            f([1 => 2], (|a_, b_|))
        """)
    }
}
