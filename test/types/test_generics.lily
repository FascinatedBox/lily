import (Interpreter,
        TestCase) "../t/testing"

class TestGenerics < TestCase
{
    public define test_bad_list_hash_unify
    {
        var t = Interpreter()

        # bad list hash unify (fail on a List)

        assert_parse_fails(t, """\
            SyntaxError: List elements do not have a consistent type.
            Expected Type: Integer
            Received Type: String
                from [test]:1:
        """,
        """\
            var v = [1, "2"]
        """)

        # bad list hash unify (fail on Hash key)

        assert_parse_fails(t, """\
            SyntaxError: Hash keys do not have a consistent type.
            Expected Type: Integer
            Received Type: String
                from [test]:1:
        """,
        """\
            var v = [1 => 1, "2" => 2]
        """)

        # bad list hash unify (fail on Hash value)

        assert_parse_fails(t, """\
            SyntaxError: Hash values do not have a consistent type.
            Expected Type: Integer
            Received Type: String
                from [test]:1:
        """,
        """\
            var v = [1 => 1, 2 => "2"]
        """)
    }

    public define test_close_over_generic
    {
        var t = Interpreter()

        # close over generic (definition with assignment)

        assert_parse_fails(t, """\
            SyntaxError: 'b' cannot be used here, because it has a generic type (A) from another scope.
                from [test]:3:
        """,
        """\
            define f[A](a: A, b: A) {
                define g(c: A) {
                    b = c

                    # Demonstrate why by crashing (String == Integer)
                    if a == b: {

                    }
                }
                g(1)
            }
            f("", "")
        """)

        # close over generic (definition with direct usage)

        assert_parse_fails(t, """\
            SyntaxError: 'a' cannot be used here, because it has a generic type (A) from another scope.
                from [test]:3:
        """,
        """\
            define f[A](a: A) {
                define g(b: A) {
                    a
                }
            }
        """)

        # close over generic (lambda with assignment)

        assert_parse_fails(t, """\
            SyntaxError: 'a' cannot be used here, because it has a generic type (A) from another scope.

               |
             3 | var v = (|| a = b )
               |             ^

                from [test]:3:
        """,
        """\
            define f[A](a: A) {
                define g(b: A) {
                    var v = (|| a = b )
                }
            }
        """)

        # close over generic (lambda with direct usage)

        assert_parse_fails(t, """\
            SyntaxError: 'a' cannot be used here, because it has a generic type (A) from another scope.
                from [test]:3:
        """,
        """\
            define f[A](a: A) {
                define g(b: A) {
                    a
                }
            }
        """)

        # close over generic (ok usage with lambda blocks)

        assert_parse_string(t, """
            define f[A](a: List[A]): Integer {
                var m = (||
                    if a.size(): {
                        a.shift()
                    }

                    a.size()
                )

                return m()
            }

            if f([1, 2, 3]) != 2: {
                0/0
            }
        """)
    }

    public define test_inherit_generics
    {
        var t = Interpreter()

        assert_parse_string(t, """
            define check_generics_inherited {
                define a[A] {
                    define b(v1: A) {

                    }
                }
            }
        """)
    }

    public define test_self
    {
        var t = Interpreter()

        # self inferenece (block resolving a generic as self)

        assert_parse_fails(t, """\
            SyntaxError: Argument #1 to f is invalid:
            Expected Type: Function (Example => ?)
            Received Type: Function (Example => self)
                from [test]:7:
        """,
        """\
            class Example {
                public define f: self {  }
            }

            define f[A](g: Function(Example => A)) {}

            f(Example.f)
        """)
    }

    public define test_too_many_generics
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Too many generics.

               |
             1 | enum Test[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a] {
               |                                                                                         ^

                from [test]:1:
        """,
        """\
            enum Test[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a] {
                Test0
                Test1
            }
        """)
    }

    public define test_quantification
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: f has generics, and must be called or be a call argument.
                from [test]:3:
        """,
        """\
            define f[A](a: A) {}

            var v = f

            define g[A, B](a: A, b: Function(A)) { v = b }
            define h(a: String) { a.size() |> print }

            g("1", h)
            v(1)
        """)

        assert_parse_fails(t, """\
            SyntaxError: f has generics, and must be called or be a call argument.
                from [test]:4:
        """,
        """\
            define f[A](a: A) {}

            class Example {
                public var @x = f

                public define example[A](fn: Function(A)) {
                    @x = fn
                }
            }

            var v = Example()

            v.x = 1
        """)
    }
}
