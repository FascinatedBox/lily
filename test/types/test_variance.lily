import (Interpreter,
        TestCase) "../t/testing"

class TestVariance < TestCase
{
    public define test_argument_covariant
    {
        var t = Interpreter()

        assert_parse_string(t, """
            class One[A](a: A) {}
            class Two[A](a: A) < One(a) {}

            define g[A](a: One[A])
            {
            }

            define f[A](a: One[A], b: Two[A])
            {
                g(b)
            }
        """)
    }

    public define test_assign_covariant
    {
        var t = Interpreter()

        assert_parse_string(t, """
            class One {}
            class Two < One {}

            var v = One()
            v = Two()

            var v2 = [v]
            v2[0] = Two()
        """)
    }

    public define test_function_input_contravariant
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Cannot assign type 'Function (Two)' to type 'Function (One)'.\n    \
                from [test]:8:\n\
        """,
        """\
            class One {}
            class Two < One {}

            define f(a: One) {}
            define g(a: Two) {}

            var v = f
                v = g
        """)
    }

    public define test_function_result_covariant
    {
        var t = Interpreter()

        assert_parse_string(t, """
            class One {}
            class Two < One {}

            define f(a: One) {}
            define g(a: Two) {}

            var v = g
            v = f
        """)
    }

    public define test_generic_solve_in_covariant
    {
        var t = Interpreter()

        assert_parse_string(t, """
            class One {}
            class Two < One {}
            class Three < Two {}

            define f[A](input: A, g: Function(A => A)) {}

            # This works because when trying to solve as 'Function(A => A)', the first A
            # is looked at contravariantly, while the second is covariant.
            # Doing the reverse (taking either Three or outputting One) would be incorrect.

            define g(a: One): Three { return Three() }

            f(Two(), g)
        """)
    }

    public define test_list_invariant
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Cannot assign type 'List[Two]' to type 'List[One]'.\n    \
                from [test]:7:\n\
        """,
        """\
            class One {}
            class Two < One {}

            var v = [[One()]]
            var v2 = [Two()]
            # Assignment is naturally covariant. However, lists are invariant.
            v[0] = v2
        """)
    }

    public define test_property_covariant
    {
        var t = Interpreter()

        assert_parse_string(t, """
            class One {}
            class Two < One {}

            class Test {
                public var @a: One = Two()
                @a = One()
            }
        """)
    }
}
