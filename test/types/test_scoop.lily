import (Interpreter,
        TestCase) "../t/testing"

class TestScoop < TestCase
{
    public define test_scoop_as_argument
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: String.format must be called, since it uses type $1.\n    \
                from [test]:5:\n\
        """,
        """\
            define f[A](a: Function(String, List[A]), b: A, c: A): List[A] {
                return [b, c]
            }

            f(String.format, 1, "2") |> print
        """)
    }

    public define test_scoop_unify
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: String.format must be called, since it uses type $1.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = [String.format, String.format]
        """)

        # scoop unify (generics cannot solve to any level of scoop)

        assert_parse_fails(t, """\
            SyntaxError: List.zip must be called, since it uses type $1.\n    \
                from [test]:3:\n\
        """,
        """\
            define f[A, B, C](a: Function(A, B... => C), b: B, c: B): List[B] { return [b, c] }

            f(List.zip, [1], [""])[1] == f(List.zip, [1], [""])[0]
        """)
    }

    public define test_scoop_from_zip
    {
        var t = Interpreter()

        # List.zip shouldn't send scoop back if the input is empty.

        assert_parse_fails(t, """\
            SyntaxError: Cannot assign type 'Integer' to type 'List[Tuple[Integer, Unit]]'.\n    \
                from [test]:3:\n\
        """,
        """\
            var v = [1, 2].zip([])

            v = 1
        """)
    }

    public define test_scoop_init
    {
        var t = Interpreter()

        # scoop init (init by assign).

        assert_parse_fails(t, """\
            SyntaxError: List.zip must be called, since it uses type $1.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = List.zip
        """)

        # scoop init (init by prop assign).

        assert_parse_fails(t, """\
            SyntaxError: List.zip must be called, since it uses type $1.\n    \
                from [test]:2:\n\
        """,
        """\
            class Example {
                public var @x = List.zip
            }
        """)
    }

    public define test_lambda_scoop_block
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: List.zip must be called, since it uses type $1.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = (|| List.zip )
        """)
    }
}
