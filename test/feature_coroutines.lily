import test

var t = test.t

t.scope(__file__)

t.interpret("Resume a Coroutine that yields once.",
    """
    define f(co: Coroutine[Integer, Unit]): Integer {
        co.yield(1)
        return 0
    }

    if Coroutine.build(f).resume().unwrap() != 1: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Resume a Coroutine twice (yield, then return).",
    """
    define f(co: Coroutine[Integer, Unit]) {
        co.yield(1)
        co.yield(2)
    }

    var c = Coroutine.build(f)

    if c.resume().unwrap() != 1 ||
       c.resume().unwrap() != 2: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Coroutine that raises an exception.",
    """
    define f(co: Coroutine[Integer, Unit]): Integer {
        co.yield(1 / 0)
        return 0
    }

    if Coroutine.build(f).resume().is_some(): {
       raise Exception("Failed.")
    }
    """)

t.interpret("Coroutine that yields from a List of values.",
    """
    define f(co: Coroutine[Integer, Unit], source: List[Integer]): Integer {
        for i in 0...source.size() - 1: {
            co.yield(source[i])
        }

        return 0 / 0
    }

    var input = [5, 10, 15, 20, 25]
    var co = Coroutine.build_with_value(f, input)
    var output = input.map(|l| co.resume().unwrap() )

    if input != output || co.resume().is_some(): {
       raise Exception("Failed.")
    }
    """)

t.interpret("Coroutine receiving a value.",
    """
    define f(co: Coroutine[Integer, Integer]): Integer {
        for i in 0...5: {
            co.yield(co.receive() * 2)
        }

        return 0 / 0
    }

    var co = Coroutine.build(f)
    var lst: List[Integer] = []

    for i in 1...5: {
        co.resume_with(i).unwrap() |> lst.push
    }

    if lst != [2, 4, 6, 8, 10]: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Coroutine producer/yielder example (uses closures).",
    """
    define producer(yield_over: List[Integer]): Coroutine[Integer, Unit] {
        define producer_fn(co: Coroutine[Integer, Unit]): Integer {
            var index = 0
            for i in 0...yield_over.size() - 1: {
                co.yield(yield_over[i])
            }

            return 0 / 0
        }

        return Coroutine.build(producer_fn)
    }

    define filter(incoming_co: Coroutine[Integer, Unit]): Coroutine[Integer, Unit] {
        define filter_fn(filter_co: Coroutine[Integer, Unit]): Integer {
            while 1: {
                var x = incoming_co.resume().unwrap()

                if x % 2: {
                    continue
                }

                filter_co.yield(x)
            }

            return 0 / 0
        }

        return Coroutine.build(filter_fn)
    }

    define coro_all(co: Coroutine[Integer, Unit]): List[Integer] {
        var result: List[Integer] = []

        while 1: {
            match co.resume(): {
                case Some(s):
                    result.push(s)
                case None:
                    break
            }
        }

        return result
    }

    var co_producer = producer([1, 2, 3, 4, 5, 6])
    var co_filter = filter(co_producer)
    var output = coro_all(co_filter)

    if output != [2, 4, 6]: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify Coroutine.is_done.",
    """
    define fn: Coroutine[Integer, Unit] {
        define fn2(co: Coroutine[Integer, Unit]): Integer {
            return 1
        }

        var co = Coroutine.build(fn2)
        co.resume()

        return co
    }

    var co = fn()
    var lst = [co.is_done(), co.is_failed(), co.is_running(), co.is_waiting()]

    if lst != [true, false, false, false]: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify Coroutine.is_failed.",
    """
    define fn: Coroutine[Integer, Unit] {
        define fn2(co: Coroutine[Integer, Unit]): Integer {
            return 0 / 0
        }

        var co = Coroutine.build(fn2)
        co.resume()

        return co
    }

    var co = fn()
    var lst = [co.is_done(), co.is_failed(), co.is_running(), co.is_waiting()]

    if lst != [false, true, false, false]: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify Coroutine.is_running.",
    """
    define fn: List[Boolean] {
        var out: List[Boolean] = []

        define fn2(co: Coroutine[Integer, Unit]): Integer {
            out = [co.is_done(), co.is_failed(), co.is_running(), co.is_waiting()]
            return 0 / 0
        }

        var co = Coroutine.build(fn2)
        co.resume()

        return out
    }

    if fn() != [false, false, true, false]: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify Coroutine.is_waiting.",
    """
    define fn: Coroutine[Integer, Unit] {
        define fn2(co: Coroutine[Integer, Unit]): Integer {
            return 1
        }

        var co = Coroutine.build(fn2)

        return co
    }

    var co = fn()
    var lst = [co.is_done(), co.is_failed(), co.is_running(), co.is_waiting()]

    if lst != [false, false, false, true]: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Resuming a broken coroutine gives None.",
    """
    define broken(co: Coroutine[Integer, Unit]): Integer {
        return 1 / 0
    }

    var co = Coroutine.build(broken)
    var lst = [co.resume(), co.resume()]

    if lst != [None, None]: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Resuming a done coroutine gives None.",
    """
    define done(co: Coroutine[Integer, Unit]) {
        co.yield(1)
    }

    var co = Coroutine.build(done)
    var lst = [co.resume(), co.resume()]

    if lst != [Some(1), None]: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Resuming a running coroutine gives None.",
    """
    var v: Option[Integer] = None

    define running(co: Coroutine[Integer, Unit]): Integer {
        v = co.resume()
        return 1
    }

    var co = Coroutine.build(running).resume()

    if v != None: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify the coroutine's call stack.",
    """\
    define fn(co: Coroutine[List[String], Unit]) {
        co.yield(calltrace())
    }

    var expect = ["test\\/[subinterp]:2: from fn"]

    if Coroutine.build(fn).resume().unwrap() != expect: {
        raise Exception("Failed.")
    }
    """)
