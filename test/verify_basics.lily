import test

var t = test.t

t.scope(__file__)

# Keep this at the top so the value doesn't need to change a lot.

t.assert("Verify __line__ keyword.",
         (|| __line__ == 10 ))

define function_keyword_check: String
{
    return __function__
}

t.assert("Verify __function__ keyword within a plain definition.",
         (|| function_keyword_check() == "function_keyword_check" ))

t.assert("Verify __file__ keyword.",
         (|| __file__ == "test\/verify_basics.lily" ))

t.interpret("Verify __main__ exists and has a type.",
    """
    var v = [__main__]
    """)

t.assert("Boolean false is false.",
         (||
    var is_ok = true
    if false: {
        is_ok = false
    }

    is_ok ))

t.assert("Integer 0 is false.",
         (||
    var is_ok = true
    if 0: {
        is_ok = false
    }

    is_ok ))

t.assert("Double 0.0 is false.",
         (||
    var is_ok = true
    if 0.0: {
        is_ok = false
    }

    is_ok ))

t.assert("String \"\" is false.",
         (||
    var is_ok = true
    if "": {
        is_ok = false
    }

    is_ok ))

t.assert("List [] is false.",
         (||
    var is_ok = true
    if 0: {
        is_ok = false
    }

    is_ok ))


t.assert("Digit collection (binary max).",
         (||
    var v = +0b111111111111111111111111111111111111111111111111111111111111111.to_s()

    v == "9223372036854775807" ))

t.assert("Digit collection (octal max).",
         (||
    var v = +0c777777777777777777777.to_s()

    v == "9223372036854775807" ))

t.assert("Digit collection (hex max).",
         (||
    var v = +0x7fffffffffffffff.to_s()

    v == "9223372036854775807" ))

t.assert("Digit collection (binary min).",
         (||
    var v = -0b1000000000000000000000000000000000000000000000000000000000000000.to_s()

    v == "-9223372036854775808" ))

t.assert("Digit collection (octal min).",
         (||
    var v = -0c1000000000000000000000.to_s()

    v == "-9223372036854775808" ))

t.assert("Digit collection (hex min).",
         (||
    var v = -0x8000000000000000.to_s()

    v == "-9223372036854775808" ))

t.assert("Digit collection (binary base case).",
         (|| 0b0110 == 6 ))

t.assert("Digit collection (octal base case).",
         (|| 0c1234567 == 342391 ))

t.assert("Digit collection (hex numeric base case).",
         (|| 0x1234567890 == 78187493520 ))

t.assert("Digit collection (hex lowercase).",
         (|| 0xabcdef == 11259375 ))

t.assert("Digit collection (hex uppercase).",
         (|| 0xABCDEF == 11259375 ))

t.assert("Digit collection (negative exponent).",
         (|| 1e-1 == 0.1 ))

t.assert("Digit collection (positive exponent).",
         (|| 1e+1 == 10.0 ))

t.assert("Digit collection (inferred exponent).",
         (|| 1e1 == 10.0 ))

t.assert("Digit collection (.1 == 0.1).",
         (|| .1 == 0.1 ))


t.assert("Empty single-line string matches empty multi-line string.",
         (|| "" == """""" ))

t.assert("Single-line abc == multi-line abc.",
         (|| "abc" == """abc""" ))

t.assert("String escape at start.",
         (|| "\aabc" == """\aabc""" ))

t.assert("String escape in middle.",
         (|| "abc\adef" == """abc\adef""" ))

t.assert("String escape at end.",
         (|| "abcdef\a" == """abcdef\a""" ))

t.assert("String escape at start and mid.",
         (|| "\aabc\adef" == """\aabc\adef""" ))

t.assert("String escape at start and end.",
         (|| "\aabcdef\a" == """\aabcdef\a""" ))

t.assert("String escape at mid and end.",
         (|| "abc\adef\a" == """abc\adef\a""" ))

t.assert("String escape works within a lambda.",
         (|| (|| "\n" )() == "\n" ))

t.assert("String escape within a lambda (2).",
         (|| (|| "\"" )() == "\"" ))

t.assert("Bytestring collection works within a lambda.",
         (|| (|| B"\000" )() == B"\000" ))

t.assert("Multi-line string collection.",
         (||
    var v = """a
b
c"""

    v == "a\nb\nc" ))


t.assert("utf-8 identifier.",
         (||
    var h3llö = "hello"
    true ))

t.assert("utf-8 in strings.",
         (|| "á" == "á" ))


t.assert("List subscript for first element.",
         (|| [1, 2, 3][0] == 1 ))

t.assert("List subscript for last element.",
         (|| [1, 2, 3][2] == 3 ))

t.assert("List subscript by -1.",
         (|| [1, 2, 3][-1] == 3 ))


t.assert("!1 equals 0.",
         (|| !1 == 0 ))

t.assert("!0 equals 1.",
         (|| !0 == 1 ))

t.assert("!true equals false.",
         (|| !true == false ))

t.assert("!false equals true.",
         (|| !false == true ))

t.assert("! on list subscript.",
         (|| ![1][0] == 0 ))


t.assert("Hash key assign creates values.",
         (||
    var v = ["a" => "a"]
    v["b"] = "b"
    v["c"] = "c"

    v == ["a" => "a", "b" => "b", "c" => "c"] ))

t.assert("Hash literals are right-biased.",
         (||
    var h = [1 => 1, 1 => 2, 2 => 2, 2 => 4]

    h == [1 => 2, 2 => 4] ))

t.assert("Hash values check all their entries.",
         (||
    var h: Hash[Integer, Integer] = []
    var reverse_h: Hash[Integer, Integer] = []
    var i = 0
    var expect = 0
    var loop_total = 15

    for i in 0...loop_total: {
        h[i] = i
        reverse_h[loop_total - i] = loop_total - i
        expect += i
    }

    var local_total = 0
    h.each_pair(|k, v| local_total += v)

    local_total == expect &&
    h == reverse_h ))


t.assert("Tuple literal.",
         (||
    var tup = <[1, "1", [1]]>
    true ))

t.assert("Tuple subscript inference.",
         (||
    var tup = <["1", 1]>
    var s = tup[1].to_s()
    s == "1" ))


t.assert("Expressions can start with an integer",
         (|| (|| 1 )() == 1 ))

t.assert("Expressions can start with a double.",
         (|| (|| 1.0 )() == 1.0 ))

t.assert("Expressions can start with a list.",
         (|| (|| [1] )() == [1] ))

t.assert("Expressions can start with a tuple.",
         (|| (|| <[1]> )() == <[1]> ))

t.assert("Expressions can start with a hash.",
         (|| (|| [1 => 1] )() == [1 => 1] ))

t.assert("Expressions can start with true.",
         (|| (|| true )() == true ))

t.assert("Expressions can start with false.",
         (|| (|| false )() == false ))

t.assert("Expressions can start with a string.",
         (|| (|| "" )() == "" ))

t.assert("Expressions can start with parentheses.",
         (|| (|| (1) )() == (1) ))

t.assert("Expressions can start with a positive number.",
         (|| (|| +1 )() == +1 ))

t.assert("Expressions can start with a negative number.",
         (|| (|| -1 )() == -1 ))

t.assert("Expressions can start with __line__.",
         (|| (|| __line__ )() == __line__ ))


class Triad(a: Integer, b: Integer, c: Integer)
{
    public var @a = a
    public var @b = b
    public var @c = c
    @a = @b = @c
}

t.assert("Assignment chain (local values, simple op).",
         (||
    var a = 1, b = 2, c = 3
    a = b = c
    var result = ((a == 3 && b == 3))
    result == true ))

t.assert("Assignment chain (local values, compound op).",
         (||
    var a = 10, b = 20, c = 30
    a *= b *= c
    var result = (a == 6000 && b == 600 && c == 30)
    result == true ))

t.assert("Assignment chain (class @prop values, simple op).",
         (||
    var v = Triad(1, 2, 3)
    var result = (v.a == 3 && v.b == 3 && v.c == 3)
    result == true ))

t.assert("Assignment chain (.prop values, simple op).",
         (||
    var v = Triad(1, 2, 3)
    v.a = 1
    v.b = 2
    v.c = 3
    v.a = v.b = v.c
    var result = (v.a == 3 && v.b == 3 && v.c == 3)
    result == true ))


define padded_vararg_total(unused: String, args: Integer...): Integer
{
    var va_total = 0
    args.each(|a| va_total += a )
    return va_total
}

define just_vararg_total(args: Integer...): Integer
{
    var va_total = 0
    args.each(|a| va_total += a )
    return va_total
}

t.assert("Vararg call with prefix value and 3 values.",
         (|| padded_vararg_total("", 1, 2, 3) == 6 ))

t.assert("Vararg call with prefix value and 0 values.",
         (|| padded_vararg_total("") == 0 ))

t.assert("Vararg call with no prefix value and 3 values.",
         (|| just_vararg_total(1, 2, 3) == 6 ))

t.assert("Vararg call with no prefix value and 0 values.",
         (|| just_vararg_total() == 0 ))


class Test {
    public define add(v: Integer) {}
    10 |> add
}

define id[A](a: A): A { return a }
define times_two(a: Integer): Integer { return a * 2 }

t.assert("Call pipe with local functions.",
         (|| (10 |> times_two) == 20 ))

t.assert("Call pipe chain of 3.",
         (|| (10 |> times_two |> times_two) == 40 ))

t.assert("Call pipe to identity function.",
         (|| (10 |> id) == 10 ))

t.assert("Call pipe preserves order of operations.",
         (||
    var order: List[Integer] = []
    var fn: Function(Integer => Integer) = (|a|
         order.push(a)
         a
    )
    fn(3) |> [fn(1), fn(2)].push
    order == [1, 2, 3] ))

t.assert("Call pipe to a variant.",
         (|| (10 |> Some).unwrap() == 10 ))


t.assert("Nested for loop subscript assignment.",
         (||
    var v = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    for i in 0...2: {
        for j in 0...2: {
            v[i][j] = 1
        }
    }

    var result = (v == [[1, 1, 1], [1, 1, 1], [1, 1, 1]])
    result ))

t.assert("1 +1 viewed as 1 + 1 when binary op needed.",
         (||
    var v = 1 +1
    v == 2 ))

t.interpret("Using time.Time.now() to create a foreign Time class.",
    """
    import time
    var v = time.Time.now()
    """)

t.assert("Check a basic do-while loop.",
         (||
    var v = 5

    do: {
        v += 1
    } while v != 10

    v == 10 ))

t.assert("Casting [] to List[Integer].",
         (||
    var v = [].@(List[Integer])

    v.push(1)
    v == [1] ))

t.assert("Casting [] to Hash[String, Integer].",
         (||
    var v = [].@(Hash[String, Integer])

    v["a"] = 1
    v == ["a" => 1] ))

t.assert("Simple left shift.",
         (|| 1 << 1 == 2 ))

t.assert("Simple right shift.",
         (|| 1 >> 1 == 0 ))

t.assert("Unary bitwise not.",
         (|| ~0 == -1 ))

t.assert("Left shift equal.",
         (||
    var v = 1
    v <<= 1
    v == 2 ))

t.assert("Right shift equal.",
         (||
    var v = 1
    v >>= 1
    v == 0 ))

t.assert("Bitwise and equal.",
         (||
    var v = 0xf
    v &= 0x0
    v == 0 ))

t.assert("Bitwise and.",
         (||
    var v = 0xf
    v = v & 0x0
    v == 0 ))

t.assert("Bitwise or equal.",
         (||
    var v = 0x1
    v |= 0x2
    v == 0x3 ))

t.assert("Bitwise xor equal.",
         (||
    var v = 0x1
    v ^= 0x1
    v == 0x0 ))

t.assert("Left shift equal.",
         (||
    var v = 1
    v <<= 1
    v == 2 ))

t.assert("Minus equal.",
         (||
    var v = 1
    v -= 1
    v == 0 ))

#[ Block comment (1) ]#

#[ Block
comment
(2)
]#

t.assert("Break inside of a loop.",
         (||
    var a = 1
    var count = 0

    while count != 5: {
        if a == 1: {
            break
        }

        count += 1
    }

    count == 0 ))

t.assert("Simple do-while loop.",
         (||
    var count = 0

    do: {
        count += 1
    } while count != 5

    count == 5 ))

t.assert("for loop with by clause.",
         (||
    var count = 0

    do: {
        count += 1
    } while count != 5

    count == 5 ))

t.assert("Lists are falsey if empty.",
         (||
    var l: List[Integer] = []
    var ok = true

    if l: {
        ok = false
    }

    ok ))

t.assert("Lists are truthy if not empty.",
         (||
    var l: List[Integer] = [1]
    var ok = false

    if l: {
        ok = true
    }

    ok ))

t.assert("Lists are truthy if not empty.",
         (||
    var l: List[Integer] = [1]
    var ok = false

    if l: {
        ok = true
    }

    ok ))
