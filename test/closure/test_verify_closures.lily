import (Interpreter,
        TestCase) "../t/testing"

class TestVerifyClosures < TestCase
{
    public define test_capture
    {
        var t = Interpreter()

        # capture (function parameter)

        assert_parse_string(t, """
            define f(a: Integer) :
                Tuple[Function(), Function( => Integer)] {

                define g { a += 1 }
                define h : Integer { return a }
                return <[g, h]>
            }

            var v = f(10)
            var increment = v[0]
            var ret = v[1]

            increment()
            increment()
            if ret() != 12: {
                raise Exception("Failed.")
            }
        """)

        # capture (locals in a constructor)

        t = Interpreter()
        assert_parse_string(t, """
            class Example {
                public var @x = (|z: Integer| (|| z * z )() )
                public define k(a: Integer): Integer {
                    return @x(a)
                }
            }

            if Example().k(5) != 25: {
                raise Exception("Failed.")
            }
        """)

        # capture (optarg parameter, not assigned to)

        t = Interpreter()
        assert_parse_string(t, """
            define f(a: *Integer=10): Function( => Integer) {
                define g : Integer { return a }
                return g
            }

            if f()() != 10: {
                raise Exception("Optarg closure with no args failed.")
            }

            f(11)()

            if f(11)() != 11: {
                raise Exception("Optarg closure with 1 arg failed.")
            }
        """)

        # capture (loop index)

        t = Interpreter()
        assert_parse_string(t, """
            define test: Function(=> Integer) {
                for i in 5...10: {
                    return (|| i)
                }
                return (|| 0)
            }

            if test()() != 5: {
                raise Exception("Failed.")
            }
        """)

        # capture (global loop var)

        t = Interpreter()
        assert_parse_string(t, """
            define wrap(x: Integer) : Function( => Integer) {
                return (|| x * x)
            }

            var l: List[Function( => Integer)] = []

            for i in 0...4: {
                l.push(wrap(i))
            }

            if l.map(|f| f() ) != [0, 1, 4, 9, 16]: {
                raise Exception("Failed.")
            }
        """)

        # capture (decomposition var)

        t = Interpreter()
        assert_parse_string(t, """
            define f(a: Option[Integer]): Function( => Integer) {
                var v = (|| 1)

                match a: {
                    case Some(s):
                        v = (|| s)
                    case None:
                }

                return v
            }

            if f(Some(10))() != 10: {
                raise Exception("Failed.")
            }
        """)

        # capture (enum upvalue)

        t = Interpreter()
        assert_parse_string(t, """
            define f {
                var v = Some(1)
                define g {
                    match v: {
                        case Some(s):
                        case None:
                    }
                }
            }
        """)
    }

    public define test_jumps
    {
        var t = Interpreter()

        # jumps (if that returns)

        assert_parse_string(t, """
            # This is an internal-ish test that makes sure that the jumps are correct.
            # If they aren't, this segfaults.

            define f: Integer {
                var a = 1
                define g: Integer {
                    a = a - 1
                    return a
                }

                if a <= 0: {
                    return a
                else:
                    return g()
                }
            }

            f()
        """)

        # jumps (if with call)

        t = Interpreter()
        assert_parse_string(t, """
            define g {}

            # This strangely-named test makes sure that jumps to future
            # locations are are patched correctly within a function.
            # If they aren't, this crashes.

            define f {
                if 1 == 1: {
                    g()
                else:
                    g()
                }
            }

            f()
        """)

        # jumps (account for transformation)

        t = Interpreter()
        assert_parse_string(t, """
            # If transformation doesn't account for upvalue reads being inserted
            # into bytecode, 'short' will see a stale 'ch'.

            define parse_line {
                var ch = "X"
                var short = ""

                define get: String {
                    ch = "+"
                    return ch
                }

                if get() == "-": {
                else:
                    short = ch
                }

                if short != "+": {
                    raise Exception("Failed.")
                }
            }

            parse_line()
        """)

        # jumps (patching exception capture)

        t = Interpreter()
        assert_parse_string(t, """
            define f: Function(Integer => List[Integer]) {
                var l: List[Integer] = []

                define g(a: Integer) {
                    l.push(2 / a)
                }

                define h(a: Integer): List[Integer] {
                    try: {
                        g(a)
                    except DivisionByZeroError as e:
                        a = a + 1
                        g(a)
                    }
                    return l
                }

                return h
            }

            var g = f()
            var l = [1, 0, 2, 0, 1].map(g)

            if l[0] != [2, 2, 1, 2, 2]: {
                raise Exception("Failed.")
            }
        """)

        # jumps (loop patching going backward)

        t = Interpreter()
        assert_parse_string(t, """
            define f[A](a: A...) {  }

            define bug {
                var lst = [""]
                for i in 0...0: {
                    var a = 1
                    f(a, a, a, a)
                    lst.each(|e| a += 1 )
                }
            }

            bug()
        """)

        # jumps (loop patching with calling a parameter var)

        t = Interpreter()
        assert_parse_string(t, """
            define f(a: Function()) {
                define g {
                    var v = a
                    a = v
                }

                var i = 1

                if i == 1: {
                    a()
                else:
                    a()
                }
            }
        """)
    }

    public define test_self
    {
        var t = Interpreter()

        # self (close over self for prop get)

        assert_parse_string(t, """
            class Example {
                public var @a = 10

                public define f: Integer {
                    return (|| @a )()
                }
            }

            if Example().f() != 10: {
                raise Exception("Failed.")
            }
        """)

        # self (close over self for prop assign)

        t = Interpreter()
        assert_parse_string(t, """
            class Example {
                public var @a = 1

                public define f: Function() {
                    return (|| @a = 2 )
                }
            }

            var v = Example()
            var func = v.f()
            func()
            if v.a != 2: {
                raise Exception("Failed.")
            }
        """)

        # self (close over self for method call that returns)

        t = Interpreter()
        assert_parse_string(t, """
            class Example {
                public var @a = 1

                public define g: Integer { return 10 }
                public define f: Integer {
                    return (|| g() )()
                }
            }

            if Example().f() != 10: {
                raise Exception("Failed.")
            }
        """)

        # self (close over self for method call that prop assigns)

        t = Interpreter()
        assert_parse_string(t, """
            class Test {
                public var @v = 10
                public define f {
                    @v += 10
                }
                public define g: Function() {
                    return (|| self.f() )
                }
            }

            var v = Test()
            var f = v.g()

            f()
            if v.v != 20: {
               raise Exception("Failed.")
            }
        """)

        # self (method-level closure for prop get)

        t = Interpreter()
        assert_parse_string(t, """
            class Example {
                public var @a = 10

                public define f: Integer {
                    define g {
                        @a = 20
                    }

                    g()
                    return @a
                }

                f()
            }

            if Example().f() != 20: {
                raise Exception("Failed.")
            }
        """)

        # self (capture self of an enum)

        t = Interpreter()
        assert_parse_string(t, """
            enum Example {
                One,
                Two
                define f: Integer {
                    match self: {
                        case One:
                            return 1
                        case Two:
                            return 2
                    }
                }
                define g: Integer {
                    var v = (|| f() )
                    return v()
                }
            }

            var v = One
            var w = Two
            var x = [v.g(), w.g()]

            if x != [1, 2]: {
                raise Exception("Failed.")
            }
        """)
    }

    public define test_upvalue_freshness
    {
        var t = Interpreter()

        # freshness (base)

        t = Interpreter()
        assert_parse_string(t, """
            define f : List[List[Integer]] {
                define g : Tuple[Function(), Function( => List[Integer])] {
                    var v: List[Integer] = [0]
                    define h {
                        v.push(v[-1] + 1)
                    }
                    define i : List[Integer] {
                        return v
                    }
                    return <[h, i]>
                }
                var a = g()
                var b = g()

                a[0]()
                a[0]()
                a[0]()
                a[1]()

                b[0]()
                return [a[1](), b[1]()]
            }

            if f() != [[0, 1, 2, 3], [0, 1]]: {
                raise Exception("Failed.")
            }
        """)

        # freshness (new cells when recursing)

        t = Interpreter()
        assert_parse_string(t, """
            define f : Boolean {
                var a = 0
                var ok = true

                define g {
                    var v = 10

                    define h {
                        v += 100
                    }

                    define i {
                        if a == 0: {
                            h()
                            a = 1
                            g()
                            # This test ensures that the inner call to g doesn't
                            # modify the upvalues of the current call to g.
                            if v != 110: {
                                ok = false
                            }
                        }
                    }

                    i()
                }

                g()
                return ok
            }

            if f() != true: {
                raise Exception("Failed.")
            }
        """)
    }

    public define test_verify_trace
    {
        var t = Interpreter()

        # verify trace (uncaught exception from a closure)

        assert_parse_fails(t, """\
            DivisionByZeroError: Attempt to divide by zero.\n\
            Traceback:\n    \
                from [test]:4: in h\n    \
                from [test]:7: in g\n    \
                from [test]:10: in f\n    \
                from [test]:13: in __main__\n\
        """,
        """\
            define f {
                define g {
                    define h {
                        0 / 0
                    }

                    h()
                }

                g()
            }

            f()
        """)
    }
}
