import (Interpreter,
        StringTarget,
        TestCase) "../t/testing"

class TestVerifyRewind < TestCase
{
    public define test_rewind_bad_token
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Expected a value, not 'end of file'.

               |
             1 | 1-
               |   ^

                from [test]:1:
        """,
        """\
            1-\
        """)

        assert_parse_fails(t, """\
            SyntaxError: Expected a value, not 'end of file'.

               |
             1 | 1-
               |   ^

                from [test]:1:
        """,
        """\
            1-\
        """)
    }

    public define test_rewind_broken_import
    {
        var t = Interpreter.with_targets(
            StringTarget(
                :path "invalid_token",
                :data """
                    ?
                """
            )
        )

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token 'invalid token'.

               |
             2 | ?
               | ^

                from invalid_token.lily:2:
        """,
        """
            import invalid_token
        """)

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token 'invalid token'.

               |
             2 | ?
               | ^

                from invalid_token.lily:2:
        """,
        """
            import invalid_token
        """)
    }

    public define test_rewind_error_state
    {
        var t = Interpreter()

        assert_equal(t.error(), "")

        t.parse_string("[test]", "var x = ?")
        t.parse_string("[test]", "var w = 10")

        assert_equal(t.error(), "")
    }

    public define test_rewind_exec_then_parse
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            DivisionByZeroError: Attempt to divide by zero.
            Traceback:
                from [test]:1: in __main__
        """,
        """\
            0 / 0
        """)

        assert_parse_fails(t, """\
            SyntaxError: Cannot declare a class property when there are unresolved forward(s):
            * Test.f at line 2

               |
             3 | public var @v = 10
               |        ^

                from [test]:3:
        """,
        """\
            class Test {
                forward public define f(Integer) { ... }
                public var @v = 10
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Unterminated lambda (started at line 2).
                from [test]:4:
        """,
        """\

            var v = (||
            #
        """)

        assert_parse_fails(t, """\
            SyntaxError: v has not been declared.

               |
             1 | v
               | ^

                from [test]:1:
        """,
        """\
            v
        """)
    }

    public define test_rewind_expression
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Expected a value, not ')'.

               |
             1 | var v = ((((((((1 + ) + 2) + 3)
               |                     ^

                from [test]:1:
        """,
        """\
            var v = ((((((((1 + ) + 2) + 3)\
        """)

        assert_parse_fails(t, """\
            SyntaxError: Expected a value, not ')'.

               |
             1 | var v = ((((((((1 + ) + 2) + 3)
               |                     ^

                from [test]:1:
        """,
        """\
            var v = ((((((((1 + ) + 2) + 3)\
        """)
    }

    public define test_rewind_forward
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Reached end of module with unresolved forward(s):
            * f at line 1
                from [test]:2:
        """,
        """\
            forward define f(Integer) { ... }
        """)

        assert_parse_fails(t, """\
            SyntaxError: f has not been declared.

               |
             1 | f()
               | ^

                from [test]:1:
        """,
        """\
            f()
        """)
    }

    public define test_rewind_hide_broken
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            DivisionByZeroError: Attempt to divide by zero.
            Traceback:
                from [test]:8: in __main__
        """,
        """\
            class Example {}

            enum Test {
                One,
                Two
            }

            var w = 0 / 0
        """)

        assert_parse_fails(t, """\
            SyntaxError: Example has not been declared.

               |
             1 | var v = Example()
               |         ^

                from [test]:1:
        """,
        """\
            var v = Example()
        """)

        assert_parse_fails(t, """\
            SyntaxError: Class 'Test' does not exist.

               |
             1 | define f(a: Test) {}
               |             ^

                from [test]:1:
        """,
        """\
            define f(a: Test) {}
        """)

        assert_parse_fails(t, """\
            SyntaxError: One has not been declared.

               |
             1 | var v = One
               |         ^

                from [test]:1:
        """,
        """\
            var v = One
        """)
    }

    public define test_rewind_interpolate_broken
    {
        var t = Interpreter()

        assert_parse_string(t, """\
            class Point(x: Integer, y: Integer) {
                public var @x = x
                public var @y = y
            }

            var p = Point(10, 20)

            if p.x != 10 || p.y != 20: {
                0 / 0
            }
        """)

        assert_parse_fails(t, """\
            DivisionByZeroError: Attempt to divide by zero.
            Traceback:
                from [test]:7: in __main__
        """,
        """\
            class Point3(x: Integer, y: Integer, z: Integer) < Point(x, y) {
                public var @z = z
            }

            p = Point3(2, 4, 6)

            0 / 0
        """)

        assert_parse_fails(t, """\
            SyntaxError: Point3 has not been declared.

               |
             1 | var p2 = Point3(1, 2, 3)
               |          ^

                from [test]:1:
        """,
        """\
            var p2 = Point3(1, 2, 3)
        """)

        assert_parse_string(t, """\
            if p.x != 2 || p.y != 4: {
                0 / 0
            }

            var f = "{0}".format(p)

            if f.starts_with("<Point3") == false: {
                0 / 0
            }
        """)
    }

    public define test_rewind_keyargs
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token '+'.

               |
             1 | define f(:a a: Integer) { + }
               |                           ^

                from [test]:1:
        """,
        """\
            define f(:a a: Integer) { + }
        """)

        assert_parse_fails(t, """\
            SyntaxError: g does not have a keyword named ':a'.
                from [test]:3:
        """,
        """\
            define g(:b b: Integer) { }

            g(:a 1)
        """)
    }

    public define test_rewind_nested_condition
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token 'end of file'.
                from [test]:2:
        """,
        """\
            if 1: { if 2: {
        """)

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token 'end of file'.
                from [test]:2:
        """,
        """\
            if 1: { if 2: {
        """)
    }

    public define test_rewind_optarg_expression
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Expected a value, not ')'.

               |
             1 | define f(a: *Integer=(10 + 20 + )
               |                                 ^

                from [test]:1:
        """,
        """\
            define f(a: *Integer=(10 + 20 + )
        """)

        assert_parse_fails(t, """\
            SyntaxError: Expected a value, not ')'.

               |
             1 | define f(a: *Integer=(10 + 20 + )
               |                                 ^

                from [test]:1:
        """,
        """\
            define f(a: *Integer=(10 + 20 + )
        """)
    }

    public define test_rewind_storages
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token '+'.

               |
             3 | public var @b = +
               |                 ^

                from [test]:3:
        """,
        """\
            class Example {
                public var @a = ["1", "2", "3"]
                public var @b = +
            }
        """)

        assert_parse_string(t, """\
            define f {
                var a = 1
                var b = 2
                var c = ["a", "b", "c"]

                if b != 2: {
                    0 / 0
                }
            }

            f()
        """)
    }

    public define test_rewind_try_block
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            DivisionByZeroError: Attempt to divide by zero.
            Traceback:
                from [test]:1: in __main__
        """,
        """\
            try: { 1 / 0 except ValueError: 0 }
        """)

        assert_parse_fails(t, """\
            DivisionByZeroError: Attempt to divide by zero.
            Traceback:
                from [test]:1: in __main__
        """,
        """\
            try: { 1 / 0 except ValueError: 0 }
        """)
    }

    public define test_save_valid_class
    {
        var t = Interpreter()

        assert_parse_string(t, """\
            class One {}
        """)

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token '+'.

               |
             1 | class Two < One {} +
               |                    ^

                from [test]:1:
        """,
        """\
            class Two < One {} +
        """)

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token '+'.

               |
             1 | class Two < One {} +
               |                    ^

                from [test]:1:
        """,
        """\
            class Two < One {} +
        """)
    }

    public define test_save_valid_define
    {
        var t = Interpreter()

        assert_parse_string(t, """\
            define f {}
        """)

        assert_parse_fails(t, """\
            SyntaxError: Expected a value, not 'end of file'.
                from [test]:3:
        """,
        """\
            define g {}
            f() +
        """)

        assert_parse_fails(t, """\
            SyntaxError: Expected a value, not 'end of file'.
                from [test]:3:
        """,
        """\
            define g {}
            f() +
        """)
    }

    public define test_save_valid_import
    {
        var t = Interpreter.with_targets(
            StringTarget(
                :path "var_exporter",
                :data """
                    var v = 10
                """
            )
        )

        assert_parse_fails(t, """\
            Exception: 1010
            Traceback:
                from [test]:4: in __main__
        """,
        """
            import (v) var_exporter

            raise Exception(v ++ v)
        """)

        assert_parse_fails(t, """\
            Exception: 1010
            Traceback:
                from [test]:4: in __main__
        """,
        """
            import (v) var_exporter

            raise Exception(v ++ v)
        """)
    }
}
