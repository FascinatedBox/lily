import (Interpreter,
        TestCase) "../t/testing"

class TestBadKeyarg < TestCase
{
    public define test_keyarg_rules
    {
        var t = Interpreter()

        # keyarg rules (no posargs after keyargs)
        # Blocked to make keyargs easier.

        assert_parse_fails(t, """\
            SyntaxError: Positional argument after keyword argument.
                from [test]:5:
        """,
        """
            define f(:a a: Integer, :b b: String) {
            }

            f(:b 1, 5)
        """)

        # keyarg rules (no keyargs with forward)
        # Blocked to make keyargs easier, and limited use.

        assert_parse_fails(t, """\
            SyntaxError: Forward declarations cannot have keyword arguments.

               |
             1 | forward define f(:a Integer) { ... }
               |                  ^

                from [test]:1:
        """,
        """\
            forward define f(:a Integer) { ... }
        """)

        # keyarg rules (no duplicates)

        assert_parse_fails(t, """\
            SyntaxError: A keyword named :a has already been declared.

               |
             1 | define f(:a a: String, :a b: String) {}
               |                        ^

                from [test]:1:
        """,
        """\
            define f(:a a: String, :a b: String) {}
        """)
    }

    public define test_unsupported
    {
        var t = Interpreter()

        # unsupported (on plain define)

        assert_parse_fails(t, """\
            SyntaxError: f does not specify any keyword arguments.
                from [test]:3:
        """,
        """\
            define f(a: Integer) {}

            f(:a 1)
        """)

        # unsupported (on class method)

        assert_parse_fails(t, """\
            SyntaxError: Example.f does not specify any keyword arguments.
                from [test]:5:
        """,
        """\
            class Example {
                public define f(a: Integer) {}
            }

            Example().f(:a 1)
        """)

        # unsupported (on enum method)

        assert_parse_fails(t, """\
            SyntaxError: Example.f does not specify any keyword arguments.
                from [test]:7:
        """,
        """\
            enum Example {
                One,
                Two
                define f(a: Integer) {}
            }

            One.f(:a 1)
        """)

        # unsupported (on lambda)

        assert_parse_fails(t, """\
            SyntaxError: v is not capable of receiving keyword arguments.
                from [test]:3:
        """,
        """\
            var v = (|a: Integer| 0 )

            v(:a 1)
        """)

        # unsupported (on nested define)

        assert_parse_fails(t, """\
            SyntaxError: g is not capable of receiving keyword arguments.
                from [test]:4:
        """,
        """\
            define f(:a a: Integer) {
                var g = f
                define h {
                    g(:a 1)
                }
            }
        """)
    }

    public define test_keyarg_shorthand
    {
        var t = Interpreter()

        # shorthand (not allowed on variants)

        assert_parse_fails(t, """\
            SyntaxError: Variants cannot use keyword argument shorthand.

               |
             2 | One(:_ Integer)
               |     ^

                from [test]:2:
        """,
        """\
            enum Example {
                One(:_ Integer)
            }
        """)

        # shorthand (non-class argument collision)

        assert_parse_fails(t, """\
            SyntaxError: A keyword named :x has already been declared.

               |
             1 | define f(:x a: Integer, :_ x: Integer) {}
               |                            ^

                from [test]:1:
        """,
        """\
            define f(:x a: Integer, :_ x: Integer) {}
        """)

        # shorthand (class argument collision)

        assert_parse_fails(t, """\
            SyntaxError: A keyword named :x has already been declared.

               |
             1 | class Example(:x x: Integer, :_ public var @x: Integer) {}
               |                                            ^

                from [test]:1:
        """,
        """\
            class Example(:x x: Integer, :_ public var @x: Integer) {}
        """)

        # shorthand (expect a name)

        assert_parse_fails(t, """\
            SyntaxError: Expected a name here.

               |
             1 | define f(:_ @x: Integer) {}
               |             ^

                from [test]:1:
        """,
        """\
            define f(:_ @x: Integer) {}
        """)

        # keyarg shorthand (non-auto following auto does not collect)

        assert_parse_fails(t, """\
            SyntaxError: f does not have a keyword named ':h'.
                from [test]:3:
        """,
        """\
            define f(:_ g: Integer, h: Integer) {}

            f(:g 1, :h 2)
        """)

        # keyarg shorthand (the name is not the shorthand)

        assert_parse_fails(t, """\
            SyntaxError: f does not have a keyword named ':_'.
                from [test]:3:
        """,
        """\
            define f(:_ g: Integer) {}

            f(:_ 1)
        """)
    }

    public define test_required_arg_holes
    {
        var t = Interpreter()

        # Missing only required argument

        assert_parse_fails(t, """\
            SyntaxError: Call to check is missing parameters:
            * Parameter #1 (String)
                from [test]:6:
        """,
        """\
            define check(a: String, :_ x: *Integer=0): Integer
            {
                return a.size()
            }

            check(:x 1)
        """)

        # Missing only argument, two keyargs given

        assert_parse_fails(t, """\
            SyntaxError: Call to check is missing parameters:
            * Parameter #1 (String)
                from [test]:8:
        """,
        """\
            define check(a: String,
                         :_ x: *Integer=0,
                         :_ y: *Integer=0): Integer
            {
                return a.size()
            }

            check(:y 1, :x 1)
        """)

        # Missing only argument with 2 varargs given

        assert_parse_fails(t, """\
            SyntaxError: Call to check is missing parameters:
            * Parameter #1 (String)
                from [test]:8:
        """,
        """\
            define check(a: String,
                         :_ x: *Integer=0,
                         :_ va: *Integer...=[]): Integer
            {
                return a.size()
            }

            check(:va 1, :va 2, :x 1)
        """)

        # Missing first required argument

        assert_parse_fails(t, """\
            SyntaxError: Call to check is missing parameters:
            * Parameter #2 (String)
                from [test]:8:
        """,
        """\
            define check(a: String,
                         b: String,
                         :_ x: *Integer=0): Integer
            {
                return b.size()
            }

            check("1", :x 1)
        """)

        # Missing middle argument

        assert_parse_fails(t, """\
            SyntaxError: Call to check is missing parameters:
            * Parameter #2 (String)
                from [test]:10:
        """,
        """\
            define check(a: String,
                         b: String,
                         :_ c: String,
                         :_ x: *Integer=0,
                         :_ y: *Integer=0): Integer
            {
                return b.size()
            }

            check("a", :c "1", :x 1, :y 1)
        """)

        # Missing last argument

        assert_parse_fails(t, """\
            SyntaxError: Call to check is missing parameters:
            * Parameter #3 (String)
                from [test]:10:
        """,
        """\
            define check(a: String,
                         :_ b: String,
                         c: String,
                         :_ x: *Integer=0,
                         :_ y: *Integer=0): Integer
            {
                return b.size()
            }

            check("a", :b "1", :x 1, :y 1)
        """)

        # Missing argument given to varargs

        assert_parse_fails(t, """\
            SyntaxError: Call to check is missing parameters:
            * Parameter #2 of type String.
                from [test]:8:
        """,
        """\
            define check(a: String,
                         b: String,
                         :_ va: Integer...): Integer
            {
                return b.size()
            }

            check("a", :va 1, :va 2)
        """)
    }
}
