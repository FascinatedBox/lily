import (Interpreter,
        TestCase) "../t/testing"

class TestBadKeyarg < TestCase
{
    public define test_keyarg_rules
    {
        var t = Interpreter()

        # keyarg rules (no posargs after keyargs)
        # Blocked to make keyargs easier.

        assert_parse_fails(t, """\
            SyntaxError: Positional argument after keyword argument.
                from [test]:5:
        """,
        """
            define f(:a a: Integer, :b b: String) {
            }

            f(:b 1, 5)
        """)

        # keyarg rules (no keyargs with forward)
        # Blocked to make keyargs easier, and limited use.

        assert_parse_fails(t, """\
            SyntaxError: Forward declarations cannot have keyword arguments.

               |
             1 | forward define f(:a Integer) { ... }
               |                  ^

                from [test]:1:
        """,
        """\
            forward define f(:a Integer) { ... }
        """)

        # keyarg rules (no duplicates)

        assert_parse_fails(t, """\
            SyntaxError: A keyword named :a has already been declared.

               |
             1 | define f(:a a: String, :a b: String) {}
               |                        ^

                from [test]:1:
        """,
        """\
            define f(:a a: String, :a b: String) {}
        """)
    }

    public define test_unsupported
    {
        var t = Interpreter()

        # unsupported (on plain define)

        assert_parse_fails(t, """\
            SyntaxError: f does not specify any keyword arguments.
                from [test]:3:
        """,
        """\
            define f(a: Integer) {}

            f(:a 1)
        """)

        # unsupported (on class method)

        assert_parse_fails(t, """\
            SyntaxError: Example.f does not specify any keyword arguments.
                from [test]:5:
        """,
        """\
            class Example {
                public define f(a: Integer) {}
            }

            Example().f(:a 1)
        """)

        # unsupported (on enum method)

        assert_parse_fails(t, """\
            SyntaxError: Example.f does not specify any keyword arguments.
                from [test]:7:
        """,
        """\
            enum Example {
                One,
                Two
                define f(a: Integer) {}
            }

            One.f(:a 1)
        """)

        # unsupported (on lambda)

        assert_parse_fails(t, """\
            SyntaxError: v is not capable of receiving keyword arguments.
                from [test]:3:
        """,
        """\
            var v = (|a: Integer| 0 )

            v(:a 1)
        """)

        # unsupported (on nested define)

        assert_parse_fails(t, """\
            SyntaxError: g is not capable of receiving keyword arguments.
                from [test]:4:
        """,
        """\
            define f(:a a: Integer) {
                var g = f
                define h {
                    g(:a 1)
                }
            }
        """)
    }
}
