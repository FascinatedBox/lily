import (Interpreter,
        TestCase) "../t/testing"

class TestBadOptargs < TestCase
{
    public define test_bad_value
    {
        var t = Interpreter()

        # bad value (enum given non-member)

        assert_parse_fails(t, """\
            SyntaxError: what has not been declared.

               |
             6 | define f(a: *Test = what)
               |                     ^

                from [test]:6:
        """,
        """\
            enum Test {
                One,
                Two
            }

            define f(a: *Test = what)
        """)

        # bad value (Boolean given non-Boolean)

        assert_parse_fails(t, """\
            SyntaxError: hello has not been declared.

               |
             1 | define f(a: *Boolean=hello) { }
               |                      ^

                from [test]:1:
        """,
        """\
            define f(a: *Boolean=hello) { }
        """)
    }

    public define test_optarg_rules
    {
        var t = Interpreter()

        # optarg rules (no default arguments for lambdas)

        assert_parse_fails(t, """\
            SyntaxError: Expected 'a label', not '*'.
                from [test]:1:
        """,
        """\
            var v = (|a: *Integer=10| a )
        """)

        # optarg rules (no optargs for variants)
        # Blocked because these aren't functions.

        assert_parse_fails(t, """\
            SyntaxError: Variant types cannot have default values.

               |
             2 | Check(*Integer),
               |               ^

                from [test]:2:
        """,
        """\
            enum Test {
                Check(*Integer),
                Blank
            }
        """)

        # optarg rules (default value cannot be a lambda)

        assert_parse_fails(t, """\
            SyntaxError: Not allowed to use a lambda here.

               |
             1 | define f(a: *Integer=(|| 10)()) {
               |                      ^

                from [test]:1:
        """,
        """\
            define f(a: *Integer=(|| 10)()) {

            }

            f(1)
        """)

        # optarg rules (optarg self reference in constructor)

        assert_parse_fails(t, """\
            SyntaxError: Constructor for class Test is not initialized.

               |
             1 | class Test(a: *Test=Test()) {
               |                         ^

                from [test]:1:
        """,
        """\
            class Test(a: *Test=Test()) {
            }
        """)

        # optarg rules (optarg self reference in define)

        assert_parse_fails(t, """\
            SyntaxError: Attempt to use uninitialized value 'f'.

               |
             1 | define f(a: *Integer=f(1)): Integer {
               |                      ^

                from [test]:1:
        """,
        """\
            define f(a: *Integer=f(1)): Integer {
                return 10
            }
        """)

        # optarg rules (required argument after optional)
        # Blocked because it makes the type system more difficult.

        assert_parse_fails(t, """\
            SyntaxError: Non-optional argument follows optional argument.

               |
             1 | define f(a: *Integer=10, b: Integer) {  }
               |                             ^

                from [test]:1:
        """,
        """\
            define f(a: *Integer=10, b: Integer) {  }
        """)

        # optarg rules (wrong token before value)

        assert_parse_fails(t, """\
            SyntaxError: Expected '=', not ','.

               |
             1 | define f(a: *Integer,1) { }
               |                     ^

                from [test]:1:
        """,
        """\
            define f(a: *Integer,1) { }
        """)
    }
}
