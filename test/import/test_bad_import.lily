import (Interpreter,
        LibraryTarget,
        StringTarget,
        TestCase) "../t/testing"
import "../t/backbone"

class TestBadImport < TestCase
{
    private var @t_brace_at_end =
        StringTarget(
            :path "brace_at_end",
            :data "}"
        )

    private var @t_invalid_token =
        StringTarget(
            :path "invalid_token",
            :data ";"
        )

    private var @t_var_exporter =
        StringTarget(
            :path "var_exporter",
            :data "var v = 10"
        )

    private var @t_fff =
        StringTarget(
            :path "fff",
            :data "import var_exporter"
        )

    private var @t_bad_asdf =
        LibraryTarget(
            :path "bad_asdf",
            :redirect "test\/t\/backbone"
        )

    private var @t_loop =
        StringTarget(
            :path "loop",
            :data "import loop"
        )

    private var @t_manifest_loop =
        StringTarget(
            :path "manifest_loop",
            :data """\
                import manifest
                import manifest_loop
            """
        )

    private var @t_direct_left =
        StringTarget(
            :path "direct_left",
            :data """\
                var a = 10
            """
        )

    private var @t_direct_mid =
        StringTarget(
            :path "direct_mid",
            :data """\
                import direct_left as abc
            """
        )

    private define verify_import_error(expect_text: String, given_text: String)
    {
        given_text = given_text.replace("\n", "\n            ")
                               .rstrip(" \n")
        expect_text = expect_text.rstrip(" \n")
                                 .replace("\n\n", "\n            \n")

        var expect_lines = expect_text.split("\n")
        var given_lines = given_text.split("\n")
        var expect_i = 0
        var given_i = 0
        var expect_end = expect_lines.size() - 1
        var ok = true

        while expect_i <= expect_end: {
            var expect = expect_lines[expect_i]
            var given = given_lines[given_i]

            if expect == given: {
                expect_i += 1
                given_i += 1
                continue
            elif expect.ends_with("{lib}'"):
                # -6 to remove {lib}, the single quote, and the newline.
                expect = expect.slice(0, -6)

                if given.starts_with(expect) && given.ends_with("'"): {
                    given_i += 1
                else:
                    expect_i += 1
                }

                continue
            else:
                ok = false
                break
            }
        }

        if ok == false: {
            assert_equal(expect_text, given_text)
        }
    }

    public define test_bad_direct_import
    {
        var t = Interpreter.with_targets(
            @t_var_exporter
        )

        # bad direct import (trailing comma)

        assert_parse_fails(t, """\
            SyntaxError: Expected 'a label', not ')'.

               |
             2 | import (ref_var,) var_exporter
               |                 ^

                from [test]:2:
        """,
        """
            import (ref_var,) var_exporter
        """)

        # bad direct import (direct module with 'as' name using original name)

        t = Interpreter.with_targets(
            @t_direct_mid,
            @t_direct_left
        )

        assert_parse_fails(t, """\
            SyntaxError: Cannot find symbol 'direct_left' inside of module 'direct_mid'.
                from [test]:3:
        """,
        """
            import (direct_left) direct_mid
        """)

        # bad direct import (missing symbol)

        t = Interpreter.with_targets(
            @t_var_exporter
        )

        assert_parse_fails(t, """\
            SyntaxError: Cannot find symbol 'missing' inside of module 'var_exporter'.
                from [test]:3:
        """,
        """
            import (missing) var_exporter
        """)

        # bad direct import (missing symbol on foreign module)

        t = Interpreter()
        assert_parse_fails(t, """\
            SyntaxError: Cannot find symbol 'missing' inside of module 'sys'.
                from [test]:2:
        """,
        """\
            import (missing) sys
        """)

        # bad direct import (duplicate import)

        t = Interpreter.with_targets(
            @t_var_exporter
        )

        assert_parse_fails(t, """\
            SyntaxError: 'v' has already been declared.
                from [test]:3:
        """,
        """
            import (v, v) var_exporter
        """)

        # bad direct import (using as)

        t = Interpreter.with_targets(
            @t_var_exporter
        )

        assert_parse_fails(t, """\
            SyntaxError: Cannot use 'as' when only specific items are being imported.

               |
             2 | import (v) var_exporter as f
               |                         ^

                from [test]:2:
        """,
        """
            import (v) var_exporter as f
        """)

        # bad direct import (empty)

        t = Interpreter.with_targets(
            @t_var_exporter
        )

        assert_parse_fails(t, """\
            SyntaxError: Expected 'a label', not ')'.

               |
             2 | import () var_exporter
               |         ^

                from [test]:2:
        """,
        """
            import () var_exporter
        """)
    }

    public define test_bad_import_path
    {
        var t = Interpreter()

        # bad import path (invalid token)

        assert_parse_fails(t, """\
            SyntaxError: 'import' expected a path (identifier or string), not ?.

               |
             1 | import ?
               |        ^

                from [test]:1:
        """,
        """\
            import ?
        """)

        # bad import path (begin with a slash)

        assert_parse_fails(t, """\
            SyntaxError: Import path cannot begin or end with '/'.

               |
             1 | import "/wrong"
               |        ^

                from [test]:1:
        """,
        """\
            import "/wrong"
        """)

        # bad import path (end with a slash)

        assert_parse_fails(t, """\
            SyntaxError: Import path cannot begin or end with '/'.

               |
             1 | import "wrong/"
               |        ^

                from [test]:1:
        """,
        """\
            import "wrong/"
        """)

        # bad import path (quoting an identifier)

        assert_parse_fails(t, """\
            SyntaxError: Simple import paths do not need to be quoted.

               |
             1 | import "asdf"
               |        ^

                from [test]:1:
        """,
        """\
            import "asdf"
        """)

        # bad import path (empty string)

        assert_parse_fails(t, """\
            SyntaxError: Import path must not be empty.

               |
             1 | import ""
               |        ^

                from [test]:1:
        """,
        """\
            import ""
        """)

        # bad import path (escape characters)

        assert_parse_fails(t, """\
            SyntaxError: Import path cannot contain escape characters.

               |
             1 | import "\\n"
               |        ^

                from [test]:1:
        """,
        """\
            import "\\n"
        """)

        # bad import path (triple-quote string)

        assert_parse_fails(t, """\
            SyntaxError: Import path cannot be a triple-quote string.

               |
             1 | import ""\"asdf\"""
               |        ^

                from [test]:1:
        """,
        """\
            import \"\"\"asdf\"\"\"
        """)

        # bad import path (format characers)

        t.parse_string("[test]", "import \"%s^T\"")
        verify_import_error("""\
            SyntaxError: Cannot import '%s^T':
                no builtin module '%s^T'
                no file '.\/%s^T.lily'
                no file '.\/%s^T.{lib}'
                no file '.\/packages\/%s^T\/src\/%s^T.lily'
                no file '.\/packages\/%s^T\/src\/%s^T.{lib}'

               |
             1 | import "%s^T"
               |        ^

                from [test]:1:
        """, t.error())
    }

    public define test_bad_imported_file {
        var t = Interpreter.with_targets(
            @t_brace_at_end
        )

        # bad imported file (brace at end)

        assert_parse_fails(t, """\
            SyntaxError: '}' outside of a block.
                from brace_at_end.lily:1:
        """,
        """
            import brace_at_end
        """)

        # bad imported file (invalid)

        t = Interpreter.with_targets(
            @t_invalid_token
        )

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token 'invalid token'.

               |
             1 | ;
               | ^

                from invalid_token.lily:1:
        """,
        """
            import invalid_token
        """)
    }

    public define test_import_bad_library
    {
        # The library exists, but the tables are missing.

        var expect = """\
            SyntaxError: Cannot import 'bad_asdf':
                no builtin module 'bad_asdf'
                no file '.\/test\/t\/backbone.{lib}'

               |
             1 | import bad_asdf
               |        ^

                from [test]:1:
        """

        var t = Interpreter.with_targets(
            @t_bad_asdf
        )

        t.parse_string("[test]", "import bad_asdf")
        verify_import_error(expect, t.error())
    }

    public define test_import_missing
    {
        # What does a failed import look like?

        var expect = """\
            SyntaxError: Cannot import 'asdf':
                no builtin module 'asdf'
                no file '.\/asdf.lily'
                no file '.\/asdf.{lib}'
                no file '.\/packages\/asdf\/src\/asdf.lily'
                no file '.\/packages\/asdf\/src\/asdf.{lib}'

               |
             1 | import asdf
               |        ^

                from [test]:1:
        """

        var t = Interpreter()

        t.parse_string("[test]", "import asdf")
        verify_import_error(expect, t.error())
    }

    public define test_import_rules
    {
        var t = Interpreter.with_targets(
            @t_var_exporter
        )

        # import rules (wrong symbol in direct import)

        assert_parse_fails(t, """\
            SyntaxError: Expected either ',' or ')', not '+'.

               |
             2 | import (v +) var_exporter
               |           ^

                from [test]:2:
        """,
        """
            import (v +) var_exporter
        """)

        # import rules (not within define)

        assert_parse_fails(t, """\
            SyntaxError: Cannot import a file here.

               |
             2 | import empty
               | ^

                from [test]:2:
        """,
        """\
            define f {
                import empty
            }
        """)

        # import rules (duplicate name with renamed import)

        t = Interpreter.with_targets(
            @t_var_exporter
        )

        assert_parse_fails(t, """\
            SyntaxError: A module named 'var_access' has already been imported here.

               |
             3 | import var_access
               |        ^

                from [test]:3:
        """,
        """
            import var_exporter as var_access
            import var_access
        """)
    }

    public define test_import_slashed_package
    {
        # Don't check in packages for slashed paths.

        var t = Interpreter()

        t.parse_string("[test]", "import \"abc/def\"") |> assert_false

        var split_error = t.error().split("\n")
        var ok = true

        for i in 0...split_error.size() - 1: {
            var l = split_error[i]

            if l.find("packages").is_some(): {
                ok = false
                break
            }
        }

        ok |> assert_true
    }

    public define test_import_skip_preloaded
    {
        # Don't check builtin modules for slashed paths.

        var t = Interpreter.with_targets()

        assert_parse_fails(t, """\
            SyntaxError: Cannot import 'abc\/def':

               |
             1 | import "abc/def"
               |        ^

                from [test]:1:
        """,
        "import \"abc/def\"")
    }

    public define test_import_loop
    {
        # import loop (first module loops)

        var t = Interpreter.with_targets(
            @t_loop,
            @t_manifest_loop
        )

        t.parse_string("[test]", "import loop")
        verify_import_error("""\
            SyntaxError: This module is already being imported.

               |
             1 | import loop
               |        ^

                from loop.lily:1:
        """, t.error())

        assert_manifest_fails(t, """\
            SyntaxError: This module is already being imported.

               |
             2 | import manifest_loop
               |        ^

                from manifest_loop.lily:2:
        """,
        """\
            import manifest

            import manifest_loop
        """)
    }


    public define test_windows_sys_dirs
    {
        # Crude platform detection :(
        if "\/" == "/": {
            return
        }

        var t = backbone.Interpreter.new_non_local("|\\dir\\;C:\\")

        t.parse_string("[test]", "import doesnotexist")

        # This one's tough to check.
        # On Windows, '|' is replaced with the current process directory, since
        # there is no official directory for libraries.
        # This checks that *some* kind of replacement was done.
        # The non-Windows side doesn't check as much, because 

        var message = t.error().split("\n")
        var dirs_checked = message.select(|s| s.starts_with("    no file"))
                                  .size()

        # Should have 8 paths tested:
        # 2 per directory. 1 local dir, 1 package dir, 2 system dirs.
        # This fails if the directories weren't split right.
        assert_equal(dirs_checked, 8)

        # '|' is used because it's not a valid Windows path character.
        # If it's present, it wasn't replaced, which is wrong.
        var has_pipe = message.select(|s| s.starts_with("    no file"))
                              .join()
                              .find("|")
                              .is_some()

        assert_false(has_pipe)

        # Make sure system dirs aren't trying slashed paths.
        t.parse_string("[test]", "import \"abc/def\"")

        verify_import_error("""\
            SyntaxError: Cannot import 'abc\\def':
                no file '.\\abc\\def.lily'
                no file '.\\abc\\def.dll'

               |
             1 | import "abc/def"
               |        ^

                from [test]:1:
        """, t.error())
    }

    public define test_nonwindows_sys_dirs
    {
        if "\/" == "\\": {
            return
        }

        var t = backbone.Interpreter.new_non_local("/1/2/:/3/")

        t.parse_string("[test]", "import doesnotexist")

        verify_import_error("""\
            SyntaxError: Cannot import 'doesnotexist':
                no builtin module 'doesnotexist'
                no file './doesnotexist.lily'
                no file './doesnotexist.{lib}'
                no file './packages/doesnotexist/src/doesnotexist.lily'
                no file './packages/doesnotexist/src/doesnotexist.{lib}'
                no file '/1/2/doesnotexist/src/doesnotexist.lily'
                no file '/1/2/doesnotexist/src/doesnotexist.{lib}'
                no file '/3/doesnotexist/src/doesnotexist.lily'
                no file '/3/doesnotexist/src/doesnotexist.{lib}'

               |
             1 | import doesnotexist
               |        ^

                from [test]:1:
        """, t.error())

        # Make sure system dirs aren't trying slashed paths.
        t.parse_string("[test]", "import \"abc/def\"")

        verify_import_error("""\
            SyntaxError: Cannot import 'abc/def':
                no file './abc/def.lily'
                no file './abc/def.so'
            
               |
             1 | import "abc/def"
               |        ^
            
                from [test]:1:
        """, t.error())
    }
}
