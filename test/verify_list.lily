import test

var t = test.t

t.scope(__file__)

t.assert("List.clear with Integer values.",
         (||
    var v = [1, 2, 3]
    v.clear()
    v == [] ))

t.assert("List.clear with Exception values.",
         (||
    var v = [Exception("a"), Exception("b"), Exception("c")]
    v.clear()
    v == [] ))


t.assert("List.count with empty List.",
         (||
    var v: List[Integer] = []
    v.count(|a| true) == 0 ))

t.assert("List.count selecting half.",
         (|| [1, 2, 3, 4, 5].count(|a| a % 2 == 0) == 2 ))

t.assert("List.count with true.",
         (|| [1, 2, 3].count(|a| true) == 3 ))

t.assert("List.count with false.",
         (|| [1, 2, 3].count(|a| false) == 0 ))


t.assert("List.delete_at with 0 index.",
         (||
    var v = [1, 2, 3]
    v.delete_at(0)
    v == [2, 3] ))

t.assert("List.delete_at with max index.",
         (||
    var v = [1, 2, 3]
    v.delete_at(2)
    v == [1, 2] ))

t.assert("List.delete_at with negative index.",
         (||
    var v = [1, 2, 3]
    v.delete_at(-1)
    v == [1, 2] ))

t.expect_error("List.delete_at with invalid negative index.",
               "IndexError: Index -2 is too small for list (minimum: -1)",
               (||
    [1].delete_at(-2)
    false ))

t.expect_error("List.delete_at with invalid positive index.",
               "IndexError: Index 5 is too large for list (maximum: 1)",
               (||
    [1].delete_at(5)
    false ))


t.assert("List.each visits all elements from left to right.",
         (||
    var v = [0, 1, 2]
    var results = [0, 0, 0]
    var k = 0

    v.each(|e|
        k += 1
        results[e] = k
    )
    results == [1, 2, 3] ))

t.assert("List.each with empty list.",
         (||
    var count = 0
    var v: List[Integer] = []

    v.each(|e| count += 1 )
    count == 0 ))


t.assert("List.each_index visits all elements and in order.",
         (||
    var v = [3, 2, 1]
    var results = [0, 0, 0]
    var k = 0

    v.each_index(|i|
        k += 1
        results[i] = k
    )
    results == [1, 2, 3] ))


t.assert("List.fill with a valid index.",
         (||
    List.fill(5, (|a| a + a)) == [0, 2, 4, 6, 8] ))

t.assert("List.fill transforming inputs.",
         (||
    List.fill(3, (|a| a.to_s() )) == ["0", "1", "2"] ))

t.assert("List.fill of zero count returns an empty List.",
         (||
    List.fill(0, (|a| a )) == [] ))

t.assert("List.fill of a negative count returns an empty List.",
         (||
    List.fill(-5, (|a| a )) == [] ))


t.assert("List.fold with type Integer.",
         (|| [1, 2, 3].fold(0, (|a, b| a + b)) == 6 ))

t.assert("List.fold with empty List.",
         (||
    var success = true
    var v: List[Integer] = []
    v.fold(0, (|a, b|
        success = false
        1
    ))
    success ))


t.assert("List.get with valid positive index.",
         (||
    [1, 2, 3].get(0).unwrap() ))

t.assert("List.get with valid negative index.",
         (||
    [1, 2, 3].get(-1).unwrap() ))

t.assert("List.get with invalid positive index.",
         (||
    [1, 2, 3].get(5).is_none() ))

t.assert("List.get with invalid negative index.",
         (||
    [1, 2, 3].get(-5).is_none() ))

t.assert("List.get with invalid positive index that equals size.",
         (||
    [1, 2, 3].get(3).is_none() ))

t.assert("List.get with invalid negative index that equals size.",
         (||
    [1, 2, 3].get(-3).is_some() ))


t.assert("List.insert at position 0.",
         (||
    var v = [1]
    v.insert(0, 0)
    v == [0, 1] ))

t.assert("List.insert at end position.",
         (||
    var v = [1]
    v.insert(1, 2)
    v == [1, 2] ))

t.assert("List.insert at negative position.",
         (||
    var v = [1]
    v.insert(-1, 2)
    v == [2, 1] ))

t.expect_error("List.insert with invalid positive index.",
               "IndexError: Index 5 is too large for list (maximum: 1)",
               (||
    [1].insert(5, 100)
    true ))

t.expect_error("List.insert with invalid negative index.",
               "IndexError: Index -10 is too small for list (minimum: -1)",
               (||
    [1].insert(-10, 200)
    true ))


t.assert("List.join with empty list and default separator.",
         (|| [].join() == "" ))

t.assert("List.join with empty list.",
         (|| [].join(",") == "" ))

t.assert("List.join with 1-element list and default separator",
         (|| [1].join() == "1" ))

t.assert("List.join with 1-element list.",
         (|| [1].join(" ") == "1" ))

t.assert("List.join with 3-element list and default separator.",
         (|| [1, 2, 3].join() == "123" ))

t.assert("List.join with 3-element list.",
         (|| [1, 2, 3].join(", ") == "1, 2, 3" ))


t.assert("List.map with empty List.",
         (||
    var v: List[Integer] = []
    v.map(Integer.to_s) == [] ))

t.assert("List.map with non-empty List.",
         (|| [1, 2, 3].map(Integer.to_s) == ["1", "2", "3"] ))


t.assert("List.pop with List of size 1.",
         (||
    var v = [1]
    v.pop()
    v == [] ))

t.expect_error("List.pop with empty List.",
               "IndexError: Pop from an empty list.",
               (||
    var v: List[Integer] = []
    v.pop() ))


t.assert("List.reject with empty List.",
         (||
    var success = true
    var v: List[Integer] = []
    v.reject(|i|
        success = false
        true
    )
    success ))

t.assert("List.reject dropping odd numbers.",
         (|| [1, 2, 3].reject(|i| (i % 2) == 1) == [2] ))

t.assert("List.reject dropping even numbers.",
         (|| [1, 2, 3].reject(|i| (i % 2) == 0) == [1, 3] ))

t.assert("List.reject with false.",
         (|| [1, 2, 3].reject(|i| false) == [1, 2, 3] ))

t.assert("List.reject with true.",
         (|| [1, 2, 3].reject(|i| true) == [] ))


t.assert("List.select with empty List.",
         (||
    var success = true
    var v: List[Integer] = []
    v.select(|i|
        success = false
        true
    )
    success ))

t.assert("List.select keeping odd numbers.",
         (|| [1, 2, 3].select(|i| (i % 2) == 1) == [1, 3] ))

t.assert("List.select keeping even numbers.",
         (|| [1, 2, 3].select(|i| (i % 2) == 0) == [2] ))

t.assert("List.select with false.",
         (|| [1, 2, 3].select(|i| false) == [] ))

t.assert("List.select with true.",
         (|| [1, 2, 3].select(|i| true) == [1, 2, 3] ))


t.assert("List.shift removes values from the left.",
         (||
    var v = [1, 2, 3]
    v.shift()
    v.shift()
    v == [3] ))

t.assert("List.shift returns the first value.",
         (|| ["a", "b", "c"].shift() == "a" ))

t.expect_error("List.shift fails on empty List.",
               "IndexError: Shift on an empty list.",
               (||
    var v: List[Integer] = []
    v.shift()
    true ))


t.assert("List.slice with both defaults.",
         (|| [1, 2, 3].slice() == [1, 2, 3] ))

t.assert("List.slice with basic 0...-1 slice.",
         (|| [1, 2, 3].slice(0, -1) == [1, 2] ))

t.assert("List.slice with basic 1...2 slice.",
         (|| [1, 2, 3].slice(1, 2) == [2] ))

t.assert("List.slice with reversed indexes.",
         (|| [1, 2, 3].slice(2, 1) == [] ))

t.assert("List.slice with too-large index.",
         (|| [1, 2, 3].slice(1, 5) == [] ))


t.assert("List.unshift with Integer values.",
         (||
    var v = [1]
    v.unshift(0)
    v.unshift(-1)
    v == [-1, 0, 1] ))


t.assert("List.zip with 1 List of same size.",
         (||
    var v = List.zip([1, 2], ["3", "4"])

    v == [<[1, "3"]>, <[2, "4"]>] ))

t.assert("List.zip with 3 Lists of same size.",
         (||
    var v = List.zip([1, 2], ["3", "4"], [5.0, 6.0], [true, false])

    v == [<[1, "3", 5.0, true]>, <[2, "4", 6.0, false]>] ))

t.assert("List.zip with no extra List values.",
         (||
    var v = List.zip([1, 2])

    v == [<[1]>, <[2]>] ))

t.assert("List.zip with one empty List from a var.",
         (||
    var w: List[Integer] = []
    var v = List.zip([1, 2], w)

    v == [] ))

t.assert("List.zip with an empty static List.",
         (|| List.zip([1, 2], []) == [] ))

t.assert("List.zip with three List values of a different size.",
         (||
    var v = List.zip([1, 2, 3, 4, 5], ["5", "6", "7"], [8.0, 9.0, 10.0, 11.0])

    v == [<[1, "5", 8.0]>, <[2, "6", 9.0]>, <[3, "7", 10.0]>] ))
