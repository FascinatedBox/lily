import test

var t = test.t

t.scope(__file__)

t.assert("File.close does nothing if called on closed file.",
         (||
    var f = File.open("io_test_file.txt", "w")

    f.close()
    f.close()
    true ))


t.assert("File.flush with write file.",
         (||
    var v = File.open("io_test_file.txt", "w")
    v.write("test")
    v.flush()
    true ))

t.expect_error("File.flush fails with closed file.",
               "IOError: IO operation on closed file.",
               (||
    var v = File.open("io_test_file.txt", "w")
    v.close()
    v.flush()
    true ))

t.expect_error("File.flush fails with closed file.",
               "IOError: File not open for writing.",
               (||
    File.open("io_test_file.txt", "r")
        .flush()
    true ))


t.assert("File.open allows mode r+",
         (||
    var f = File.open("io_test_file.txt", "r+")
    f.close()
    true ))

t.assert("File.open allows mode rb",
         (||
    var f = File.open("io_test_file.txt", "rb")
    f.close()
    true ))

t.expect_error("File.open fails when given invalid mode.",
               "IOError: Invalid mode 'z' given.",
               (||
    var v = File.open("io_test_file.txt", "z")
    true ))

t.interpret("File.open throwing IOError with errno.",
    """
    # The exact message depends on platform.
    var ok = false
    try: {
        var f = File.open("xyz", "r")
    except IOError as e:
        if e.message.starts_with("Errno "): {
            ok = true
        }
    }

    if ok == false: {
        raise Exception("Failed.")
    }
    """)


t.assert("File.print String and non-String input.",
         (||
    var f = File.open("io_test_file.txt", "w")
    f.print(123)
    f.print("asdf")
    f.close()
    true ))

t.expect_error("File.print on closed file.",
               "IOError: IO operation on closed file.",
               (||
    var f = File.open("io_test_file.txt", "w")
    f.close()
    f.print(123)
    false ))

t.expect_error("File.print on read file.",
               "IOError: File not open for writing.",
               (||
    var f = File.open("io_test_file.txt", "r")
    f.print(123)
    false ))


t.expect_error("File.read_line on closed file.",
               "IOError: IO operation on closed file.",
               (||
    stdin.close()
    stdin.read_line()
    true ))

t.expect_error("File.read_line on write file.",
               "IOError: File not open for reading.",
               (||
    var f = File.open("io_test_file.txt", "w")
    f.read_line()
    true ))


t.assert("File write and read of utf-8.",
         (||
    var f = File.open("io_test_file.txt", "w")
    f.write("♡")
    f.close()

    var v = File.open("io_test_file.txt", "r")
            .read_line()
            .encode()
            .unwrap()

    v == "♡" ))

t.assert("File write and read of plain data.",
         (||
    var f = File.open("io_test_file.txt", "w")
    f.write("1234567890")
    f.close()

    var v = File.open("io_test_file.txt", "r")
            .read_line()
            .encode()
            .unwrap()

    v == "1234567890" ))

t.assert("File.write non-String input.",
         (||
    var f = File.open("io_test_file.txt", "w")
    f.write(123)
    f.close()
    true ))
