import test

var t = test.t

t.scope(__file__)

t.assert("File.close does nothing if called on closed file.",
         (||
    var f = File.open("io_test_file.txt", "w")

    f.close()
    f.close()
    true ))


t.assert("File.each_line input verification.",
         (||
    var f = File.open("test\/file_for_io.txt", "r")
    var expect = """\
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In efficitur lacinia tortor, ac commodo metus vulputate non.\n\
    12345\n\
    Praesentüëèblanditüëèpurusüëèsitüëèametüëèurnaüëèfaucibusüëèdapibus.\n\
    Nulla lacus turpis, ornare at nisl id, rhoncus venenatis urna.\n\
    Suspendisse leo nulla, interdum eget erat at, vehicula gravida enim.\n\
    Integer ultricies metus nisl, nec tempus nisi imperdiet eu. Suspendisse tincidunt id odio ac consequat. Proin faucibus nisi a elit egestas eleifend. Nullam at fermentum nisl, ut pharetra lorem. Sed blandit ante in sapien efficitur, sit amet accumsan enim dictum. Praesent blandit lorem nec orci interdum, eu pharetra felis tincidunt. Vivamus vestibulum risus non accumsan vestibulum.\n\
    """

    var lines: List[String] = []

    f.each_line(|l| l.encode().unwrap() |> lines.push )
    lines.join("") == expect ))

t.expect_error("File.each_line fails with closed file.",
               "IOError: IO operation on closed file.",
               (||
    var v = File.open("io_test_file.txt", "w")
    v.close()
    v.each_line(|e| 0 / 0 )
    false ))

t.expect_error("File.each_line fails with write file.",
               "IOError: File not open for reading.",
               (||
    File.open("io_test_file.txt", "w")
        .each_line(|e| 0 / 0 )
    false ))


t.assert("File.flush with write file.",
         (||
    var v = File.open("io_test_file.txt", "w")
    v.write("test")
    v.flush()
    true ))

t.expect_error("File.flush fails with closed file.",
               "IOError: IO operation on closed file.",
               (||
    var v = File.open("io_test_file.txt", "w")
    v.close()
    v.flush()
    true ))

t.expect_error("File.flush fails with closed file.",
               "IOError: File not open for writing.",
               (||
    File.open("io_test_file.txt", "r")
        .flush()
    true ))


t.assert("File.open allows mode r+",
         (||
    var f = File.open("io_test_file.txt", "r+")
    f.close()
    true ))

t.assert("File.open allows mode rb",
         (||
    var f = File.open("io_test_file.txt", "rb")
    f.close()
    true ))

t.expect_error("File.open fails when given invalid mode.",
               "IOError: Invalid mode 'z' given.",
               (||
    var v = File.open("io_test_file.txt", "z")
    true ))

t.interpret("File.open throwing IOError with errno.",
    """
    # The exact message depends on platform.
    var ok = false
    try: {
        var f = File.open("xyz", "r")
    except IOError as e:
        if e.message.starts_with("Errno "): {
            ok = true
        }
    }

    if ok == false: {
        raise Exception("Failed.")
    }
    """)


t.assert("File.print String and non-String input.",
         (||
    var f = File.open("io_test_file.txt", "w")
    f.print(123)
    f.print("asdf")
    f.close()
    true ))

t.expect_error("File.print on closed file.",
               "IOError: IO operation on closed file.",
               (||
    var f = File.open("io_test_file.txt", "w")
    f.close()
    f.print(123)
    false ))

t.expect_error("File.print on read file.",
               "IOError: File not open for writing.",
               (||
    var f = File.open("io_test_file.txt", "r")
    f.print(123)
    false ))

t.assert("File.read_line input verification.",
         (||
    var f = File.open("test\/file_for_io.txt", "r")
    var expect = """\
    Lorem ipsum dolor sit amet, consectetur adipiscing elit. In efficitur lacinia tortor, ac commodo metus vulputate non.\n\
    12345\n\
    Praesentüëèblanditüëèpurusüëèsitüëèametüëèurnaüëèfaucibusüëèdapibus.\n\
    Nulla lacus turpis, ornare at nisl id, rhoncus venenatis urna.\n\
    Suspendisse leo nulla, interdum eget erat at, vehicula gravida enim.\n\
    Integer ultricies metus nisl, nec tempus nisi imperdiet eu. Suspendisse tincidunt id odio ac consequat. Proin faucibus nisi a elit egestas eleifend. Nullam at fermentum nisl, ut pharetra lorem. Sed blandit ante in sapien efficitur, sit amet accumsan enim dictum. Praesent blandit lorem nec orci interdum, eu pharetra felis tincidunt. Vivamus vestibulum risus non accumsan vestibulum.\n\
    """

    var lines: List[String] = []
    var i = 0

    # 'i' prevents infinite looping if reading is very broken.
    while i != 10: {
        var l = f.read_line()
                 .encode()
                 .unwrap()

        if l == "": {
            break
        }

        lines.push(l)

        i += 1
    }

    lines.join("") == expect ))

t.expect_error("File.read_line on closed file.",
               "IOError: IO operation on closed file.",
               (||
    stdin.close()
    stdin.read_line()
    true ))

t.expect_error("File.read_line on write file.",
               "IOError: File not open for reading.",
               (||
    var f = File.open("io_test_file.txt", "w")
    f.read_line()
    true ))


t.assert("File write and read of utf-8.",
         (||
    var f = File.open("io_test_file.txt", "w")
    f.write("‚ô°")
    f.close()

    var v = File.open("io_test_file.txt", "r")
            .read_line()
            .encode()
            .unwrap()

    v == "‚ô°" ))

t.assert("File write and read of plain data.",
         (||
    var f = File.open("io_test_file.txt", "w")
    f.write("1234567890")
    f.close()

    var v = File.open("io_test_file.txt", "r")
            .read_line()
            .encode()
            .unwrap()

    v == "1234567890" ))

t.assert("File.write non-String input.",
         (||
    var f = File.open("io_test_file.txt", "w")
    f.write(123)
    f.close()
    true ))
