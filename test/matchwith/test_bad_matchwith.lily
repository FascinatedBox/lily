import (Interpreter,
        TestCase) "../t/testing"

# match and with have many of the same pitfalls, so they're tested together.

class TestBadMatchWith < TestCase
{
    public define test_bad_match_decompose
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: asdf has already been declared.

               |
             9 | case One(asdf, asdf):
               |                ^

                from [test]:9:
        """,
        """\
            enum Test {
                One(Integer, Integer),
                Two
            }

            var v = Two

            match v: {
                case One(asdf, asdf):
                case Two:
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Expected '(' here.

               |
             4 | case Some:
               |          ^

                from [test]:4:
        """,
        """\
            var v: Option[Integer] = None

            match v: {
                case Some:
                case None:
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Expected ':' here.

               |
             4 | case None(a):
               |          ^

                from [test]:4:
        """,
        """\
            var v: Option[Integer] = None

            match v: {
                case None(a):
                case Some(s):
            }
        """)
    }

    public define test_bad_match_case_logic
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Match pattern not exhaustive. The following case(s) are missing:
            * None
                from [test]:6:
        """,
        """\
            var v: Option[Integer] = None

            match v: {
                case Some(s):
                    1
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: case in exhaustive match.

               |
             9 | case Two(t):
               |      ^

                from [test]:9:
        """,
        """\
            class One {}
            class Two < One {}

            var v: One = Two()

            match v: {
                case One(o):
                else:
                case Two(t):
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Already have a case for One.

               |
             8 | case One(o):
               |      ^

                from [test]:8:
        """,
        """\
            class One {}
            class Two < One {}

            var v: One = Two()

            match v: {
                case One(o):
                case One(o):
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: else in exhaustive match.

               |
             9 | else:
               | ^

                from [test]:9:
        """,
        """\
            class One {}
            class Two < One {}

            var v: One = Two()

            match v: {
                case One(o):
                else:
                else:
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: case in exhaustive match.

               |
             9 | case Two(t):
               |      ^

                from [test]:9:
        """,
        """\
            class One {}
            class Two < One {}

            var v: One = Two()

            match v: {
                case One(o):
                else:
                case Two(t):
            }
        """)
    }

    public define test_bad_match_rule_errors
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Match must start with a case.

               |
             4 | v = Some(1)
               | ^

                from [test]:4:
        """,
        """\
            var v: Option[Integer] = None

            match v: {
                v = Some(1)
                case Some(s):
                None:
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: DoesNotExist is not a member of enum Option.

               |
             2 | case DoesNotExist:
               |      ^

                from [test]:2:
        """,
        """\
            match Some(1): {
                case DoesNotExist:
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Multi case match is only available to empty variants.

                |
             10 | case One(s), Two(s):
                |            ^

                from [test]:10:
        """,
        """\
            enum Example {
                One(Integer),
                Two(Integer),
                Three(Integer)
            }

            var v = Three(1)

            match v: {
                case One(s), Two(s):
                else:
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Multi case match is only available to empty variants.

               |
             9 | case Two, One(s):
               |           ^

                from [test]:9:
        """,
        """\
            enum Example {
                One(Integer),
                Two
            }

            var v = Two

            match v: {
                case Two, One(s):
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Banana is not a member of enum Example.

               |
             9 | case Banana.One:
               |      ^

                from [test]:9:
        """,
        """\
            scoped enum Example {
                One,
                Two
            }

            var v = Example.Two

            match v: {
                case Banana.One:
                case Example.Two:
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Match statement value cannot be an incomplete type.
            Received: Multival[List[?], List[?]]

               |
             9 | match Tree([], []): {
               |                   ^

                from [test]:9:
        """,
        """\
            enum Multival[A, B] {
                Tree(A, B),
                ignore
            }

            define f {
                var counter = 3

                match Tree([], []): {
                    case Tree(x, y):
                        var container: List[List[String]] = []

                        while counter != 0: {
                            counter -= 1
                            container.push(x)
                            container.push(y)

                            x.push("x")
                            y.push(1)
                            continue
                        }

                        for c in container: {
                            print(c[0].size())
                        }
                    case ignore:
                }
            }
            f()
        """)

        assert_parse_fails(t, """\
            SyntaxError: Match statement value must be a user class or enum.
            Received: Tuple[Integer, String, Double]

               |
             1 | match <[1, "2", 3.3]>: {
               |                      ^

                from [test]:1:
        """,
        """\
            match <[1, "2", 3.3]>: {
            }
        """)
    }

    public define test_bad_with
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: With statement value cannot be an incomplete type.
            Received: Multival[List[?], List[?]]

               |
             9 | with Tree([], []) as Tree(x, y): {
               |                   ^

                from [test]:9:
        """,
        """\
            enum Multival[A, B] {
                Tree(A, B),
                ignore
            }

            define f {
                var counter = 3

                with Tree([], []) as Tree(x, y): {
                    var container: List[List[String]] = []

                    while counter != 0: {
                        counter -= 1
                        container.push(x)
                        container.push(y)

                        x.push("x")
                        y.push(1)
                        continue
                    }

                    for c in container: {
                        print(c[0].size())
                    }
                }
            }
            f()
        """)

        assert_parse_fails(t, """\
            SyntaxError: With statement value must be a user class or enum.
            Received: Integer

               |
             1 | with 1: {
               |       ^

                from [test]:1:
        """,
        """\
            with 1: {
                case Integer:
                else:
            }
        """)
    }

    public define test_bad_expression_match_decompose
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: asdf has already been declared.

               |
             7 | case One(asdf, asdf):
               |                ^

                from [test]:7:
        """,
        """\
            enum Test {
                One(Integer, Integer),
                Two
            }

            var v = match Two: {
                case One(asdf, asdf):
                case Two:
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Variant Some of enum Option expects 1 parameters (0 given).
                from [test]:2:
        """,
        """\
            var v = match Some(1): {
                case Some:
                    1
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Expected ':' here.

               |
             4 | else(s):
               |     ^

                from [test]:4:
        """,
        """\
            var v = match Some(1): {
                case Some(s):
                    1
                else(s):
                    2
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Variant Some of enum Option expects 1 parameters (2 given).
                from [test]:2:
        """,
        """\
            var v = match Some(1): {
                case Some(s1, s2):
                    1
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Variant None of enum Option does not take arguments.
                from [test]:2:
        """,
        """\
            var v = match Some(1): {
                case None(s):
                    1
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Enum Option does not have a variant named Integer.
                from [test]:2:
        """,
        """\
            var v = match Some(1): {
                case Integer(i):
                    1
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Match must start with a case.

               |
             2 | else:
               | ^

                from [test]:2:
        """,
        """\
            var v = match Some(1): {
                else:
                    1
            }
        """)
    }

    public define test_bad_expression_match_case_logic
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Match pattern not exhaustive. The following case(s) are missing:
            * None
                from [test]:1:
        """,
        """\
            var v = match Some(1): {
                case Some(s):
                    1
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Already have a case for Some.
                from [test]:4:
        """,
        """\
            var v = match Some(1): {
                case Some(s):
                    1
                case Some(s):
                    1
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: else in exhaustive match.
                from [test]:6:
        """,
        """\
            var v = match Some(1): {
                case Some(s):
                    1
                else:
                    1
                else:
                    1
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Already have a case for None.
                from [test]:6:
        """,
        """\
            var v = match Some(1): {
                case Some(s):
                    1
                else:
                    1
                case None:
                    1
            }
        """)
    }

    public define test_bad_expression_match_intro
    {
        var t = Interpreter()

        # Internal test due to how expression match is implemented.

        assert_parse_fails(t, """\
            SyntaxError: match has not been declared.

               |
             3 | var v = sys.match 5: {}
               |             ^

                from [test]:3:
        """,
        """\
            import sys

            var v = sys.match 5: {}
        """)
    }

    public define test_bad_expression_match_rules
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Match must start with a case.

               |
             1 | var v = match 5: {}
               |                   ^

                from [test]:1:
        """,
        """\
            var v = match 5: {}
        """)

        assert_parse_fails(t, """\
            SyntaxError: Match expressions only work with enum values.
            Received: Integer
                from [test]:1:
        """,
        """\
            var v = match 5: {
                case Some(s):
                    1
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Enum Option does not have a variant named Integer.
                from [test]:2:
        """,
        """\
            var v = match Some(1): {
                case Integer(i):
                    1
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: s has already been declared.

               |
             7 | case One(s, s):
               |             ^

                from [test]:7:
        """,
        """\
            enum example {
                One(Integer, Integer),
                Two
            }

            var v = match One(1, 2): {
                case One(s, s):
                    1
                case Two:
                    2
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: s2 has not been declared.

                |
             10 | s2
                | ^

                from [test]:10:
        """,
        """\
            enum example {
                One(Integer, Integer),
                Two
            }

            var v = match One(1, 2): {
                case One(s1, s2):
                    1
                case Two:
                    s2
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Match expression value cannot be an incomplete type.
            Received: Option[?]
                from [test]:6:
        """,
        """\
            enum example {
                One(Integer, Integer),
                Two
            }

            var v = match None: {
                case Some(s):
                    1
                case None:
                    2
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Cannot nest an assignment within an expression.
                from [test]:6:
        """,
        """\
            define f: Integer {
                var v = 10

                return match Some(1): {
                    case Some(s):
                        v = 20
                    case None:
                        2
                }
            }
        """)

        # Demonstrate writing the name of a match var.

        assert_parse_fails(t, """\
            SyntaxError: Wrong number of arguments to s (1 for 0).
                from [test]:4:
        """,
        """\
            define f {}
            var v = match Some(f): {
                case Some(s):
                    s(12)
                case None:
                    1
            }
        """)

        # Can't assign to a match expression.

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token within an expression.

               |
             7 | } = 10
               |   ^

                from [test]:7:
        """,
        """\
            define f {}
            var v = match Some(f): {
                case Some(s):
                    0
                case None:
                    1
            } = 10
        """)

        # Redeclaration during var init

        assert_parse_fails(t, """\
            SyntaxError: v has already been declared.

               |
             2 | case Some(v):
               |           ^

                from [test]:2:
        """,
        """\
            var v = match Some(1): {
                case Some(v):
            }
        """)

        # Can't use a skipped value

        assert_parse_fails(t, """\
            SyntaxError: _ has not been declared.

               |
             3 | print(_)
               |       ^

                from [test]:3:
        """,
        """\
            var v = match Some(1): {
                case Some(_):
                    print(_)
                case None:
                    unit
            }
        """)
    }

    public define test_bad_expression_match_typing
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token within an expression.

               |
             6 | }]
               |  ^

                from [test]:6:
        """,
        """\
            var v = match Some("1"): {
                case Some(s):
                    s.parse_i().unwrap()
                case None:
                    1
            }]
        """)

        assert_parse_fails(t, """\
            SyntaxError: Mismatched type in expression match branch:
            Expected Type: Integer
            Received Type: String
                from [test]:3:
        """,
        """\
            var v: Integer = match Some(1): {
                case Some(s):
                    "1"
                case None:
                    [1]
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Mismatched type in expression match branch:
            Expected Type: String
            Received Type: List[Integer]
                from [test]:5:
        """,
        """\
            var v = match Some(1): {
                case Some(s):
                    "1"
                case None:
                    [1]
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Mismatched type in expression match branch:
            Expected Type: Integer
            Received Type: String
                from [test]:4:
        """,
        """\
            define f: Integer {
                return match Some(1): {
                    case Some(s):
                        "1"
                    case None:
                        [2]
                }
            }
        """)
    }

    public define test_bad_expression_match_blocked
    {
        # Some of these restrictions are temporary.
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: A lambda is too complex to be here.

               |
             3 | (|| 1 )
               | ^

                from [test]:3:
        """,
        """\
            var v = match Some(1): {
                case Some(s):
                    (|| 1 )
                case Some(s2):
                    (|| 2 )
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a match expression here.

               |
             2 | define f(a: *Integer=match Some(1): {}) {}
               |                      ^

                from [test]:2:
        """,
        """\
            # No.
            define f(a: *Integer=match Some(1): {}) {}
        """)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a match expression here.

               |
             1 | var v = [1, 2, 3][match Some(1)]: {
               |                   ^

                from [test]:1:
        """,
        """\
            var v = [1, 2, 3][match Some(1)]: {
                case Some(s):
                    1
                case None:
                    0
            }]
        """)

        assert_parse_fails(t, """\
            SyntaxError: Expected ':' here.

               |
             9 | case One, Two:
               |         ^

                from [test]:9:
        """,
        """\
            enum Example {
                One,
                Two,
                Three(Integer),
            }

            var w = One
            var v = match w: {
                case One, Two:
                    1
                case Three(s):
                    s
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Match expressions only work with enum values.
            Received: ValueError
                from [test]:1:
        """,
        """\
            var v = match ValueError("asdf"): {
                case ValueError(msg):
                    msg
                case Exception(msg):
                    msg
            }
        """)
    }
}
