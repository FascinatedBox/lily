import test

var t = test.t

t.scope(__file__)

import sys

t.assert("sys.getenv on a value that should exist.",
         (||
    var home = sys.getenv("HOME")
    true ))

t.assert("sys.getenv with non-existent value.",
         (||
    var impossible = sys.getenv("ABCDEFG")
    impossible.is_none() ))

t.interpret_for_error("sys.set_recursion_limit basic case.",
    """\
    RuntimeError: Function call recursion limit reached.\n\
    Traceback:\n    \
        from test\/[subinterp]:4: in f\n    \
        from test\/[subinterp]:4: in f\n    \
        from test\/[subinterp]:4: in f\n    \
        from test\/[subinterp]:4: in f\n    \
        from test\/[subinterp]:4: in f\n    \
        from test\/[subinterp]:5: in __main__\
    """,
    """
    import sys
    sys.set_recursion_limit(5)
    define f { f() }
    f()
    """)

t.interpret_for_error("sys.set_recursion_limit too high.",
    """\
    ValueError: Limit value (9999999999999999) is not reasonable.\n\
    Traceback:\n    \
        from [C]: in set_recursion_limit\n    \
        from test/[subinterp]:3: in __main__\
    """,
    """
    import sys
    sys.set_recursion_limit(9999999999999999)
    """)

t.interpret_for_error("sys.set_recursion_limit too low.",
    """\
    ValueError: Limit value (1) is lower than the current recursion depth.\n\
    Traceback:\n    \
        from [C]: in set_recursion_limit\n    \
        from test/[subinterp]:5: in f\n    \
        from test/[subinterp]:8: in __main__\
    """,
    """
    import sys

    define f {
        sys.set_recursion_limit(1)
    }

    f()
    """)

t.interpret("sys.recursion_limit get + set.",
    """
    import sys

    sys.set_recursion_limit(5)

    if sys.recursion_limit() != 5: {
        raise Exception("Failed.")
    }
    """)
