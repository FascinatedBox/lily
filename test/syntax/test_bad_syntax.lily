import (Interpreter,
        TestCase) "../t/testing"

class TestBadSyntax < TestCase
{
    public define test_bad_assign_type
    {
        var t = Interpreter()

        # bad assign type (to global var)

        assert_parse_fails(t, """\
            SyntaxError: Cannot assign type 'String' to type 'Integer'.\n    \
                from [test]:2:\n\
        """,
        """\
            var a = 10
            a = "10"
        """)

        # bad assign type (to class property)

        assert_parse_fails(t, """\
            SyntaxError: Cannot assign type 'String' to type 'Integer'.\n    \
                from [test]:6:\n\
        """,
        """\
            class Example {
                public var @a = 10
            }

            var v = Example()
            v.a = "5"
        """)

        # bad assign type (to upvalue)

        assert_parse_fails(t, """\
            SyntaxError: Cannot assign type 'String' to type 'Integer'.\n    \
                from [test]:3:\n\
        """,
        """\
            define f(a: Integer) {
                define g {
                    a = ""
                }
            }
        """)
    }

    public define test_bad_blocks
    {
        var t = Interpreter()

        # bad blocks (bad match expression case)

        assert_parse_fails(t, """\
            SyntaxError: Match expression is not a user class or enum.\n    \
                from [test]:1:\n\
        """,
        """\
            match <[1, "2", 3.3]>: {
            }
        """)

        # bad blocks (bad if expression case)

        assert_parse_fails(t, """\
            SyntaxError: Tuple[Integer, String] is not a valid condition type.\n    \
                from [test]:1:\n\
        """,
        """\
            if <[1, "2"]>: {
            }
        """)

        # bad blocks (for loop var must be Integer)

        assert_parse_fails(t, """\
            SyntaxError: Loop var must be type Integer, not type 'String'.\n    \
                from [test]:2:\n\
        """,
        """\
            var i = ""
            for i in 0...10: {}
        """)

        # bad blocks (for must start with Integer)

        assert_parse_fails(t, """\
            SyntaxError: Expected type 'Integer', but got type 'String'.\n    \
                from [test]:1:\n\
        """,
        """\
            for i in "a"...0: {
            }
        """)

        # bad blocks (condition using assign)

        assert_parse_fails(t, """\
            SyntaxError: Conditional expression has no value.\n    \
                from [test]:2:\n\
        """,
        """\
            var v = 10
            if v = 5:
                v = 1

            raise Exception("Failed.")
        """)

        # bad blocks (while after do)

        assert_parse_fails(t, """\
            SyntaxError: Expected 'while', not 'asdf'.\n    \
                from [test]:2:\n\
        """,
        """\
            do: {
            } asdf
        """)

        # bad blocks (require 'by' in for loop)

        assert_parse_fails(t, """\
            SyntaxError: Expected 'by', not 'asdf'.\n    \
                from [test]:1:\n\
        """,
        """\
            for i in 0...10 asdf
        """)

        # bad blocks (require 'in' within for loop)

        assert_parse_fails(t, """\
            SyntaxError: Expected 'in', not 'asdf'.\n    \
                from [test]:1:\n\
        """,
        """\
            for i asdf 0...10: {}
        """)

        # bad blocks (assign in range expression)

        assert_parse_fails(t, """\
            SyntaxError: For range value expression contains an assignment.\n    \
                from [test]:2:\n\
        """,
        """\
            var v = 10
            for i in v = 5...10: {
                1
            }
        """)

        # bad blocks (do while not allowed to use scope vars in condition)

        assert_parse_fails(t, """\
            SyntaxError: v has not been declared.\n    \
                from [test]:4:\n\
        """,
        """\
            do: {
                var v = 10
                continue
            } while v == 10
        """)

        # bad blocks (unterminated if)

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token 'end of file'.\n    \
                from [test]:2:\n\
        """,
        """\
            if 1: {
        """)

        # bad blocks (else after else)

        assert_parse_fails(t, """\
            SyntaxError: else in exhaustive if.\n    \
                from [test]:5:\n\
        """,
        """\
            if 1: {
                1
            else:
                1
            else:
                1
            }
        """)

        # bad blocks (elif after else)

        assert_parse_fails(t, """\
            SyntaxError: elif in exhaustive if.\n    \
                from [test]:5:\n\
        """,
        """\
            if 1: {
                1
            else:
                1
            elif 1:
                1
            }
        """)
    }

    public define test_bad_cast
    {
        var t = Interpreter()

        # bad cast (from Integer to Tuple[Integer])

        assert_parse_fails(t, """\
            SyntaxError: Cannot cast type 'Integer' to type 'Tuple[Integer]'.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = 1.@(Tuple[Integer])
        """)
    }

    public define test_bad_comment
    {
        var t = Interpreter()

        # bad comment (unterminated multi-line)

        assert_parse_fails(t, """\
            SyntaxError: Unterminated multi-line comment (started at line 2).\n    \
                from [test]:6:\n\
        """,
        """\

        #[



        """)

        # bad comment (docblock with double pound)

        assert_parse_fails(t, """\
            SyntaxError: Docblock line does not start with full '###'.\n    \
                from [test]:2:\n\
        """,
        """\
        ###
        ##
            define f {}
        """)

        # bad comment (docblock inconsistent indent)

        assert_parse_fails(t, """\
            SyntaxError: Docblock has inconsistent indentation.\n    \
                from [test]:2:\n\
        """,
        """\
        ### asdf
            ### 1234
            define f {}
        """)

        # bad comment (docblock not followed by function or class)

        assert_parse_fails(t, """\
            SyntaxError: Docblock must be followed by a function or class definition.\n    \
                from [test]:4:\n\
        """,
        """
        ### Documentation for
        ### example
        ### class\
        """)

        # bad comment (docblock preceded by non-whitespace).

        assert_parse_fails(t, """\
            SyntaxError: Docblock is preceded by non-whitespace.\n    \
                from [test]:2:\n\
        """,
        """
        0 ### blah
        ### blah
        ### blah
        """)
    }

    public define test_bad_ctor
    {
        var t = Interpreter()

        # bad ctor (no ctor for Integer)

        assert_parse_fails(t, """\
            SyntaxError: Class Integer does not have a constructor.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = Integer(10)
        """)
    }

    public define test_bad_decl
    {
        var t = Interpreter()

        # bad decl (declare var twice)

        assert_parse_fails(t, """\
            SyntaxError: v has already been declared.\n    \
                from [test]:2:\n\
        """,
        """\
            var v = 10
            var v = 10
        """)

        # bad decl (declare define twice)

        assert_parse_fails(t, """\
            SyntaxError: f has already been declared.\n    \
                from [test]:2:\n\
        """,
        """\
            define f {}
            define f {}
        """)

        # bad decl (generic class with not enough types)

        assert_parse_fails(t, """\
            SyntaxError: Class Container expects 2 type(s), but got 1 type(s).\n    \
                from [test]:2:\n\
        """,
        """\
            class Container[A, B] {}
            var v: Container[Integer] = Container()
        """)

        # bad decl (generic class with too many types)

        assert_parse_fails(t, """\
            SyntaxError: Class Container expects 1 type(s), but got 3 type(s).\n    \
                from [test]:2:\n\
        """,
        """\
            class Container[A] {}
            var v: Container[Integer, Integer, Integer] = Container()
        """)
    }

    public define test_bad_literal
    {
        var t = Interpreter()

        # bad literal (Integer too large)

        assert_parse_fails(t, """\
            SyntaxError: Integer value is too large.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = 9223372036854775809
        """)

        # bad literal (Integer too small)

        assert_parse_fails(t, """\
            SyntaxError: Integer value is too small.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = -9223372036854775809
        """)

        # bad literal (Double too large)

        assert_parse_fails(t, """\
            SyntaxError: Double value is out of range.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = 9e999
        """)

        # bad literal (Double with Byte suffix)

        assert_parse_fails(t, """\
            SyntaxError: Double value with Byte suffix.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = 1.1t
        """)

        # bad literal (invalid exponent)

        assert_parse_fails(t, """\
            SyntaxError: Expected a base 10 number after exponent.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = 1e?
        """)

        # bad literal (exponent too large)

        assert_parse_fails(t, """\
            SyntaxError: Exponent is too large.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = 1e3000
        """)

        # bad literal (Byte with - sign)

        assert_parse_fails(t, """\
            SyntaxError: Byte values cannot have a sign.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = -1t
        """)

        # bad literal (Byte with + sign)

        assert_parse_fails(t, """\
            SyntaxError: Byte values cannot have a sign.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = +1t
        """)

        # bad literal (Byte too large)

        assert_parse_fails(t, """\
            SyntaxError: Byte value is too large.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = 256t
        """)

        # bad literal (Byte quote literal not multi-byte)

        assert_parse_fails(t, """\
            SyntaxError: Multi-character byte literal.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = '12'
        """)

        # bad literal (Byte quote literal empty)

        assert_parse_fails(t, """\
            SyntaxError: Byte literals cannot be empty.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = ''
        """)

        # bad literal (invalid String escape)

        assert_parse_fails(t, """\
            SyntaxError: Invalid escape sequence.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = "\\?"
        """)

        # bad literal (unterminated multi-line String)

        assert_parse_fails(t, """\
            SyntaxError: Unterminated string (started at line 3).\n    \
                from [test]:6:\n\
        """,
        """\


            var v = \"\"\"


        """)

        # bad literal (newline in single-line String)

        assert_parse_fails(t, """\
            SyntaxError: Newline in single-line string.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = "
        """)

        # bad literal (zero escape on String literal)

        assert_parse_fails(t, """\
            SyntaxError: Invalid escape sequence.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = "\\0"
        """)

        # bad literal (high-bit escape on String literal)

        assert_parse_fails(t, """\
            SyntaxError: Invalid escape sequence.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = "\\128"
        """)

        # bad literal (empty Tuple)

        assert_parse_fails(t, """\
            SyntaxError: Cannot create an empty Tuple.\n    \
                from [test]:2:\n\
        """,
        """\
            var v = <[]>
        """)
    }

    public define test_bad_operation
    {
        var t = Interpreter()

        # bad operation (String + String)

        assert_parse_fails(t, """\
            SyntaxError: Invalid operation: String + String.\n    \
                from [test]:6:\n\
        """,
        """\
            class Example {
                public var @v = "test"
                public define tryit(other: Example) {
                    var combine =
                        "a" ++ other.v ++ "b" ++
                        "c" + @v ++ "d" ++ other.v ++ "e"
                }
            }

            var a = Example()
            a.tryit(a)
        """)

        # bad operation (== on different types)

        assert_parse_fails(t, """\
            SyntaxError: Invalid operation: List[Integer] == List[String].\n    \
                from [test]:4:\n\
        """,
        """\
            var v1 = [1]
            var v2 = ["1"]

            v1 == v2
        """)

        # bad operation (!String)

        assert_parse_fails(t, """\
            SyntaxError: Invalid operation: !String.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = !"a"
        """)

        # bad operation (RuntimeError for infinite comparison)

        assert_parse_string(t, """
            enum Tree {
                Leaf(Integer),
                Branch(List[Tree])
            }

            var b0 = [Leaf(0)]
            var t0 = Branch(b0)

            b0[0] = t0

            var b1 = [Leaf(1)]
            var t1 = Branch(b1)

            b1[0] = t1

            try: {
                b1 == b0
                0 / 0
            except RuntimeError:
                b0[0] = Leaf(1)
                b1[0] = Leaf(1)
            }
        """)
    }

    public define test_bad_subscript
    {
        var t = Interpreter()

        # bad subscript (Tuple subscript out of range)

        assert_parse_fails(t, """\
            SyntaxError: Index 3 is out of range for Tuple[Integer, String].\n    \
                from [test]:1:\n\
        """,
        """\
            var s: String = <[1, "2"]> [3]
        """)

        # bad subscript (Tuple subscript not a literal)

        assert_parse_fails(t, """\
            SyntaxError: Tuple subscripts must be Integer literals.\n    \
                from [test]:3:\n\
        """,
        """\
            var a = 1
            var v = <[1, 2]>
            v[a] = 0
        """)

        # bad subscript (negative Tuple subscripts not allowed)

        assert_parse_fails(t, """\
            SyntaxError: Index -1 is out of range for Tuple[Integer].\n    \
                from [test]:2:\n\
        """,
        """\
            var v = <[1]>
            v[-1] = 0
        """)

        # bad subscript (positive Tuple subscript out of range)

        assert_parse_fails(t, """\
            SyntaxError: Index 5 is out of range for Tuple[Integer].\n    \
                from [test]:2:\n\
        """,
        """\
            var v = <[1]>
            v[5] = 1
        """)

        # bad subscript (invalid List subscript type)

        assert_parse_fails(t, """\
            SyntaxError: List index is not an Integer or a Byte.\n    \
                from [test]:2:\n\
        """,
        """\
            var v = [1]
            v[v]
        """)

        # bad subscript (invalid ByteString subscript type)

        assert_parse_fails(t, """\
            SyntaxError: ByteString index is not an Integer or a Byte.\n    \
                from [test]:2:\n\
        """,
        """\
            var v = B"1"
            v[v]
        """)

        # bad subscript (invalid Hash subscript type)

        assert_parse_fails(t, """\
            SyntaxError: Hash index should be type 'Integer', not type 'String'.\n    \
                from [test]:1:\n\
        """,
        """\
            [1 => 1, 2 => 2]["1"]
        """)

        # bad subscript (not supported on this type)

        assert_parse_fails(t, """\
            SyntaxError: Cannot subscript type 'Option[Integer]'.\n    \
                from [test]:1:\n\
        """,
        """\
            Some(1)[1]
        """)

        # bad subscript (Bytestring subscript out of range)

        assert_parse_fails(t, """\
            IndexError: Subscript index -50 is out of range.\n\
            Traceback:\n    \
                from [test]:1: in __main__\n\
        """,
        """\
            B"Ā ā Ă ă Ą"[-50]
        """)

        # bad subscript (KeyError with large Integer value)

        assert_parse_fails(t, """\
            KeyError: 9000000000000000000\n\
            Traceback:\n    \
                from [test]:2: in __main__\n\
        """,
        """\
            var v = [1 => 1]
            var w = v[9000000000000000000]
        """)

        # bad subscript (KeyError with reasonable Integer value)

        assert_parse_fails(t, """\
            KeyError: 65535\n\
            Traceback:\n    \
                from [test]:2: in __main__\n\
        """,
        """\
            var v = [1 => 1]
            var w = v[65535]
        """)
    }

    public define test_broken_exit_fold
    {
        var t = Interpreter()

        # broken exit fold (with if)

        assert_parse_fails(t, """\
            SyntaxError: Missing return statement at end of function.\n    \
                from [test]:10:\n\
        """,
        """\
            define f(a: Integer) : Integer
            {
                if a == 1: {
                    return 1
                elif a == 1:
                    a = 2
                else:
                    return 3
                }
            }
        """)

        # broken exit fold (with enum match case)

        assert_parse_fails(t, """\
            SyntaxError: Missing return statement at end of function.\n    \
                from [test]:9:\n\
        """,
        """\
            define f(a: Option[Integer]) : Integer
            {
                match a: {
                    case Some(s):
                        s = 1
                    case None:
                        return 2
                }
            }
        """)

        # broken exit fold (with enum match final else)

        assert_parse_fails(t, """\
            SyntaxError: Missing return statement at end of function.\n    \
                from [test]:9:\n\
        """,
        """\
            define f(a: Option[Integer]) : Integer
            {
                match a: {
                    case Some(s):
                        s = 1
                    else:
                        return 2
                }
            }
        """)

        # broken exit fold (with class match case)

        assert_parse_fails(t, """\
            SyntaxError: Missing return statement at end of function.\n    \
                from [test]:14:\n\
        """,
        """\
            class One {}
            class Two < One {}
            class Three < Two {}

            define f(input: One): Integer {
                match input: {
                    case Three(t):
                        print(1)
                    case Two(t):
                        return 1
                    else:
                        return 2
                }
            }
        """)

        # broken exit fold (with class match final else)

        assert_parse_fails(t, """\
            SyntaxError: Missing return statement at end of function.\n    \
                from [test]:14:\n\
        """,
        """\
            class One {}
            class Two < One {}
            class Three < Two {}

            define f(input: One): Integer {
                match input: {
                    case Three(t):
                        return 0
                    case Two(t):
                        return 1
                    else:
                        print(1)
                }
            }
        """)

        # broken exit fold (with try base case)

        assert_parse_fails(t, """\
            SyntaxError: Missing return statement at end of function.\n    \
                from [test]:8:\n\
        """,
        """\
            define f(a: Integer) : Integer
            {
                try: {
                    a = 1
                except Exception:
                    return 2
                }
            }
        """)
    }

    public define test_code_after_exit
    {
        var t = Interpreter()

        # code after exit (after raise)

        assert_parse_fails(t, """\
            SyntaxError: Statement(s) after 'raise' will not execute.\n    \
                from [test]:2:\n\
        """,
        """\
            raise ValueError("")
            var v = 10
        """)

        # code after exit (after value returned)

        assert_parse_fails(t, """\
            SyntaxError: Statement(s) after 'return' will not execute.\n    \
                from [test]:4:\n\
        """,
        """\
            define f : Integer
            {
                return 1
                var v = 2
            }
        """)

        # code after exit (after Unit returned)

        assert_parse_fails(t, """\
            SyntaxError: Statement(s) after 'return' will not execute (no return type given).\n    \
                from [test]:1:\n\
        """,
        """\
            define test { return 0 }
        """)

        # code after exit (break)

        assert_parse_fails(t, """\
            SyntaxError: Statement(s) after 'break' will not execute.\n    \
                from [test]:3:\n\
        """,
        """\
            for i in 0...10: {
                break
                print(i)
            }
        """)

        # code after exit (continue)

        assert_parse_fails(t, """\
            SyntaxError: Statement(s) after 'continue' will not execute.\n    \
                from [test]:3:\n\
        """,
        """\
            for i in 0...10: {
                continue
                print(i)
            }
        """)
    }

    public define test_define_rules
    {
        var t = Interpreter()

        # define rules (verify returning a value)

        assert_parse_fails(t, """\
            SyntaxError: Missing return statement at end of function.\n    \
                from [test]:1:\n\
        """,
        """\
            define f : Integer {  }
        """)

        # define rules (forbid scoop)

        assert_parse_fails(t, """\
            SyntaxError: Expected 'a label', not '$1'.\n    \
                from [test]:1:\n\
        """,
        """\
            define test: $1 {}
        """)

        # define rules (no explicit Unit return)

        assert_parse_fails(t, """\
            SyntaxError: Unit return type is automatic. Omit instead.\n    \
                from [test]:1:\n\
        """,
        """\
            define f: Unit {}
        """)

        # define rules (redeclare parameter)

        assert_parse_fails(t, """\
            SyntaxError: a has already been declared.\n    \
                from [test]:1:\n\
        """,
        """\
            define f(a: Integer, a: Integer) {}
        """)

        # define rules (within an if block)

        assert_parse_fails(t, """\
            SyntaxError: Cannot define a function here.\n    \
                from [test]:2:\n\
        """,
        """\
            if 1: {
                define f {}
            }
        """)
    }

    public define test_list_rules
    {
        var t = Interpreter()

        # list rules (ignore expected mismatch for first element)

        assert_parse_fails(t, """\
            SyntaxError: Cannot assign type 'List[Integer]' to type 'List[String]'.\n    \
                from [test]:1:\n\
        """,
        """\
            var v: List[String] = [1]
        """)
    }

    public define test_hash_rules
    {
        var t = Interpreter()

        # hash rules (invalid key provided in type)

        assert_parse_fails(t, """\
            SyntaxError: 'Option[Integer]' is not a valid key for Hash.\n    \
                from [test]:1:\n\
        """,
        """\
            var v: Hash[Option[Integer], String] = [Some(1) => "a"]
        """)

        # hash rules (inferring invalid key)

        assert_parse_fails(t, """\
            SyntaxError: Type 'ByteString' is not a valid key for Hash.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = [B"" => 1]
        """)

        # hash rules (ignore expected mismatch for first key)

        assert_parse_fails(t, """\
            SyntaxError: Cannot assign type 'Hash[String, String]' to type 'Hash[Integer, String]'.\n    \
                from [test]:1:\n\
        """,
        """\
            var v: Hash[Integer, String] = ["1" => "1"]
        """)

        # hash rules (ignore expected mismatch for first value)

        assert_parse_fails(t, """\
            SyntaxError: Cannot assign type 'Hash[Integer, Integer]' to type 'Hash[Integer, String]'.\n    \
                from [test]:1:\n\
        """,
        """\
            var v: Hash[Integer, String] = [1 => 1]
        """)
    }

    public define test_incomplete_assign
    {
        var t = Interpreter()

        # incomplete assign (to global var)

        assert_parse_fails(t, """\
            SyntaxError: Right side of assignment is incomplete type 'Option[?]'.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = None
        """)

        # incomplete assign (to class property outside class)

        assert_parse_fails(t, """\
            SyntaxError: Right side of assignment is incomplete type 'Option[?]'.\n    \
                from [test]:6:\n\
        """,
        """\
            class Test {
                public var @v = 0
            }

            var v = Test()
            v.v = None
        """)
    }

    public define test_not_assignable
    {
        var t = Interpreter()

        # not assignable (subscript result of a call)

        assert_parse_fails(t, """\
            SyntaxError: Left side of = is not assignable.\n    \
                from [test]:5:\n\
        """,
        """\
            define f : List[Integer] {
                return [1]
            }

            f()[0] = 1
        """)

        # not assignable (parenth expr)

        assert_parse_fails(t, """\
            SyntaxError: Left side of = is not assignable.\n    \
                from [test]:3:\n\
        """,
        """\
            var a = 1
            if 1: {
                (a + a) = 1
            }
        """)

        # not assignable (assign to class method by dot)

        assert_parse_fails(t, """\
            SyntaxError: Left side of = is not assignable.\n    \
                from [test]:5:\n\
        """,
        """\
            class Example {
                public define f {}
            }

            Example.f = 10
        """)
    }

    public define test_var_rules
    {
        var t = Interpreter()

        # var rules (no self-initialization)

        assert_parse_fails(t, """\
            SyntaxError: Attempt to use uninitialized value 'v'.\n    \
                from [test]:1:\n\
        """,
        """\
            var v = v
        """)

        # var rules (init expression required)

        assert_parse_fails(t, """\
            SyntaxError: An initialization expression is required here.\n    \
                from [test]:2:\n\
        """,
        """\
            var v
        """)
    }

    public define test_verify_misc
    {
        var t = Interpreter()

        # verify misc (end tag in code-only file)

        assert_parse_fails(t, """\
            SyntaxError: Unexpected token '?>'.\n    \
                from [test]:1:\n\
        """,
        """\
            ?>
        """)

        # verify misc (wrong type for static Tuple)

        assert_parse_fails(t, """\
            SyntaxError: Cannot assign type 'Tuple[Integer]' to type 'Tuple[String]'.\n    \
                from [test]:1:\n\
        """,
        """\
            var v: Tuple[String] = <[1]>
        """)
    }
}
