import test

var t = test.t

t.scope(__file__)

t.interpret("Use a forward class method.",
    """
    class Example(var @x: Integer) {
        forward public define square(Integer): Integer { ... }

        public define square_x {
            @x = square(@x)
        }

        public define square(x: Integer): Integer { return x * x }
    }

    var v = Example(10)
    v.square_x()
    v.square_x()
    if v.x != 10000: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Mutual recursion using forward.",
    """\
    var v: List[Integer] = []
    forward define g(Integer) { ... }

    define f(n: Integer) {
        if n: {
            v.push(n)
            g(n - 1)
        }
    }

    define g(n: Integer) {
        if n: {
            v.push(n)
            f(n - 1)
        }
    }

    f(10)

    if v != [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Forward function with optargs and varargs.",
    """\
    var results: List[Integer] = []

    forward define varopt(*Integer, *Integer, *Integer...): Integer { ... }

    results = [varopt(),
               varopt(5),
               varopt(5, 10),
               varopt(5, 10, 20, 30)]

    if results != [6, 10, 18, 65]: {
        raise Exception("Failed.")
    }

    define varopt(x: *Integer = 1,
                  y: *Integer = 2,
                  extra: *Integer... = [3]): Integer
    {
        return x + y + extra.fold(0, (|a, b| a + b) )
    }
    """)
