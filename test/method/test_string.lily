import (Interpreter,
        TestCase) "../t/testing"

class TestStringMethods < TestCase
{
    public define test_ends_with
    {
        "1"     .ends_with("2")     |> assert_false
        "1"     .ends_with("12345") |> assert_false
        "1"     .ends_with("1")     |> assert_true
        "Ã€ÃˆÃŒaÃ’Ãœ".ends_with("aÃ’Ãœ")   |> assert_true
    }

    public define test_find
    {
         "12"    .find("1")    .is_some() |> assert_true
         "Ã€ÃˆaÃŒÃ’Ãœ".find("ÃˆaÃŒ")  .is_some() |> assert_true
         "1"     .find("12345").is_some() |> assert_false
         ""      .find("")     .is_some() |> assert_false
         "1234"  .find("5")    .is_some() |> assert_false
         "1234"  .find("1", 9) .is_some() |> assert_false
         "1234"  .find("3", 2) .is_some() |> assert_true
         "1234"  .find("3", 2) .is_some() |> assert_true
         "1234"  .find("3", -1).is_some() |> assert_false
         "1234"  .find("4", -1).is_some() |> assert_true
         assert_equal("abc,def,ghi".find(",", 5), Some(7))
    }

    public define test_format
    {
        assert_equal("{0}{0}"    .format(0),       "00")
        assert_equal("{00000000}".format(0),       "0")
        assert_equal("{1}a{2}"   .format(0, 1, 2), "1a2")
        assert_equal("abc"       .format(0, 1, 2), "abc")
        assert_equal("{}w{}"     .format(1, 2),    "1w2")
        assert_equal("{1} {} {0} {}".format(1, 2), "2 1 1 2")

        assert_equal("{{}}{}{{}}".format(1), "{}1{}")
        assert_equal("{{{{{}}}}}".format(1), "{{1}}")

        assert_raises("ValueError: Format specifier is empty.",
            (|| "{".format(0) ))

        assert_raises("ValueError: Format specifier is not numeric.",
            (|| "{a}".format(0) ))

        assert_raises("ValueError: Format must be between 0...99.",
               (|| "{100}".format(0) ))

        assert_raises("IndexError: Format specifier is too large.",
               (|| "{5}".format(0) ))

        assert_raises("IndexError: Format specifier is too large.",
               (|| "{}{}".format(0) ))

        assert_raises("ValueError: Format specifier is not closed.",
               (|| "{0".format(0) ))

        assert_raises("ValueError: Unescaped '}' in format string.",
               (|| "}".format(0) ))
    }

    public define test_html_encode
    {
        assert_equal("<&>"  .html_encode(), "&lt;&amp;&gt;")
        assert_equal("+<&>+".html_encode(), "+&lt;&amp;&gt;+")
        assert_equal("<+&+>".html_encode(), "&lt;+&amp;+&gt;")
        assert_equal("asdf" .html_encode(), "asdf")
    }

    public define test_is_alnum
    {
        ""        .is_alnum() |> assert_false
        "a"       .is_alnum() |> assert_true
        "abc123()".is_alnum() |> assert_false
        "Ã€ÃˆÃŒaÃ’Ãœ"  .is_alnum() |> assert_false
    }

    public define test_is_alpha
    {
        ""      .is_alpha() |> assert_false
        "a"     .is_alpha() |> assert_true
        "abc123".is_alpha() |> assert_false
        "Ã€ÃˆÃŒaÃ’Ãœ".is_alpha() |> assert_false
    }

    public define test_is_digit
    {
        ""      .is_digit() |> assert_false
        "123"   .is_digit() |> assert_true
        "abc123".is_digit() |> assert_false
        "Ã€ÃˆÃŒaÃ’Ãœ".is_digit() |> assert_false
    }

    public define test_is_space
    {
        ""       .is_space() |> assert_false
        " \t\r\n".is_space() |> assert_true
        "abc "   .is_space() |> assert_false
        "Ã€ÃˆÃŒaÃ’Ãœ" .is_space() |> assert_false
    }

    public define test_lower
    {
        assert_equal("abc".lower(), "abc")
        assert_equal("ABC".lower(), "abc")
    }

    public define test_lstrip
    {
        assert_equal("abc"     .lstrip(""),    "abc")
        assert_equal("aabbab12".lstrip("ab"),  "12")
        assert_equal("aaaaa"   .lstrip("a"),   "")
        assert_equal("Ã€ÃˆaÃŒÃ’Ãœ"  .lstrip("Ã€Ãˆ"),  "aÃŒÃ’Ãœ")
        assert_equal("Ã€Â¡aaÂ¡Ã€"  .lstrip("Ã€Â¢"),  "Â¡aaÂ¡Ã€")
        assert_equal("Â¥"       .lstrip("Â¦"),   "Â¥")
        assert_equal("Â¦"       .lstrip("Â¦Â¦"),  "")
    }

    public define test_parse_i
    {
        assert_equal("+12345"              .parse_i().unwrap(), 12345)
        assert_equal("0001"                .parse_i().unwrap(), 1)
        assert_equal("0"                   .parse_i().unwrap(), 0)
        assert_equal("9223372036854775807" .parse_i().unwrap(),
                     9223372036854775807)
        assert_equal("-9223372036854775808".parse_i().unwrap(),
                     -9223372036854775808)
        ""                    .parse_i().is_none() |> assert_true
        "9223372036854775808" .parse_i().is_none() |> assert_true
        "-9223372036854775809".parse_i().is_none() |> assert_true
        "123abc"              .parse_i().is_none() |> assert_true

        var min = -0x8000000000000000
        var max =  0x7FFFFFFFFFFFFFFF

        assert_equal("+0b11111".parse_i().unwrap(), 31)
        assert_equal( "0b11111".parse_i().unwrap(), 31)
        assert_equal("-0b1000".parse_i().unwrap(), -8)
        "0b".parse_i().is_none() |> assert_true
        assert_equal(
        "-0b1000000000000000000000000000000000000000000000000000000000000000"
        .parse_i().unwrap(), min)
        assert_equal(
         "0b111111111111111111111111111111111111111111111111111111111111111"
        .parse_i().unwrap(), max)

        assert_equal("+0c12345".parse_i().unwrap(), 5349)
        assert_equal( "0c12345".parse_i().unwrap(), 5349)
        assert_equal("-0c1000".parse_i().unwrap(), -512)
        "0c".parse_i().is_none() |> assert_true
        assert_equal("-0c1000000000000000000000".parse_i().unwrap(), min)
        assert_equal( "0c777777777777777777777".parse_i().unwrap(), max)

        assert_equal("+0x0123456789abcdef".parse_i().unwrap(), 0x0123456789abcdef)
        assert_equal( "0xABCDEF".parse_i().unwrap(), 11259375)
        assert_equal("-0xff".parse_i().unwrap(), -255)
        "0c".parse_i().is_none() |> assert_true
        assert_equal("-0x8000000000000000".parse_i().unwrap(), min)
        assert_equal( "0x7fffffffffffffff".parse_i().unwrap(), max)
    }

    public define test_replace
    {
        assert_equal("abc"      .replace("",     ""),    "abc")
        assert_equal("abc"      .replace("abcd", "0"),   "abc")
        assert_equal("a-b-c"    .replace("-",    "+"),   "a+b+c")
        assert_equal("-abc-"    .replace("-",    "+"),   "+abc+")
        assert_equal("---"      .replace("---",  ""),    "")
        assert_equal("a--b--c--".replace("--",   "+"),   "a+b+c+")
        assert_equal("asdf"     .replace("ag",   "xyz"), "asdf")
    }

    public define test_rstrip
    {
        assert_equal("abc"     .rstrip(""),    "abc")
        assert_equal("abc"     .rstrip("c"),   "ab")
        assert_equal("12aabbab".rstrip("ab"),  "12")
        assert_equal("aaaaa"   .rstrip("a"),   "")
        assert_equal("Ã€ÃˆaÃŒÃ’Ãœ"  .rstrip("ÃŒÃ’Ãœ"), "Ã€Ãˆa")
        assert_equal("Â¡"       .rstrip("Ã¡"),   "Â¡")
        assert_equal("Ã¡"       .rstrip("Ã¡"),   "")
        assert_equal("Ã€Â¡aaÂ¡Ã€"  .rstrip("Ã€Â¢"),  "Ã€Â¡aaÂ¡")
    }

    public define test_size
    {
        assert_equal(""   .size(), 0)
        assert_equal("abc".size(), 3)
    }

    public define test_slice
    {
        assert_equal("abc"  .slice(),       "abc")
        assert_equal("abc"  .slice(0, -1),  "ab")
        assert_equal("abc"  .slice(1, 2),   "b")
        assert_equal("abc"  .slice(2, 1),   "")
        assert_equal("abc"  .slice(1, 5),   "")
        assert_equal("Ã€"    .slice(0, 1),   "")
        assert_equal("ðŸ˜‚"   .slice(1),      "")

        assert_equal("abcde".slice(-4, -2), "bc")
        assert_equal("abc"  .slice(-4, 2),  "")
    }

    public define test_split
    {
        assert_equal("123"     .split(" "),    ["123"])
        assert_equal("1 2 3"   .split(" "),    ["1", "2", "3"])
        assert_equal("1 2 3"   .split(),       ["1", "2", "3"])
        assert_equal("1ab2ab"  .split("ab"),   ["1", "2", ""])
        assert_equal("1Ã€Ã€2Ã€"   .split("Ã€"),    ["1", "", "2", ""])
        assert_equal("   "     .split(" "),    ["", "", "", ""])
        assert_equal("abc.def" .split(".xyz"), ["abc.def"])
        assert_equal("aaaabbaa".split("aa"),   ["", "", "bb", ""])

        assert_equal("0.1.2.3".split(".", 2),      ["0", "1", "2.3"])
        assert_equal("0.1.2.3".split(".", 1),      ["0", "1.2.3"])
        assert_equal("0.1.2.3".split(".", 0),      ["0.1.2.3"])
        assert_equal("0.1.2.3".split(".", :max 1), ["0", "1.2.3"])

        "1 2 3".split(" ")[0].is_digit() |> assert_true

        assert_raises("ValueError: Cannot split by an empty string.",
                (|| "a".split("") ))
    }

    public define test_starts_with
    {
        "123"   .starts_with("12345") |> assert_false
        "1"     .starts_with("1")     |> assert_true
        "Ã€ÃˆÃŒaÃ’Ãœ".starts_with("Ã€Ãˆ")    |> assert_true
        "1"     .starts_with("2")     |> assert_false
        "123"   .starts_with("12345") |> assert_false
        "1"     .starts_with("1")     |> assert_true
        "Ã€ÃˆÃŒaÃ’Ãœ".starts_with("Ã€Ãˆ")    |> assert_true
    }

    public define test_strip
    {
        assert_equal("asdf"  .strip("z"),  "asdf")
        assert_equal(""      .strip("a"),  "")
        assert_equal("aabaa" .strip(""),   "aabaa")
        assert_equal("aaaaa" .strip("a"),  "")
        assert_equal("aabaa" .strip("a"),  "b")
        assert_equal("Ã€Â¡aaÂ¡Ã€".strip("Ã€"),  "Â¡aaÂ¡")
        assert_equal("Ã€Â¡aaÂ¡Ã€".strip("Ã€Â¢"), "Â¡aaÂ¡")
    }

    public define test_to_bytestring
    {
        assert_equal("abc".to_bytestring(), B"abc")
    }

    public define test_trim
    {
        assert_equal("abc"              .trim(), "abc")
        assert_equal("abcdef \n\n\n   " .trim(), "abcdef")
        assert_equal(" \n\n\n   abcdef" .trim(), "abcdef")
        assert_equal(" \t\r\nabc\t\r\n ".trim(), "abc")
        assert_equal("    "             .trim(), "")
    }

    public define test_upper
    {
        assert_equal("ABC".upper(), "ABC")
        assert_equal("abc".upper(), "ABC")
    }
}
