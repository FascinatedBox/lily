import (Interpreter,
        TestCase) "../t/testing"

class TestListMethods < TestCase
{
    public define test_clear
    {
        var v = [1, 2, 3]
        v.clear()
        assert_equal(v, [])

        var v2 = [Exception("a"), Exception("b"), Exception("c")]
        v2.clear()
        assert_equal(v2, [])
    }

    public define test_count
    {
        var v: List[Integer] = []

        assert_equal(v              .count(|a| true),       0)
        assert_equal([1, 2, 3, 4, 5].count(|a| a % 2 == 0), 2)
        assert_equal([1, 2, 3]      .count(|a| true),       3)
        assert_equal([1, 2, 3]      .count(|a| false),      0)

        v = [1, 2, 3, 4, 5]

        assert_equal(v.count(|a| v.clear() true), 1)
    }

    public define test_delete_at
    {
        var v = [1, 2, 3]
        v.delete_at(0)
        assert_equal(v, [2, 3])

        var v2 = [1, 2, 3]
        v2.delete_at(2)
        assert_equal(v2, [1, 2])

        var v3 = [1, 2, 3]
        v3.delete_at(-1)
        assert_equal(v3, [1, 2])

        assert_raises(
                "IndexError: Index -2 is too small for list (minimum: -1)",
                (|| [1].delete_at(-2) ))
        assert_raises(
                "IndexError: Index 5 is too large for list (maximum: 1)",
                (|| [1].delete_at(5) ))
        assert_raises(
                "IndexError: Cannot delete from an empty list.",
                (|| [].@(List[Integer]).delete_at(5) ))
        assert_raises(
                "IndexError: Index -1000000000000 is too small for list (minimum: -1)",
                (|| [1].delete_at(-1000000000000) ))
        assert_raises(
                "IndexError: Index 1000000000000 is too large for list (maximum: 1)",
                (|| [1].delete_at(1000000000000) ))
    }

    private define each_order
    {
        var v = [0, 1, 2]
        var results = [0, 0, 0]
        var k = 0

        v.each(|e|
            k += 1
            results[e] = k
        )

        assert_equal(results, [1, 2, 3])
    }

    private define each_empty
    {
        var count = 0
        var v: List[Integer] = []

        v.each(|e| count += 1 )

        assert_equal(count, 0)
    }

    private define each_clear
    {
        var count = 0
        var v: List[Integer] = [1, 2, 3]

        v.each(|e| v.clear() count += 1 )

        assert_equal(count, 1)
    }

    public define test_each
    {
        each_order()
        each_empty()
        each_clear()
    }

    private define each_index_order
    {
        var v = [3, 2, 1]
        var results = [0, 0, 0]
        var k = 0

        v.each_index(|i|
            k += 1
            results[i] = k
        )

        assert_equal(results, [1, 2, 3])
    }

    private define each_index_clear
    {
        var count = 0
        var v: List[Integer] = [1, 2, 3]

        v.each_index(|e| v.clear() count += 1 )

        assert_equal(count, 1)
    }

    public define test_each_index
    {
        each_index_order()
        each_index_clear()
    }

    public define test_fill
    {
        assert_equal(List.fill(5,  (|a| a + a)),       [0, 2, 4, 6, 8])
        assert_equal(List.fill(3,  (|a| a.to_s() )),   ["0", "1", "2"])
        assert_equal(List.fill(0,  (|a| a )),          [])
        assert_equal(List.fill(-5, (|a| a )),          [])
        assert_equal(List.fill(10000000000, (|a| a )), [])
    }

    public define test_fold
    {
        [].@(List[Integer]).fold(0, (|a, b| 0 / 0))

        assert_equal([1, 2, 3].fold(0, (|a, b| a + b)), 6)

        var v = [1, 2, 3]

        assert_equal(v.fold(4, (|a, b| v.clear() a + b)), 5)
    }

    public define test_get
    {
        assert_equal([1, 2, 3].get(0).unwrap(),  1)
        assert_equal([1, 2, 3].get(-1).unwrap(), 3)

        assert_true([1, 2, 3].get(5) .is_none())
        assert_true([1, 2, 3].get(-5).is_none())
        assert_true([1, 2, 3].get(3) .is_none())
        assert_true([1, 2, 3].get(-3).is_some())
        assert_true([1].get(10000000000).is_none())
        assert_true([1].get(-10000000000).is_none())
    }

    public define test_insert
    {
        var v = [1]
        v.insert(0, 0)
        assert_equal(v, [0, 1])

        var v2 = [1]
        v2.insert(1, 2)
        assert_equal(v2, [1, 2])

        var v3 = [1]
        v3.insert(1, 2)
        assert_equal(v3, [1, 2])

        var v4 = [1]
        v4.insert(-1, 2)
        assert_equal(v4, [2, 1])

        assert_raises(
                "IndexError: Index 5 is too large for list (maximum: 1)",
                (|| [1].insert(5, 100) ))
        assert_raises(
                "IndexError: Index -10 is too small for list (minimum: -1)",
                (|| [1].insert(-10, 200) ))
        assert_raises(
                "IndexError: Index 10000000000 is too large for list (maximum: 1)",
                (|| [1].insert(10000000000, 100) ))
        assert_raises(
                "IndexError: Index -10000000000 is too small for list (minimum: -1)",
                (|| [1].insert(-10000000000, 200) ))
    }

    public define test_join
    {
        assert_equal([]       .join(),     "")
        assert_equal([]       .join(","),  "")
        assert_equal([1]      .join(),     "1")
        assert_equal([1]      .join(" "),  "1")
        assert_equal([1, 2, 3].join(),     "123")
        assert_equal([1, 2, 3].join(", "), "1, 2, 3")
    }

    public define test_map
    {
        var v: List[Integer] = []

        assert_equal(v        .map(Integer.to_s), [])
        assert_equal([1, 2, 3].map(Integer.to_s), ["1", "2", "3"])
    }

    public define test_pop
    {
        var v = [1]
        v.pop()
        assert_equal(v, [])

        assert_raises(
                "IndexError: Pop from an empty list.",
                (|| var w: List[Integer] = []
                    w.pop()
                    unit ))
    }

    public define test_reject
    {
        var v: List[Integer] = []

        v.reject(|r| 0 / 0 == 0)

        assert_equal([1, 2, 3].reject(|i| (i % 2) == 1), [2])
        assert_equal([1, 2, 3].reject(|i| (i % 2) == 0), [1, 3])
        assert_equal([1, 2, 3].reject(|i| false),        [1, 2, 3])
        assert_equal([1, 2, 3].reject(|i| true),         [])

        v = [1, 2, 3]

        assert_equal(v.reject(|r| v.clear() false), [])
    }

    public define test_repeat
    {
        var v = List.repeat(5, 1)
        assert_equal(v, [1, 1, 1, 1, 1])

        var v2 = List.repeat(5, Some(1))
        assert_equal(v2, [Some(1), Some(1), Some(1), Some(1), Some(1)])

        var v3: List[Option[Integer]] = List.repeat(5, None)
        assert_equal(v3, [None, None, None, None, None])

        var v4 = List.repeat(0, Some(1))
        assert_equal(v4, [])

        assert_raises(
                "ValueError: Repeat count must be >= 0 (-5 given).",
                (|| List.repeat(-5, 123) ))

        assert_raises(
                "ValueError: Repeat count is far too large (10000000000 given).",
                (|| List.repeat(10000000000, 123) ))
    }

    public define test_select
    {
        var v: List[Integer] = []

        v.@(List[Integer]).select(|s| 0 / 0 == 0)

        assert_equal([1, 2, 3].select(|i| (i % 2) == 1), [1, 3])
        assert_equal([1, 2, 3].select(|i| (i % 2) == 0), [2])
        assert_equal([1, 2, 3].select(|i| false),        [])
        assert_equal([1, 2, 3].select(|i| true),         [1, 2, 3])

        v = [1, 2, 3]

        assert_equal(v.select(|r| v.clear() true), [])
    }

    public define test_shift
    {
        var v = [1, 2, 3]
        v.shift()
        v.shift()
        assert_equal(v, [3])

        var v2 = ["a", "b", "c"]
        assert_equal(v2.shift(), "a")

        assert_raises(
                "IndexError: Shift on an empty list.",
                (|| var w: List[Integer] = []
                    w.shift()
                    unit ))
    }

    public define test_slice
    {
        assert_equal([1, 2, 3]      .slice(),       [1, 2, 3])
        assert_equal([1, 2, 3]      .slice(0, -1),  [1, 2])
        assert_equal([1, 2, 3]      .slice(1, 2),   [2])
        assert_equal([1, 2, 3]      .slice(2, 1),   [])
        assert_equal([1, 2, 3]      .slice(1, 5),   [])
        assert_equal([1, 2, 3, 4, 5].slice(-4, -2), [2, 3])
    }

    public define test_unshift
    {
        var v = [1]
        v.unshift(0)
        v.unshift(-1)
        assert_equal(v, [-1, 0, 1])

        var v2 = [1]
        v2.unshift(2)
          .unshift(3)
        assert_equal(v2, [3, 2, 1])
    }

    public define test_zip
    {
        var v = List.zip([1, 2], ["3", "4"])
        assert_equal(v, [<[1, "3"]>, <[2, "4"]>])

        var v2 = List.zip([1, 2], ["3", "4"], [5.0, 6.0], [true, false])
        assert_equal(v2, [<[1, "3", 5.0, true]>, <[2, "4", 6.0, false]>])

        var v3 = List.zip([1, 2])
        assert_equal(v3, [<[1]>, <[2]>])

        var v4 = List.zip([1, 2], [].@(List[Integer]))
        assert_equal(v4, [])

        var v5 = List.zip([1, 2, 3, 4, 5], ["5", "6", "7"], [8.0, 9.0, 10.0, 11.0])
        assert_equal(v5, [<[1, "5", 8.0]>, <[2, "6", 9.0]>, <[3, "7", 10.0]>])
    }
}
