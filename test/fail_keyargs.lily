import test

var t = test.t

t.scope(__file__)

t.interpret_for_error("Posarg after keyarg.",
    """\
    SyntaxError: Positional argument after keyword argument.\n    \
        from test\/[subinterp]:5:\
    """,
    """
    define f(:a a: Integer, :b b: String) {
    }

    f(:b 1, 5)
    """)

t.interpret_for_error("Keyarg that isn't there.",
    """\
    SyntaxError: f does not have a keyword named ':b'.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f(:a a: Integer) {  }

    f(:b 1)
    """)

t.interpret_for_error("Stacked keyarg.",
    """\
    SyntaxError: Unexpected token 'a named argument'.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f(:a a: Integer) {  }

    f(:a :a 1)
    """)

t.interpret_for_error("Keyarg too late.",
    """\
    SyntaxError: Unexpected token 'a named argument'.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f(:a a: Integer) {  }

    f(0 :a 5)
    """)

t.interpret_for_error("Keyarg in a static list.",
    """\
    SyntaxError: Unexpected token 'a named argument'.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f(:a a: Integer) {  }

    var v = [:a 5]
    """)

t.interpret_for_error("Keyarg outside of anything.",
    """\
    SyntaxError: Unexpected token 'a named argument'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = :a 5
    """)

t.interpret_for_error("Keyarg with binary preceding it.",
    """\
    SyntaxError: Unexpected token 'a named argument'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = 1 + :a 5
    """)

t.interpret_for_error("Keyarg missing key arguments.",
    """\
    SyntaxError: Call to f is missing parameters:\n\
    * Parameter #1 (:a) of type Integer.\n\
    * Parameter #3 (:c) of type Double.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f(:a a: Integer, :b b: String, :c c: Double) {}

    f(:b "a")
    """)

t.interpret_for_error("Keyarg missing positional arguments.",
    """\
    SyntaxError: Call to f is missing parameters:\n\
    * Parameter #1 of type Integer.\n\
    * Parameter #3 of type Double.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f(a: Integer, :b b: String, c: Double) {}

    f(:b "a")
    """)

t.interpret_for_error("Keyarg missing key arguments (varargs).",
    """\
    SyntaxError: Call to f is missing parameters:\n\
    * Parameter #1 (:a) of type Integer.\n\
    * Parameter #3 (:c) of type Double.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f(:a a: Integer, :b b: String, :c c: Double, :d d: Byte...) {}

    f(:b "a")
    """)

t.interpret_for_error("Keyarg missing key arguments (some optional).",
    """\
    SyntaxError: Call to f is missing parameters:\n\
    * Parameter #1 (:a) of type Integer.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    define f(:a a: Integer,
             :b b: String,
             :c c: *Double=0.0,
             :d d: *Boolean=true) {}

    f(:b "a")
    """)

t.interpret_for_error("Two keyargs with a duplicate target.",
    """\
    SyntaxError: Call to f has multiple values for parameter ':a'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    define f(:a a: Integer, :b b: Integer) {}
    f(:a 1, :a 2)
    """)

t.interpret_for_error("Unsupported keyargs on plain define.",
    """\
    SyntaxError: f does not specify any keyword arguments.\n    \
        from test/[subinterp]:3:\
    """,
    """\
    define f(a: Integer) {}

    f(:a 1)
    """)

t.interpret_for_error("Unsupported keyargs on class method.",
    """\
    SyntaxError: Example.f does not specify any keyword arguments.\n    \
        from test/[subinterp]:5:\
    """,
    """\
    class Example {
        public define f(a: Integer) {}
    }

    Example().f(:a 1)
    """)

t.interpret_for_error("Unsupported keyargs on enum method.",
    """\
    SyntaxError: Example.f does not specify any keyword arguments.\n    \
        from test/[subinterp]:7:\
    """,
    """\
    enum Example {
        One,
        Two
        define f(a: Integer) {}
    }

    One.f(:a 1)
    """)

t.interpret_for_error("Unsupported keyargs on lambda.",
    """\
    SyntaxError: v is not capable of receiving keyword arguments.\n    \
        from test/[subinterp]:3:\
    """,
    """\
    var v = (|a: Integer| 0 )

    v(:a 1)
    """)

t.interpret_for_error("Unsupported keyargs on upvalue.",
    """\
    SyntaxError: g is not capable of receiving keyword arguments.\n    \
        from test/[subinterp]:4:\
    """,
    """\
    define f(:a a: Integer) {
        var g = f
        define h {
            g(:a 1)
        }
    }
    """)

t.interpret_for_error("Keyargs too many args.",
    """\
    SyntaxError: Wrong number of arguments to f (4 for 1).\n    \
        from test/[subinterp]:2:\
    """,
    """\
    define f(:a a: Integer) {}
    f(1, 2, 3, :a 1)
    """)

t.interpret_for_error("Keyargs too many args.",
    """\
    SyntaxError: Wrong number of arguments to f (4 for 1).\n    \
        from test/[subinterp]:2:\
    """,
    """\
    define f(:a a: Integer) {}
    f(1, 2, 3, :a 1)
    """)

t.interpret_for_error("Keyargs wrong arg type.",
    """\
    SyntaxError: Argument #1 to f is invalid:\n\
        Expected Type: Integer\n\
        Received Type: String\n    \
        from test/[subinterp]:2:\
    """,
    """\
    define f(:a a: Integer) {}
    f(:a "")
    """)

t.interpret_for_error("Keyarg against nothing.",
    """\
    SyntaxError: Unexpected token 'a named argument'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    if 1: {
        :a 1
    }
    """)
