`import test

var t = test.t

t.scope(__file__)

t.assert("String.ends_with '1' and '2'.",
         (|| "1".ends_with("2") == false ))

t.assert("String.ends_with '1' and '12345'.",
         (|| "1".ends_with("12345") == false ))

t.assert("String.ends_with '1' and '1'.",
         (|| "1".ends_with("1") ))

t.assert("String.ends_with utf-8 success case.",
         (|| "ÀÈÌaÒÜ".ends_with("aÒÜ") ))


t.assert("String.find with '12' and '1'.",
         (|| "12".find("1").is_some() ))

t.assert("String.find utf-8 success case.",
         (|| "ÀÈaÌÒÜ".find("ÈaÌ").is_some() ))

t.assert("String.find where needle exceeds haystack.",
         (|| "1".find("12345").is_none() ))

t.assert("String.find where haystack is empty.",
         (|| "".find("").is_none() ))

t.assert("String.find needle not in haystack.",
         (|| "1234".find("5").is_none() ))

t.assert("String.find where start is past end.",
         (|| "1234".find("1", 9).is_none() ))

t.assert("String.find where match begins at the start.",
         (|| "1234".find("3", 2).is_some() ))


t.assert("String.format works for {0}{0}.",
         (|| "{0}{0}".format(0) == "00" ))

t.assert("String.format works on leading zeroes.",
         (|| "{00000000}".format(0) == "0" ))

t.assert("String.format works for {1}a{2}.",
         (|| "{1}a{2}".format(0,1,2) == "1a2" ))

t.assert("String.format for unformatted input.",
         (|| "abc".format(0,1,2) == "abc" ))

t.expect_error("String.format fails on unterminated specifier.",
               "ValueError: Format specifier is empty.",
               (|| "{".format(0) ))

t.expect_error("String.format fails on {a}.",
               "ValueError: Format specifier is empty.",
               (|| "{a}".format(0) ))

t.expect_error("String.format fails on {100}.",
               "ValueError: Format must be between 0...99.",
               (|| "{100}".format(0) ))

t.expect_error("String.format fails on {}.",
               "ValueError: Format specifier is empty.",
               (|| "{}".format(0) ))

t.expect_error("String.format fails on an index that's too large.",
               "IndexError: Format specifier is too large.",
               (|| "{5}".format(0) ))



t.assert("String.html_encode full spectrum.",
         (|| "<&>".html_encode() == "&lt;&amp;&gt;" ))

t.assert("String.html_encode without replacing start + end.",
         (|| "+<&>+".html_encode() == "+&lt;&amp;&gt;+" ))

t.assert("String.html_encode with text interleaving replacements.",
         (|| "<+&+>".html_encode() == "&lt;+&amp;+&gt;" ))


t.assert("String.is_alnum empty false case.",
         (|| "".is_alnum() == false ))

t.assert("String.is_alnum with true case.",
         (|| "a".is_alnum() ))

t.assert("String.is_alnum denies partial alpha.",
         (|| "abc123()".is_alnum() == false ))


t.assert("String.is_alpha empty false case.",
         (|| "".is_alpha() == false ))

t.assert("String.is_alpha with true case.",
         (|| "a".is_alpha() ))

t.assert("String.is_alpha denies partial alpha.",
         (|| "abc123".is_alpha() == false ))


t.assert("String.is_digit empty false case.",
         (|| "".is_digit() == false ))

t.assert("String.is_digit with true case.",
         (|| "123".is_digit() ))

t.assert("String.is_digit denies partial digit.",
         (|| "abc123".is_digit() == false ))


t.assert("String.is_space empty false case.",
         (|| "".is_space() == false ))
t.assert("String.is_space full spectrum true case.",
         (|| " \t\r\n".is_space() ))

t.assert("String.is_space denies partial space.",
         (|| "abc ".is_space() == false ))


t.assert("String.lstrip empty remove string.",
         (|| "abc".lstrip("") == "abc" ))

t.assert("String.lstrip multi remove.",
         (|| "aabbab12".lstrip("ab") == "12" ))

t.assert("String.lstrip removing all.",
         (|| "aaaaa".lstrip("a") == "" ))

t.assert("String.lstrip with utf-8 chunk.",
         (|| "ÀÈaÌÒÜ".lstrip("ÀÈ") == "aÌÒÜ" ))


t.assert("String.lower ignores 'abc'.",
         (|| "abc".lower() == "abc" ))

t.assert("String.lower basic success case.",
         (|| "ABC".lower() == "abc" ))

t.assert("String.parse_i positive lead.",
         (|| "+12345".parse_i().unwrap() == 12345 ))

t.assert("String.parse_i leading zeroes.",
         (|| "0001".parse_i().unwrap() == 1 ))

t.assert("String.parse_i parses int max.",
         (|| "9223372036854775807".parse_i().unwrap() == 9223372036854775807 ))

t.assert("String.parse_i parses int min.",
         (|| "-9223372036854775808".parse_i().unwrap() == -9223372036854775808 ))

t.assert("String.parse_i fails with empty string.",
         (|| "".parse_i().is_none() ))

t.assert("String.parse_i rejects int max + 1.",
         (|| "9223372036854775808".parse_i().is_none() ))

t.assert("String.parse_i rejects int min - 1.",
         (|| "-9223372036854775809".parse_i().is_none() ))

t.assert("String.parse_i rejects '123abc'.",
         (|| "123abc".parse_i().is_none() ))

t.assert("String.parse_i parses 0.",
         (|| "0".parse_i().is_some() ))


t.assert("String.replace does nothing for empty input.",
         (|| "abc".replace("", "") == "abc" ))

t.assert("String.replace ignores too-long input.",
         (|| "abc".replace("abcd", "0") == "abc" ))

t.assert("String.replace single character in middle.",
         (|| "a-b-c".replace("-", "+") == "a+b+c" ))

t.assert("String.replace single character at edges.",
         (|| "-abc-".replace("-", "+") == "+abc+" ))

t.assert("String.replace all to nothing.",
         (|| "---".replace("---", "") == "" ))

t.assert("String.replace multi character.",
         (|| "a--b--c--".replace("--", "+") == "a+b+c+" ))


t.assert("String.rstrip empty remove string.",
         (|| "abc".rstrip("") == "abc" ))

t.assert("String.rstrip multi remove.",
         (|| "12aabbab".rstrip("ab") == "12" ))

t.assert("String.rstrip removing all.",
         (|| "aaaaa".rstrip("a") == "" ))

t.assert("String.rstrip with utf-8 chunk.",
         (|| "ÀÈaÌÒÜ".rstrip("ÌÒÜ") == "ÀÈa" ))


t.assert("String.slice defaults copy the string.",
         (|| "abc".slice() == "abc" ))

t.assert("String.slice basic 0...-1 works.",
         (|| "abc".slice(0, -1) == "ab" ))

t.assert("String.slice basic 1...2 works (b).",
         (|| "abc".slice(1, 2) == "b" ))

t.assert("String.slice gives empty string for reversed indexes.",
         (|| "abc".slice(2, 1) == "" ))

t.assert("String.slice gives empty string for too big indexes.",
         (|| "abc".slice(1, 5) == "" ))

t.assert("String.slice gives empty string instead of broken utf-8.",
         (|| "À".slice(0, 1) == "" ))


t.assert("String.starts_with '123' and '12345'.",
         (|| "123".starts_with("12345") == false ))

t.assert("String.starts_with '1' and '1'.",
         (|| "1".starts_with("1") ))

t.assert("String.starts_with utf-8 success case.",
         (|| "ÀÈÌaÒÜ".starts_with("ÀÈ") ))

t.assert("String.starts_with '1' and '2'.",
         (|| "1".starts_with("2") == false ))

t.assert("String.starts_with '123' and '12345'.",
         (|| "123".starts_with("12345") == false ))

t.assert("String.starts_with '1' and '1'.",
         (|| "1".starts_with("1") ))

t.assert("String.starts_with utf-8 success case.",
         (|| "ÀÈÌaÒÜ".starts_with("ÀÈ") ))


t.assert("String.split no match.",
         (|| "123".split(" ") == ["123"] ))

t.assert("String.split simple success case.",
         (|| "1 2 3".split(" ") == ["1", "2", "3"] ))

t.assert("String.split default to split by ' '.",
         (|| "1 2 3".split() == ["1", "2", "3"] ))

t.assert("String.split split by wide ascii.",
         (|| "1ab2ab".split("ab") == ["1", "2", ""] ))

t.assert("String.split with utf-8 chunk.",
         (|| "1ÀÀ2À".split("À") == ["1", "", "2", ""] ))

t.assert("String.split where all chars match.",
         (|| "   ".split(" ") == ["", "", "", ""] ))

t.assert("String.split with incomplete match.",
         (|| "abc.def".split(".xyz") == ["abc.def"] ))

t.assert("String.split doesn't generate a broken first string.",
         (|| "1 2 3".split(" ")[0].is_digit() ))

t.expect_error("String.split raises ValueError for empty string.",
               "ValueError: Cannot split by empty string.",
               (|| "a".split("") ))


t.assert("String.to_bytestring basic success case.",
         (|| "abc".to_bytestring() == B"abc" ))


t.assert("String.trim ignores non-spaces.",
         (|| "abc".trim() == "abc" ))

t.assert("String.trim spectrum removal.",
         (|| " \t\r\nabc\t\r\n ".trim() == "abc" ))

t.assert("String.trim removing everything.",
         (|| "    ".trim() == "" ))


t.assert("String.upper ignores 'ABC'.",
         (|| "ABC".upper() == "ABC" ))

t.assert("String.upper basic success case.",
         (|| "abc".upper() == "ABC" ))

t.interpret("Verify string equality.",
    """
    define less(a: String, b: String): Boolean
    { return a < b }
    define less_eq(a: String, b: String): Boolean
    { return a <= b }
    define greater(a: String, b: String): Boolean
    { return a > b }
    define greater_eq(a: String, b: String): Boolean
    { return a >= b }

    var tests =
    [
        <["A", "A", greater, false]>,
        <["B", "A", greater, true]>,
        <["Z", "A", greater, true]>,

        <["A", "A", greater_eq, true]>,
        <["A", "B", greater_eq, false]>,
        <["B", "A", greater_eq, true]>,
        <["Z", "A", greater_eq, true]>,

        <["A", "A", less, false]>,
        <["A", "B", less, true]>,
        <["A", "Z", less, true]>,

        <["A", "A", less_eq, true]>,
        <["B", "A", less_eq, false]>,
        <["A", "B", less_eq, true]>,
        <["A", "Z", less_eq, true]>
    ]

    for i in 0...tests.size() - 1: {
        var t = tests[i]
        var left = t[0]
        var right = t[1]
        var fn = t[2]
        var expect = t[3]

        if fn(left, right) != expect: {
            raise Exception("Failed.")
        }
    }
    """)
