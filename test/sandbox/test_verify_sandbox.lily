import (Interpreter,
        TestCase) "../t/testing"

class TestVerifySandbox < TestCase
{
    public define test_100_doors
    {
        var t = Interpreter()

        assert_parse_string(t, """
            var doors = List.repeat(100, false)

            for i in 0...99: {
                for j in i...99 by i + 1: {
                    doors[j] = !doors[j]
                }
            }

            # The type must be specified since the List starts off empty.
            var open_doors: List[Integer] = []

            doors.each_index(|i|
                if doors[i]: {
                    open_doors.push(i + 1)
                }
            )

            if open_doors != [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]: {
                raise Exception("Failed.")
            }
        """)
    }

    public define test_json
    {
        var t = Interpreter()

        assert_parse_string(t, """
            enum TreeObject {
                TreeValue(String),
                TreeList(TreeObject...)

                define as_string: String {
                    match self: {
                        case TreeValue(v):
                            return v

                        case TreeList(l):
                            var result = "["
                            var size = l.size() - 1

                            for i in 0...size: {
                                result = "{0}{1}".format(result, l[i].as_string())
                                if i != size: {
                                    result = result ++ " "
                                }
                            }

                            return result ++ "]"
                    }
                }
            }

            var v =
                TreeList(
                    TreeList(
                        TreeValue("abc"),
                        TreeValue("def")
                    ),
                    TreeValue("1"),
                    TreeValue("2"),
                    TreeList(
                        TreeList(
                            TreeValue("0")
                        )
                    )
                ).as_string()

            if v != "[[abc def] 1 2 [[0]]]": {
                raise Exception("Failed.")
            }
        """)
    }

    public define test_rpn
    {
        var t = Interpreter()

        assert_parse_string(t, """
            var math_ops = ["+" => (|a: Integer, b: Integer| a + b),
                            "-" => (|a, b| a - b),
                            "*" => (|a, b| a * b),
                            "/" => (|a, b| a / b)]

            define rpn(input: String): Result[String, List[Integer]]
            {
                var values = input.split(" ").reject(|r| r.is_space() )
                var stack: List[Integer] = []

                for i in 0...values.size() - 1: {
                    var v = values[i]
                    match v.parse_i(): {
                        case Some(number):
                            stack.push(number)
                        case None:
                            if stack.size() < 2: {
                                return Failure("Stack underflow.")
                            }

                            var right = stack.pop()
                            var left = stack.pop()
                            try: {
                                var op_fn = math_ops[v]
                                var op_value = op_fn(left, right)
                                stack.push(op_value)
                            except KeyError:
                                return Failure("Invalid operation {0}.".format(v))
                            except DivisionByZeroError:
                                return Failure("Attempt to divide by zero.")
                            }
                    }
                }

                return Success(stack)
            }

            var lines = [
                "1 2 3 4 * + -",
                "2 2 2 2 * *",
                "*",
                "1 2 ?"
                ]

            lines = lines.map(|l| "{0}: {1}".format(l, rpn(l) ) )

            var expect = [
                "1 2 3 4 * + -: Success([-13])",
                "2 2 2 2 * *: Success([2, 8])",
                "*: Failure(\\"Stack underflow.\\")",
                "1 2 ?: Failure(\\"Invalid operation ?.\\")"
            ]

            if lines != expect: {
                raise Exception("Failed.")
            }
        """)
    }
}
