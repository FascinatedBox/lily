import (Interpreter,
        TestCase) "../t/testing", sys

class TestPkgSys < TestCase
{
    public define test_exit
    {
        var t = Interpreter()

        t.parse_string("[ctx]", """
            import sys

            sys.exit(69)
        """)

        assert_equal(t.exit_code(), 69)
    }

    public define test_exit_failure_success
    {
        var failure_t = Interpreter()
        var success_t = Interpreter()

        success_t.parse_string("[ctx]", "var v = 1")
        failure_t.parse_string("[ctx]", "0 / 0")

        var success_exit = success_t.exit_code()
        var failure_exit = failure_t.exit_code()

        assert_not_equal(success_exit, failure_exit)

        success_t.parse_string("[ctx]", """
            import sys

            sys.exit_failure()
        """)
        failure_t.parse_string("[ctx]", """
            import sys

            sys.exit_success()
        """)

        assert_equal(success_exit, failure_t.exit_code())
        assert_equal(failure_exit, success_t.exit_code())
    }

    public define test_getenv
    {
        var home = sys.getenv("HOME")

        var impossible = sys.getenv("ABCDEFG")

        impossible.is_none() |> assert_true
    }

    public define test_recursion_limit
    {
        var t = Interpreter()

        # recursion limit (base case to fetch existing value)

        assert_parse_string(t, """
            import sys

            sys.set_recursion_limit(5)

            if sys.recursion_limit() != 5: {
                raise Exception("Failed.")
            }
        """)
    }

    public define test_set_recursion_limit
    {
        var t = Interpreter()

        # set recursion limit (base case for limit)

        assert_parse_fails(t, """\
            RuntimeError: Function call recursion limit reached.
            Traceback:
                from [test]:4: in f
                from [test]:4: in f
                from [test]:4: in f
                from [test]:4: in f
                from [test]:4: in f
                from [test]:5: in __main__
        """,
        """
            import sys
            sys.set_recursion_limit(5)
            define f { f() }
            f()
        """)

        # set recursion limit (too high)

        t = Interpreter()
        assert_parse_fails(t, """\
            ValueError: Limit value (9999999999999999) is not reasonable.
            Traceback:
                from [sys]: in set_recursion_limit
                from [test]:3: in __main__
        """,
        """
            import sys
            sys.set_recursion_limit(9999999999999999)
        """)

        # set recursion limit (too low)

        t = Interpreter()
        assert_parse_fails(t, """\
            ValueError: Limit value (1) is lower than the current recursion depth.
            Traceback:
                from [sys]: in set_recursion_limit
                from [test]:5: in f
                from [test]:8: in __main__
        """,
        """
            import sys

            define f {
                sys.set_recursion_limit(1)
            }

            f()
        """)
    }
}
