import (Interpreter,
        TestCase) "../t/testing", utf8

class TestPkgUTF8 < TestCase
{
    public define test_as_list
    {
        assert_equal(utf8.as_list(""), [])
        assert_equal(utf8.as_list("abc"), [97, 98, 99])
        assert_equal(utf8.as_list("café"), [99, 97, 102, 233])
        assert_equal(utf8.as_list("🙂🙁"), [128578, 128577])
        assert_equal(utf8.as_list(" ​ "), [32, 8203, 32])
    }

    public define test_compare
    {
        assert_equal(utf8.compare("", ""), 0)
        assert_equal(utf8.compare("abc", ""), 1)
        assert_equal(utf8.compare("abc", "def"), -1)
        assert_equal(utf8.compare("🙂", "🙂"), 0)
        assert_equal(utf8.compare("🙁", "🙂"), -1)
        assert_equal(utf8.compare("🙂🙁", "🙁🙂"), 1)
        assert_equal(utf8.compare(" ​ ", " ​ "), 0)
        assert_equal(utf8.compare(" ​ ", "   "), 1)

        assert_equal(["🙂🙁", "🙂🙂", "🙁🙂", "🙁🙁"].sort(utf8.compare),
                ["🙁🙁", "🙁🙂", "🙂🙁", "🙂🙂"])
    }

    public define test_each_codepoint
    {
        foreach string in ["", "abc", "café", "🙂🙁", " ​ "]: {
            var codepoints: List[Integer] = []
            utf8.each_codepoint(string, (|c| codepoints.push(c)))
            assert_equal(codepoints, utf8.as_list(string))
        }
    }

    public define test_get
    {
        assert_equal(utf8.get("abc", 1), 98)
        assert_equal(utf8.get("café", 3), 233)
        assert_equal(utf8.get("🙂🙁", -2), 128578)
        assert_equal(utf8.get(" ​ ", 1), 8203)

        assert_raises("IndexError: Index 0 is out of range.",
                (|| utf8.get("", 0) ))

        assert_raises("IndexError: Index 2 is out of range.",
                (|| utf8.get("🙂🙁", 2) ))

        assert_raises("IndexError: Index -3 is out of range.",
                (|| utf8.get("🙂🙁", -3) ))
    }

    public define test_length
    {
        assert_equal(utf8.length(""), 0)
        assert_equal(utf8.length("abc"), 3)
        assert_equal(utf8.length("café"), 4)
        assert_equal(utf8.length("🙂🙁"), 2)
        assert_equal(utf8.length(" ​ "), 3)
    }

    public define test_slice
    {
        assert_equal(utf8.slice("abcdef", 1, 5), "bcde")
        assert_equal(utf8.slice("café", 1, 4), "afé")
        assert_equal(utf8.slice("🙂🙁", 0, 2), "🙂🙁")
        assert_equal(utf8.slice(" ​ ", 1, 2), "​")

        assert_equal(utf8.slice("abcdef", 2, -2), "cd")
        assert_equal(utf8.slice("🙂🙁🙂🙁", -3, -1), "🙁🙂")
        assert_equal(utf8.slice(" ​ ", -2, -1), "​")

        assert_equal(utf8.slice("abcdef", 3), "def")
        assert_equal(utf8.slice("café", -3), "afé")
        assert_equal(utf8.slice("🙂🙁", 1), "🙁")

        assert_equal(utf8.slice(""), "")
        assert_equal(utf8.slice("abcdef"), "abcdef")
        assert_equal(utf8.slice("café"), "café")
        assert_equal(utf8.slice("🙂🙁"), "🙂🙁")

        assert_equal(utf8.slice("café", 4), "")
        assert_equal(utf8.slice("café", -5), "")
        assert_equal(utf8.slice("café", 0, 5), "")
        assert_equal(utf8.slice("café", 2, 1), "")
        assert_equal(utf8.slice("café", -2, 1), "")
        assert_equal(utf8.slice("café", 1, 1), "")
        assert_equal(utf8.slice("café", -3, -3), "")
    }
}
