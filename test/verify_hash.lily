import test

var t = test.t

t.scope(__file__)

t.assert("Hash.clear on non-empty hash.",
         (||
    var h = [1 => 1, 2 => 2]
    h.clear()
    h == [] ))

t.assert("Hash.clear on empty hash.",
         (||
    var h = [1 => 1]
    h.clear()
    h.clear()
    h == [] ))

t.expect_error("Hash.clear during iteration.",
               "RuntimeError: Cannot remove key from hash during iteration.",
               (||
    var h = [1 => 1]
    h.each_pair(|k, v| h.clear() )
    false ))


t.assert("Hash.delete with Integer key.",
         (||
    var h = [1 => 1, 2 => 2, 3 => 3]
    h.delete(1)
    h.delete(2)
    h == [3 => 3] ))

t.assert("Hash.delete with entry that does not exist.",
         (||
    var h = [1 => 1, 2 => 2, 3 => 3]
    h.delete(-1)
    true ))


t.assert("Hash.each_pair with empty hash.",
         (||
    var success = true
    var h: Hash[Integer, Integer] = []
    h.each_pair(|k, v|
        success = false
    )
    success ))

t.assert("Hash.each_pair with non-empty hash.",
         (||
    var h = [0 => 0, 1 => -1, 2 => -2]
    var entries = [0, 0, 0]

    h.each_pair(|k, v| entries[k] = v )
    entries == [0, -1, -2] ))


t.assert("Hash.get with key that does not exist.",
         (||
    var h = [1 => 100, 2 => 200, 3 => 300]
    h.get(5).is_none() ))

t.assert("Hash.get with key that does not exist.",
         (||
    var h = [1 => 100, 2 => 200, 3 => 300]
    h.get(1).unwrap() == 100 ))


t.assert("Hash.has_key with existing key.",
         (|| [1 => 1].has_key(1) ))

t.assert("Hash.has_key with missing key.",
         (|| [1 => 1].has_key(2) == false ))


t.assert("Hash.keys includes all keys.",
         (||
    var h = [1 => 1, 2 => 2]
    var entries = [0, 0, 0]

    h.keys().each(|e| entries[e] = 1 )
    entries == [0, 1, 1] ))

t.assert("Hash.map_values with non-empty hash.",
         (||
    var h = [1 => "1", 2 => "a", 3 => "2"]
    var mapped = h.map_values(String.parse_i)

    mapped == [1 => Some(1), 2 => None, 3 => Some(2)] ))

t.assert("Hash.map_values with empty hash.",
         (||
    var result = true
    var h: Hash[Integer, Integer] = []

    h.map_values(|m|
        result = false
    )
    result ))

t.assert("Hash.merge with one other hash.",
         (||
    var h1 = [1 => 1, 2 => 2]
    var h2 = [3 => 3]

    Hash.merge(h1, h2) == [1 => 1, 2 => 2, 3 => 3] ))

t.assert("Hash.merge being right-biased.",
         (||
    var h1 = [1 => 1, 2 => 2]
    var h2 = [2 => 4]

    h1.merge(h2) == [1 => 1, 2 => 4] ))


t.assert("Hash.reject removing odd keys.",
         (||
    var h = [1 => 1, 2 => 2, 3 => 3]

    h.reject(|k, v| (k % 2) == 1) == [2 => 2] ))


t.assert("Hash.select with true condition.",
         (||
    var h = [1 => 1, 2 => 2, 3 => 3]

    h.select(|k, v| true) == [1 => 1, 2 => 2, 3 => 3] ))


t.assert("Hash.size with empty hash.",
         (||
    var h: Hash[Integer, Integer] = []
    h.size() == 0 ))

t.assert("Hash.size with non-empty hash.",
         (|| [1 => 1].size() == 1 ))
