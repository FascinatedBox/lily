import test

var t = test.t

t.scope(__file__)

t.interpret("Shorthand lambda application.",
    """
    define f(g: Function(Integer => String)): String
    {
        return g(10)
    }

    f(|a| a.to_s())
    """)

t.interpret("Lambda generic type carries over.",
    """
    # This is a function that takes a given value and performs two transformations
    # upon it. The result of the transformations is then yielded.
    define f[A, B, C](value: A,
                      g: Function(A => B),
                      h: Function(B => C)): C {
        return h(g(value))
    }

    f(
      # A = double
      10.0,

      # A = double, so 'a' is an double. The result is unknown, so the result is
      # left alone.
      # B = Integer.
      (|a| a.to_i()),

      # B = Integer, so 'b' is an Integer. Again, unable to determine the result,
      # so no type inference is done on the result.
      # C = string
      (|b| b.to_s())
      )
    """)

t.interpret("Lambda inferring type by hash parameters.",
    """
    var h = ["+" => (|a: Integer, b: Integer| a + b),
             "-" => (|a, b| a - b),
             "*" => (|a, b| a * b),
             "/" => (|a, b| a / b)]
    """)

t.interpret("Lambda inferring a return of Unit.",
    """
    define f(g: Function(Integer, Integer))
    {
        g(1, 2)
    }

    f((|a, b| a + b))
    """)

t.interpret("Lambda that returns a keyword",
    """
    [true].map(|a| true)
    """)

t.interpret("Lambda with a multi-line block inside.",
    """
    var v = (|a: Integer|
        var is_ten = false
        if a == 10: {
            is_ten = true
        }
        is_ten
    )
    """)

t.interpret("Lambda piped to a function.",
    """
    (|e| e * e) |> [1, 2, 3].map
    """)

t.interpret("Check lambda storage save and restore.",
    """
    class Box[A](input: A)
    {
        public var @input = input
    }

    var v =
        (||
    (||
        Box(
            (|| 1)
        )
    )
        )

    v()()
    """)

t.interpret("Lambda with single-quote character.",
    """
    var v = (|| ['a', 'b', 'c'])

    if v() != ['a', 'b', 'c']: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Verify heavily-nested lambdas.",
    """
    define f(lsi: List[Integer]) {

    }

    f(
        [1,
         (|| 2)(),
         (|| [3])()[0],
         (|| [[4]] )
                     ()
                         [
                             (|| 0 )()
                         ]
                         [
                             (|| 0 )()
                         ],
         (|| (|| 5 )) () (),
         [(|| 6)() , (|| 7)(), (|| 8)()] [0]
        ]
    )
    """)

t.interpret("Comment block inside of a lambda.",
    """\
    var v = (|| #[


    ]#
    __line__ )

    if v() != 5: {
        raise Exception("Failed. {0}".format(v()))
    }
    """)

t.interpret("Comment lines inside of a lambda.",
    """\
    var v = (||
        var
        #
        #
        w = #
        # !@#$%^&*()
        __line__
        w )

    if v() != 7: {
        raise Exception("Failed. {0}".format(v()))
    }
    """)
