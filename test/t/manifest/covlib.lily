import manifest

library covlib

import farm

foreign class Foreign {}
foreign static class ForeignGeneric[A, B] {}

class Container(value: String)
{
    private var @value: String
    public define fetch: String
    public define update(x: String)
    public define nothing: self
}

class C2(value: String, x: Integer) < Container(value)
{
    public define check: Integer
    private var @x: Integer
}

enum FlatEnum {
    FlatOne,
    FlatTwo,
    FlatThree
}

scoped enum ScopedEnum {
    ScopedOne,
    ScopedTwo,
    ScopedThree
}

enum FlatValueDirection > Integer {
    North,
    East = -2,
    South,
    West = 4567890
}

scoped enum ScopedValueDirection > Integer {
    North = 4,
    East = 5,
    South = 6,
    West = 7

    define turn_right: ScopedValueDirection
}

define cover_func_check(native: Function(Integer), foreign: Function(Integer => String)): Boolean
define cover_function_bytecode(foreign: Function(String), native: Function(Integer)): Boolean
define cover_id_checks[A](u: Unit, c: A, d: String): Boolean
define cover_list_reserve
define cover_list_sfs
define cover_misc_api
define cover_optional_boolean(   a: *Boolean = true,
      :b b: *Boolean = true,
      :c c: *Boolean = true): Integer
define cover_optional_double(   a: *Double = 100.0,
      :b b: *Double = 200.0,
      :c c: *Double = 300.0): Double
define cover_optional_integer(   a: *Integer = 100,
      :b b: *Integer = 200,
      :c c: *Integer = 300): Integer
define cover_optional_keyarg_call(f: Function(*Integer, *Integer, *Integer => Integer)): Integer
define cover_optional_string(   a: *String = "",
     :b b: *String = "",
     :c c: *String = ""): String
define cover_push_boolean: Boolean
define cover_value_as(a: Byte,
      b: ByteString,
      c: Exception,
      d: Double,
      e: File,
      f: Function(Integer),
      g: Foreign,
      h: Hash[Integer, Integer],
      i: Integer,
      j: String)

define cover_value_group(a: Boolean,
     b: Byte,
     c: ByteString,
     d: Double,
     e: Option[Integer],
     f: File,
     g: Function(Integer),
     h: Hash[Integer, Integer],
     i: Foreign,
     j: Exception,
     k: Integer,
     l: List[Integer],
     m: String,
     n: Tuple[Integer],
     o: Unit,
     p: Option[Integer]): Boolean
define make_flat_n(n: Integer): FlatEnum
define make_scoped_n(n: Integer): ScopedEnum
define optcount(
    :a a: *Integer=0,
    :b b: *Integer=0,
    :c c: *Integer=0,
    :d d: *Integer=0,
    :e e: *Integer=0,
    :f f: *Integer=0,
    :g g: *Integer=0,
    :h h: *Integer=0,
    :i i: *Integer=0,
    :j j: *Integer=0,
    :k k: *Integer=0,
    :l l: *Integer=0,
    :m m: *Integer=0,
    :n n: *Integer=0,
    :o o: *Integer=0,
    :p p: *Integer=0): Integer
define optsum(
    :a a: *Integer=0,
    :b b: *Integer=0,
    :c c: *Integer=0,
    :d d: *Integer=0,
    :e e: *Integer=0,
    :f f: *Integer=0,
    :g g: *Integer=0,
    :h h: *Integer=0,
    :i i: *Integer=0,
    :j j: *Integer=0,
    :k k: *Integer=0,
    :l l: *Integer=0,
    :m m: *Integer=0,
    :n n: *Integer=0,
    :o o: *Integer=0,
    :p p: *Integer=0): Integer
define raise_dbzerror
define raise_keyerror
define scoop_narrow(f: Function($1))
define scoop_narrow_with_args(f: Function(Integer, String, $1 => Boolean))
