import manifest

library covlib

foreign class Foreign {}
foreign static class ForeignGeneric[A, B] {}

class Container(value: String)
{
    private var @value: String
    public define fetch: String
    public define update(x: String)
}

enum FlatEnum {
    FlatOne,
    FlatTwo,
    FlatThree
}

scoped enum ScopedEnum {
    ScopedOne,
    ScopedTwo,
    ScopedThree
}

define isa_integer[A](value: A): Boolean
define cover_ci_from_native(fn: Function(Integer))
define cover_func_check(native: Function(Integer), foreign: Function(Integer => String)): Boolean
define cover_id_checks[A](u: Unit, c: A, d: String): Boolean
define cover_list_reserve
define cover_list_sfs
define cover_misc_api
define cover_optional_boolean(   a: *Boolean = true,
      :b b: *Boolean = true,
      :c c: *Boolean = true): Integer
define cover_optional_integer(   a: *Integer = 100,
      :b b: *Integer = 200,
      :c c: *Integer = 300): Integer
define cover_optional_keyarg_call(f: Function(*Integer, *Integer, *Integer => Integer)): Integer
define cover_optional_string(   a: *String = "",
     :b b: *String = "",
     :c c: *String = ""): String
define cover_value_as(a: Byte,
      b: ByteString,
      c: Exception,
      d: Double,
      e: File,
      f: Function(Integer),
      g: Hash[Integer, Integer],
      h: Integer,
      i: String)

define cover_value_group(a: Boolean,
     b: Byte,
     c: ByteString,
     d: Double,
     e: Option[Integer],
     f: File,
     g: Function(Integer),
     h: Hash[Integer, Integer],
     i: Foreign,
     j: Exception,
     k: Integer,
     l: List[Integer],
     m: String,
     n: Tuple[Integer],
     o: Unit,
     p: Option[Integer]): Boolean
define scoop_narrow(f: Function($1))
define scoop_narrow_with_args(f: Function(Integer, String, $1 => Boolean))
