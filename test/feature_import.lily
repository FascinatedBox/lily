import test

var t = test.t

t.scope(__file__)

t.interpret("Verify importing to access a var.",
    """\
    import import_dir/var_access
    """)

t.interpret("Verify importing to access a deep var.",
    """\
    import import_dir/test_deep_access
    """)

t.interpret("Check importing a diamond.",
    """\
    import import_dir/diamond_a
    """)

t.interpret("Check importing with commas between names.",
    """\
    import import_dir/comma_import
    """)

t.interpret("Check importing a module as another name.",
    """\
    import import_dir/basic_import_as
    """)

t.interpret("Check getting a var from an imported target.",
    """\
    import import_dir/nest/deep_target

    var v = deep_target.v
    """)

t.interpret("Check getting a var from a parent directory.",
    """\
    import ../../lily/test/import_dir/var_exporter

    if var_exporter.v != 10:
        raise Exception("Failed.")
    """)

t.interpret("Check using the type of __import__.",
    """\
    import import_dir/var_access

    var v = [var_access.__import__]
    """)

t.interpret("Check using a single import ref.",
    """\
    import (ref_var) import_dir/ref_spectrum

    if ref_var != 10:
        raise Exception("Failed.")
    """)

t.interpret("Check using multiple import refs.",
    """\
    import (ref_var, RefSquarer) import_dir/ref_spectrum

    if RefSquarer().square(ref_var) != 20:
        raise Exception("Failed.")
    """)

t.interpret("Scoped enum from import ref.",
    """\
    import (ScopedOption) import_dir/ref_spectrum

    var v = ScopedOption.ScopedSome(1)

    match v: {
        case ScopedOption.ScopedNone:
            raise Exception("Failed.")
        case ScopedOption.ScopedSome(s):
    }
    """)

t.interpret("Flat enum from import ref.",
    """\
    import (FlatOption, FlatSome, FlatNone) import_dir/ref_spectrum

    var v: FlatOption[Integer] = FlatNone

    match v: {
        case FlatNone:
        case FlatSome(s):
            raise Exception("Failed.")
    }
    """)

t.interpret("Direct import triggering argv dynaload.",
    """\
    import (argv) sys
    """)

t.interpret("Direct import triggering Time dynaload.",
    """\
    import (Time) time

    Time.now()
    """)

t.interpret("Direct import of a direct imported symbol.",
    """\
    import (v) import_dir/ref_import
    """)

t.interpret("Direct import that shadows the module name.",
    """\
    import (fakefib) import_dir/fakefib

    if fakefib(10) != 10:
        raise Exception("Failed.")
    """)

t.interpret("Direct import doesn't expose the module.",
    """\
    import (v) import_dir/ref_import

    var ref_import = 10
    """)
