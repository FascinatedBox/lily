enum Test[A] {
    One(A)
    Two

    define with_default(a: *Integer = 0) : Test[A] {
        return self
    }

    define and_then(f: Function(A => Test[A])) : Test[A] {
        match self: {
            case One(s):
                return f(s)
            case Two:
                return Two
        }
    }
    define force: A {
        match self: {
            case One(s):
                return s
            case Two:
                raise ValueError("No value is present.")
        }
    }
}

var v = One(10)

if 
    v.and_then({|a| One(a * a)})
     .with_default()
     .and_then({|a| One(a * a)})
     .with_default(1)
     .force()
    != 10000:
    stderr.print("Failed.")
