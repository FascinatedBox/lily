import test

var t = test.t

t.scope(__file__)

t.interpret_for_error("Forbid nested assignments.",
    """\
    SyntaxError: Cannot nest an assignment within an expression.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    var a = 10
    var b = (a = 10)
    """)

t.interpret_for_error("Invalid anonymous call to non-function.",
    """\
    SyntaxError: Cannot anonymously call resulting type 'Integer'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    (10)()
    """)

t.interpret_for_error("Wrong closing token.",
    """\
    SyntaxError: Expected closing token ')', not ']'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    calltrace("test."]
    """)

t.interpret_for_error("Comma at end of file.",
    """\
    SyntaxError: Unexpected token ','.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var a = 10
    a = 10,
    """)

t.interpret_for_error("Wrong closing token for a list.",
    """\
    SyntaxError: Expected closing token ']', not ')'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var lsi: List[Integer] = [10, 20, 30)
    """)

t.interpret_for_error("Mismatched right brace after end of expression.",
    """\
    SyntaxError: Unexpected token ']'.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    var a: List[Integer] = []
    a = [10]
    ]
    """)

t.interpret_for_error("Close brace outside of a block.",
    """\
    SyntaxError: '}' outside of a block.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    }
    """)

t.interpret_for_error("Break outside of a loop.",
    """\
    SyntaxError: 'break' used outside of a loop.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    break
    """)

t.interpret_for_error("Forbid continue outside of a loop.",
    """\
    SyntaxError: 'continue' used outside of a loop.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    continue
    """)

t.interpret_for_error("Forbid return outside of define.",
    """\
    SyntaxError: 'return' used outside of a function.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    return
    """)

t.interpret_for_error("Verify line numbers.",
    """\
    SyntaxError: Cannot assign type 'String' to type 'Integer'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var a = 10
    a = "10"
    """)

t.interpret_for_error("Forbid 'do while' condition from using inner vars.",
    """\
    SyntaxError: v has not been declared.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    do: {
        var v = 10
        continue
    } while v == 10
    """)

t.interpret_for_error("Verify docstring '###'.",
    """\
    SyntaxError: Docstring line does not start with full '###'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    ###
    ##
    define f {}
    """)

t.interpret_for_error("Prevent inconsistent docstring indentation.",
    """\
    SyntaxError: Docstring has inconsistent indentation.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    ### asdf
        ### 1234
    define f {}
    """)

t.interpret_for_error("Verify dynaload works when done within a static list.",
    """\
    SyntaxError: Cannot anonymously call resulting type 'List[Function ( => List[String])]'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    [calltrace]("")
    """)

t.interpret_for_error("Forbid elif without if.",
    """\
    SyntaxError: 'elif' without 'if'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    elif
    """)

t.interpret_for_error("Forbid else without if.",
    """\
    SyntaxError: 'else' without 'if'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    else
    """)

t.interpret_for_error("Forbid same-branch expressions after raise.",
    """\
    SyntaxError: Statement(s) after 'raise' will not execute.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    raise ValueError("")
    var v = 10
    """)

t.interpret_for_error("Forbid expression after return.",
    """\
    SyntaxError: Statement(s) after 'return' will not execute.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    define f : Integer
    {
        return 1
        var v = 2
    }
    """)

t.interpret_for_error("Forbid expression after return of Unit.",
    """\
    SyntaxError: Statement(s) after 'return' will not execute (no return type given).\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define test { return 0 }
    """)

t.interpret_for_error("Forbid redeclaration of function parameters.",
    """\
    SyntaxError: a has already been declared.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f(a: Integer, a: Integer) {}
    """)

t.interpret_for_error("Forbid redeclaration of a function.",
    """\
    SyntaxError: f has already been declared.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    define f {}
    define f {}
    """)

t.interpret_for_error("Forbid use of constructor on non-native builtin class.",
    """\
    SyntaxError: Class Integer does not have a constructor.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = Integer(10)
    """)

t.interpret_for_error("Invalid + operation.",
    """\
    SyntaxError: Invalid operation: String + String.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    class Example {
        public var @v = "test"
        public define tryit(other: Example) {
            var combine =
                "a" ++ other.v ++ "b" ++
                "c" + @v ++ "d" ++ other.v ++ "e"
        }
    }

    var a = Example()
    a.tryit(a)
    """)

t.interpret_for_error("Forbid assignment to parenth expression.",
    """\
    SyntaxError: Left side of = is not assignable.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    var a = 1
    if 1: {
        (a + a) = 1
    }
    """)

t.interpret_for_error("Forbid assignment to call expression.",
    """\
    SyntaxError: Left side of = is not assignable.\n    \
        from test\/[subinterp]:5:\
    """,
    """\
    define f : List[Integer] {
        return [1]
    }

    f()[0] = 1
    """)

t.interpret_for_error("Forbid == on different types.",
    """\
    SyntaxError: Invalid operation: List[Integer] == List[String].\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    var v1 = [1]
    var v2 = ["1"]

    v1 == v2
    """)

t.interpret_for_error("Forbid 'var' on right side of assign.",
    """\
    SyntaxError: var has not been declared.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = var
    """)

t.interpret_for_error("Function parameter using class that doesn't exist.",
    """\
    SyntaxError: Class 'asdf' does not exist.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f(g: asdf) {
    }
    """)

t.interpret_for_error("Tuple subscript out of range.",
    """\
    SyntaxError: Index 3 is out of range for Tuple[Integer, String].\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var s: String = <[1, "2"]> [3]
    """)

t.interpret_for_error("Require list arguments to have commas between them.",
    """\
    SyntaxError: Unexpected token 'a string'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var s = ["1" "2"]
    """)

t.interpret_for_error("Verify expressions don't finish with mismatched parentheses.",
    """\
    SyntaxError: Unexpected token 'end of file'.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    var a: Integer = 0
    a = ((a)
    """)

t.interpret_for_error("Verify functions claiming to return a value do so.",
    """\
    SyntaxError: Missing return statement at end of function.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    define f : Integer {  }
    """)

t.interpret_for_error("Forbid single-quote byte literals from being multi-byte.",
    """\
    SyntaxError: Multi-character byte literal.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = '12'
    """)

t.interpret_for_error("Forbid scoop types outside dynaload.",
    """\
    SyntaxError: Expected 'a label', not 'an integer'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define test: 0 {}
    """)

t.interpret_for_error("Broken return fold with if.",
    """\
    SyntaxError: Missing return statement at end of function.\n    \
        from test\/[subinterp]:11:\
    """,
    """\
    define f(a: Integer) : Integer
    {
        if a == 1: {
            return 1
        elif a == 1:
            a = 2
        else:
            return 3
        }
    }
    """)

t.interpret_for_error("Broken return fold on match.",
    """\
    SyntaxError: Missing return statement at end of function.\n    \
        from test\/[subinterp]:10:\
    """,
    """\
    define f(a: Option[Integer]) : Integer
    {
        match a: {
            case Some(s):
                s = 1
            case None:
                return 2
        }
    }
    """)

t.interpret_for_error("Broken return fold on match with else.",
    """\
    SyntaxError: Missing return statement at end of function.\n    \
        from test\/[subinterp]:10:\
    """,
    """\
    define f(a: Option[Integer]) : Integer
    {
        match a: {
            case Some(s):
                s = 1
            else:
                return 2
        }
    }
    """)

t.interpret_for_error("Broken return fold on class match case.",
    """\
    SyntaxError: Missing return statement at end of function.\n    \
        from test\/[subinterp]:15:\
    """,
    """\
    class One {}
    class Two < One {}
    class Three < Two {}

    define f(input: One): Integer {
        match input: {
            case Three(t):
                print(1)
            case Two(t):
                return 1
            else:
                return 2
        }
    }
    """)

t.interpret_for_error("Broken return fold on class match else.",
    """\
    SyntaxError: Missing return statement at end of function.\n    \
        from test\/[subinterp]:15:\
    """,
    """\
    class One {}
    class Two < One {}
    class Three < Two {}

    define f(input: One): Integer {
        match input: {
            case Three(t):
                return 0
            case Two(t):
                return 1
            else:
                print(1)
        }
    }
    """)

t.interpret_for_error("Broken return fold on try.",
    """\
    SyntaxError: Missing return statement at end of function.\n    \
        from test\/[subinterp]:9:\
    """,
    """\
    define f(a: Integer) : Integer
    {
        try: {
            a = 1
        except Exception:
            return 2
        }
    }
    """)

t.interpret_for_error("Forbid return of Unit when a value is wanted.",
    """\
    SyntaxError: return expected type 'Integer' but got type 'Unit'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f {  } define g : Integer { return f() }
    """)

t.interpret_for_error("Forbid a variable from initializing itself.",
    """\
    SyntaxError: Attempt to use uninitialized value 'v'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = v
    """)

t.interpret_for_error("Bytestring subscript out of range.",
    """\
    IndexError: Subscript index -50 is out of range.\n\
    Traceback:\n    \
        from test\/[subinterp]:1: in __main__\
    """,
    """\
    B"Ā ā Ă ă Ą"[-50]
    """)

t.interpret_for_error("Unterminated multi-line if.",
    """\
    SyntaxError: Unexpected token 'end of file'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    if 1: {
    """)

t.interpret_for_error("Wrong argument count to inner function.",
    """\
    SyntaxError: Wrong number of arguments to g (1 for 0).\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f(a: Integer) {
        define g { a += 1 }
        g(1)
    }
    """)

t.interpret_for_error("Wrong argument count to class method.",
    """\
    SyntaxError: Wrong number of arguments to Test.method (1 for 0).\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    class Test
    {
        public define method {  }
    }

    var t = Test()
    t.method(123)
    """)

t.interpret_for_error("Wrong argument count for vararg.",
    """\
    SyntaxError: Wrong number of arguments to Test.method (0 for 1+).\n    \
        from test\/[subinterp]:7:\
    """,
    """\
    class Test
    {
        public define method(x: Integer, y: Integer...) {  }
    }

    var t = Test()
    t.method()
    """)

t.interpret_for_error("Wrong argument count to method from constructor.",
    """\
    SyntaxError: Wrong number of arguments to Test.method (0 for 1).\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    class Test
    {
        public define method(x: Integer) {  }
        method()
    }
    """)

t.interpret_for_error("Wrong argument count to function passed as argument.",
    """\
    SyntaxError: Wrong number of arguments to g (3 for 1).\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    define f(g: Function(Integer)) {
    	g(1, 2, 3)
    }
    """)

t.interpret_for_error("Wrong argument count to plain call.",
    """\
    SyntaxError: Wrong number of arguments to f (1 for 0).\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f {}

    f(1)
    """)

t.interpret_for_error("Wrong argument count to class property function.",
    """\
    SyntaxError: Wrong number of arguments to abc.a (3 for 0).\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    class abc {
        public var @a = (|| 10)
    }

    var d = abc()
    d.a(1, 2, 3)
    """)

t.interpret_for_error("Wrong argument count to anonymous function.",
    """\
    SyntaxError: Wrong number of arguments to (anonymous) (0 for 2).\n    \
        from test\/[subinterp]:9:\
    """,
    """\
    class Test
    {
        public define test : Function(Integer, Integer => Boolean)
        {
            return (|x, y| x == y)
        }
    }

    var z = Test().test()()
    """)

t.interpret_for_error("Wrong argument count to global var function.",
    """\
    SyntaxError: Argument #1 to v is invalid:\n\
    Expected Type: String\n\
    Received Type: Integer\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = String.parse_i
    v(1)
    """)

t.interpret_for_error("Plain non-generic type as wrong argument type.",
    """\
    SyntaxError: Argument #1 to f is invalid:\n\
    Expected Type: Integer\n\
    Received Type: String\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f(a: Integer) {} f("a")
    """)

t.interpret_for_error("Empty function as wrong argument type.",
    """\
    SyntaxError: Argument #1 to f is invalid:\n\
    Expected Type: Function ()\n\
    Received Type: Integer\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f(g: Function()) {  }

    f(10)
    """)

t.interpret_for_error("Invalid .@(type) cast.",
    """\
    SyntaxError: Cannot cast type 'Integer' to type 'Tuple[Integer]'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = 1.@(Tuple[Integer])
    """)

t.interpret_for_error("Invalid assign to upvalue.",
    """\
    SyntaxError: Cannot assign type 'String' to type 'Integer'.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    define f(a: Integer) {
        define g {
            a = ""
        }
    }
    """)

t.interpret_for_error("Wrong type past the end of a vararg call.",
    """\
    SyntaxError: Argument #4 to f is invalid:\n\
    Expected Type: Integer\n\
    Received Type: String\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    define f(a: Integer...) {
    }

    f(1, 2, 3, "4")
    """)

t.interpret_for_error("Wrong type at the end of a vararg call.",
    """\
    SyntaxError: Argument #1 to f is invalid:\n\
    Expected Type: Integer\n\
    Received Type: String\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    define f(a: Integer...) {
    }

    f("4")
    """)

t.interpret_for_error("Wrong type before the end of a vararg call.",
    """\
    SyntaxError: Argument #1 to f is invalid:\n\
    Expected Type: Integer\n\
    Received Type: String\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    define f(a: Integer, b: String...) {
    }

    f("4")
    """)

t.interpret_for_error("Require for loop start to be Integer.",
    """\
    SyntaxError: Unexpected token 'invalid token'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    ;
    """)

t.interpret_for_error("Require for loop start to be Integer.",
    """\
    SyntaxError: Unexpected token 'invalid token'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    ?
    """)

t.interpret_for_error("Require for loop start to be Integer.",
    """\
    SyntaxError: Unexpected token 'invalid token'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    @1
    """)

t.interpret_for_error("Require for loop start to be Integer.",
    """\
    SyntaxError: '..' is not a valid token (expected 1 or 3 dots).\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    ..
    """)

t.interpret_for_error("Require for loop start to be Integer.",
    """\
    SyntaxError: Expected type 'Integer', but got type 'String'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    for i in "a"...0: {
    }
    """)

t.interpret_for_error("Invalid match expression.",
    """\
    SyntaxError: Match expression is not a user class or enum.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    match <[1, "2", 3.3]>: {
    }
    """)

t.interpret_for_error("Invalid condition type.",
    """\
    SyntaxError: Tuple[Integer, String] is not a valid condition type.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    if <[1, "2"]>: {
    }
    """)

t.interpret_for_error("Invalid List subscript type.",
    """\
    SyntaxError: List index is not an Integer.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = [1]
    v[v]
    """)

t.interpret_for_error("Invalid ByteString subscript type.",
    """\
    SyntaxError: ByteString index is not an Integer.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = B"1"
    v[v]
    """)

t.interpret_for_error("Invalid Hash subscript type.",
    """\
    SyntaxError: Hash index should be type 'Integer', not type 'String'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    [1 => 1, 2 => 2]["1"]
    """)

t.interpret_for_error("Tuple subscript not a literal.",
    """\
    SyntaxError: Hash index should be type 'Integer', not type 'String'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    [1 => 1, 2 => 2]["1"]
    """)

t.interpret_for_error("Invalid Tuple subscript.",
    """\
    SyntaxError: Tuple subscripts must be Integer literals.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    var a = 1
    var v = <[1, 2]>
    v[a] = 0
    """)

t.interpret_for_error("Invalid negative subscript on Tuple.",
    """\
    SyntaxError: Index -1 is out of range for Tuple[Integer].\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = <[1]>
    v[-1] = 0
    """)

t.interpret_for_error("Invalid positive subscript on Tuple.",
    """\
    SyntaxError: Index 5 is out of range for Tuple[Integer].\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = <[1]>
    v[5] = 1
    """)

t.interpret_for_error("Subscript a type that doesn't support it.",
    """\
    SyntaxError: Cannot subscript type 'Option[Integer]'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    Some(1)[1]
    """)

t.interpret_for_error("Cover error trying to use incomplete var.",
    """\
    SyntaxError: Cannot close over a var of an incomplete type in this scope.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    define f[A](a: A) {
        define g {
            var v = a
        }
    }
    """)

t.interpret_for_error("Wrong type past the end of a vararg call.",
    """\
    SyntaxError: Argument #4 to f is invalid:\n\
    Expected Type: Integer\n\
    Received Type: String\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    define f(a: Integer...) {
    }

    f(1, 2, 3, "4")
    """)

t.interpret_for_error("Wrong type at the end of a vararg call.",
    """\
    SyntaxError: Argument #1 to f is invalid:\n\
    Expected Type: Integer\n\
    Received Type: String\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    define f(a: Integer...) {
    }

    f("4")
    """)

t.interpret_for_error("Wrong type before the end of a vararg call.",
    """\
    SyntaxError: Argument #1 to f is invalid:\n\
    Expected Type: Integer\n\
    Received Type: String\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    define f(a: Integer, b: String...) {
    }

    f("4")
    """)

t.interpret_for_error("Invalid assign to class method through dot.",
    """\
    SyntaxError: Left side of = is not assignable.\n    \
        from test\/[subinterp]:5:\
    """,
    """\
    class Example {
        public define f {}
    }

    Example.f = 10
    """)

t.interpret_for_error("Wrong type for @ assign.",
    """\
    SyntaxError: Cannot assign type 'String' to type 'Integer'.\n    \
        from test\/[subinterp]:6:\
    """,
    """\
    class Example {
        public var @a = 10
    }

    var v = Example()
    v.a = "5"
    """)

t.interpret_for_error("Invalid type for unary op.",
    """\
    SyntaxError: Invalid operation: !String.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = !"a"
    """)

t.interpret_for_error("Empty tuple not allowed.",
    """\
    SyntaxError: Cannot create an empty Tuple.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = <[]>
    """)

t.interpret_for_error("Empty tuple not allowed.",
    """\
    SyntaxError: Conditional expression has no value.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = 10
    if v = 5:
        v = 1

    raise Exception("Failed.")
    """)

t.interpret_for_error("Invalid define declaration.",
    """\
    SyntaxError: Cannot define a function here.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    if 1: {
        define f {}
    }
    """)

t.interpret_for_error("Require 'while' after 'do'.",
    """\
    SyntaxError: Expected 'while', not 'asdf'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    do: {
    } asdf
    """)

t.interpret_for_error("Require 'by' in a for loop.",
    """\
    SyntaxError: Expected 'by', not 'asdf'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    for i in 0...10 asdf
    """)

t.interpret_for_error("Require 'in' in a for loop.",
    """\
    SyntaxError: Expected 'in', not 'asdf'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    for i asdf 0...10: {}
    """)

t.interpret_for_error("Non-Integer for loop var.",
    """\
    SyntaxError: Loop var must be type Integer, not type 'String'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var i = ""
    for i in 0...10: {}
    """)

t.interpret_for_error("Forbid assignment in for range expression.",
    """\
    SyntaxError: For range value expression contains an assignment.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = 10
    for i in v = 5...10:
        1
    """)

t.interpret_for_error("'break' checks for dead code.",
    """\
    SyntaxError: Statement(s) after 'break' will not execute.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    for i in 0...10: {
        break
        print(i)
    }
    """)

t.interpret_for_error("'continue' checks for dead code.",
    """\
    SyntaxError: Statement(s) after 'continue' will not execute.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    for i in 0...10: {
        continue
        print(i)
    }
    """)

t.interpret_for_error("Define wrong token.",
    """\
    SyntaxError: Expected either ',' or ')', not '!'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f(a: Integer !
    """)

t.interpret_for_error("Define empty ().",
    """\
    SyntaxError: Empty () found while reading input arguments. Omit instead.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f() {}
    """)

t.interpret_for_error("Require init expression for vars.",
    """\
    SyntaxError: An initialization expression is required here.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v
    """)

t.interpret_for_error("Redeclare a var.",
    """\
    SyntaxError: v has already been declared.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = 10
    var v = 10
    """)

t.interpret_for_error("Forbid binary op when demanding a value.",
    """\
    SyntaxError: Unexpected token '-='.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = ! -=
    """)

t.interpret_for_error("Forbid unary op when expecting a binary one.",
    """\
    SyntaxError: Unexpected token '!'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = 1 !
    """)

t.interpret_for_error("Comma when expecting a value.",
    """\
    SyntaxError: Expected a value, not ','.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = [,]
    """)

t.interpret_for_error("Class member does not exist.",
    """\
    SyntaxError: Example.DoesNotExist does not exist.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Example {}
    var v = Example.DoesNotExist
    """)

t.interpret_for_error("Container as argument wrong token.",
    """\
    SyntaxError: Expected either ',' or ']', not ']>'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Container[A] {}
    var v: Container[Integer ]>
    """)

t.interpret_for_error("Wrong token after varargs.",
    """\
    SyntaxError: Expected either '=>' or ')' after varargs.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    define f(a: Integer... ""
    """)

t.interpret_for_error("Scoop type in native code.",
    """\
    SyntaxError: Expected 'a label', not '$1'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v: Function($1) = 10
    """)

t.interpret_for_error("Invalid key for a Hash.",
    """\
    SyntaxError: 'Option[Integer]' is not a valid key for Hash.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v: Hash[Option[Integer], String] = [Some(1) => "a"]
    """)

t.interpret_for_error("Container with too few types.",
    """\
    SyntaxError: Class Container expects 2 type(s), but got 1 type(s).\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Container[A, B] {}
    var v: Container[Integer] = Container()
    """)

t.interpret_for_error("Container with too many types.",
    """\
    SyntaxError: Class Container expects 1 type(s), but got 3 type(s).\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Container[A] {}
    var v: Container[Integer, Integer, Integer] = Container()
    """)

t.interpret_for_error("$ by itself is invalid.",
    """\
    SyntaxError: Unexpected token 'invalid token'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = $
    """)

t.interpret_for_error("++= isn't a valid token.",
    """\
    SyntaxError: '++=' is not a valid token.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = "a"
    v ++= "b"
    """)

t.interpret_for_error("Unterminated multi-line string.",
    """\
    SyntaxError: Unterminated string (started at line 3).\n    \
        from test\/[subinterp]:6:\
    """,
    """\


    var v = \"\"\"


    """)

t.interpret_for_error("Newline in single-line string.",
    """\
    SyntaxError: Newline in single-line string.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = "
    """)

t.interpret_for_error("Invalid zero escape on non-ByteString.",
    """\
    SyntaxError: Invalid escape sequence.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = "\\0"
    """)

t.interpret_for_error("Invalid high bit escape on non-ByteString.",
    """\
    SyntaxError: Invalid escape sequence.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = "\\128"
    """)

t.interpret_for_error("Unterminated multi-line comment.",
    """\
    SyntaxError: Unterminated multi-line comment (started at line 2).\n    \
        from test\/[subinterp]:6:\
    """,
    """\

    #[



    """)

t.interpret_for_error("Really big Integer value.",
    """\
    SyntaxError: Integer value is too large.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = 9223372036854775809
    """)

t.interpret_for_error("Really small Integer value.",
    """\
    SyntaxError: Integer value is too small.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = -9223372036854775809
    """)

t.interpret_for_error("Double out of range.",
    """\
    SyntaxError: Double value is out of range.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = 9e999
    """)

t.interpret_for_error("Invalid suffix for Double.",
    """\
    SyntaxError: Double value with Byte suffix.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = 1.1t
    """)

t.interpret_for_error("Byte value with - sign.",
    """\
    SyntaxError: Byte values cannot have a sign.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = -1t
    """)

t.interpret_for_error("Byte value with + sign.",
    """\
    SyntaxError: Byte values cannot have a sign.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = +1t
    """)

t.interpret_for_error("Byte value out of range.",
    """\
    SyntaxError: Byte value is too large.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = 256t
    """)

t.interpret_for_error("Invalid exponent value.",
    """\
    SyntaxError: Expected a base 10 number after exponent.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = 1e?
    """)

t.interpret_for_error("Invalid exponent value",
    """\
    SyntaxError: Exponent is too large.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = 1e3000
    """)

t.interpret_for_error("Invalid escape sequence.",
    """\
    SyntaxError: Invalid escape sequence.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = "\\?"
    """)

t.interpret_for_error("Incomplete subscript assign.",
    """\
    SyntaxError: Right side of assignment is incomplete type 'Option[?]'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = [0]
    v[0] = None
    """)

t.interpret_for_error("Incomplete assign.",
    """\
    SyntaxError: Right side of assignment is incomplete type 'Option[?]'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = None
    """)

t.interpret_for_error("Invalid key for Hash.",
    """\
    SyntaxError: Type 'Option[Integer]' is not a valid key for Hash.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = [Some(1) => 1]
    """)

t.interpret_for_error("Invalid key for Hash.",
    """\
    SyntaxError: Type 'Option[Integer]' is not a valid key for Hash.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = [Some(1) => 1]
    """)

t.interpret_for_error("Invalid keyword after scope qualifier.",
    """\
    SyntaxError: Expected either 'var' or 'define', but got 'asdf'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    class Test {
        public asdf
    }
    """)

t.interpret_for_error("Prevent 'var v = =>' from crashing.",
    """\
    SyntaxError: Unexpected token '=>'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = =>
    """)

t.interpret_for_error("Subscript with comma.",
    """\
    SyntaxError: Subscripts cannot contain ','.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    var v = [1]
    v[0,] = 0
    """)

t.interpret_for_error("Arrow in List constructor.",
    """\
    SyntaxError: Unexpected token '=>'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = [1, 2 => 3]
    """)

t.interpret_for_error("Arrow in List constructor.",
    """\
    SyntaxError: Unexpected token '=>'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = [1, 2 => 3]
    """)

t.interpret_for_error("Arrow in wrong place in Hash constructor.",
    """\
    SyntaxError: Unexpected token '=>'.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = [1 => 2 => 3]
    """)

t.interpret_for_error("Comma in wrong place in Hash constructor.",
    """\
    SyntaxError: Expected a key => value pair before ','.\n    \
        from test\/[subinterp]:1:\
    """,
    """\
    var v = [1 => 2, 3, 4]
    """)
