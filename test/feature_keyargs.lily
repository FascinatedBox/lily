import test

var t = test.t

t.scope(__file__)

t.interpret("Keyarg basic collection.",
    """
    define f(:a a: Integer, :b b: String, :c c: List[Boolean]) {
        if <[a, b, c]> != <[1, "2", [true]]>: {
            raise Exception("Failed.")
        }
    }

    f(:a 1, :b "2", :c [true])
    """)

t.interpret("Keyarg spectrum of only keyargs.",
    """
    var expect = [111, 222, 333, 444, 555]

    define f(:aa        a: Integer,
                :bb        b: Integer,
                :cc        c: Integer,
                :dd        d: Integer,
                :ee        e: Integer) {
        var got = [a, b, c, d, e]

        if got != expect: {
            stderr.print("Expected {0}, but have {1} instead."
                    .format(expect, got))
        }
    }

    f(:aa 111, :bb 222, :cc 333, :ee 555, :dd 444)
    f(:aa 111, :bb 222, :dd 444, :ee 555, :cc 333)
    f(:aa 111, :bb 222, :ee 555, :cc 333, :dd 444)
    f(:aa 111, :bb 222, :ee 555, :dd 444, :cc 333)
    f(:aa 111, :cc 333, :bb 222, :ee 555, :dd 444)
    f(:aa 111, :cc 333, :dd 444, :ee 555, :bb 222)
    f(:aa 111, :cc 333, :ee 555, :bb 222, :dd 444)
    f(:aa 111, :cc 333, :ee 555, :dd 444, :bb 222)
    f(:aa 111, :dd 444, :bb 222, :ee 555, :cc 333)
    f(:aa 111, :dd 444, :cc 333, :ee 555, :bb 222)
    f(:aa 111, :dd 444, :ee 555, :bb 222, :cc 333)
    f(:aa 111, :dd 444, :ee 555, :cc 333, :bb 222)
    f(:aa 111, :ee 555, :bb 222, :cc 333, :dd 444)
    f(:aa 111, :ee 555, :bb 222, :dd 444, :cc 333)
    f(:aa 111, :ee 555, :cc 333, :bb 222, :dd 444)
    f(:aa 111, :ee 555, :cc 333, :dd 444, :bb 222)
    f(:aa 111, :ee 555, :dd 444, :bb 222, :cc 333)
    f(:aa 111, :ee 555, :dd 444, :cc 333, :bb 222)
    f(:bb 222, :aa 111, :cc 333, :ee 555, :dd 444)
    f(:bb 222, :aa 111, :dd 444, :ee 555, :cc 333)
    f(:bb 222, :aa 111, :ee 555, :cc 333, :dd 444)
    f(:bb 222, :aa 111, :ee 555, :dd 444, :cc 333)
    f(:bb 222, :cc 333, :aa 111, :ee 555, :dd 444)
    f(:bb 222, :cc 333, :dd 444, :ee 555, :aa 111)
    f(:bb 222, :cc 333, :ee 555, :aa 111, :dd 444)
    f(:bb 222, :cc 333, :ee 555, :dd 444, :aa 111)
    f(:bb 222, :dd 444, :aa 111, :ee 555, :cc 333)
    f(:bb 222, :dd 444, :cc 333, :ee 555, :aa 111)
    f(:bb 222, :dd 444, :ee 555, :aa 111, :cc 333)
    f(:bb 222, :dd 444, :ee 555, :cc 333, :aa 111)
    f(:bb 222, :ee 555, :aa 111, :cc 333, :dd 444)
    f(:bb 222, :ee 555, :aa 111, :dd 444, :cc 333)
    f(:bb 222, :ee 555, :cc 333, :aa 111, :dd 444)
    f(:bb 222, :ee 555, :cc 333, :dd 444, :aa 111)
    f(:bb 222, :ee 555, :dd 444, :aa 111, :cc 333)
    f(:bb 222, :ee 555, :dd 444, :cc 333, :aa 111)
    f(:cc 333, :aa 111, :bb 222, :ee 555, :dd 444)
    f(:cc 333, :aa 111, :dd 444, :ee 555, :bb 222)
    f(:cc 333, :aa 111, :ee 555, :bb 222, :dd 444)
    f(:cc 333, :aa 111, :ee 555, :dd 444, :bb 222)
    f(:cc 333, :bb 222, :aa 111, :ee 555, :dd 444)
    f(:cc 333, :bb 222, :dd 444, :ee 555, :aa 111)
    f(:cc 333, :bb 222, :ee 555, :aa 111, :dd 444)
    f(:cc 333, :bb 222, :ee 555, :dd 444, :aa 111)
    f(:cc 333, :dd 444, :aa 111, :ee 555, :bb 222)
    f(:cc 333, :dd 444, :bb 222, :ee 555, :aa 111)
    f(:cc 333, :dd 444, :ee 555, :aa 111, :bb 222)
    f(:cc 333, :dd 444, :ee 555, :bb 222, :aa 111)
    f(:cc 333, :ee 555, :aa 111, :bb 222, :dd 444)
    f(:cc 333, :ee 555, :aa 111, :dd 444, :bb 222)
    f(:cc 333, :ee 555, :bb 222, :aa 111, :dd 444)
    f(:cc 333, :ee 555, :bb 222, :dd 444, :aa 111)
    f(:cc 333, :ee 555, :dd 444, :aa 111, :bb 222)
    f(:cc 333, :ee 555, :dd 444, :bb 222, :aa 111)
    f(:dd 444, :aa 111, :bb 222, :ee 555, :cc 333)
    f(:dd 444, :aa 111, :cc 333, :ee 555, :bb 222)
    f(:dd 444, :aa 111, :ee 555, :bb 222, :cc 333)
    f(:dd 444, :aa 111, :ee 555, :cc 333, :bb 222)
    f(:dd 444, :bb 222, :aa 111, :ee 555, :cc 333)
    f(:dd 444, :bb 222, :cc 333, :ee 555, :aa 111)
    f(:dd 444, :bb 222, :ee 555, :aa 111, :cc 333)
    f(:dd 444, :bb 222, :ee 555, :cc 333, :aa 111)
    f(:dd 444, :cc 333, :aa 111, :ee 555, :bb 222)
    f(:dd 444, :cc 333, :bb 222, :ee 555, :aa 111)
    f(:dd 444, :cc 333, :ee 555, :aa 111, :bb 222)
    f(:dd 444, :cc 333, :ee 555, :bb 222, :aa 111)
    f(:dd 444, :ee 555, :aa 111, :bb 222, :cc 333)
    f(:dd 444, :ee 555, :aa 111, :cc 333, :bb 222)
    f(:dd 444, :ee 555, :bb 222, :aa 111, :cc 333)
    f(:dd 444, :ee 555, :bb 222, :cc 333, :aa 111)
    f(:dd 444, :ee 555, :cc 333, :aa 111, :bb 222)
    f(:dd 444, :ee 555, :cc 333, :bb 222, :aa 111)
    f(:ee 555, :aa 111, :bb 222, :cc 333, :dd 444)
    f(:ee 555, :aa 111, :bb 222, :dd 444, :cc 333)
    f(:ee 555, :aa 111, :cc 333, :bb 222, :dd 444)
    f(:ee 555, :aa 111, :cc 333, :dd 444, :bb 222)
    f(:ee 555, :aa 111, :dd 444, :bb 222, :cc 333)
    f(:ee 555, :aa 111, :dd 444, :cc 333, :bb 222)
    f(:ee 555, :bb 222, :aa 111, :cc 333, :dd 444)
    f(:ee 555, :bb 222, :aa 111, :dd 444, :cc 333)
    f(:ee 555, :bb 222, :cc 333, :aa 111, :dd 444)
    f(:ee 555, :bb 222, :cc 333, :dd 444, :aa 111)
    f(:ee 555, :bb 222, :dd 444, :aa 111, :cc 333)
    f(:ee 555, :bb 222, :dd 444, :cc 333, :aa 111)
    f(:ee 555, :cc 333, :aa 111, :bb 222, :dd 444)
    f(:ee 555, :cc 333, :aa 111, :dd 444, :bb 222)
    f(:ee 555, :cc 333, :bb 222, :aa 111, :dd 444)
    f(:ee 555, :cc 333, :bb 222, :dd 444, :aa 111)
    f(:ee 555, :cc 333, :dd 444, :aa 111, :bb 222)
    f(:ee 555, :cc 333, :dd 444, :bb 222, :aa 111)
    f(:ee 555, :dd 444, :aa 111, :bb 222, :cc 333)
    f(:ee 555, :dd 444, :aa 111, :cc 333, :bb 222)
    f(:ee 555, :dd 444, :bb 222, :aa 111, :cc 333)
    f(:ee 555, :dd 444, :bb 222, :cc 333, :aa 111)
    f(:ee 555, :dd 444, :cc 333, :aa 111, :bb 222)
    f(:ee 555, :dd 444, :cc 333, :bb 222, :aa 111)
    """)

t.interpret("Keyargs after posargs.",
    """
    define f(a: Integer, b: Integer, :c c: Integer, :d d: Integer) {
        if [a, b, c, d] != [5, 10, 15, 20]: {
            raise Exception("Failed.")
        }
    }

    f(5, 10, :c 15, :d 20)
    f(5, 10, :d 20, :c 15)
    """)

t.interpret("Duplicate keyargs for vararg.",
    """
    define f(:a a: Integer...) {
        if a != [5, 10, 15, 20]: {
            raise Exception("Failed.")
        }
    }

    f(5, 10, :a 15, :a 20)
    """)

define keyvar_total_nopad(:va args: Integer...): Integer
{
    var va_total = 0
    args.each(|a| va_total += a )
    return va_total
}

define keyvar_total(:u unused: String, :va args: Integer...): Integer
{
    var va_total = 0
    args.each(|a| va_total += a )
    return va_total
}

t.assert("Keyvar call with prefix value and 3 values (0 pos).",
         (|| keyvar_total(:u "a", :va 1, :va 2, :va 3) == 6 ))

t.assert("Keyvar call with prefix value and 3 values (1 pos).",
         (|| keyvar_total("a", :va 1, :va 2, :va 3) == 6 ))

t.assert("Keyvar call with prefix value and 3 values (2 pos).",
         (|| keyvar_total("a", 1, :va 2, :va 3) == 6 ))

t.assert("Keyvar call with prefix value and 3 values (3 pos).",
         (|| keyvar_total("a", 1, 2, :va 3) == 6 ))

t.assert("Keyvar call with prefix value and 0 values.",
         (|| keyvar_total(:u "a") == 0 ))

t.assert("Keyvar call with no prefix value and 3 values (0 pos).",
         (|| keyvar_total_nopad(:va 1, :va 2, :va 3) == 6 ))

t.assert("Keyvar call with no prefix value and 3 values (1 pos).",
         (|| keyvar_total_nopad(1, :va 2, :va 3) == 6 ))

t.assert("Keyvar call with no prefix value and 3 values (2 pos).",
         (|| keyvar_total_nopad(1, 2, :va 3) == 6 ))

t.assert("Keyvar call with no prefix value and 0 values.",
         (|| keyvar_total_nopad() == 0 ))

t.interpret("Class method taking keyargs.",
    """\
    class Example {
        public define f(:a a: Integer): Integer {
            return a
        }
    }

    if Example().f(:a 10) != 10: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Keyargs mixed order for a variant.",
    """
    enum Example {
        One(:a Integer, :b String, :c Boolean),
        Two
    }

    var v = One(:c false, :a 10, :b "asdf")
    var v2 = One(10, "asdf", false)

    if v != v2: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Keyargs mixed order for a scoped variant.",
    """
    scoped enum Example {
        One(:a Integer, :b String, :c Boolean),
        Two
    }

    var v = Example.One(:b "asdf", :a 10, :c false)
    var v2 = Example.One(10, "asdf", false)

    if v != v2: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Keyarg spectrum with optarg holes.",
    """
    define keyopt_fn(expect: Integer,
                     :a a: *Integer = 0,
                     :b b: *Integer = 0,
                     :c c: *Integer = 0,
                     :d d: *Integer = 0)
    {
        var total = a + b + c + d

        if total != expect: {
            raise Exception("Failed.")
        }
    }

    keyopt_fn (10, :a 1, :b 2, :c 3, :d 4)
    keyopt_fn (10, :a 1, :b 2, :d 4, :c 3)
    keyopt_fn (6,  :a 1, :b 2, :c 3)
    keyopt_fn (7,  :a 1, :b 2, :d 4)
    keyopt_fn (10, :a 1, :c 3, :b 2, :d 4)
    keyopt_fn (10, :a 1, :c 3, :d 4, :b 2)
    keyopt_fn (6,  :a 1, :c 3, :b 2)
    keyopt_fn (8,  :a 1, :c 3, :d 4)
    keyopt_fn (10, :a 1, :d 4, :b 2, :c 3)
    keyopt_fn (10, :a 1, :d 4, :c 3, :b 2)
    keyopt_fn (7,  :a 1, :d 4, :b 2)
    keyopt_fn (8,  :a 1, :d 4, :c 3)
    keyopt_fn (6,  :a 1, :b 2, :c 3)
    keyopt_fn (7,  :a 1, :b 2, :d 4)
    keyopt_fn (6,  :a 1, :c 3, :b 2)
    keyopt_fn (8,  :a 1, :c 3, :d 4)
    keyopt_fn (7,  :a 1, :d 4, :b 2)
    keyopt_fn (8,  :a 1, :d 4, :c 3)
    keyopt_fn (3,  :a 1, :b 2)
    keyopt_fn (4,  :a 1, :c 3)
    keyopt_fn (5,  :a 1, :d 4)
    keyopt_fn (10, :b 2, :a 1, :c 3, :d 4)
    keyopt_fn (10, :b 2, :a 1, :d 4, :c 3)
    keyopt_fn (6,  :b 2, :a 1, :c 3)
    keyopt_fn (7,  :b 2, :a 1, :d 4)
    keyopt_fn (10, :b 2, :c 3, :a 1, :d 4)
    keyopt_fn (10, :b 2, :c 3, :d 4, :a 1)
    keyopt_fn (6,  :b 2, :c 3, :a 1)
    keyopt_fn (9,  :b 2, :c 3, :d 4)
    keyopt_fn (10, :b 2, :d 4, :a 1, :c 3)
    keyopt_fn (10, :b 2, :d 4, :c 3, :a 1)
    keyopt_fn (7,  :b 2, :d 4, :a 1)
    keyopt_fn (9,  :b 2, :d 4, :c 3)
    keyopt_fn (6,  :b 2, :a 1, :c 3)
    keyopt_fn (7,  :b 2, :a 1, :d 4)
    keyopt_fn (6,  :b 2, :c 3, :a 1)
    keyopt_fn (9,  :b 2, :c 3, :d 4)
    keyopt_fn (7,  :b 2, :d 4, :a 1)
    keyopt_fn (9,  :b 2, :d 4, :c 3)
    keyopt_fn (3,  :b 2, :a 1)
    keyopt_fn (5,  :b 2, :c 3)
    keyopt_fn (6,  :b 2, :d 4)
    keyopt_fn (10, :c 3, :a 1, :b 2, :d 4)
    keyopt_fn (10, :c 3, :a 1, :d 4, :b 2)
    keyopt_fn (6,  :c 3, :a 1, :b 2)
    keyopt_fn (8,  :c 3, :a 1, :d 4)
    keyopt_fn (10, :c 3, :b 2, :a 1, :d 4)
    keyopt_fn (10, :c 3, :b 2, :d 4, :a 1)
    keyopt_fn (6,  :c 3, :b 2, :a 1)
    keyopt_fn (9,  :c 3, :b 2, :d 4)
    keyopt_fn (10, :c 3, :d 4, :a 1, :b 2)
    keyopt_fn (10, :c 3, :d 4, :b 2, :a 1)
    keyopt_fn (8,  :c 3, :d 4, :a 1)
    keyopt_fn (9,  :c 3, :d 4, :b 2)
    keyopt_fn (6,  :c 3, :a 1, :b 2)
    keyopt_fn (8,  :c 3, :a 1, :d 4)
    keyopt_fn (6,  :c 3, :b 2, :a 1)
    keyopt_fn (9,  :c 3, :b 2, :d 4)
    keyopt_fn (8,  :c 3, :d 4, :a 1)
    keyopt_fn (9,  :c 3, :d 4, :b 2)
    keyopt_fn (4,  :c 3, :a 1)
    keyopt_fn (5,  :c 3, :b 2)
    keyopt_fn (7,  :c 3, :d 4)
    keyopt_fn (10, :d 4, :a 1, :b 2, :c 3)
    keyopt_fn (10, :d 4, :a 1, :c 3, :b 2)
    keyopt_fn (7,  :d 4, :a 1, :b 2)
    keyopt_fn (8,  :d 4, :a 1, :c 3)
    keyopt_fn (10, :d 4, :b 2, :a 1, :c 3)
    keyopt_fn (10, :d 4, :b 2, :c 3, :a 1)
    keyopt_fn (7,  :d 4, :b 2, :a 1)
    keyopt_fn (9,  :d 4, :b 2, :c 3)
    keyopt_fn (10, :d 4, :c 3, :a 1, :b 2)
    keyopt_fn (10, :d 4, :c 3, :b 2, :a 1)
    keyopt_fn (8,  :d 4, :c 3, :a 1)
    keyopt_fn (9,  :d 4, :c 3, :b 2)
    keyopt_fn (7,  :d 4, :a 1, :b 2)
    keyopt_fn (8,  :d 4, :a 1, :c 3)
    keyopt_fn (7,  :d 4, :b 2, :a 1)
    keyopt_fn (9,  :d 4, :b 2, :c 3)
    keyopt_fn (8,  :d 4, :c 3, :a 1)
    keyopt_fn (9,  :d 4, :c 3, :b 2)
    keyopt_fn (5,  :d 4, :a 1)
    keyopt_fn (6,  :d 4, :b 2)
    keyopt_fn (7,  :d 4, :c 3)
    keyopt_fn (6,  :a 1, :b 2, :c 3)
    keyopt_fn (7,  :a 1, :b 2, :d 4)
    keyopt_fn (6,  :a 1, :c 3, :b 2)
    keyopt_fn (8,  :a 1, :c 3, :d 4)
    keyopt_fn (7,  :a 1, :d 4, :b 2)
    keyopt_fn (8,  :a 1, :d 4, :c 3)
    keyopt_fn (3,  :a 1, :b 2)
    keyopt_fn (4,  :a 1, :c 3)
    keyopt_fn (5,  :a 1, :d 4)
    keyopt_fn (6,  :b 2, :a 1, :c 3)
    keyopt_fn (7,  :b 2, :a 1, :d 4)
    keyopt_fn (6,  :b 2, :c 3, :a 1)
    keyopt_fn (9,  :b 2, :c 3, :d 4)
    keyopt_fn (7,  :b 2, :d 4, :a 1)
    keyopt_fn (9,  :b 2, :d 4, :c 3)
    keyopt_fn (3,  :b 2, :a 1)
    keyopt_fn (5,  :b 2, :c 3)
    keyopt_fn (6,  :b 2, :d 4)
    keyopt_fn (6,  :c 3, :a 1, :b 2)
    keyopt_fn (8,  :c 3, :a 1, :d 4)
    keyopt_fn (6,  :c 3, :b 2, :a 1)
    keyopt_fn (9,  :c 3, :b 2, :d 4)
    keyopt_fn (8,  :c 3, :d 4, :a 1)
    keyopt_fn (9,  :c 3, :d 4, :b 2)
    keyopt_fn (4,  :c 3, :a 1)
    keyopt_fn (5,  :c 3, :b 2)
    keyopt_fn (7,  :c 3, :d 4)
    keyopt_fn (7,  :d 4, :a 1, :b 2)
    keyopt_fn (8,  :d 4, :a 1, :c 3)
    keyopt_fn (7,  :d 4, :b 2, :a 1)
    keyopt_fn (9,  :d 4, :b 2, :c 3)
    keyopt_fn (8,  :d 4, :c 3, :a 1)
    keyopt_fn (9,  :d 4, :c 3, :b 2)
    keyopt_fn (5,  :d 4, :a 1)
    keyopt_fn (6,  :d 4, :b 2)
    keyopt_fn (7,  :d 4, :c 3)
    keyopt_fn (3,  :a 1, :b 2)
    keyopt_fn (4,  :a 1, :c 3)
    keyopt_fn (5,  :a 1, :d 4)
    keyopt_fn (3,  :b 2, :a 1)
    keyopt_fn (5,  :b 2, :c 3)
    keyopt_fn (6,  :b 2, :d 4)
    keyopt_fn (4,  :c 3, :a 1)
    keyopt_fn (5,  :c 3, :b 2)
    keyopt_fn (7,  :c 3, :d 4)
    keyopt_fn (5,  :d 4, :a 1)
    keyopt_fn (6,  :d 4, :b 2)
    keyopt_fn (7,  :d 4, :c 3)
    keyopt_fn (1,  :a 1)
    keyopt_fn (2,  :b 2)
    keyopt_fn (3,  :c 3)
    keyopt_fn (4,  :d 4)
    """)

t.interpret("Keyarg+vararg with vararg defaulting.",
    """
    define vakeyopt_fn(expect: Integer,
                       :a a: *Integer = 1,
                       :b b: *Integer = 2,
                       :c c: *Integer...=[3, 4])
    {
        var total = a + b + c.fold(0, (|x, y| x + y ))

        if total != expect: {
            raise Exception("Failed.")
        }
    }

    vakeyopt_fn(12, :a 2, :b 3)
    """)

t.interpret("Keyarg+vararg with only varargs.",
    """
    define vakeyopt_fn(expect: Integer,
                       :a a: *Integer = 1,
                       :b b: *Integer = 2,
                       :c c: *Integer...=[3, 4])
    {
        var total = a + b + c.fold(0, (|x, y| x + y ))

        if total != expect: {
            raise Exception("Failed.")
        }
    }

    vakeyopt_fn(18, :c 5, :c 10)
    """)
