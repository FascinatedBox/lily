import bench

enum Tree {
    Leaf(Integer),
    Branch(Integer, Tree, Tree)
}

define make_tree(item: Integer, depth: Integer): Tree
{
    if depth == 0: {
        return Leaf(item)
    }

    var item2 = item + item
    depth -= 1
    return Branch(item, make_tree(item2 - 1, depth), make_tree(item2, depth))
}

define check_tree(t: Tree): Integer
{
    match t: {
        case Leaf(i):
            return i
        case Branch(i, left, right):
            return i + check_tree(left) - check_tree(right)
    }
}

define run_stretch(min: Integer, max: Integer)
{
    var long_lived_tree = make_tree(0, max + 1)
    var iterations = 1
    var stretch_depth = max + 1

    for i in 1...max: {
        iterations *= 2
    }

    for depth in min...stretch_depth by 2: {
        var check = 0

        for i in 1...iterations: {
            var k = 1
            check += check_tree(make_tree(i, depth)) + check_tree(make_tree(-i, depth))
        }

        iterations /= 4
        bench.log("{0} trees of depth {1} check: {2}".format(iterations * 2, depth, check))
    }

    bench.log("long lived tree of depth {0} check: {1}".format(max, check_tree(long_lived_tree)))
}

define run_depth(max: Integer)
{
    var stretch_depth = max + 1
    var tree = make_tree(0, stretch_depth)
    var check = check_tree(tree)

    bench.log("stretch tree of depth {0} check: {1}".format(stretch_depth, check))
}

define bench_test
{
    var min = bench.parameter(4, :quiet 2)
    var max = bench.parameter(12, :quiet 6)
    var start = bench.start()

    run_depth(max + 1)
    run_stretch(min, max)
    bench.finish(start)
}

bench.run(bench_test)
