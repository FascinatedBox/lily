import test

var t = test.t

t.scope(__file__)

t.interpret("Verify basics of generic enums.",
    """
    class Test {
        public var @value: Option[String] = None
    }

    define check_assigning {
        var v = Some(10)
        v = None

        var t = Test()
        t.value = Some("")
    }

    define check_variant_returning {
        define a: Option[Integer] { return Some(1) }
        define b: Option[Integer] { return None }
    }

    define check_defaulting {
        var a: List[Option[Integer]] = [Some(10), None, None]
        var b: Hash[Integer, Option[Integer]] = [1=>None, 2=>Some(10), 3=>Some(11)]
    }

    define check_pass_by_value {
        define f(a: Option[Integer])
        {
            var v = [a]
            a = Some(11)
            match v[0]: {
        case Some(s):
            raise Exception("Failed.")
        case None:
            }
        }

        var v: Option[Integer] = Some(10)
    }

    define check_generic_calls {
        define f[A](first: Option[A], second: Option[A]) {  }

        f(None, None)
        f(Some(10), Some(10))
        f(Some("10"), None)
        f(None, Some(10))
    }

    define check_varargs {
        define f[A](values: Option[A]...) {  }

        f(None, None, None)
        f(None, Some(10), None)
        f(Some(10), Some(10))
    }

    define check_nesting {
        var t: Option[Option[Integer]] = Some(Some(10))
    }

    check_assigning()
    check_variant_returning()
    check_defaulting()
    check_pass_by_value()
    check_generic_calls()
    check_varargs()
    check_nesting()
    """)

t.interpret("Verify that enum variants can dispatch to enum methods.",
    """
    enum Test[A] {
        One(A),
        Two

        define f(g: Test[A]) {
        }

        define h[B](i: Test[B]) {
        }

        define map[B](f: Function(A => B)): Test[B] {
            match self: {
                case One(s):
                    return One(f(s))
                case Two:
                    return Two
            }
        }
    }

    Two.f(One(10))
    One(10).f(One(10))
    One("10").h(One(10))

    One(10).map(Integer.to_s)
    One(true).map(|a| a.to_i())
    """)

t.interpret("Verify an enum class member function.",
    """
    enum Test[A] {
        One(A),
        Two

        define or_else(other: A) : A {
            match self: {
                case One(s):
                    return s
                case Two:
                    return other
            }
        }
    }

    if Test.or_else(One(1), 2) != 1: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Verify that scoped enums don't collide with non-scoped enums.",
    """
    enum StrangeSpeed {
        Fast,
        Medium,
        Slow
    }

    scoped enum Speed {
        Fast,
        Medium,
        Slow
    }
    """)

t.interpret("Verify enum match using else.",
    """
    enum RGB {
        Red,
        Green,
        Blue
    }

    var red_count = 0
    var else_count = 0
    var colors = [Red, Blue, Green]

    for i in 0...colors.size()-1: {
        match colors[i]: {
            case Red: red_count += 1
            else: else_count += 1
        }
    }

    if red_count != 1 || else_count != 2: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Verify skipping match decomposition using underscore.",
    """
    var v = Some(1)
    match v: {
        case Some(_):
        case None:
    }
    """)

t.interpret("Call chain with multiple member functions.",
    """
    enum Test[A] {
        One(A),
        Two

        define with_default(a: *Integer = 0) : Test[A] {
            return self
        }

        define and_then(f: Function(A => Test[A])) : Test[A] {
            match self: {
                case One(s):
                    return f(s)
                case Two:
                    return Two
            }
        }
        define force: A {
            match self: {
                case One(s):
                    return s
                case Two:
                    raise ValueError("No value is present.")
            }
        }
    }

    var v = One(10)

    if
        v.and_then((|a| One(a * a)))
         .with_default()
         .and_then((|a| One(a * a)))
         .with_default(1)
         .force()
        != 10000: {
       raise Exception("Failed.")
    }
    """)

t.interpret("[scoped_enums]",
    """
    scoped enum ScopeTest[A] {
        One(A),
        Two
    }

    var v = [ScopeTest.One(1), ScopeTest.Two, ScopeTest.One(2)]
    var check: ScopeTest[Integer] = v[0]

    match check: {
        case ScopeTest.One(s):
        case ScopeTest.Two:
            raise Exception("Check failed (Should be Option[Integer])")
    }

    define f(a: *ScopeTest[Integer] = ScopeTest.Two) {}
    """)

t.interpret("Check unified generic solving.",
    """
    enum Dual[A, B] {
        One(A),
        Two(B)
    }

    define f[A](a: A, b: A) {}

    f(One(10), Two(""))
    var v = [One(5), One(10), Two([1])]
    """)

t.interpret("Check decomposition of variants with multiple arguments.",
    """
    enum Test[A] { Multi(A, A), Single(A) }

    var v = Multi(1, 2)

    match v: {
        case Multi(s1, s2):
        case Single(s3):
    }
    """)

t.interpret("Check using _ with class match.",
    """
    enum Test[A] { Multi(A, A), Single(A) }

    var v = Multi(1, 2)

    match v: {
        case Multi(s1, s2):
        case Single(s3):
    }
    """)

t.assert("Variants use the enum for method lookup.",
         (||
    Some(1).is_some() ))
