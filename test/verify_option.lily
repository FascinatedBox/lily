import test

var t = test.t

t.scope(__file__)

t.assert("Option.is_none with None.",
         (|| None.is_none() ))

t.assert("Option.is_none with Some.",
         (|| Some(1).is_none() == false ))


t.assert("Option.is_some with None.",
         (|| None.is_some() == false ))

t.assert("Option.is_some with Some.",
         (|| Some(1).is_some() ))


t.assert("Option.and with None and None.",
         (|| None.and(None).is_none() ))

t.assert("Option.and with None and Some.",
         (|| None.and(Some(1)).is_none() ))

t.assert("Option.and with Some and None.",
         (|| Some(1).and(None).is_none() ))

t.assert("Option.and with Some and Some.",
         (|| Some(1).and(Some(2)).is_some() ))


t.assert("Option.and_then with None.",
         (||
    var v: Option[Integer] = None
    v.and_then(|x| x * x).is_none() ))

define opt_square(x: Integer): Option[Integer] { return Some(x * x) }

t.assert("Option.and_then with Some.",
         (|| Some(4).and_then(|x| Some(x * x)).unwrap() == 16 ))


t.assert("Option.map with None.",
         (||
    var v: Option[List[Integer]] = None
    v.map(|x| x.size()).is_none() ))

t.assert("Option.map with Some.",
         (|| Some([1, 2, 3]).map(List.size).unwrap() == 3 ))


t.assert("Option.or using None and None.",
         (||
    var v: Option[Integer] = None
    v.or(v).is_none() ))

t.assert("Option.or using None and Some.",
         (||
    var v: Option[Integer] = None
    v.or(Some(2)).unwrap() == 2 ))

t.assert("Option.or using Some and None.",
         (|| Some(1).or(None).unwrap() == 1 ))

t.assert("Option.or using Some and Some.",
         (|| Some(1).or(Some(2)).unwrap() == 1 ))


t.assert("Option.or_else with None.",
         (||
    var v: Option[Integer] = None
    v.or_else(|| Some(1) ).unwrap() == 1 ))

t.assert("Option.or_else with Some.",
         (|| Some(1).or_else(|| Some(1 / 0) ).unwrap() == 1 ))


t.expect_error("Option.unwrap with None.",
               "ValueError: unwrap called on None.",
               (||
    var v: Option[Integer] = None
    v.unwrap()
    false ))

t.assert("Option.unwrap with Some.",
         (|| Some(1).unwrap() == 1 ))


t.assert("Option.unwrap_or with None.",
         (||
    var v: Option[Integer] = None
    v.unwrap_or(5) == 5 ))

t.assert("Option.unwrap_or with Some.",
         (|| Some(1).unwrap_or(5) == 1 ))


t.assert("Option.unwrap_or_else with None.",
         (||
    var v: Option[Integer] = None
    v.unwrap_or_else(|| 5) == 5 ))

t.assert("Option.unwrap_or_else with Some.",
         (|| Some(1).unwrap_or_else(|| 1 / 0) == 1 ))
