import test

var t = test.t

t.scope(__file__)

t.interpret("Check jump patching of closures.",
    """
    # This is an internal-ish test that makes sure that the jumps are correct.
    # If they aren't, this segfaults.

    define f: Integer {
        var a = 1
        define g: Integer {
            a = a - 1
            return a
        }

        if a <= 0: {
            return a
        else:
            return g()
        }
    }

    f()
    """)

t.interpret("Verify that closures are getting fresh cells.",
    """
    define f : List[List[Integer]] {
        define g : Tuple[Function(), Function( => List[Integer])] {
            var v: List[Integer] = [0]
            define h {
                v.push(v[-1] + 1)
            }
            define i : List[Integer] {
                return v
            }
            return <[h, i]>
        }
        var a = g()
        var b = g()

        a[0]()
        a[0]()
        a[0]()
        a[1]()

        b[0]()
        return [a[1](), b[1]()]
    }

    if f() != [[0, 1, 2, 3], [0, 1]]: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify calling into the closure base creates a different closure.",
    """
    define f : Boolean {
        var a = 0
        var ok = true

        define g {
            var v = 10

            define h {
                v += 100
            }

            define i {
                if a == 0: {
                    h()
                    a = 1
                    g()
                    # This test ensures that the inner call to g doesn't modify the
                    # upvalues of the current call to g.
                    if v != 110: {
                        ok = false
                    }
                }
            }

            i()
        }

        g()
        return ok
    }

    if f() != true: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify closure over a function parameter.",
    """
    define f(a: Integer) :
        Tuple[Function(), Function( => Integer)] {

        define g { a += 1 }
        define h : Integer { return a }
        return <[g, h]>
    }

    var v = f(10)
    var increment = v[0]
    var ret = v[1]

    increment()
    increment()
    if ret() != 12: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify closing over of locals in a constructor.",
    """
    class Example {
        public var @x = (|z: Integer| (|| z * z )() )
        public define k(a: Integer): Integer {
            return @x(a)
        }
    }

    if Example().k(5) != 25: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify closing a global loop var in a function.",
    """
    define wrap(x: Integer) : Function( => Integer) {
        return (|| x * x)
    }

    var l: List[Function( => Integer)] = []

    for i in 0...4: {
        l.push(wrap(i))
    }

    if l.map(|f| f() ) != [0, 1, 4, 9, 16]: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify closure jump patching can go backward.",
    """
    define f[A](a: A...) {  }

    define bug {
        var lst = [""]
        for i in 0...0: {
            var a = 1
            f(a, a, a, a)
            lst.each(|e| a += 1 )
        }
    }

    bug()
    """)

t.interpret("Verify closing over optarg parameter that isn't assigned.",
    """
    define f(a: *Integer=10): Function( => Integer) {
        define g : Integer { return a }
        return g
    }

    if f()() != 10: {
        raise Exception("Optarg closure with no args failed.")
    }

    f(11)()

    if f(11)() != 11: {
        raise Exception("Optarg closure with 1 arg failed.")
    }
    """)

t.interpret("Verify match over an enum that is an upvalue.",
    """
    define f {
        var v = Some(1)
        define g {
            match v: {
                case Some(s):
                case None:
            }
        }
    }
    """)

t.interpret("Verify returning a closure over a loop index.",
    """
    define test: Function(=> Integer) {
        for i in 5...10: {
            return (|| i)
        }
        return (|| 0)
    }

    if test()() != 5: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify closure jump patching accounts for transforms.",
    """
    # This test makes sure that closure jump patching accounts for o_get_upvalue
    # transformations that are done.
    # If it does not, then the jump to 'short' will not include the o_get_upvalue
    # read. As a result, 'short' will see the stale value of 'ch', instead of the
    # fresh value from the closure.

    define parse_line {
        var ch = "X"
        var short = ""

        define get: String {
            ch = "+"
            return ch
        }

        if get() == "-": {
        else:
            short = ch
        }

        if short != "+": {
            raise Exception("Failed.")
        }
    }

    parse_line()
    """)

t.interpret("Verify returning a closure over a var that is decomposed to.",
    """
    define f(a: Option[Integer]): Function( => Integer) {
        var v = (|| 1)

        match a: {
            case Some(s):
                v = (|| s)
            case None:
        }

        return v
    }

    if f(Some(10))() != 10: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify closure jump patching for simple 'if'.",
    """
    define g {}

    # This strangely-named test makes sure that jumps to future locations are
    # are patched correctly within a function.
    # If they aren't, this crashes.

    define f {
        if 1 == 1: {
            g()
        else:
            g()
        }
    }

    f()
    """)

t.interpret("Verify lambda closing over class self for prop assign.",
    """
    class Example {
        public var @a = 1

        public define f: Function() {
            return (|| @a = 2 )
        }
    }

    var v = Example()
    var func = v.f()
    func()
    if v.a != 2: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify lambda closing over class self for prop get.",
    """
    class Example {
        public var @a = 10

        public define f: Integer {
            return (|| @a )()
        }
    }

    if Example().f() != 10: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify lambda closing over class self for a method call.",
    """
    class Example {
        public var @a = 1

        public define g: Integer { return 10 }
        public define f: Integer {
            return (|| g() )()
        }
    }

    if Example().f() != 10: {
        raise Exception("Failed.")
    }
    """)

t.interpret("Verify an inner define closing over class self for prop get.",
    """
    class Example {
        public var @a = 10

        public define f: Integer {
            define g {
                @a = 20
            }

            g()
            return @a
        }

        f()
    }

    if Example().f() != 20: {
        raise Exception("Failed.")
    }
    """)

t.interpret_for_error("Verify closure traceback.",
    """\
    DivisionByZeroError: Attempt to divide by zero.\n\
    Traceback:\n    \
        from test\/[subinterp]:4: in h\n    \
        from test\/[subinterp]:7: in g\n    \
        from test\/[subinterp]:10: in f\n    \
        from test\/[subinterp]:13: in __main__\
    """,
    """\
    define f {
        define g {
            define h {
                0 / 0
            }

            h()
        }

        g()
    }

    f()
    """)
