import test

var t = test.t

t.scope(__file__)

t.interpret_for_error("Forbid catch for exceptions with generics.",
    """\
    SyntaxError: 'except' type cannot have subtypes.\n    \
        from test\/[subinterp]:8:\
    """,
    """\
    class Ex[A](message: String, v: A) < Exception(message)
    {
        public var @value = v
    }

    try: {
        raise Ex("", 100)
    except Ex[Integer] as e:
        if e.value != 100:
            raise Exception("Failed.")
    }
    """)

t.interpret_for_error("Forbid catch of classes not inheriting Exception.",
    """\
    SyntaxError: 'String' is not a valid exception class.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    try: {
        1 / 0
    except String:
        0
    }
    """)

t.interpret_for_error("Verify custom exception throw.",
    """\
    MyException: Correct!\n\
    Traceback:\n    \
        from test\/[subinterp]:5: in __main__\
    """,
    """\
    class MyException(msg: String) < Exception(msg) {

    }

    raise MyException("Correct!")
    """)

t.interpret_for_error("Throw exception in except clause of a different exception.",
    """\
    DivisionByZeroError: Attempt to divide by zero.\n\
    Traceback:\n    \
        from test\/[subinterp]:4: in __main__\
    """,
    """\
    try: {
        raise ValueError("10")
    except ValueError:
        var v = 1 / 0
    }
    """)

t.interpret_for_error("Throw exception from a method.",
    """\
    ValueError: Message.\n\
    Traceback:\n    \
        from test\/[subinterp]:5: in Example.action\n    \
        from test\/[subinterp]:8: in Example\n    \
        from test\/[subinterp]:11: in __main__\
    """,
    """\
    class Example {
        public define action {
            if 1: {
                var k = ValueError("Message.")
                raise k
            }
        }
        action()
    }

    Example()
    """)

t.interpret_for_error("Raise used within a class constructor.",
    """\
    ValueError: Test\n\
    Traceback:\n    \
        from test\/[subinterp]:3: in Example\n    \
        from test\/[subinterp]:6: in __main__\
    """,
    """\
    class Example
    {
        raise ValueError("Test")
    }

    Example()
    """)

t.interpret_for_error("Verify that 'return' pops try blocks.",
    """\
    ValueError: Test\n\
    Traceback:\n    \
        from test\/[subinterp]:15: in g\n    \
        from test\/[subinterp]:19: in __main__\
    """,
    """\
    define f(a: Integer)
    {
        try: {
            while 1: {
                1
                return
            }
        except Exception as e:
            raise Exception("Failed.")
        }
    }

    define g
    {
        raise ValueError("Test")
    }

    f(1)
    g()
    """)

t.interpret_for_error("Check traceback line.",
    """\
    Exception: Test\n\
    Traceback:\n    \
        from test\/[subinterp]:1: in __main__\
    """,
    """\
    raise Exception("Test")
    """)

t.interpret_for_error("Verify that KeyError is thrown for missing key in hash.",
    """\
    KeyError: "b"\n\
    Traceback:\n    \
        from test\/[subinterp]:3: in __main__\
    """,
    """\
    var v = ["a" => 1]

    var w = v["b"]
    """)

t.interpret_for_error("Forbid using 'try' vars in 'except' clauses.",
    """\
    SyntaxError: v has not been declared.\n    \
        from test\/[subinterp]:5:\
    """,
    """\
    # This isn't allowed, because 'v' cannot be guaranteed to be set.
    try: {
        var v = 10
    except Exception:
        v = 11
    }
    """)

t.interpret_for_error("Forbid unreachable except clauses.",
    """\
    SyntaxError: 'except' clause is unreachable.\n    \
        from test\/[subinterp]:5:\
    """,
    """\
    try: {
        1 / 0
    except Exception:
        1
    except IndexError:
        2
    }
    """)

t.interpret_for_error("Forbid invalid raise class.",
    """\
    SyntaxError: Invalid class 'String' given to raise.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    raise "abc"
    """)

t.interpret_for_error("Forbid except outside try.",
    """\
    SyntaxError: 'except' outside 'try'.\n    \
        from test\/[subinterp]:2:\
    """,
    """\
    except
    """)

t.interpret_for_error("Except var already declared.",
    """\
    SyntaxError: v has already been declared.\n    \
        from test\/[subinterp]:4:\
    """,
    """\
    var v = 10
    try: {
        1
    except Exception as v:
        1
    }
    """)

t.interpret_for_error("A label after except class should be 'as'.",
    """\
    SyntaxError: Expected 'as', not 'asdf'.\n    \
        from test\/[subinterp]:3:\
    """,
    """\
    try: {
        1
    except Exception asdf:
        1
    }
    """)

t.interpret_for_error("Raise exception with empty message.",
    """\
    ValueError\n\
    Traceback:\n    \
        from test\/[subinterp]:1: in __main__\
    """,
    """\
    raise ValueError("")
    """)
