import (Interpreter,
        TestCase) "../t/testing"

class TestBadClass < TestCase
{
    public define test_bad_constructor
    {
        var t = Interpreter()

        # bad constructor (cannot use return)

        assert_parse_fails(t, """\
            SyntaxError: 'return' not allowed in a class constructor.

               |
             3 | return self
               | ^

                from [test]:3:
        """,
        """\
            class example {
                if 1: {
                    return self
                }
            }
        """)

        # bad constructor (close over self for property)
        # Blocked because it creates a closure at the instance level.

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a class property here.
                from [test]:3:
        """,
        """\
            class Example {
                public var @a = 1
                public var @b = (|| @a += 1 )
            }
        """)

        # bad constructor (close over self for instance method)

        assert_parse_fails(t, """\
            SyntaxError: Class constructors cannot call non-static methods.
                from [test]:3:
        """,
        """\
            class Example {
                public define f {}
                public var @b = (|| f() )
            }
        """)

        # bad constructor (closing over constructor vars)
        # Blocked because it creates a closure at the instance level.

        assert_parse_fails(t, """\
            SyntaxError: Not allowed to close over variables from a class constructor.
                from [test]:3:
        """,
        """\
            class Example(a: Integer) {
                public define f {
                    var v = a
                }
            }
        """)
    }

    public define test_bad_decl
    {
        var t = Interpreter()

        # bad decl (redeclare property as method)

        assert_parse_fails(t, """\
            SyntaxError: A property in class 'Test' already has the name @abc.

               |
             3 | public define abc {
               |               ^

                from [test]:3:
        """,
        """\
            class Test {
                public var @abc = 10
                public define abc {

                }
            }
        """)

        # bad decl (redeclare method as property)

        assert_parse_fails(t, """\
            SyntaxError: A method in class 'Test' already has the name 'abc'.

               |
             5 | public var @abc = 10
               |            ^

                from [test]:5:
        """,
        """\
            class Test {
                public define abc {

                }
                public var @abc = 10
            }
        """)

        # bad decl (declare property twice)

        assert_parse_fails(t, """\
            SyntaxError: A property in class 'ABC' already has the name @a.

               |
             1 | class ABC { public var @a = 1 public var @a = 1 }
               |                                          ^

                from [test]:1:
        """,
        """\
            class ABC { public var @a = 1 public var @a = 1 }
        """)

        # bad decl (declare method twice)

        assert_parse_fails(t, """\
            SyntaxError: A method in class 'ABC' already has the name 'a'.

               |
             1 | class ABC { public define a {} public define a {} }
               |                                              ^

                from [test]:1:
        """,
        """\
            class ABC { public define a {} public define a {} }
        """)

        # bad decl (redeclare predefined class)

        assert_parse_fails(t, """\
            SyntaxError: A built-in class named 'Exception' already exists.

               |
             1 | class Exception {}
               |       ^

                from [test]:1:
        """,
        """\
            class Exception {}
        """)

        # bad decl (declare class twice)

        assert_parse_fails(t, """\
            SyntaxError: A class named 'AlreadyExists' has already been declared.

               |
             2 | class AlreadyExists {}
               |       ^

                from [test]:2:
        """,
        """\
            class AlreadyExists {}
            class AlreadyExists {}
        """)

        # bad decl (class method shadows constructor var)

        assert_parse_fails(t, """\
            SyntaxError: x has already been declared.

               |
             2 | public define x {}
               |               ^

                from [test]:2:
        """,
        """\
            class Test(x: Integer) {
                public define x {}
            }
        """)

        # bad decl (predefined class redeclared after dynaload)

        assert_parse_fails(t, """\
            SyntaxError: A built-in class named 'ValueError' already exists.

               |
             3 | class ValueError(message: String) < Exception {
               |       ^

                from [test]:3:
        """,
        """\
            var v = ValueError("")

            class ValueError(message: String) < Exception {

            }
        """)

        # bad decl (ValueError redeclared after dynaload)

        assert_parse_fails(t, """\
            SyntaxError: A built-in class named 'ValueError' already exists.

               |
             3 | class ValueError(message: String) < Exception {
               |       ^

                from [test]:3:
        """,
        """\
            var v = ValueError("")

            class ValueError(message: String) < Exception {

            }
        """)

        # bad decl (redeclare an enum)

        assert_parse_fails(t, """\
            SyntaxError: An enum named 'Example' has already been declared.

               |
             6 | class Example {}
               |       ^

                from [test]:6:
        """,
        """\
            enum Example {
                One,
                Two
            }

            class Example {}
        """)

        # bad decl (redeclare a variant)

        assert_parse_fails(t, """\
            SyntaxError: A variant named 'One' has already been declared.

               |
             6 | class One {}
               |       ^

                from [test]:6:
        """,
        """\
            enum Example {
                One,
                Two
            }

            class One {}
        """)
    }

    public define test_bad_inheritance
    {
        var t = Interpreter()

        # bad inheritance (inherit from foreign class)

        assert_parse_fails(t, """\
            SyntaxError: 'Integer' cannot be inherited from.

               |
             1 | class abc < Integer {  }
               |             ^

                from [test]:1:
        """,
        """\
            class abc < Integer {  }
        """)

        # bad inheritance (inherit from itself)

        assert_parse_fails(t, """\
            SyntaxError: A class cannot inherit from itself!

               |
             1 | class abc < abc {  }
               |             ^

                from [test]:1:
        """,
        """\
            class abc < abc {  }
        """)

        # bad inheritance (inherit from enum)

        assert_parse_fails(t, """\
            SyntaxError: 'Two' cannot be inherited from.

               |
             6 | class example < Two { }
               |                 ^

                from [test]:6:
        """,
        """\
            enum Test {
                One,
                Two
            }

            class example < Two { }
        """)

        # bad inheritance (inherit from missing class)

        assert_parse_fails(t, """\
            SyntaxError: Class 'DoesNotExist' does not exist.

               |
             1 | class One < DoesNotExist {}
               |             ^

                from [test]:1:
        """,
        """\
            class One < DoesNotExist {}
        """)

        # bad inheritance (inherit from var)

        assert_parse_fails(t, """\
            SyntaxError: Class 'v' does not exist.

               |
             2 | class Test < v { }
               |              ^

                from [test]:2:
        """,
        """\
            var v = 10
            class Test < v { }
        """)

        # bad inheritance (inherit reordered generics)
        # This is blocked for two reasons:
        # One, that it has limited use (and is likely wrong)
        # Two, that not allowing it means that generics within a class remain
        # consistent (the A of a base class is the A of any superclass, no
        # matter how deep the lineage).

        assert_parse_fails(t, """\
            SyntaxError: Argument #1 to First is invalid:
            Expected Type: A
            Received Type: B
                from [test]:3:
        """,
        """\
            class First[A](value: A) {  }

            class Second[A, B](v1: A, v2: B) < First(v2) {  }
        """)

        # bad inheritance (from a forward class)

        assert_parse_fails(t, """\
            SyntaxError: Cannot inherit from an incomplete class.

               |
             3 | class Two < One {}
               |             ^

                from [test]:3:
        """,
        """\
            forward class One { ... }

            class Two < One {}
        """)

        # bad inheritance (from a generic)

        assert_parse_fails(t, """\
            SyntaxError: 'A' cannot be inherited from.

               |
             1 | class One[A] < A {}
               |                ^

                from [test]:1:
        """,
        """\
            class One[A] < A {}
        """)
    }

    public define test_bad_match
    {
        var t = Interpreter()

        # bad match (class match using generics)

        assert_parse_fails(t, """\
            SyntaxError: Class matching only works for types without generics.

               |
             6 | case One(o):
               |      ^

                from [test]:6:
        """,
        """\
            class One[A](a: A) {}

            var v = One(1)

            match v: {
                case One(o):
            }
        """)

        # bad match (class match not inheriting base)

        assert_parse_fails(t, """\
            SyntaxError: Class Three does not inherit from matching class One.

               |
             8 | case Three(t):
               |      ^

                from [test]:8:
        """,
        """\
            class One {}
            class Two < One {}
            class Three {}

            var v: One = Two()

            match v: {
                case Three(t):
            }
        """)

        # bad match (require else clause)

        assert_parse_fails(t, """\
            SyntaxError: Match against a class must have an 'else' case.
                from [test]:7:
        """,
        """\
            class One {}

            var v = One()

            match v: {
                case One(o):
            }
        """)

        # bad match (duplicate case)

        assert_parse_fails(t, """\
            SyntaxError: Already have a case for Two.

               |
             8 | case Two(t):
               |      ^

                from [test]:8:
        """,
        """\
            class One {}
            class Two < One {}

            var v = One()

            match v: {
                case Two(t):
                case Two(t):
                else:
            }
        """)

        # bad match (multi case)

        assert_parse_fails(t, """\
            SyntaxError: Multi case match is only available to empty variants.

               |
             8 | case Two(t), Three(t):
               |            ^

                from [test]:8:
        """,
        """\
            class One {}
            class Two < One {}
            class Three < One {}

            var v = One()

            match v: {
                case Two(t), Three(t):
                else:
            }
        """)
    }

    public define test_bad_misc
    {
        var t = Interpreter()

        # bad misc (use missing var)

        assert_parse_fails(t, """\
            SyntaxError: Property xyz is not in class Test. ('var' keyword missing?)

               |
             2 | @xyz = 10
               | ^

                from [test]:2:
        """,
        """\
            class Test {
                @xyz = 10
            }
        """)
    }

    public define test_bad_scope
    {
        var t = Interpreter()

        # bad scope (protected shorthand var outside class)

        assert_parse_fails(t, """\
            SyntaxError: Test.a is marked protected, and not available here.
                from [test]:4:
        """,
        """\
            class Test(protected var @a: Integer) { }

            var t = Test(1)
            t.a = 5
        """)

        # bad scope (private shorthand var outside class)

        assert_parse_fails(t, """\
            SyntaxError: Test.a is marked private, and not available here.
                from [test]:4:
        """,
        """\
            class Test(private var @a: Integer) { }

            var t = Test(1)
            t.a = 5
        """)

        # bad scope (protected var outside class)

        assert_parse_fails(t, """\
            SyntaxError: Test.x is marked protected, and not available here.
                from [test]:3:
        """,
        """\
            class Test { protected var @x = 10 }

            Test().x = 11
        """)

        # bad scope (protected method outside class)

        assert_parse_fails(t, """\
            SyntaxError: abc.f is marked protected, and not available here.
                from [test]:5:
        """,
        """\
            class abc {
                protected define f {}
            }

            abc.f(abc())
        """)

        # bad scope (private method from parent)

        assert_parse_fails(t, """\
            SyntaxError: One.f is marked private, and not available here.
                from [test]:7:
        """,
        """\
            class One {
                private define f {}
            }

            class Two < One {
                public define g {
                    f()
                }
            }
        """)

        # bad scope (private method from parent using self)

        assert_parse_fails(t, """\
            SyntaxError: One.f is marked private, and not available here.
                from [test]:7:
        """,
        """\
            class One {
                private define f {}
            }

            class Two < One {
                public define g {
                    self.f()
                }
            }
        """)

        # bad scope (private property from parent)

        assert_parse_fails(t, """\
            SyntaxError: abc.f is marked private, and not available here.
                from [test]:6:
        """,
        """\
            class abc {
                private define f {}
            }

            class def < abc {
                abc.f()
            }
        """)

        # bad scope (no var scope)

        assert_parse_fails(t, """\
            SyntaxError: Class var declaration must start with a scope.

               |
             2 | var @a = 1
               | ^

                from [test]:2:
        """,
        """\
            class Test {
                var @a = 1
            }
        """)

        # bad scope (no method scope)

        assert_parse_fails(t, """\
            SyntaxError: Class method declaration must start with a scope.

               |
             2 | define f {}
               | ^

                from [test]:2:
        """,
        """\
            class Test {
                define f {}
            }
        """)
    }

    public define test_bad_shorthand
    {
        var t = Interpreter()

        # bad shorthand (property self-initialization)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a class property here.

               |
             1 | class Test(public var @a: *Integer = @a) { }
               |                                      ^

                from [test]:1:
        """,
        """\
            class Test(public var @a: *Integer = @a) { }
        """)

        # bad shorthand (missing scope)

        assert_parse_fails(t, """\
            SyntaxError: Constructor var declaration must start with a scope.

               |
             1 | class Test(var @a: Integer) { }
               |            ^

                from [test]:1:
        """,
        """\
            class Test(var @a: Integer) { }
        """)

        # bad shorthand (missing var)

        assert_parse_fails(t, """\
            SyntaxError: Expected 'var' after scope was given.

               |
             1 | class Test(public @x: Integer) { }
               |                   ^

                from [test]:1:
        """,
        """\
            class Test(public @x: Integer) { }
        """)

        # bad shorthand (duplicate property name)

        assert_parse_fails(t, """\
            SyntaxError: A property in class 'One' already has the name @a.

               |
             1 | class One(public var @a: Integer, public var @a: Integer) {}
               |                                              ^

                from [test]:1:
        """,
        """\
            class One(public var @a: Integer, public var @a: Integer) {}
        """)

        # bad shorthand (redeclare super method)

        assert_parse_fails(t, """\
            SyntaxError: A method in class 'One' already has the name 'x'.

               |
             5 | class Two(public var @x: Integer) < One {}
               |                                     ^

                from [test]:5:
        """,
        """\
            class One {
                public define x {}
            }

            class Two(public var @x: Integer) < One {}
        """)

        # bad shorthand (redeclare super property)

        assert_parse_fails(t, """\
            SyntaxError: A method in class 'One' already has the name 'x'.

               |
             5 | class Two(public var @x: Integer) < One {}
               |                                     ^

                from [test]:5:
        """,
        """\
            class One {
                public define x {}
            }

            class Two(public var @x: Integer) < One {}
        """)
    }

    public define test_bad_static
    {
        var t = Interpreter()

        # bad static (static before scope)

        assert_parse_fails(t, """\
            SyntaxError: 'static' must follow a scope (public, protected, or private).

               |
             2 | static public define g(a: Integer) {
               | ^

                from [test]:2:
        """,
        """\
            class Example {
                static public define g(a: Integer) {
                }
            }
        """)

        # bad static (using class property)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a class property here.

               |
             4 | @a = 12
               | ^

                from [test]:4:
        """,
        """\
            class Example {
                public var @a = 10
                public static define f {
                    @a = 12
                }
            }
        """)

        # bad static (using instance method)

        assert_parse_fails(t, """\
            SyntaxError: Static methods cannot call instance methods.

               |
             4 | f(value)
               | ^

                from [test]:4:
        """,
        """\
            class Example {
                public define f {}
                public static define g(value: Example) {
                    f(value)
                }
            }
        """)

        # bad static (returning self)

        assert_parse_fails(t, """\
            SyntaxError: 'self' return type not allowed on a static method.

               |
             2 | public static define f: self {
               |                         ^

                from [test]:2:
        """,
        """\
            class Test {
                public static define f: self {
                }
            }
        """)

        # bad static (protected static outside class)

        assert_parse_fails(t, """\
            SyntaxError: Example.f is marked protected, and not available here.
                from [test]:5:
        """,
        """\
            class Example {
                protected static define f { }
            }

            Example.f()
        """)

        # bad static (private static outside class)

        assert_parse_fails(t, """\
            SyntaxError: One.f is marked private, and not available here.
                from [test]:6:
        """,
        """\
            class One {
                private static define f { }
            }

            class Two < One {
                f()
            }
        """)
    }

    public define test_class_rules
    {
        var t = Interpreter()

        # class rules (class inside class)
        # Blocked because I don't want them.

        assert_parse_fails(t, """\
            SyntaxError: Cannot define a class here.

               |
             2 | class c2(b: Integer) {
               | ^

                from [test]:2:
        """,
        """\
            class c1(a: Integer) {
                class c2(b: Integer) {

                }
            }
        """)

        # class rules (class inside of if)

        assert_parse_fails(t, """\
            SyntaxError: Cannot define a class here.

               |
             2 | class abc() {
               | ^

                from [test]:2:
        """,
        """\
            if 1: {
                class abc() {
                }
            }
        """)

        # class rules (single letter class name)
        # Blocked because it interferes with generics.

        assert_parse_fails(t, """\
            SyntaxError: 'A' is not a valid class name (too short).

               |
             1 | class A() {}
               |       ^

                from [test]:1:
        """,
        """\
            class A() {}
        """)

        # class rules (properties start with at)
        # Blocked for consistency.

        assert_parse_fails(t, """\
            SyntaxError: Class properties must start with @.

               |
             1 | class ABC { public var a: integer }
               |                        ^

                from [test]:1:
        """,
        """\
            class ABC { public var a: integer }
        """)

        # class rules (self to get property)
        # blocked for consistency (require @<name> always)

        assert_parse_fails(t, """\
            SyntaxError: Use @<name> to get/set properties, not self.<name>.
                from [test]:4:
        """,
        """\
            class Example(x: Integer) {
                public var @x = x
                public define f {
                    @x = self.x
                }
            }
        """)

        # class rules (assign to method)
        # Blocked for consistency with standard defines.

        assert_parse_fails(t, """\
            SyntaxError: Left side of = is not assignable.
                from [test]:7:
        """,
        """\
            class Test {
                public define f: Integer { return 10 }
                public define g: Integer { return 20 }
            }

            var v = Test()
            v.f = Test.g
        """)

        # class rules (class prop self init)

        assert_parse_fails(t, """\
            SyntaxError: Invalid use of uninitialized property '@x'.

               |
             2 | public var @x: Integer = @x
               |                          ^

                from [test]:2:
        """,
        """\
            class Point {
                public var @x: Integer = @x
            }
        """)

        # class rules (method of a generic type)

        assert_parse_fails(t, """\
            SyntaxError: Class A does not have a member named asdf.
                from [test]:2:
        """,
        """\
            define f[A](a: A) {
                a.asdf()
            }
        """)

        # class rules (prop use inside constructor)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a class property here.

               |
             4 | class Parent < Base(@abc) {
               |                     ^

                from [test]:4:
        """,
        """\
            class Base(message: String) {
                public var @abc = message
            }
            class Parent < Base(@abc) {
                @abc = @abc ++ "10"
            }

            Parent()
        """)

        # class rules (call scoped out definition)

        assert_parse_fails(t, """\
            SyntaxError: g has not been declared.

               |
             7 | g()
               | ^

                from [test]:7:
        """,
        """\
            class Example {
                public define f {
                    define g {
                    }
                }

                g()
            }
        """)

        # class rules (lambda cannot send self back)

        assert_parse_fails(t, """\
            SyntaxError: x is a property, and must be referenced as @x.

               |
             5 | var y = x
               |         ^

                from [test]:5:
        """,
        """\
            class Example {
                public var @x = 10

                public define f {
                    var y = x
                }
            }
        """)

        # class rules (static access to property)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use a class property without a class instance.

               |
             5 | var v = Example.x
               |                 ^

                from [test]:5:
        """,
        """\
            class Example {
                public var @x = 10
            }

            var v = Example.x
        """)

        # class rules (method accessed as property)

        assert_parse_fails(t, """\
            SyntaxError: f is a method (use f instead of @f).

               |
             7 | var v = @f
               |         ^

                from [test]:7:
        """,
        """\
            class Example {
                public define f {

                }

                public define g {
                    var v = @f
                }
            }
        """)
    }

    public define test_modifiers
    {
        var t = Interpreter()

        assert_parse_fails(t, """\
            SyntaxError: 'public' is not allowed here.

               |
             1 | public class Test {}
               | ^

                from [test]:1:
        """,
        """\
            public class Test {}
        """)

        assert_parse_fails(t, """\
            SyntaxError: Cannot define a class here.

               |
             2 | public class Example {
               |        ^

                from [test]:2:
        """,
        """\
            class Test {
                public class Example {

                }
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: 'static' must follow a scope (public, protected, or private).

               |
             1 | static class Test {}
               | ^

                from [test]:1:
        """,
        """\
            static class Test {}
        """)
    }

    public define test_self
    {
        var t = Interpreter()

        # self (self return at toplevel)

        assert_parse_fails(t, """\
            SyntaxError: 'self' return type only allowed on class methods.

               |
             1 | define f: self {}
               |           ^

                from [test]:1:
        """,
        """\
            define f: self {}
        """)

        # self (self return on enum)

        assert_parse_fails(t, """\
            SyntaxError: 'self' return type only allowed on class methods.

               |
             5 | define f: self {}
               |           ^

                from [test]:5:
        """,
        """\
            enum Example
            {
                One,
                Two
                define f: self {}
            }
        """)

        # self (used outside of a class)

        assert_parse_fails(t, """\
            SyntaxError: Cannot use 'self' outside of a class or enum.

               |
             1 | self
               | ^

                from [test]:1:
        """,
        """\
            self
        """)

        # self (used during inheritance)

        assert_parse_fails(t, """\
            SyntaxError: Class constructors cannot use 'self'.

               |
             2 | class Child < Parent(self) { }
               |                      ^

                from [test]:2:
        """,
        """\
            class Parent(x: Parent) { }
            class Child < Parent(self) { }
        """)

        # self (close over self)

        assert_parse_fails(t, """\
            SyntaxError: Class constructors cannot use 'self'.

               |
             9 | v = self
               |     ^

                from [test]:9:
        """,
        """\
            class One {

            }

            var v = One()
            var m = 10

            class Two < One {
                v = self

                if m == 10: {
                    0/0
                }

                public var @w = 10
            }

            class Three < Two {
                public var @m = 12
            }

            try: {
                Two()
            except DivisionByZeroError:
            }

            match v: {
                case Two(t):
                    print(t.w)
                case Three(t):
                    print(t.m)
                else:
            }
        """)

        # self (from a static method)

        assert_parse_fails(t, """\
            SyntaxError: Static methods cannot use 'self'.

               |
             4 | var v = self
               |         ^

                from [test]:4:
        """,
        """\
            class Example {
                public var @a = 10
                public static define f {
                    var v = self
                }
            }
        """)

        assert_parse_fails(t, """\
            SyntaxError: Expected 'a label', not 'a string'.

               |
             3 | public define f: "self" {}
               |                  ^

                from [test]:3:
        """,
        """\
            class Example
            {
                public define f: "self" {}
            }
        """)
    }
}
