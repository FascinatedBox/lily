import test

define add_tests {

var t = test.t

t.scope(__file__)

t.interpret("Cover use of an imported flat enum.",
    """
    import (FlatEnum, FlatOne, FlatTwo, FlatThree) covlib

    var v = "" ++ FlatTwo
    if v != "FlatTwo": {
        raise Exception("Failed to interpolate.")
    }

    define f(l: List[FlatEnum]): List[Integer] {
        var result: List[Integer] = []

        for i in 0...l.size() - 1: {
            var e = l[i]
            match e: {
                case FlatOne:
                    result.push(1)
                case FlatTwo:
                    result.push(2)
                case FlatThree:
                    result.push(3)
            }
        }

        return result
    }

    var v2 = f([FlatOne, FlatTwo, FlatThree, FlatTwo, FlatOne])
    if v2 != [1, 2, 3, 2, 1]: {
        raise Exception("Failed to match and transform.")
    }
    """)

t.interpret("Cover use of an imported scoped enum.",
    """
    import (ScopedEnum) covlib

    var v = "" ++ ScopedEnum.ScopedTwo
    if v != "ScopedEnum.ScopedTwo": {
        raise Exception("Failed to interpolate.")
    }

    define f(l: List[ScopedEnum]): List[Integer] {
        var result: List[Integer] = []

        for i in 0...l.size() - 1: {
            var e = l[i]
            match e: {
                case ScopedEnum.ScopedOne:
                    result.push(1)
                case ScopedEnum.ScopedTwo:
                    result.push(2)
                case ScopedEnum.ScopedThree:
                    result.push(3)
            }
        }

        return result
    }

    var v2 = f([ScopedEnum.ScopedThree, ScopedEnum.ScopedOne, ScopedEnum.ScopedTwo])
    if v2 != [3, 1, 2]: {
        raise Exception("Failed to match and transform.")
    }
    """)

t.interpret("Cover using covlib to do extra api tests.",
    """
    import covlib

    covlib.cover_list_reserve()
    if covlib.cover_func_check((|x| 10 ), Integer.to_s) == false: {
        raise Exception("cover_func_check failed.")
    }
    covlib.cover_list_sfs()

    define f(co: Coroutine[Integer, Integer]): Integer {
        return 1
    }

    class Example < Exception("") {

    }

    var co = Coroutine.build(f)

    if covlib.cover_id_checks(co, unit, covlib.Container(""), "abc") == false: {
        raise Exception("cover_id_checks failed.")
    }

    define co_base(local_co: Coroutine[Integer, Integer]): Integer { return 0 }
    define f2(a: Integer) {}

    covlib.cover_value_as('a',
                          B"123",
                          Exception("test"),
                          Coroutine.build(co_base),
                          1.0,
                          stdout,
                          f2,
                          [1 => 1],
                          1,
                          "1")

    covlib.cover_ci_from_native(f2)
    covlib.cover_misc_api()
    """)

t.interpret("Cover inheriting from foreign-based native class.",
    """
    import covlib

    class InheritedContainer(x: String) < covlib.Container(x) {
        public define do_update(y: String) {
            update(y ++ y)
        }
    }

    var i = InheritedContainer("abc")
    i.do_update("xyz")

    if i.fetch() != "xyzxyz": {
        raise Exception("failed")
    }
    """)
}
