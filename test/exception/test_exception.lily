import (Interpreter,
        TestCase) "../t/testing"

class TestExceptions < TestCase
{
    public define test_base
    {
        var t = Interpreter()

        # base (verify traceback is created)

        assert_parse_string(t, """
            try: {
                raise ValueError("")
            except ValueError as e:
                var v = e.traceback[0].split(":")[-1]
            }
        """)

        # base (format check for error from vm)

        t = Interpreter()
        assert_parse_string(t, """
            define f {
                var error_line = 0
                var trace_line = __line__ + 1
                var last_trace_line = calltrace()[-1]
                var last_error_line = ""

                try: {
                    error_line = __line__ + 1
                    0/0
                except DivisionByZeroError as e:
                    last_error_line = e.traceback[-1]
                }

                var template = "{0}:{1}: in {2}"
                var expect_error_line = template.format(__file__, error_line, __function__)
                var expect_trace_line = template.format(__file__, trace_line, __function__)

                if last_trace_line != expect_trace_line ||
                   last_error_line != expect_error_line: {
                   raise Exception("Failed.")
                }
            }

            f()
        """)

        # base (format checks for raised exception)

        t = Interpreter()
        assert_parse_string(t, """
            define f {
                var error_line = 0
                var trace_line = __line__ + 1
                var last_trace_line = calltrace()[-1]
                var last_error_line = ""

                try: {
                    error_line = __line__ + 1
                    raise DivisionByZeroError("")
                except DivisionByZeroError as e:
                    last_error_line = e.traceback[-1]
                }

                var template = "{0}:{1}: in {2}"
                var expect_error_line = template.format(__file__, error_line, __function__)
                var expect_trace_line = template.format(__file__, trace_line, __function__)

                if last_trace_line != expect_trace_line ||
                   last_error_line != expect_error_line: {
                   raise Exception("Failed.")
                }
            }

            f()
        """)

        # base (all branches of a try block are checked)

        t = Interpreter()
        assert_parse_string(t, """
            # This test make sure that all branches of a try+except are being
            # tried, and not just the first one.

            try: {
                1 / 0
            except IndexError:
                0
            except ValueError:
                0
            except DivisionByZeroError:
                0
            }
        """)
    }

    public define test_catch
    {
        var t = Interpreter()

        # catch (construct and raise all exceptions)

        assert_parse_string(t, """
            var ok = true

            try: {
                var v = DivisionByZeroError("DivisionByZeroError")
                raise(v)
            except DivisionByZeroError as e:
                if e.message != "DivisionByZeroError" ||
                   e.traceback.size() != 1: {
                    ok = false
                }
            }
            try: {
                var v = Exception("Exception")
                raise(v)
            except Exception as e:
                if e.message != "Exception" ||
                   e.traceback.size() != 1: {
                    ok = false
                }
            }
            try: {
                var v = IndexError("IndexError")
                raise(v)
            except IndexError as e:
                if e.message != "IndexError" ||
                   e.traceback.size() != 1: {
                    ok = false
                }
            }
            try: {
                var v = IOError("IOError")
                raise(v)
            except IOError as e:
                if e.message != "IOError" ||
                   e.traceback.size() != 1: {
                    ok = false
                }
            }
            try: {
                var v = KeyError("KeyError")
                raise(v)
            except KeyError as e:
                if e.message != "KeyError" ||
                   e.traceback.size() != 1: {
                    ok = false
                }
            }
            try: {
                var v = RuntimeError("RuntimeError")
                raise(v)
            except RuntimeError as e:
                if e.message != "RuntimeError" ||
                   e.traceback.size() != 1: {
                    ok = false
                }
            }
            try: {
                var v = ValueError("ValueError")
                raise(v)
            except ValueError as e:
                if e.message != "ValueError" ||
                   e.traceback.size() != 1: {
                    ok = false
                }
            }

            if ok == false: {
                raise Exception("Failed.")
            }
        """)

        # catch (within another function)

        t = Interpreter()
        assert_parse_string(t, """
            define g
            {
                try: {
                    raise ValueError("")
                except Exception:
                    1
                }
            }

            define f
            {
                var a = 1, b = 2, c = 3
                g()
            }

            f()
        """)

        # catch (get message of exception var)

        t = Interpreter()
        assert_parse_string(t, """
            try: {
                1 / 0
            except Exception as e:
                var v = e.message
            }
        """)

        # catch (custom exception)

        t = Interpreter()
        assert_parse_string(t, """
            class Error(code: Integer, message: String) < Exception(message)    {
                public var @code = code
            }

            try: {
                raise Error(100, "Test")
            except Error as e:
                if e.code != 100: {
                    raise Exception("Failed.")
                }
            }
        """)

        # catch (through foreign call in a loop)

        t = Interpreter()
        assert_parse_string(t, """
            define f(a: Integer) : Integer
            {
                raise ValueError("")
            }

            for i in 0...5: {
                var v = [1, 2, 3]
                try: {
                    v.map(f)
                except Exception:

                }
            }
        """)
    }

    public define test_keyerror_escape_quoting
    {
        var t = Interpreter()

        # keyerror escape quoting (newline)

        assert_parse_string(t, """
            try: {
                var h: Hash[String, String] = []

                h["\\n"]
            except KeyError as e:
                # 34 is double quote, 92 is backslash.
                if e.message != "\\034\\092n\\034": {
                    0/0
                }
            }
        """)

        # keyerror escape quoting (double quote)

        assert_parse_string(t, """
            try: {
                var h: Hash[String, String] = []

                h["\\\""]
            except KeyError as e:
                # 34 is double quote, 92 is backslash.
                if e.message != "\\034\\092\\034\\034": {
                    0/0
                }
            }
        """)

    }
}
