import test

var t = test.t

t.scope(__file__)

t.interpret("Shorthand class constructor with optional argument.",
    """
    class Test(var @a: String, var @b: String, var @c: *Boolean = false)
    {
    }
    """)

t.interpret("Class method with optional argument.",
    """
    class abc {
        public define ghi(a: *Integer=10) {
        }
    }

    abc().ghi()
    """)

t.interpret("Empty enum as optional argument.",
    """
    enum Color { Black, Blue, Cyan, Green, Magenta, Red, White, Yellow }

    define f(a: *Color = Black, b: *Color = Yellow)
    {

    }

    f()
    f(Black, Red)
    f(Red)

    define func(message: String, target: *Option[File] = None)
    {
        if target == None: {
            target = Some(stdout)
        }

        var file_target = target.unwrap()
    }

    func("Hello")
    func("Hello", Some(stdout))
    """)

t.interpret("Optional argument in function of variant.",
    """
    enum abc {
        ghi(Function(*Integer)),
        xyz
    }
    """)

t.interpret("Verify that optional argument narrowing.",
    """
    define f(a: Integer, b: *Integer=10) {  }

    define g(a: Function(Integer)) {  }

    g(f)
    """)

t.interpret("Basic check of all optional argument types.",
    """
    define f(
            a: *Integer=10,
            b: *Double=1.1,
            c: *ByteString=B"",
            d: *String="1",
            e: *Boolean=true)
    {

    }
    """)

t.interpret("Function with several optional arguments.",
    """
    define z(
            a: *Integer=10,
            b: *Integer=10,
            c: *Integer=10,
            d: *Integer=10,
            e: *Integer=10,
            f: *Integer=10,
            g: *Integer=10): Integer
    {
        return a + b + c + d + e + f + g
    }

    if z()                    != 70 ||
       z(0)                   != 60 ||
       z(0, 0)                != 50 ||
       z(0, 0, 0)             != 40 ||
       z(0, 0, 0, 0)          != 30 ||
       z(0, 0, 0, 0, 0)       != 20 ||
       z(0, 0, 0, 0, 0, 0)    != 10 ||
       z(0, 0, 0, 0, 0, 0, 0) != 0: {
       raise Exception("Failed.")
    }
    """)

t.interpret("Class constructor with optional non-shorthand arguments.",
    """
    class Point(x: *Integer=0, y: *Integer=0)
    {
        public var @x = x
        public var @y = y
    }

    Point()
    Point(1)
    Point(1, 1)
    """)

t.interpret("Function with optargs and varargs.",
    """
    define f(a: *Integer...=[1, 2, 3]): List[Integer] { return a }

    if f() != [1, 2, 3]: {
        raise Exception("Empty case failed.")
    }

    if f(3, 2, 1) != [3, 2, 1]: {
        raise Exception("Non-empty case failed.")
    }
    """)

t.interpret("Function with optargs and varargs.",
    """
    define f(a: *Integer...=[1, 2, 3]): List[Integer] { return a }

    define g(a: Function(*Integer... => List[Integer])) {
        if a() != [1, 2, 3]: {
            raise Exception("Parameter empty case failed.")
        }

        if a(3, 2, 1) != [3, 2, 1]: {
            raise Exception("Parameter non-empty case failed.")
        }
    }

    g(f)
    """)

t.interpret("Function with one optarg before varargs.",
    """
    define f(a: Integer, b: *Integer = 10, c: *Integer...=[]) {

    }

    f(1)
    f(1, 2)
    f(1, 2, 3, 4, 5)
    """)
