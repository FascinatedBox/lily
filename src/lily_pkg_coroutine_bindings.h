#ifndef LILY_COROUTINE_BINDINGS_H
#define LILY_COROUTINE_BINDINGS_H
/* Generated by lily-bindgen, do not edit. */

#if defined(_WIN32) && !defined(LILY_NO_EXPORT)
#define LILY_COROUTINE_EXPORT __declspec(dllexport)
#else
#define LILY_COROUTINE_EXPORT
#endif

#define ARG_Coroutine(s_, i_) \
(lily_coroutine_Coroutine *)lily_arg_generic(s_, i_)
#define AS_Coroutine(v_) \
(lily_coroutine_Coroutine *)lily_as_generic(v_)
#define ID_Coroutine(s_) \
lily_cid_at(s_, 0)
#define INIT_Coroutine(s_) \
(lily_coroutine_Coroutine *)lily_push_foreign(s_, ID_Coroutine(s_), (lily_destroy_func)destroy_Coroutine, sizeof(lily_coroutine_Coroutine))

LILY_COROUTINE_EXPORT
const char *lily_coroutine_info_table[] = {
    "\01Coroutine\0"
    ,"C\012Coroutine\0[A,B]"
    ,"m\0build\0[A,B](Function(Coroutine[A,B])): Coroutine[A,B]"
    ,"m\0build_with_value\0[A,B,C](Function(Coroutine[A,B],C),C): Coroutine[A,B]"
    ,"m\0is_done\0[A,B](Coroutine[A,B]): Boolean"
    ,"m\0is_failed\0[A,B](Coroutine[A,B]): Boolean"
    ,"m\0is_running\0[A,B](Coroutine[A,B]): Boolean"
    ,"m\0is_waiting\0[A,B](Coroutine[A,B]): Boolean"
    ,"m\0receive\0[A,B](Coroutine[A,B]): B"
    ,"m\0resume\0[A,B](Coroutine[A,Unit]): Option[A]"
    ,"m\0resume_with\0[A,B](Coroutine[A,B],B): Option[A]"
    ,"m\0yield\0[A,B](Coroutine[A,B],A)"
    ,"Z"
};
#define LILY_DECLARE_COROUTINE_CALL_TABLE \
LILY_COROUTINE_EXPORT \
lily_call_entry_func lily_coroutine_call_table[] = { \
    NULL, \
    NULL, \
    lily_coroutine_Coroutine_build, \
    lily_coroutine_Coroutine_build_with_value, \
    lily_coroutine_Coroutine_is_done, \
    lily_coroutine_Coroutine_is_failed, \
    lily_coroutine_Coroutine_is_running, \
    lily_coroutine_Coroutine_is_waiting, \
    lily_coroutine_Coroutine_receive, \
    lily_coroutine_Coroutine_resume, \
    lily_coroutine_Coroutine_resume_with, \
    lily_coroutine_Coroutine_yield, \
};
#endif
