#ifndef LILY_TOKEN_H
# define LILY_TOKEN_H

/* Generated by scripts/token.lily. */

typedef enum {
    tk_right_parenth,
    tk_comma,
    tk_left_curly,
    tk_right_curly,
    tk_left_bracket,
    tk_colon,
    tk_tilde,
    tk_bitwise_xor,
    tk_bitwise_xor_eq,
    tk_not,
    tk_not_eq,
    tk_modulo,
    tk_modulo_eq,
    tk_multiply,
    tk_multiply_eq,
    tk_divide,
    tk_divide_eq,
    tk_plus,
    tk_plus_plus,
    tk_plus_eq,
    tk_minus,
    tk_minus_eq,
    tk_lt,
    tk_lt_eq,
    tk_left_shift,
    tk_left_shift_eq,
    tk_gt,
    tk_gt_eq,
    tk_right_shift,
    tk_right_shift_eq,
    tk_equal,
    tk_eq_eq,
    tk_left_parenth,
    tk_lambda,
    tk_tuple_open,
    tk_tuple_close,
    tk_right_bracket,
    tk_arrow,
    tk_word,
    tk_prop_word,
    tk_double_quote,
    tk_bytestring,
    tk_byte,
    tk_integer,
    tk_double,
    tk_docblock,
    tk_keyword_arg,
    tk_dot,
    tk_bitwise_and,
    tk_bitwise_and_eq,
    tk_logical_and,
    tk_bitwise_or,
    tk_bitwise_or_eq,
    tk_logical_or,
    tk_typecast_parenth,
    tk_three_dots,
    tk_func_pipe,
    tk_scoop,
    tk_invalid,
    tk_end_lambda,
    tk_end_tag,
    tk_eof,
} lily_token;

# define IS_ASSIGN_TOKEN(t) (lily_priority_for_token(t) == 1)
# define IS_COMPARE_TOKEN(t) (lily_priority_for_token(t) == 4)

uint8_t lily_priority_for_token(lily_token);
const char *tokname(lily_token);

#endif
