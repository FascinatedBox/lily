#ifndef LILY_PRELUDE_BINDINGS_H
#define LILY_PRELUDE_BINDINGS_H
/* Generated by lily-bindgen, do not edit. */

#if defined(_WIN32) && !defined(LILY_NO_EXPORT)
#define LILY_PRELUDE_EXPORT __declspec(dllexport)
#else
#define LILY_PRELUDE_EXPORT
#endif

LILY_PRELUDE_EXPORT
const char *lily_prelude_info_table[] = {
    "\0\0"
    ,"C\02Boolean\0"
    ,"m\0to_i\0(Boolean): Integer"
    ,"m\0to_s\0(Boolean): String"
    ,"C\01Byte\0"
    ,"m\0to_i\0(Byte): Integer"
    ,"C\04ByteString\0"
    ,"m\0each_byte\0(ByteString,Function(Byte))"
    ,"m\0encode\0(ByteString,*String): Option[String]"
    ,"m\0size\0(ByteString): Integer"
    ,"m\0slice\0(ByteString,*Integer,*Integer): ByteString"
    ,"N\01DivisionByZeroError\0< Exception"
    ,"m\0<new>\0(String): DivisionByZeroError"
    ,"C\01Double\0"
    ,"m\0to_i\0(Double): Integer"
    ,"N\03Exception\0"
    ,"m\0<new>\0(String): Exception"
    ,"3\0message\0String"
    ,"3\0traceback\0List[String]"
    ,"C\010File\0"
    ,"m\0close\0(File)"
    ,"m\0each_line\0(File,Function(ByteString))"
    ,"m\0flush\0(File)"
    ,"m\0open\0(String,String): File"
    ,"m\0print\0[A](File,A)"
    ,"m\0read\0(File,*Integer): ByteString"
    ,"m\0read_line\0(File): ByteString"
    ,"m\0write\0[A](File,A)"
    ,"C\0Function\0"
    ,"C\013Hash\0[A,B]"
    ,"m\0clear\0[A,B](Hash[A,B])"
    ,"m\0delete\0[A,B](Hash[A,B],A)"
    ,"m\0each_pair\0[A,B](Hash[A,B],Function(A,B))"
    ,"m\0get\0[A,B](Hash[A,B],A): Option[B]"
    ,"m\0has_key\0[A,B](Hash[A,B],A): Boolean"
    ,"m\0keys\0[A,B](Hash[A,B]): List[A]"
    ,"m\0map_values\0[A,B,C](Hash[A,B],Function(B=>C)): Hash[A,C]"
    ,"m\0merge\0[A,B](Hash[A,B],Hash[A,B]...): Hash[A,B]"
    ,"m\0reject\0[A,B](Hash[A,B],Function(A,B=>Boolean)): Hash[A,B]"
    ,"m\0select\0[A,B](Hash[A,B],Function(A,B=>Boolean)): Hash[A,B]"
    ,"m\0size\0[A,B](Hash[A,B]): Integer"
    ,"N\01IOError\0< Exception"
    ,"m\0<new>\0(String): IOError"
    ,"N\01IndexError\0< Exception"
    ,"m\0<new>\0(String): IndexError"
    ,"C\04Integer\0"
    ,"m\0to_bool\0(Integer): Boolean"
    ,"m\0to_byte\0(Integer): Byte"
    ,"m\0to_d\0(Integer): Double"
    ,"m\0to_s\0(Integer): String"
    ,"N\01KeyError\0< Exception"
    ,"m\0<new>\0(String): KeyError"
    ,"C\025List\0[A]"
    ,"m\0clear\0[A](List[A])"
    ,"m\0count\0[A](List[A],Function(A=>Boolean)): Integer"
    ,"m\0delete_at\0[A](List[A],Integer)"
    ,"m\0each\0[A](List[A],Function(A)): List[A]"
    ,"m\0each_index\0[A](List[A],Function(Integer)): List[A]"
    ,"m\0fill\0[A](Integer,Function(Integer=>A)): List[A]"
    ,"m\0fold\0[A](List[A],A,Function(A,A=>A)): A"
    ,"m\0get\0[A](List[A],Integer): Option[A]"
    ,"m\0insert\0[A](List[A],Integer,A)"
    ,"m\0join\0[A](List[A],*String): String"
    ,"m\0map\0[A,B](List[A],Function(A=>B)): List[B]"
    ,"m\0pop\0[A](List[A]): A"
    ,"m\0push\0[A](List[A],A): List[A]"
    ,"m\0reject\0[A](List[A],Function(A=>Boolean)): List[A]"
    ,"m\0repeat\0[A](Integer,A): List[A]"
    ,"m\0select\0[A](List[A],Function(A=>Boolean)): List[A]"
    ,"m\0shift\0[A](List[A]): A"
    ,"m\0size\0[A](List[A]): Integer"
    ,"m\0slice\0[A](List[A],*Integer,*Integer): List[A]"
    ,"m\0unshift\0[A](List[A],A): List[A]"
    ,"m\0zip\0[A](List[A],List[$1]...): List[Tuple[A,$1]]"
    ,"N\01RuntimeError\0< Exception"
    ,"m\0<new>\0(String): RuntimeError"
    ,"C\025String\0"
    ,"m\0ends_with\0(String,String): Boolean"
    ,"m\0find\0(String,String,*Integer): Option[Integer]"
    ,"m\0format\0(String,$1...): String"
    ,"m\0html_encode\0(String): String"
    ,"m\0is_alnum\0(String): Boolean"
    ,"m\0is_alpha\0(String): Boolean"
    ,"m\0is_digit\0(String): Boolean"
    ,"m\0is_space\0(String): Boolean"
    ,"m\0lower\0(String): String"
    ,"m\0lstrip\0(String,String): String"
    ,"m\0parse_i\0(String): Option[Integer]"
    ,"m\0replace\0(String,String,String): String"
    ,"m\0rstrip\0(String,String): String"
    ,"m\0size\0(String): Integer"
    ,"m\0slice\0(String,*Integer,*Integer): String"
    ,"m\0split\0(String,*String): List[String]"
    ,"m\0starts_with\0(String,String): Boolean"
    ,"m\0strip\0(String,String): String"
    ,"m\0to_bytestring\0(String): ByteString"
    ,"m\0trim\0(String): String"
    ,"m\0upper\0(String): String"
    ,"C\0Tuple\0"
    ,"C\0Unit\0"
    ,"N\01ValueError\0< Exception"
    ,"m\0<new>\0(String): ValueError"
    ,"E\012Option\0[A]"
    ,"m\0and\0[A,B](Option[A],Option[B]): Option[B]"
    ,"m\0and_then\0[A,B](Option[A],Function(A=>Option[B])): Option[B]"
    ,"m\0is_none\0[A](Option[A]): Boolean"
    ,"m\0is_some\0[A](Option[A]): Boolean"
    ,"m\0map\0[A,B](Option[A],Function(A=>B)): Option[B]"
    ,"m\0or\0[A](Option[A],Option[A]): Option[A]"
    ,"m\0or_else\0[A](Option[A],Function(=>Option[A])): Option[A]"
    ,"m\0unwrap\0[A](Option[A]): A"
    ,"m\0unwrap_or\0[A](Option[A],A): A"
    ,"m\0unwrap_or_else\0[A](Option[A],Function(=>A)): A"
    ,"V\0None\0"
    ,"V\0Some\0(A)"
    ,"E\04Result\0[A,B]"
    ,"m\0failure\0[A,B](Result[A,B]): Option[A]"
    ,"m\0is_failure\0[A,B](Result[A,B]): Boolean"
    ,"m\0is_success\0[A,B](Result[A,B]): Boolean"
    ,"m\0success\0[A,B](Result[A,B]): Option[B]"
    ,"V\0Failure\0(A)"
    ,"V\0Success\0(B)"
    ,"F\0calltrace\0: List[String]"
    ,"F\0print\0[A](A)"
    ,"R\0stderr\0File"
    ,"R\0stdin\0File"
    ,"R\0stdout\0File"
    ,"Z"
};
#define Boolean_OFFSET 1
#define Byte_OFFSET 4
#define ByteString_OFFSET 6
#define DivisionByZeroError_OFFSET 11
#define Double_OFFSET 13
#define Exception_OFFSET 15
#define File_OFFSET 19
#define Function_OFFSET 28
#define Hash_OFFSET 29
#define IOError_OFFSET 41
#define IndexError_OFFSET 43
#define Integer_OFFSET 45
#define KeyError_OFFSET 50
#define List_OFFSET 52
#define RuntimeError_OFFSET 74
#define String_OFFSET 76
#define Tuple_OFFSET 98
#define Unit_OFFSET 99
#define ValueError_OFFSET 100
#define LILY_DECLARE_PRELUDE_CALL_TABLE \
LILY_PRELUDE_EXPORT \
lily_call_entry_func lily_prelude_call_table[] = { \
    NULL, \
    NULL, \
    lily_prelude_Boolean_to_i, \
    lily_prelude_Boolean_to_s, \
    NULL, \
    lily_prelude_Byte_to_i, \
    NULL, \
    lily_prelude_ByteString_each_byte, \
    lily_prelude_ByteString_encode, \
    lily_prelude_ByteString_size, \
    lily_prelude_ByteString_slice, \
    NULL, \
    lily_prelude_DivisionByZeroError_new, \
    NULL, \
    lily_prelude_Double_to_i, \
    NULL, \
    lily_prelude_Exception_new, \
    NULL, \
    NULL, \
    NULL, \
    lily_prelude_File_close, \
    lily_prelude_File_each_line, \
    lily_prelude_File_flush, \
    lily_prelude_File_open, \
    lily_prelude_File_print, \
    lily_prelude_File_read, \
    lily_prelude_File_read_line, \
    lily_prelude_File_write, \
    NULL, \
    NULL, \
    lily_prelude_Hash_clear, \
    lily_prelude_Hash_delete, \
    lily_prelude_Hash_each_pair, \
    lily_prelude_Hash_get, \
    lily_prelude_Hash_has_key, \
    lily_prelude_Hash_keys, \
    lily_prelude_Hash_map_values, \
    lily_prelude_Hash_merge, \
    lily_prelude_Hash_reject, \
    lily_prelude_Hash_select, \
    lily_prelude_Hash_size, \
    NULL, \
    lily_prelude_IOError_new, \
    NULL, \
    lily_prelude_IndexError_new, \
    NULL, \
    lily_prelude_Integer_to_bool, \
    lily_prelude_Integer_to_byte, \
    lily_prelude_Integer_to_d, \
    lily_prelude_Integer_to_s, \
    NULL, \
    lily_prelude_KeyError_new, \
    NULL, \
    lily_prelude_List_clear, \
    lily_prelude_List_count, \
    lily_prelude_List_delete_at, \
    lily_prelude_List_each, \
    lily_prelude_List_each_index, \
    lily_prelude_List_fill, \
    lily_prelude_List_fold, \
    lily_prelude_List_get, \
    lily_prelude_List_insert, \
    lily_prelude_List_join, \
    lily_prelude_List_map, \
    lily_prelude_List_pop, \
    lily_prelude_List_push, \
    lily_prelude_List_reject, \
    lily_prelude_List_repeat, \
    lily_prelude_List_select, \
    lily_prelude_List_shift, \
    lily_prelude_List_size, \
    lily_prelude_List_slice, \
    lily_prelude_List_unshift, \
    lily_prelude_List_zip, \
    NULL, \
    lily_prelude_RuntimeError_new, \
    NULL, \
    lily_prelude_String_ends_with, \
    lily_prelude_String_find, \
    lily_prelude_String_format, \
    lily_prelude_String_html_encode, \
    lily_prelude_String_is_alnum, \
    lily_prelude_String_is_alpha, \
    lily_prelude_String_is_digit, \
    lily_prelude_String_is_space, \
    lily_prelude_String_lower, \
    lily_prelude_String_lstrip, \
    lily_prelude_String_parse_i, \
    lily_prelude_String_replace, \
    lily_prelude_String_rstrip, \
    lily_prelude_String_size, \
    lily_prelude_String_slice, \
    lily_prelude_String_split, \
    lily_prelude_String_starts_with, \
    lily_prelude_String_strip, \
    lily_prelude_String_to_bytestring, \
    lily_prelude_String_trim, \
    lily_prelude_String_upper, \
    NULL, \
    NULL, \
    NULL, \
    lily_prelude_ValueError_new, \
    NULL, \
    lily_prelude_Option_and, \
    lily_prelude_Option_and_then, \
    lily_prelude_Option_is_none, \
    lily_prelude_Option_is_some, \
    lily_prelude_Option_map, \
    lily_prelude_Option_or, \
    lily_prelude_Option_or_else, \
    lily_prelude_Option_unwrap, \
    lily_prelude_Option_unwrap_or, \
    lily_prelude_Option_unwrap_or_else, \
    NULL, \
    NULL, \
    NULL, \
    lily_prelude_Result_failure, \
    lily_prelude_Result_is_failure, \
    lily_prelude_Result_is_success, \
    lily_prelude_Result_success, \
    NULL, \
    NULL, \
    lily_prelude__calltrace, \
    lily_prelude__print, \
    lily_prelude_var_stderr, \
    lily_prelude_var_stdin, \
    lily_prelude_var_stdout, \
};
#endif
