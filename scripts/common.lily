var script_name = ""

# Token records are in three parts:
#
# 1) A single character representation of the token, if one exists.
#    If this token does not map to a single Byte, this is ' '.
#
# 2) What to write when printing the token.
#
# 3) The name to write in the lily_token enum.
#
var token_data = [
    <[')',  ")",                "tk_right_parenth"]>,
    <[',',  ",",                "tk_comma"]>,
    <['{',  "{",                "tk_left_curly"]>,
    <['}',  "}",                "tk_right_curly"]>,
    <['[',  "[",                "tk_left_bracket"]>,
    <[':',  ":",                "tk_colon"]>,
    <['~',  "~",                "tk_tilde"]>,

    # These five have their eq at +1 from their base.
    <['^',  "^",                "tk_bitwise_xor"]>,
    <[' ',  "^=",               "tk_bitwise_xor_eq"]>,
    <['!',  "!",                "tk_not"]>,
    <[' ',  "!=",               "tk_not_eq"]>,
    <['%',  "%",                "tk_modulo"]>,
    <[' ',  "%=",               "tk_modulo_eq"]>,
    <['*',  "*",                "tk_multiply"]>,
    <[' ',  "*=",               "tk_multiply_eq"]>,
    <['/',  "/",                "tk_divide"]>,
    <[' ',  "/=",               "tk_divide_eq"]>,

    <['+',  "+",                "tk_plus"]>,
    <[' ',  "++",               "tk_plus_plus"]>,
    <[' ',  "+=",               "tk_plus_eq"]>,
    <['-',  "-",                "tk_minus"]>,
    <[' ',  "-=",               "tk_minus_eq"]>,
    <['<',  "<",                "tk_lt"]>,
    <[' ',  "<=",               "tk_lt_eq"]>,
    <[' ',  "<<",               "tk_left_shift"]>,
    <[' ',  "<<=",              "tk_left_shift_eq"]>,
    <['>',  ">",                "tk_gt"]>,
    <[' ',  ">=",               "tk_gt_eq"]>,
    <[' ',  ">>",               "tk_right_shift"]>,
    <[' ',  ">>=",              "tk_right_shift_eq"]>,
    <['=',  "=",                "tk_equal"]>,
    <[' ',  "==",               "tk_eq_eq"]>,
    <['(',  "(",                "tk_left_parenth"]>,
    <[' ',  "a lambda",         "tk_lambda"]>,
    <[' ',  "<[",               "tk_tuple_open"]>,
    <[' ',  "]>",               "tk_tuple_close"]>,
    <[']',  "]",                "tk_right_bracket"]>,
    <[' ',  "=>",               "tk_arrow"]>,
    <[' ',  "a label",          "tk_word"]>,
    <[' ',  "a property name",  "tk_prop_word"]>,
    <['"',  "a string",         "tk_double_quote"]>,
    <[' ',  "a bytestring",     "tk_bytestring"]>,
    <['\'', "a byte",           "tk_byte"]>,
    <[' ',  "an integer",       "tk_integer"]>,
    <[' ',  "a double",         "tk_double"]>,
    <[' ',  "a docblock",       "tk_docblock"]>,
    <[' ',  "a named argument", "tk_keyword_arg"]>,
    <['.',  ".",                "tk_dot"]>,
    <['&',  "&",                "tk_bitwise_and"]>,
    <[' ',  "&=",               "tk_bitwise_and_eq"]>,
    <[' ',  "&&",               "tk_logical_and"]>,
    <['|',  "|",                "tk_bitwise_or"]>,
    <[' ',  "|=",               "tk_bitwise_or_eq"]>,
    <[' ',  "||",               "tk_logical_or"]>,
    <[' ',  "@(",               "tk_typecast_parenth"]>,
    <[' ',  "...",              "tk_three_dots"]>,
    <[' ',  "|>",               "tk_func_pipe"]>,
    <[' ',  "$1",               "tk_scoop"]>,
    <[' ',  "invalid token",    "tk_invalid"]>,
    <[' ',  "end of lambda",    "tk_end_lambda"]>,
    <[' ',  "?>",               "tk_end_tag"]>,
    <[' ',  "end of file",      "tk_eof"]>,
]

define open_file(path: String): File
{
    var f = File.open(path, "w")

    # Turn "src/lily_xyz.h" into LILY_XYZ_H.
    var header_name = path.split("/")[-1]
                          .replace(".", "_")
                          .upper()

    f.write("""\
#ifndef {0}
# define {0}

/* Generated by {1}. */\n\n\
    """.format(header_name, script_name))

    return f
}

define finish_file(f: File, path: String)
{
    f.write("#endif\n")
    f.close()
    print(script_name ++ ": Updated " ++ path ++ ".")
}
