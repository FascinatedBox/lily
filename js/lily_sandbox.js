// Note: For maximum-speed code, see "Optimizing Code" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    var i = 3;
    // params, etc.
    var basicTypes = {
      'v': 'void',
      'b': 'bool',
      'c': 'char',
      's': 'short',
      'i': 'int',
      'l': 'long',
      'f': 'float',
      'd': 'double',
      'w': 'wchar_t',
      'a': 'signed char',
      'h': 'unsigned char',
      't': 'unsigned short',
      'j': 'unsigned int',
      'm': 'unsigned long',
      'x': 'long long',
      'y': 'unsigned long long',
      'z': '...'
    };
    function dump(x) {
      //return;
      if (x) Module.print(x);
      Module.print(func);
      var pre = '';
      for (var a = 0; a < i; a++) pre += ' ';
      Module.print (pre + '^');
    }
    var subs = [];
    function parseNested() {
      i++;
      if (func[i] === 'K') i++; // ignore const
      var parts = [];
      while (func[i] !== 'E') {
        if (func[i] === 'S') { // substitution
          i++;
          var next = func.indexOf('_', i);
          var num = func.substring(i, next) || 0;
          parts.push(subs[num] || '?');
          i = next+1;
          continue;
        }
        if (func[i] === 'C') { // constructor
          parts.push(parts[parts.length-1]);
          i += 2;
          continue;
        }
        var size = parseInt(func.substr(i));
        var pre = size.toString().length;
        if (!size || !pre) { i--; break; } // counter i++ below us
        var curr = func.substr(i + pre, size);
        parts.push(curr);
        subs.push(curr);
        i += pre + size;
      }
      i++; // skip E
      return parts;
    }
    var first = true;
    function parse(rawList, limit, allowVoid) { // main parser
      limit = limit || Infinity;
      var ret = '', list = [];
      function flushList() {
        return '(' + list.join(', ') + ')';
      }
      var name;
      if (func[i] === 'N') {
        // namespaced N-E
        name = parseNested().join('::');
        limit--;
        if (limit === 0) return rawList ? [name] : name;
      } else {
        // not namespaced
        if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
        var size = parseInt(func.substr(i));
        if (size) {
          var pre = size.toString().length;
          name = func.substr(i + pre, size);
          i += pre + size;
        }
      }
      first = false;
      if (func[i] === 'I') {
        i++;
        var iList = parse(true);
        var iRet = parse(true, 1, true);
        ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
      } else {
        ret = name;
      }
      paramLoop: while (i < func.length && limit-- > 0) {
        //dump('paramLoop');
        var c = func[i++];
        if (c in basicTypes) {
          list.push(basicTypes[c]);
        } else {
          switch (c) {
            case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
            case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
            case 'L': { // literal
              i++; // skip basic type
              var end = func.indexOf('E', i);
              var size = end - i;
              list.push(func.substr(i, size));
              i += size + 2; // size + 'EE'
              break;
            }
            case 'A': { // array
              var size = parseInt(func.substr(i));
              i += size.toString().length;
              if (func[i] !== '_') throw '?';
              i++; // skip _
              list.push(parse(true, 1, true)[0] + ' [' + size + ']');
              break;
            }
            case 'E': break paramLoop;
            default: ret += '?' + c; break paramLoop;
          }
        }
      }
      if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
      return rawList ? list : ret + flushList();
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', or (2) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 18392;


/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });







var _stdout;
var _stdout=_stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var _stdin;
var _stdin=_stdin=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var _stderr;
var _stderr=_stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,10,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,11,6,6,6,5,8,8,8,8,8,8,8,8,8,8,8,0,1,2,3,5,8,7,1,1,1,4,6,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,2,1,1,1,1,1,2,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,144,21,0,0,56,17,0,0,152,67,0,0,0,64,0,0,64,60,0,0,160,58,0,0,40,56,0,0,184,54,0,0,112,54,0,0,40,54,0,0,192,53,0,0,112,53,0,0,16,53,0,0,208,52,0,0,88,52,0,0,16,52,0,0,216,51,0,0,160,51,0,0,40,51,0,0,240,50,0,0,168,50,0,0,240,49,0,0,56,49,0,0,128,48,0,0,208,47,0,0,96,47,0,0,0,47,0,0,104,46,0,0,0,46,0,0,128,45,0,0,40,45,0,0,176,44,0,0,56,44,0,0,168,43,0,0,72,43,0,0,240,42,0,0,144,42,0,0,224,41,0,0,120,41,0,0,8,41,0,0,120,40,0,0,248,39,0,0,120,39,0,0,224,38,0,0,160,38,0,0,56,38,0,0,232,37,0,0,88,37,0,0,240,36,0,0,120,36,0,0,24,36,0,0,112,35,0,0,248,34,0,0,0,0,0,0,224,69,0,0,192,61,0,0,144,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,0,0,0,0,0,0,255,255,255,255,2,0,0,0,1,0,0,0,255,255,255,255,3,0,0,0,1,0,0,0,255,255,255,255,4,0,0,0,0,0,0,0,255,255,255,255,5,0,0,0,0,0,0,0,15,0,0,0,6,0,0,0,1,0,0,0,255,255,255,255,7,0,0,0,0,0,0,0,255,255,255,255,8,0,0,0,0,0,0,0,7,0,0,0,9,0,0,0,0,0,0,0,8,0,0,0,10,0,0,0,0,0,0,0,24,0,0,0,11,0,0,0,0,0,0,0,9,0,0,0,12,0,0,0,0,0,0,0,25,0,0,0,13,0,0,0,0,0,0,0,10,0,0,0,14,0,0,0,0,0,0,0,26,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,22,0,0,0,17,0,0,0,0,0,0,0,1,0,0,0,18,0,0,0,0,0,0,0,23,0,0,0,19,0,0,0,0,0,0,0,3,0,0,0,20,0,0,0,0,0,0,0,4,0,0,0,21,0,0,0,0,0,0,0,11,0,0,0,22,0,0,0,0,0,0,0,27,0,0,0,23,0,0,0,0,0,0,0,5,0,0,0,24,0,0,0,0,0,0,0,6,0,0,0,25,0,0,0,0,0,0,0,12,0,0,0,26,0,0,0,0,0,0,0,28,0,0,0,27,0,0,0,0,0,0,0,21,0,0,0,28,0,0,0,0,0,0,0,2,0,0,0,29,0,0,0,0,0,0,0,255,255,255,255,30,0,0,0,1,0,0,0,255,255,255,255,31,0,0,0,0,0,0,0,255,255,255,255,32,0,0,0,0,0,0,0,255,255,255,255,33,0,0,0,0,0,0,0,255,255,255,255,34,0,0,0,0,0,0,0,255,255,255,255,35,0,0,0,1,0,0,0,255,255,255,255,36,0,0,0,1,0,0,0,255,255,255,255,37,0,0,0,1,0,0,0,255,255,255,255,38,0,0,0,1,0,0,0,255,255,255,255,39,0,0,0,1,0,0,0,255,255,255,255,40,0,0,0,0,0,0,0,255,255,255,255,41,0,0,0,0,0,0,0,255,255,255,255,42,0,0,0,0,0,0,0,255,255,255,255,43,0,0,0,0,0,0,0,13,0,0,0,44,0,0,0,0,0,0,0,18,0,0,0,45,0,0,0,0,0,0,0,14,0,0,0,46,0,0,0,0,0,0,0,19,0,0,0,47,0,0,0,0,0,0,0,255,255,255,255,48,0,0,0,1,0,0,0,255,255,255,255,49,0,0,0,0,0,0,0,20,0,0,0,50,0,0,0,0,0,0,0,255,255,255,255,51,0,0,0,1,0,0,0,255,255,255,255,52,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,8,52,0,0,216,38,0,0,152,38,0,0,48,38,0,0,216,37,0,0,80,37,0,0,232,36,0,0,112,36,0,0,16,36,0,0,88,35,0,0,240,34,0,0,88,34,0,0,192,33,0,0,64,33,0,0,192,32,0,0,16,32,0,0,104,31,0,0,216,38,0,0,248,30,0,0,152,30,0,0,248,29,0,0,160,29,0,0,32,29,0,0,128,28,0,0,240,27,0,0,112,27,0,0,224,26,0,0,88,26,0,0,224,25,0,0,0,0,0,0,120,49,0,0,184,48,0,0,232,47,0,0,136,47,0,0,32,47,0,0,152,46,0,0,16,46,0,0,144,45,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,32,9,13,10,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,69,0,0,128,62,0,0,88,53,0,0,216,49,0,0,160,44,0,0,232,39,0,0,96,35,0,0,0,30,0,0,176,24,0,0,0,0,0,0,184,33,0,0,0,0,0,0,105,102,0,0,0,0,0,0,120,28,0,0,0,0,0,0,100,111,0,0,0,0,0,0,224,22,0,0,0,0,0,0,117,115,101,0,0,0,0,0,48,18,0,0,0,0,0,0,118,97,114,0,0,0,0,0,56,68,0,0,0,0,0,0,102,111,114,0,0,0,0,0,232,64,0,0,0,0,0,0,116,114,121,0,0,0,0,0,208,60,0,0,0,0,0,0,99,97,115,101,0,0,0,0,0,59,0,0,0,0,0,0,101,108,115,101,0,0,0,0,240,56,0,0,0,0,0,0,101,108,105,102,0,0,0,0,200,54,0,0,0,0,0,0,101,110,117,109,0,0,0,0,120,54,0,0,0,0,0,0,119,104,105,108,101,0,0,0,48,54,0,0,0,0,0,0,114,97,105,115,101,0,0,0,200,53,0,0,0,0,0,0,109,97,116,99,104,0,0,0,120,53,0,0,0,0,0,0,98,114,101,97,107,0,0,0,24,53,0,0,0,0,0,0,99,108,97,115,115,0,0,0,216,52,0,0,0,0,0,0,100,101,102,105,110,101,0,0,96,52,0,0,0,0,0,0,114,101,116,117,114,110,0,0,24,52,0,0,0,0,0,0,101,120,99,101,112,116,0,0,224,51,0,0,0,0,0,0,105,109,112,111,114,116,0,0,168,51,0,0,0,0,0,0,112,114,105,118,97,116,101,0,48,51,0,0,0,0,0,0,112,114,111,116,101,99,116,101,248,50,0,0,0,0,0,0,99,111,110,116,105,110,117,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,50,0,0,0,48,0,0,0,42,0,0,0,34,0,0,0,24,0,0,0,14,0,0,0,54,0,0,0,22,0,0,0,40,0,0,0,38,0,0,0,26,0,0,0,20,0,0,0,62,0,0,0,58,0,0,0,6,0,0,0,2,0,0,0,36,0,0,0,66,0,0,0,60,0,0,0,30,0,0,0,46,0,0,0,7,0,0,0,9,0,0,0,11,0,0,0,13,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,2,0,0,0,12,0,0,0,255,255,255,255,12,0,0,0,12,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,13,0,0,0,255,255,255,255,13,0,0,0,13,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,16,0,0,0,16,0,0,0,255,255,255,255,16,0,0,0,16,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,16,0,0,0,18,0,0,0,18,0,0,0,255,255,255,255,18,0,0,0,18,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,18,0,0,0,19,0,0,0,19,0,0,0,255,255,255,255,19,0,0,0,19,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,19,0,0,0,20,0,0,0,20,0,0,0,255,255,255,255,20,0,0,0,20,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,20,0,0,0,21,0,0,0,21,0,0,0,255,255,255,255,21,0,0,0,21,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,21,0,0,0,17,0,0,0,17,0,0,0,255,255,255,255,17,0,0,0,17,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,17,0,0,0,4,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,5,0,0,0,14,0,0,0,255,255,255,255,14,0,0,0,14,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,6,0,0,0,15,0,0,0,255,255,255,255,15,0,0,0,15,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,8,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,9,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,10,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,11,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,65,0,0,0,0,0,0,0,0,0,1,0,2,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,59,0,60,0,61,0,62,0,63,0,64,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,255,255,255,255,255,255,255,255,255,255,255,232,69,0,0,152,52,0,0,48,52,0,0,240,51,0,0,184,51,0,0,80,51,0,0,16,51,0,0,184,50,0,0,56,50,0,0,136,49,0,0,232,48,0,0,40,48,0,0,152,47,0,0,48,47,0,0,168,46,0,0,32,46,0,0,168,45,0,0,56,45,0,0,224,44,0,0,72,44,0,0,232,43,0,0,104,43,0,0,0,43,0,0,192,42,0,0,72,42,0,0,184,41,0,0,56,41,0,0,168,40,0,0,88,40,0,0,160,39,0,0,64,39,0,0,208,38,0,0,112,38,0,0,248,37,0,0,176,37,0,0,32,37,0,0,176,36,0,0,80,36,0,0,224,35,0,0,48,35,0,0,200,34,0,0,40,34,0,0,160,33,0,0,40,33,0,0,136,32,0,0,216,31,0,0,72,31,0,0,224,30,0,0,120,30,0,0,240,29,0,0,128,29,0,0,0,29,0,0,72,28,0,0,200,27,0,0,72,27,0,0,184,26,0,0,24,26,0,0,168,25,0,0,24,25,0,0,48,24,0,0,192,23,0,0,80,23,0,0,176,22,0,0,32,22,0,0,208,21,0,0,64,21,0,0,216,20,0,0,128,20,0,0,248,19,0,0,72,19,0,0,232,18,0,0,128,18,0,0,56,18,0,0,224,17,0,0,104,17,0,0,16,17,0,0,192,16,0,0,88,16,0,0,16,16,0,0,56,69,0,0,248,68,0,0,168,68,0,0,64,68,0,0,248,67,0,0,200,67,0,0,136,67,0,0,48,67,0,0,216,66,0,0,128,66,0,0,216,65,0,0,192,65,0,0,112,65,0,0,240,64,0,0,144,64,0,0,56,64,0,0,208,63,0,0,112,63,0,0,24,63,0,0,192,62,0,0,72,62,0,0,8,62,0,0,88,61,0,0,216,60,0,0,176,60,0,0,112,60,0,0,48,60,0,0,24,60,0,0,240,59,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,232,49,0,0,0,0,0,0,116,114,117,101,0,0,0,0,168,59,0,0,0,0,0,0,115,101,108,102,0,0,0,0,80,52,0,0,0,0,0,0,102,97,108,115,101,0,0,0,184,47,0,0,0,0,0,0,95,95,102,105,108,101,95,95,24,43,0,0,0,0,0,0,95,95,108,105,110,101,95,95,136,38,0,0,0,0,0,0,95,95,102,117,110,99,116,105,144,46,0,0,8,46,0,0,2,0,0,0,144,46,0,0,136,45,0,0,8,0,0,0,65,32,99,108,97,115,115,32,99,97,110,110,111,116,32,105,110,104,101,114,105,116,32,102,114,111,109,32,105,116,115,101,108,102,33,10,0,0,0,0,109,58,111,114,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,79,112,116,105,111,110,91,65,93,41,58,79,112,116,105,111,110,91,65,93,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,32,99,108,97,115,115,32,104,101,114,101,46,10,0,0,0,0,109,58,109,97,112,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,65,32,61,62,32,66,41,41,58,79,112,116,105,111,110,91,66,93,0,0,0,0,0,0,0,83,116,97,116,101,109,101,110,116,40,115,41,32,97,102,116,101,114,32,39,37,115,39,32,119,105,108,108,32,110,111,116,32,101,120,101,99,117,116,101,46,10,0,0,0,0,0,0,109,58,105,115,95,115,111,109,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,66,111,111,108,101,97,110,0,0,0,0,0,0,0,0,39,114,101,116,117,114,110,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,102,117,110,99,116,105,111,110,46,10,0,0,0,109,58,105,115,95,110,111,110,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,66,111,111,108,101,97,110,0,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,39,114,101,116,117,114,110,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,108,97,109,98,100,97,46,10,0,0,0,0,0,0,109,58,97,110,100,95,116,104,101,110,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,65,32,61,62,32,79,112,116,105,111,110,91,66,93,41,41,58,79,112,116,105,111,110,91,66,93,0,0,32,40,0,0,0,0,0,0,39,114,101,116,117,114,110,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,99,108,97,115,115,32,99,111,110,115,116,114,117,99,116,111,114,46,10,0,0,0,109,58,97,110,100,0,91,65,44,66,93,40,79,112,116,105,111,110,91,65,93,44,79,112,116,105,111,110,91,66,93,41,58,79,112,116,105,111,110,91,66,93,0,0,0,0,0,0,39,101,120,99,101,112,116,39,32,111,117,116,115,105,100,101,32,39,116,114,121,39,46,10,0,0,0,0,0,0,0,0,118,97,114,0,0,0,0,0,69,10,79,112,116,105,111,110,0,91,65,93,0,0,0,0,39,105,109,112,111,114,116,39,32,110,111,116,32,97,108,108,111,119,101,100,32,119,105,116,104,105,110,32,116,104,101,32,115,97,110,100,98,111,120,46,10,0,0,0,0,0,0,0,91,46,46,46,93,0,0,0,33,0,42,0,0,0,0,0,39,101,120,99,101,112,116,39,32,99,108,97,117,115,101,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,46,10,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,117,115,101,32,97,32,99,108,97,115,115,32,112,114,111,112,101,114,116,121,32,111,117,116,115,105,100,101,32,111,102,32,97,32,99,111,110,115,116,114,117,99,116,111,114,46,10,0,0,33,0,65,0,0,0,0,0,82,101,112,101,97,116,32,99,111,117,110,116,32,109,117,115,116,32,98,101,32,62,61,32,48,32,40,37,100,32,103,105,118,101,110,41,46,10,0,0,102,97,108,115,101,0,0,0,67,108,97,115,115,32,112,114,111,112,101,114,116,105,101,115,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,64,46,10,0,0,0,0,109,58,119,114,105,116,101,0,91,65,93,40,70,105,108,101,44,32,65,41,0,0,0,0,83,112,101,99,105,97,108,32,118,97,108,117,101,32,35,54,32,102,111,114,32,111,112,99,111,100,101,32,37,100,32,110,111,116,32,104,97,110,100,108,101,100,46,10,0,0,0,0,95,95,109,97,105,110,95,95,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,100,101,108,101,116,101,32,102,114,111,109,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,10,0,0,0,0,0,0,80,114,111,112,101,114,116,121,32,37,115,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,32,105,110,32,99,108,97,115,115,32,37,115,46,10,0,0,0,0,0,0,0,0,109,58,114,101,97,100,95,108,105,110,101,0,40,70,105,108,101,41,58,66,121,116,101,83,116,114,105,110,103,0,0,0,83,112,101,99,105,97,108,32,118,97,108,117,101,32,35,52,32,102,111,114,32,111,112,99,111,100,101,32,37,100,32,110,111,116,32,104,97,110,100,108,101,100,46,10,0,0,0,0,65,32,109,101,116,104,111,100,32,105,110,32,99,108,97,115,115,32,39,37,115,39,32,97,108,114,101,97,100,121,32,104,97,115,32,116,104,101,32,110,97,109,101,32,39,37,115,39,46,10,0,0,0,0,0,0,109,58,112,114,105,110,116,0,91,65,93,40,70,105,108,101,44,32,65,41,0,0,0,0,42,99,108,111,115,117,114,101,0,0,0,0,0,0,0,0,65,116,116,101,109,112,116,32,116,111,32,117,115,101,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,118,97,108,117,101,32,39,37,115,39,46,10,0,0,0,0,0,0,0,109,58,111,112,101,110,0,40,83,116,114,105,110,103,44,32,83,116,114,105,110,103,41,58,70,105,108,101,0,0,0,0,77,105,115,115,105,110,103,32,114,101,116,117,114,110,32,115,116,97,116,101,109,101,110,116,32,97,116,32,101,110,100,32,111,102,32,102,117,110,99,116,105,111,110,46,10,0,0,0,37,115,46,37,115,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,46,10,0,0,109,58,99,108,111,115,101,0,40,70,105,108,101,41,0,0,67,97,110,110,111,116,32,99,108,111,115,101,32,111,118,101,114,32,97,32,118,97,114,32,111,102,32,97,110,32,105,110,99,111,109,112,108,101,116,101,32,116,121,112,101,32,105,110,32,116,104,105,115,32,115,99,111,112,101,46,10,0,0,0,40,0,0,0,0,0,0,0,67,97,110,110,111,116,32,105,109,112,108,105,99,105,116,108,121,32,117,115,101,32,37,115,46,110,101,119,32,40,105,116,32,100,111,101,115,110,39,116,32,101,120,105,115,116,41,46,10,0,0,0,0,0,0,0,33,5,70,105,108,101,0,0,70,117,110,99,116,105,111,110,32,110,101,101,100,101,100,32,116,111,32,114,101,116,117,114,110,32,97,32,118,97,108,117,101,44,32,98,117,116,32,100,105,100,32,110,111,116,46,10,0,0,0,0,0,0,0,0,93,40,0,0,0,0,0,0,110,101,119,0,0,0,0,0,109,58,112,117,115,104,0,91,65,93,40,84,117,112,108,101,91,49,93,44,32,65,41,58,84,117,112,108,101,91,49,44,32,65,93,0,0,0,0,0,83,117,98,115,99,114,105,112,116,32,97,115,115,105,103,110,32,110,111,116,32,97,108,108,111,119,101,100,32,111,110,32,116,121,112,101,32,115,116,114,105,110,103,46,10,0,0,0,67,97,110,110,111,116,32,105,109,112,108,105,99,105,116,108,121,32,117,115,101,32,116,104,101,32,99,111,110,115,116,114,117,99,116,111,114,32,111,102,32,97,110,32,101,110,117,109,46,10,0,0,0,0,0,0,109,58,109,101,114,103,101,0,40,84,117,112,108,101,91,49,93,44,32,84,117,112,108,101,91,50,93,41,58,84,117,112,108,101,91,49,44,32,50,93,0,0,0,0,0,0,0,0,117,115,101,0,0,0,0,0,76,101,102,116,32,115,105,100,101,32,111,102,32,37,115,32,105,115,32,110,111,116,32,97,115,115,105,103,110,97,98,108,101,46,10,0,0,0,0,0,37,115,32,104,97,115,32,110,111,116,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,10,0,0,0,0,0,0,73,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,10,0,0,0,33,2,84,117,112,108,101,0,67,97,110,110,111,116,32,97,115,115,105,103,110,32,116,121,112,101,32,39,94,84,39,32,116,111,32,116,121,112,101,32,39,94,84,39,46,10,0,0,39,37,115,39,32,97,102,116,101,114,32,39,101,108,115,101,39,46,10,0,0,0,0,0,39,115,101,108,102,39,32,109,117,115,116,32,98,101,32,117,115,101,100,32,119,105,116,104,105,110,32,97,32,99,108,97,115,115,46,10,0,0,0,0,109,58,115,105,122,101,0,91,65,44,32,66,93,40,72,97,115,104,91,65,44,32,66,93,41,58,73,110,116,101,103,101,114,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,109,112,111,117,110,100,32,111,112,58,32,37,115,46,10,0,0,0,0,0,0,0,80,114,111,112,101,114,116,121,32,37,115,32,105,115,32,110,111,116,32,105,110,32,99,108,97,115,115,32,37,115,46,10,0,0,0,0,0,0,0,0,109,58,115,101,108,101,99,116,0,91,65,44,32,66,93,40,72,97,115,104,91,65,44,32,66,93,44,32,70,117,110,99,116,105,111,110,40,65,44,32,66,32,61,62,32,66,111,111,108,101,97,110,41,41,58,72,97,115,104,91,65,44,32,66,93,0,0,0,0,0,0,0,67,97,110,110,111,116,32,110,101,115,116,32,97,110,32,97,115,115,105,103,110,109,101,110,116,32,119,105,116,104,105,110,32,97,110,32,101,120,112,114,101,115,115,105,111,110,46,10,0,0,0,0,0,0,0,0,73,79,69,114,114,111,114,0,80,111,112,32,102,114,111,109,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,10,0,0,0,0,0,0,0,0,80,114,111,112,101,114,116,105,101,115,32,99,97,110,110,111,116,32,98,101,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,99,108,97,115,115,32,99,111,110,115,116,114,117,99,116,111,114,46,10,0,0,0,0,0,0,109,58,114,101,106,101,99,116,0,91,65,44,32,66,93,40,72,97,115,104,91,65,44,32,66,93,44,32,70,117,110,99,116,105,111,110,40,65,44,32,66,32,61,62,32,66,111,111,108,101,97,110,41,41,58,72,97,115,104,91,65,44,32,66,93,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,58,32,94,84,32,37,115,32,94,84,46,10,0,0,0,69,120,112,101,99,116,101,100,32,99,108,111,115,105,110,103,32,116,111,107,101,110,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,10,0,109,58,109,101,114,103,101,0,91,65,44,32,66,93,40,72,97,115,104,91,65,44,32,66,93,44,32,72,97,115,104,91,65,44,32,66,93,46,46,46,41,58,72,97,115,104,91,65,44,32,66,93,0,0,0,0,62,62,61,0,0,0,0,0,67,111,109,109,101,110,116,32,119,105,116,104,105,110,32,105,110,116,101,114,112,111,108,97,116,101,100,32,115,101,99,116,105,111,110,46,10,0,0,0,79,112,116,105,111,110,0,0,109,58,109,97,112,95,118,97,108,117,101,115,0,91,65,44,32,66,44,32,67,93,40,72,97,115,104,91,65,44,32,66,93,44,32,70,117,110,99,116,105,111,110,40,66,32,61,62,32,67,41,41,58,72,97,115,104,91,65,44,32,67,93,0,60,60,61,0,0,0,0,0,78,101,119,108,105,110,101,32,105,110,32,105,110,116,101,114,112,111,108,97,116,101,100,32,115,101,99,116,105,111,110,46,10,0,0,0,0,0,0,0,69,120,112,101,99,116,101,100,32,97,32,107,101,121,32,61,62,32,118,97,108,117,101,32,112,97,105,114,32,98,101,102,111,114,101,32,39,44,39,46,10,0,0,0,0,0,0,0,109,58,103,101,116,0,91,65,44,32,66,93,40,72,97,115,104,91,65,44,32,66,93,44,32,65,44,32,66,41,58,66,0,0,0,0,0,0,0,0,47,61,0,0,0,0,0,0,77,117,108,116,105,45,108,105,110,101,32,115,116,114,105,110,103,32,110,111,116,32,97,108,108,111,119,101,100,32,119,105,116,104,105,110,32,105,110,116,101,114,112,111,108,97,116,105,111,110,46,10,0,0,0,0,63,108,105,108,121,0,0,0,69,120,112,101,99,116,101,100,32,97,32,118,97,108,117,101,44,32,110,111,116,32,39,44,39,46,10,0,0,0,0,0,109,58,107,101,121,115,0,91,65,44,32,66,93,40,72,97,115,104,91,65,44,32,66,93,41,58,76,105,115,116,91,65,93,0,0,0,0,0,0,0,42,61,0,0,0,0,0,0,44,32,0,0,0,0,0,0,78,101,115,116,101,100,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,46,10,0,0,0,69,120,112,101,99,116,101,100,32,39,44,39,32,111,114,32,39,41,39,44,32,110,111,116,32,37,115,46,10,0,0,0,109,58,104,97,115,95,107,101,121,0,91,65,44,32,66,93,40,72,97,115,104,91,65,44,32,66,93,44,32,65,41,58,66,111,111,108,101,97,110,0,37,61,0,0,0,0,0,0,73,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,46,10,0,0,0,0,0,0,0,65,110,32,105,110,105,116,105,97,108,105,122,97,116,105,111,110,32,101,120,112,114,101,115,115,105,111,110,32,105,115,32,114,101,113,117,105,114,101,100,32,104,101,114,101,46,10,0,109,58,101,97,99,104,95,112,97,105,114,0,91,65,44,32,66,93,40,72,97,115,104,91,65,44,32,66,93,44,32,70,117,110,99,116,105,111,110,40,65,44,32,66,41,41,0,0,100,111,0,0,0,0,0,0,45,61,0,0,0,0,0,0,85,110,116,101,114,109,105,110,97,116,101,100,32,109,117,108,116,105,45,108,105,110,101,32,115,116,114,105,110,103,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,10,0,0,0,65,32,112,114,111,112,101,114,116,121,32,105,110,32,99,108,97,115,115,32,39,37,115,39,32,97,108,114,101,97,100,121,32,104,97,115,32,116,104,101,32,110,97,109,101,32,39,37,115,39,46,10,0,0,0,0,112,114,105,110,116,0,0,0,109,58,100,101,108,101,116,101,0,91,65,44,32,66,93,40,72,97,115,104,91,65,44,32,66,93,44,32,65,41,0,0,43,61,0,0,0,0,0,0,78,101,119,108,105,110,101,32,105,110,32,115,105,110,103,108,101,45,108,105,110,101,32,115,116,114,105,110,103,46,10,0,101,108,115,101,0,0,0,0,73,110,118,97,108,105,100,32,103,101,110,101,114,105,99,32,110,97,109,101,32,40,119,97,110,116,101,100,32,37,115,44,32,103,111,116,32,37,115,41,46,10,0,0,0,0,0,0,109,58,99,108,101,97,114,0,91,65,44,32,66,93,40,72,97,115,104,91,65,44,32,66,93,41,0,0,0,0,0,0,61,0,0,0,0,0,0,0,34,34,34,0,0,0,0,0,79,110,108,121,32,118,97,114,105,97,110,116,115,32,116,104,97,116,32,116,97,107,101,32,110,111,32,97,114,103,117,109,101,110,116,115,32,99,97,110,32,98,101,32,100,101,102,97,117,108,116,32,97,114,103,117,109,101,110,116,115,46,10,0,33,11,72,97,115,104,0,0,124,62,0,0,0,0,0,0,70,111,114,109,97,116,69,114,114,111,114,0,0,0,0,0,37,108,108,100,0,0,0,0,70,105,108,101,115,32,105,110,32,116,97,103,103,101,100,32,109,111,100,101,32,109,117,115,116,32,115,116,97,114,116,32,119,105,116,104,32,39,60,63,108,105,108,121,39,46,10,0,39,37,115,39,32,100,111,101,115,32,110,111,116,32,104,97,118,101,32,97,32,118,97,114,105,97,110,116,32,110,97,109,101,100,32,39,37,115,39,46,10,0,0,0,0,0,0,0,109,58,117,110,115,104,105,102,116,0,91,65,93,40,76,105,115,116,91,65,93,44,32,65,41,0,0,0,0,0,0,0,124,124,0,0,0,0,0,0,60,63,108,105,108,121,0,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,100,101,102,97,117,108,116,32,118,97,108,117,101,32,102,111,114,32,97,32,66,111,111,108,101,97,110,46,10,0,0,0,0,0,0,0,109,58,115,104,105,102,116,0,91,65,93,40,76,105,115,116,91,65,93,41,58,65,0,0,38,38,0,0,0,0,0,0,73,110,118,97,108,105,100,32,117,116,102,45,56,32,115,101,113,117,101,110,99,101,32,111,110,32,108,105,110,101,32,37,100,46,10,0,0,0,0,0,37,115,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,10,0,0,109,58,115,105,122,101,0,91,65,93,40,76,105,115,116,91,65,93,41,58,73,110,116,101,103,101,114,0,0,0,0,0,33,0,0,0,0,0,0,0,85,110,116,101,114,109,105,110,97,116,101,100,32,109,117,108,116,105,45,108,105,110,101,32,99,111,109,109,101,110,116,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,10,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,67,108,97,115,115,32,39,37,115,39,32,100,111,101,115,32,110,111,116,32,101,120,105,115,116,46,10,0,0,0,0,0,109,58,115,101,108,101,99,116,0,91,65,93,40,76,105,115,116,91,65,93,44,32,70,117,110,99,116,105,111,110,40,65,32,61,62,32,66,111,111,108,101,97,110,41,41,58,76,105,115,116,91,65,93,0,0,0,94,0,0,0,0,0,0,0,69,120,112,111,110,101,110,116,32,105,115,32,116,111,111,32,108,97,114,103,101,46,10,0,84,97,103,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,105,110,99,108,117,100,101,100,32,102,105,108,101,115,46,10,0,0,0,0,78,117,109,101,114,105,99,32,115,99,111,111,112,32,116,121,112,101,32,109,117,115,116,32,98,101,32,98,101,116,119,101,101,110,32,48,32,97,110,100,32,50,46,0,0,0,0,0,109,58,114,101,106,101,99,116,0,91,65,93,40,76,105,115,116,91,65,93,44,32,70,117,110,99,116,105,111,110,40,65,32,61,62,32,66,111,111,108,101,97,110,41,41,58,76,105,115,116,91,65,93,0,0,0,124,0,0,0,0,0,0,0,91,0,0,0,0,0,0,0,69,120,112,101,99,116,101,100,32,97,32,98,97,115,101,32,49,48,32,110,117,109,98,101,114,32,97,102,116,101,114,32,101,120,112,111,110,101,110,116,46,10,0,0,0,0,0,0,39,94,84,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,104,97,115,104,32,107,101,121,46,10,0,0,91,116,114,121,105,116,93,0,109,58,112,117,115,104,0,91,65,93,40,76,105,115,116,91,65,93,44,32,65,41,0,0,38,0,0,0,0,0,0,0,68,111,117,98,108,101,32,118,97,108,117,101,32,105,115,32,116,111,111,32,108,97,114,103,101,46,10,0,0,0,0,0,67,108,97,115,115,32,37,115,32,101,120,112,101,99,116,115,32,37,100,32,116,121,112,101,40,115,41,44,32,98,117,116,32,103,111,116,32,37,100,32,116,121,112,101,40,115,41,46,10,0,0,0,0,0,0,0,109,58,112,111,112,0,91,65,93,40,76,105,115,116,91,65,93,41,58,65,0,0,0,0,105,102,0,0,0,0,0,0,62,62,0,0,0,0,0,0,73,110,116,101,103,101,114,32,118,97,108,117,101,32,105,115,32,116,111,111,32,108,97,114,103,101,46,10,0,0,0,0,78,117,109,101,114,105,99,32,115,99,111,111,112,105,110,103,32,116,121,112,101,115,32,111,110,108,121,32,97,118,97,105,108,97,98,108,101,32,116,111,32,116,104,101,32,98,97,99,107,101,110,100,46,10,0,0,115,116,100,111,117,116,0,0,109,58,109,97,112,0,91,65,44,66,93,40,76,105,115,116,91,65,93,44,32,70,117,110,99,116,105,111,110,40,65,32,61,62,32,66,41,41,58,76,105,115,116,91,66,93,0,0,60,60,0,0,0,0,0,0,85,110,116,101,114,109,105,110,97,116,101,100,32,108,97,109,98,100,97,32,40,115,116,97,114,116,101,100,32,97,116,32,108,105,110,101,32,37,100,41,46,10,0,0,0,0,0,0,101,108,105,102,0,0,0,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,61,62,39,32,111,114,32,39,41,39,32,97,102,116,101,114,32,118,97,114,97,114,103,115,46,10,0,0,0,0,0,109,58,106,111,105,110,0,91,65,93,40,76,105,115,116,91,65,93,44,32,42,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,0,0,0,0,47,0,0,0,0,0,0,0,101,110,100,32,111,102,32,102,105,108,101,0,0,0,0,0,84,121,112,101,32,39,94,84,39,32,99,97,110,110,111,116,32,104,97,118,101,32,97,32,100,101,102,97,117,108,116,32,118,97,108,117,101,46,10,0,109,58,105,110,115,101,114,116,0,91,65,93,40,76,105,115,116,91,65,93,44,32,73,110,116,101,103,101,114,44,32,65,41,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,75,101,121,69,114,114,111,114,0,0,0,0,0,0,0,0,63,62,0,0,0,0,0,0,67,97,110,110,111,116,32,114,101,109,111,118,101,32,107,101,121,32,102,114,111,109,32,104,97,115,104,32,100,117,114,105,110,103,32,105,116,101,114,97,116,105,111,110,46,10,0,0,78,111,110,45,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,32,102,111,108,108,111,119,115,32,111,112,116,105,111,110,97,108,32,97,114,103,117,109,101,110,116,46,10,0,0,0,0,0,0,0,109,58,102,111,108,100,0,91,65,93,40,76,105,115,116,91,65,93,44,32,65,44,32,70,117,110,99,116,105,111,110,40,65,44,32,65,32,61,62,32,65,41,41,58,65,0,0,0,37,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,116,111,107,101,110,0,0,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,93,39,44,32,110,111,116,32,39,37,115,39,46,10,0,0,109,58,102,105,108,108,0,91,65,93,40,73,110,116,101,103,101,114,44,32,65,41,58,76,105,115,116,91,65,93,0,0,33,61,0,0,0,0,0,0,124,62,0,0,0,0,0,0,86,97,114,105,97,110,116,32,116,121,112,101,115,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,100,101,99,108,97,114,97,116,105,111,110,46,10,0,0,0,0,109,58,101,97,99,104,95,105,110,100,101,120,0,91,65,93,40,76,105,115,116,91,65,93,44,32,70,117,110,99,116,105,111,110,40,73,110,116,101,103,101,114,41,41,58,76,105,115,116,91,65,93,0,0,0,0,62,61,0,0,0,0,0,0,46,46,46,0,0,0,0,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,41,39,44,32,110,111,116,32,39,37,115,39,46,10,0,0,109,58,101,97,99,104,0,91,65,93,40,76,105,115,116,91,65,93,44,32,70,117,110,99,116,105,111,110,40,65,41,41,58,76,105,115,116,91,65,93,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,64,40,0,0,0,0,0,0,70,111,117,110,100,32,63,62,32,98,117,116,32,110,111,116,32,101,120,112,101,99,116,105,110,103,32,116,97,103,115,46,10,0,0,0,0,0,0,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,102,111,114,32,97,32,100,101,102,105,110,101,46,10,0,0,0,0,0,0,109,58,100,101,108,101,116,101,95,97,116,0,91,65,93,40,76,105,115,116,91,65,93,44,32,73,110,116,101,103,101,114,41,0,0,0,0,0,0,0,60,61,0,0,0,0,0,0,124,32,32,32,32,0,0,0,124,124,0,0,0,0,0,0,40,115,101,108,102,41,0,0,109,58,99,111,117,110,116,0,91,65,93,40,76,105,115,116,91,65,93,44,32,70,117,110,99,116,105,111,110,40,65,32,61,62,32,66,111,111,108,101,97,110,41,41,58,73,110,116,101,103,101,114,0,0,0,0,60,0,0,0,0,0,0,0,124,0,0,0,0,0,0,0,77,117,108,116,105,45,108,105,110,101,32,98,108,111,99,107,32,119,105,116,104,105,110,32,115,105,110,103,108,101,45,108,105,110,101,32,98,108,111,99,107,46,10,0,0,0,0,0,109,58,99,108,101,97,114,0,91,65,93,40,76,105,115,116,91,65,93,41,0,0,0,0,95,95,102,117,110,99,116,105,111,110,95,95,0,0,0,0,61,61,0,0,0,0,0,0,38,38,0,0,0,0,0,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,32,102,117,110,99,116,105,111,110,32,104,101,114,101,46,10,0,37,100,10,0,0,0,0,0,33,17,76,105,115,116,0,0,45,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,39,125,39,32,111,117,116,115,105,100,101,32,111,102,32,97,32,98,108,111,99,107,46,10,0,0,0,0,0,0,0,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,118,97,114,39,32,111,114,32,39,100,101,102,105,110,101,39,44,32,98,117,116,32,103,111,116,32,39,37,115,39,46,10,0,0,0,0,0,0,0,109,58,110,101,119,0,91,65,93,40,65,41,58,68,121,110,97,109,105,99,0,0,0,0,73,110,118,97,108,105,100,32,111,112,101,114,97,116,105,111,110,58,32,37,115,37,115,46,10,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,39,37,115,39,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,104,101,114,101,46,0,0,0,0,0,0,0,33,1,68,121,110,97,109,105,99,0,0,0,0,0,0,0,73,110,116,101,114,112,111,108,97,116,105,111,110,32,101,120,112,114,101,115,115,105,111,110,32,100,111,101,115,32,110,111,116,32,121,105,101,108,100,32,97,32,118,97,108,117,101,46,10,0,0,0,0,0,0,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,97,32,100,111,117,98,108,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([69,114,114,110,111,32,37,100,58,32,94,82,32,40,37,115,41,46,10,0,0,0,0,0,39,99,111,110,116,105,110,117,101,39,32,110,111,116,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,97,32,109,117,108,116,105,45,108,105,110,101,32,98,108,111,99,107,46,10,0,0,0,0,0,0,0,33,0,70,117,110,99,116,105,111,110,0,0,0,0,0,0,76,105,115,116,32,101,108,101,109,101,110,116,115,0,0,0,97,110,32,105,110,116,101,103,101,114,0,0,0,0,0,0,69,120,112,101,99,116,101,100,32,97,32,118,97,108,117,101,44,32,110,111,116,32,39,37,115,39,46,10,0,0,0,0,109,58,116,111,95,115,0,40,66,111,111,108,101,97,110,41,58,83,116,114,105,110,103,0,37,115,32,100,111,32,110,111,116,32,104,97,118,101,32,97,32,99,111,110,115,105,115,116,101,110,116,32,116,121,112,101,46,10,69,120,112,101,99,116,101,100,32,84,121,112,101,58,32,94,84,10,82,101,99,101,105,118,101,100,32,84,121,112,101,58,32,94,84,10,0,0,97,110,32,105,110,116,101,114,112,111,108,97,116,101,100,32,115,116,114,105,110,103,0,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,37,115,46,10,0,0,0,109,58,116,111,95,105,0,40,66,111,111,108,101,97,110,41,58,68,111,117,98,108,101,0,84,121,112,101,32,39,94,84,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,104,97,115,104,32,107,101,121,46,10,0,0,0,0,0,97,32,98,121,116,101,115,116,114,105,110,103,0,0,0,0,85,110,116,101,114,109,105,110,97,116,101,100,32,98,108,111,99,107,40,115,41,32,97,116,32,101,110,100,32,111,102,32,112,97,114,115,105,110,103,46,10,0,0,0,0,0,0,0,33,2,66,111,111,108,101,97,110,0,0,0,0,0,0,0,72,97,115,104,32,118,97,108,117,101,115,0,0,0,0,0,102,97,108,115,101,0,0,0,97,32,115,116,114,105,110,103,0,0,0,0,0,0,0,0,39,46,46,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,116,111,107,101,110,32,40,101,120,112,101,99,116,101,100,32,49,32,111,114,32,51,32,100,111,116,115,41,46,10,0,0,0,0,0,0,32,32,32,32,102,114,111,109,32,37,115,58,37,100,58,32,105,110,32,37,115,37,115,37,115,10,0,0,0,0,0,0,109,58,101,110,99,111,100,101,0,40,66,121,116,101,83,116,114,105,110,103,44,32,42,83,116,114,105,110,103,41,58,79,112,116,105,111,110,91,83,116,114,105,110,103,93,0,0,0,72,97,115,104,32,107,101,121,115,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,97,32,112,114,111,112,101,114,116,121,32,110,97,109,101,0,32,32,32,32,102,114,111,109,32,91,67,93,58,32,105,110,32,37,115,37,115,37,115,10,0,0,0,0,0,0,0,0,33,1,66,121,116,101,83,116,114,105,110,103,0,0,0,0,67,97,110,110,111,116,32,99,114,101,97,116,101,32,97,110,32,101,109,112,116,121,32,116,117,112,108,101,46,10,0,0,97,32,108,97,98,101,108,0,46,0,0,0,0,0,0,0,109,58,117,112,112,101,114,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,95,95,108,105,110,101,95,95,0,0,0,0,0,0,0,0,67,97,110,110,111,116,32,115,117,98,115,99,114,105,112,116,32,116,121,112,101,32,39,94,84,39,46,10,0,0,0,0,61,62,0,0,0,0,0,0,84,114,97,99,101,98,97,99,107,58,10,0,0,0,0,0,34,94,69,34,10,0,0,0,109,58,116,114,105,109,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,0,73,110,100,101,120,32,37,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,32,102,111,114,32,94,84,46,10,0,0,0,0,0,0,0,93,0,0,0,0,0,0,0,32,32,32,32,102,114,111,109,32,37,115,58,37,100,10,0,39,99,111,110,116,105,110,117,101,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,108,111,111,112,46,10,0,0,0,0,0,109,58,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,0,116,117,112,108,101,32,115,117,98,115,99,114,105,112,116,115,32,109,117,115,116,32,98,101,32,105,110,116,101,103,101,114,32,108,105,116,101,114,97,108,115,46,10,0,0,0,0,0,93,62,0,0,0,0,0,0,58,32,37,115,0,0,0,0,109,58,115,112,108,105,116,0,40,83,116,114,105,110,103,44,42,83,116,114,105,110,103,41,58,76,105,115,116,91,83,116,114,105,110,103,93,0,0,0,104,97,115,104,32,105,110,100,101,120,32,115,104,111,117,108,100,32,98,101,32,116,121,112,101,32,39,94,84,39,44,32,110,111,116,32,116,121,112,101,32,39,94,84,39,46,10,0,86,97,108,117,101,69,114,114,111,114,0,0,0,0,0,0,60,91,0,0,0,0,0,0,73,110,118,97,108,105,100,32,109,111,100,101,32,39,37,115,39,32,103,105,118,101,110,46,10,0,0,0,0,0,0,0,37,115,46,0,0,0,0,0,109,58,115,116,97,114,116,115,95,119,105,116,104,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,0,0,37,115,32,105,110,100,101,120,32,105,115,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,46,10,0,0,0,0,97,32,108,97,109,98,100,97,0,0,0,0,0,0,0,0,109,58,114,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,67,97,110,110,111,116,32,99,97,115,116,32,116,121,112,101,32,39,94,84,39,32,116,111,32,116,121,112,101,32,39,94,84,39,46,10,0,0,0,0,123,0,0,0,0,0,0,0,46,115,111,0,0,0,0,0,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,0,0,0,0,109,58,112,97,114,115,101,95,105,0,40,83,116,114,105,110,103,41,58,79,112,116,105,111,110,91,73,110,116,101,103,101,114,93,0,0,0,0,0,0,67,97,115,116,115,32,102,114,111,109,32,68,121,110,97,109,105,99,32,99,97,110,110,111,116,32,105,110,99,108,117,100,101,32,115,117,98,116,121,112,101,115,46,10,0,0,0,0,61,61,0,0,0,0,0,0,46,108,108,121,0,0,0,0,73,110,100,101,120,69,114,114,111,114,0,0,0,0,0,0,109,58,108,111,119,101,114,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,73,110,118,97,108,105,100,32,117,115,101,32,111,102,32,117,110,105,110,105,116,105,97,108,105,122,101,100,32,112,114,111,112,101,114,116,121,32,39,64,37,115,39,46,10,0,0,0,61,0,0,0,0,0,0,0,69,120,112,101,99,116,101,100,32,39,34,39,32,97,102,116,101,114,32,39,36,39,46,10,0,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,86,97,108,117,101,69,114,114,111,114,0,0,0,0,0,0,109,58,108,115,116,114,105,112,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,37,115,46,37,115,32,105,115,32,109,97,114,107,101,100,32,37,115,44,32,97,110,100,32,110,111,116,32,97,118,97,105,108,97,98,108,101,32,104,101,114,101,46,10,0,0,0,0,37,103,0,0,0,0,0,0,62,62,61,0,0,0,0,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,32,39,37,115,39,46,10,0,82,117,110,116,105,109,101,69,114,114,111,114,0,0,0,0,109,58,105,115,95,115,112,97,99,101,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,0,0,0,0,112,114,111,116,101,99,116,101,100,0,0,0,0,0,0,0,62,62,0,0,0,0,0,0,69,120,112,101,99,116,101,100,32,39,37,115,39,44,32,110,111,116,32,39,37,115,39,46,10,0,0,0,0,0,0,0,75,101,121,69,114,114,111,114,0,0,0,0,0,0,0,0,109,58,105,115,95,97,108,110,117,109,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,0,0,0,0,95,95,102,105,108,101,95,95,0,0,0,0,0,0,0,0,112,114,105,118,97,116,101,0,62,61,0,0,0,0,0,0,40,108,97,109,98,100,97,41,0,0,0,0,0,0,0,0,70,111,114,109,97,116,69,114,114,111,114,0,0,0,0,0,83,117,98,115,99,114,105,112,116,32,105,110,100,101,120,32,37,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,46,10,0,0,0,0,115,121,115,0,0,0,0,0,109,58,105,115,95,100,105,103,105,116,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,0,0,0,0,85,115,101,32,64,60,110,97,109,101,62,32,116,111,32,103,101,116,47,115,101,116,32,112,114,111,112,101,114,116,105,101,115,44,32,110,111,116,32,115,101,108,102,46,60,110,97,109,101,62,46,10,0,0,0,0,62,0,0,0,0,0,0,0,73,110,116,101,114,112,111,108,97,116,105,111,110,32,99,111,109,109,97,110,100,32,100,111,101,115,32,110,111,116,32,114,101,116,117,114,110,32,97,32,118,97,108,117,101,46,10,0,73,79,69,114,114,111,114,0,39,98,114,101,97,107,39,32,117,115,101,100,32,111,117,116,115,105,100,101,32,111,102,32,97,32,108,111,111,112,46,10,0,0,0,0,0,0,0,0,109,58,105,115,95,97,108,112,104,97,0,40,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,0,0,0,0,67,108,97,115,115,32,37,115,32,104,97,115,32,110,111,32,109,101,116,104,111,100,32,111,114,32,112,114,111,112,101,114,116,121,32,110,97,109,101,100,32,37,115,46,10,0,0,0,60,60,61,0,0,0,0,0,73,110,116,101,114,112,111,108,97,116,105,111,110,32,98,108,111,99,107,32,109,117,115,116,32,98,101,32,97,32,115,105,110,103,108,101,32,101,120,112,114,101,115,115,105,111,110,46,10,0,0,0,0,0,0,0,69,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,109,58,104,116,109,108,95,101,110,99,111,100,101,0,40,83,116,114,105,110,103,41,58,83,116,114,105,110,103,0,0,0,67,97,110,110,111,116,32,97,110,111,110,121,109,111,117,115,108,121,32,99,97,108,108,32,114,101,115,117,108,116,105,110,103,32,116,121,112,101,32,39,94,84,39,46,10,0,0,0,73,110,100,101,120,69,114,114,111,114,0,0,0,0,0,0,116,114,117,101,0,0,0,0,60,60,0,0,0,0,0,0,69,109,112,116,121,32,105,110,116,101,114,112,111,108,97,116,105,111,110,32,98,108,111,99,107,46,10,0,0,0,0,0,101,114,114,111,114,0,0,0,37,115,58,37,115,32,102,114,111,109,32,37,115,37,115,37,115,0,0,0,0,0,0,0,109,58,102,105,110,100,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,79,112,116,105,111,110,91,73,110,116,101,103,101,114,93,0,0,65,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,37,115,37,115,37,115,32,105,115,32,105,110,118,97,108,105,100,58,10,69,120,112,101,99,116,101,100,32,84,121,112,101,58,32,94,84,10,82,101,99,101,105,118,101,100,32,84,121,112,101,58,32,94,84,10,0,60,61,0,0,0,0,0,0,91,67,93,0,0,0,0,0,109,58,101,110,100,115,95,119,105,116,104,0,40,83,116,114,105,110,103,44,83,116,114,105,110,103,41,58,66,111,111,108,101,97,110,0,0,0,0,0,40,97,110,111,110,121,109,111,117,115,41,0,0,0,0,0,60,0,0,0,0,0,0,0,99,111,110,116,105,110,117,101,0,0,0,0,0,0,0,0,37,100,58,0,0,0,0,0,33,16,83,116,114,105,110,103,0,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,45,61,0,0,0,0,0,0,112,114,111,116,101,99,116,101,100,0,0,0,0,0,0,0,60,37,115,37,115,37,115,32,97,116,32,37,112,62,0,0,109,58,116,111,95,105,0,40,68,111,117,98,108,101,41,58,73,110,116,101,103,101,114,0,87,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,37,115,37,115,37,115,32,40,37,115,32,102,111,114,32,37,115,37,115,37,115,41,46,10,0,0,0,45,0,0,0,0,0,0,0,112,114,105,118,97,116,101,0,41,0,0,0,0,0,0,0,33,1,68,111,117,98,108,101,0,0,0,0,0,0,0,0,46,46,0,0,0,0,0,0,37,100,0,0,0,0,0,0,43,61,0,0,0,0,0,0,105,109,112,111,114,116,0,0,40,0,0,0,0,0,0,0,109,58,116,111,95,115,0,40,73,110,116,101,103,101,114,41,58,83,116,114,105,110,103,0,43,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,101,120,99,101,112,116,0,0,60,37,115,32,102,105,108,101,32,97,116,32,37,112,62,0,109,58,116,111,95,100,0,40,73,110,116,101,103,101,114,41,58,68,111,117,98,108,101,0,37,100,0,0,0,0,0,0,102,97,108,115,101,0,0,0,47,61,0,0,0,0,0,0,114,101,116,117,114,110,0,0,99,108,111,115,101,100,0,0,102,111,114,32,108,111,111,112,32,115,116,101,112,32,99,97,110,110,111,116,32,98,101,32,48,46,10,0,0,0,0,0,90,0,0,0,0,0,0,0,33,2,73,110,116,101,103,101,114,0,0,0,0,0,0,0,110,111,110,101,0,0,0,0,65,116,116,101,109,112,116,32,116,111,32,100,105,118,105,100,101,32,98,121,32,122,101,114,111,46,10,0,0,0,0,0,47,0,0,0,0,0,0,0,100,101,102,105,110,101,0,0,111,112,101,110,0,0,0,0,40,102,111,114,32,116,101,109,112,41,0,0,0,0,0,0,108,105,108,121,95,100,121,110,97,108,111,97,100,95,116,97,98,108,101,0,0,0,0,0,42,61,0,0,0,0,0,0,99,108,97,115,115,0,0,0,44,32,0,0,0,0,0,0,119,0,0,0,0,0,0,0,86,97,114,105,97,110,116,32,37,115,32,115,104,111,117,108,100,32,110,111,116,32,103,101,116,32,97,114,103,115,46,10,0,0,0,0,0,0,0,0,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,0,0,0,0,42,0,0,0,0,0,0,0,98,114,101,97,107,0,0,0,32,61,62,32,0,0,0,0,116,114,117,101,0,0,0,0,114,0,0,0,0,0,0,0,94,84,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,99,111,110,100,105,116,105,111,110,32,116,121,112,101,46,10,0,0,0,0,0,0,37,61,0,0,0,0,0,0,109,97,116,99,104,0,0,0,93,62,0,0,0,0,0,0,73,110,100,101,120,32,37,100,32,105,115,32,111,117,116,32,111,102,32,114,97,110,103,101,46,10,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,108,97,115,115,32,39,37,115,39,32,103,105,118,101,110,32,116,111,32,114,97,105,115,101,46,10,0,0,0,0,0,110,97,110,0,0,0,0,0,37,0,0,0,0,0,0,0,114,97,105,115,101,0,0,0,60,91,0,0,0,0,0,0,67,97,110,110,111,116,32,115,112,108,105,116,32,98,121,32,101,109,112,116,121,32,115,116,114,105,110,103,46,10,0,0,69,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,33,61,0,0,0,0,0,0,119,104,105,108,101,0,0,0,93,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,39,114,97,105,115,101,39,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,10,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,101,110,117,109,0,0,0,0,69,114,114,111,114,0,0,0,91,0,0,0,0,0,0,0,84,97,105,110,116,101,100,0,38,103,116,59,0,0,0,0,108,105,108,121,95,37,115,95,37,115,95,37,115,0,0,0,69,120,112,101,99,116,101,100,32,101,105,116,104,101,114,32,39,44,39,32,111,114,32,39,124,39,44,32,110,111,116,32,39,37,115,39,46,10,0,0,114,101,116,117,114,110,32,101,120,112,101,99,116,101,100,32,116,121,112,101,32,39,94,84,39,32,98,117,116,32,103,111,116,32,116,121,112,101,32,39,94,84,39,46,10,0,0,0,67,97,110,110,111,116,32,105,110,102,101,114,32,116,121,112,101,32,111,102,32,39,37,115,39,46,10,0,0,0,0,0,46,47,0,0,0,0,0,0,70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,114,101,97,100,105,110,103,46,10,0,0,0,0,0,69,120,112,101,99,116,101,100,32,39,119,104,105,108,101,39,44,32,110,111,116,32,39,37,115,39,46,10,0,0,0,0,70,105,108,101,32,110,111,116,32,111,112,101,110,32,102,111,114,32,119,114,105,116,105,110,103,46,10,0,0,0,0,0,32,32,32,32,37,115,112,97,99,107,97,103,101,115,47,37,115,37,115,37,115,37,115,10,0,0,0,0,0,0,0,0,73,79,32,111,112,101,114,97,116,105,111,110,32,111,110,32,99,108,111,115,101,100,32,102,105,108,101,46,10,0,0,0,116,114,117,101,0,0,0,0,58,0,0,0,0,0,0,0,32,32,32,32,110,111,32,98,117,105,108,116,45,105,110,32,112,97,99,107,97,103,101,32,39,37,115,39,46,10,0,0,73,110,100,101,120,32,37,100,32,105,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,108,105,115,116,32,40,109,97,120,105,109,117,109,58,32,37,100,41,10,0,0,0,37,48,51,100,0,0,0,0,67,97,110,110,111,116,32,108,111,97,100,32,112,97,99,107,97,103,101,32,39,37,115,39,58,10,0,0,0,0,0,0,73,110,100,101,120,32,37,100,32,105,115,32,116,111,111,32,115,109,97,108,108,32,102,111,114,32,108,105,115,116,32,40,109,105,110,105,109,117,109,58,32,37,100,41,10,0,0,0,37,115,112,97,99,107,97,103,101,115,47,37,115,37,115,37,115,37,115,0,0,0,0,0,101,108,105,102,0,0,0,0,126,50,0,0,0,0,0,0,85,110,116,101,114,109,105,110,97,116,101,100,32,98,108,111,99,107,40,115,41,32,97,116,32,101,110,100,32,111,102,32,102,105,108,101,46,10,0,0,60,37,115,102,117,110,99,116,105,111,110,32,37,115,37,115,37,115,62,0,0,0,0,0,126,49,0,0,0,0,0,0,39,125,39,32,111,117,116,115,105,100,101,32,111,102,32,97,32,98,108,111,99,107,46,10,0,0,0,0,0,0,0,0,38,108,116,59,0,0,0,0,42,0,0,0,0,0,0,0,95,95,105,109,112,111,114,116,95,95,0,0,0,0,0,0,63,0,0,0,0,0,0,0,39,114,101,116,117,114,110,39,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,10,0,0,0,0,0,0,65,116,116,101,109,112,116,32,116,111,32,117,115,101,32,39,37,115,39,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,46,10,0,0,0,0,70,105,108,101,0,0,0,0,39,117,115,101,39,32,111,110,108,121,32,97,108,108,111,119,101,100,32,119,105,116,104,105,110,32,116,104,101,32,102,105,114,115,116,32,109,111,100,117,108,101,32,111,102,32,97,32,112,97,99,107,97,103,101,46,10,0,0,0,0,0,0,0,84,117,112,108,101,0,0,0,39,117,115,101,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,115,105,100,101,32,111,102,32,97,32,98,108,111,99,107,46,10,0,0,0,72,97,115,104,0,0,0,0,70,111,114,32,114,97,110,103,101,32,118,97,108,117,101,32,101,120,112,114,101,115,115,105,111,110,32,99,111,110,116,97,105,110,115,32,97,110,32,97,115,115,105,103,110,109,101,110,116,46,0,0,0,0,0,0,76,105,115,116,0,0,0,0,94,0,0,0,0,0,0,0,40,102,111,114,32,115,116,101,112,41,0,0,0,0,0,0,68,121,110,97,109,105,99,0,93,0,0,0,0,0,0,0,69,120,112,101,99,116,101,100,32,39,98,121,39,44,32,110,111,116,32,39,37,115,39,46,10,0,0,0,0,0,0,0,70,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,98,121,0,0,0,0,0,0,101,108,115,101,0,0,0,0,66,111,111,108,101,97,110,0,40,102,111,114,32,101,110,100,41,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,66,121,116,101,83,116,114,105,110,103,0,0,0,0,0,0,40,102,111,114,32,115,116,97,114,116,41,0,0,0,0,0,38,97,109,112,59,0,0,0,83,116,114,105,110,103,0,0,69,120,112,101,99,116,101,100,32,39,105,110,39,44,32,110,111,116,32,39,37,115,39,46,10,0,0,0,0,0,0,0,68,111,117,98,108,101,0,0,67,111,110,100,105,116,105,111,110,97,108,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,10,0,0,0,115,101,108,102,0,0,0,0,105,110,0,0,0,0,0,0,73,110,116,101,103,101,114,0,76,111,111,112,32,118,97,114,32,109,117,115,116,32,98,101,32,116,121,112,101,32,105,110,116,101,103,101,114,44,32,110,111,116,32,116,121,112,101,32,39,94,84,39,46,10,0,0,90,0,0,0,0,0,0,0,69,120,112,101,99,116,101,100,32,39,97,115,39,44,32,110,111,116,32,39,37,115,39,46,10,0,0,0,0,0,0,0,82,0,115,116,100,101,114,114,0,70,105,108,101,0,0,0,97,115,0,0,0,0,0,0,82,0,115,116,100,111,117,116,0,70,105,108,101,0,0,0,91,0,0,0,0,0,0,0,39,101,120,99,101,112,116,39,32,116,121,112,101,32,99,97,110,110,111,116,32,104,97,118,101,32,115,117,98,116,121,112,101,115,46,10,0,0,0,0,82,0,115,116,100,105,110,0,70,105,108,101,0,0,0,0,32,61,62,32,0,0,0,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,101,120,99,101,112,116,105,111,110,32,99,108,97,115,115,46,10,0,0,0,70,0,112,114,105,110,116,0,91,65,93,40,65,41,0,0,69,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,99,97,115,101,0,0,0,0,70,0,99,97,108,108,116,114,97,99,101,0,58,76,105,115,116,91,83,116,114,105,110,103,93,0,0,0,0,0,0,0,39,99,97,115,101,39,32,110,111,116,32,97,108,108,111,119,101,100,32,111,117,116,115,105,100,101,32,111,102,32,39,109,97,116,99,104,39,46,10,0,98,117,105,108,116,45,105,110,32,0,0,0,0,0,0,0,70,117,110,99,116,105,111,110,32,99,97,108,108,32,114,101,99,117,114,115,105,111,110,32,108,105,109,105,116,32,114,101,97,99,104,101,100,46,10,0,109,58,115,97,110,105,116,105,122,101,0,91,65,44,66,93,40,84,97,105,110,116,101,100,91,65,93,44,32,70,117,110,99,116,105,111,110,40,65,32,61,62,32,66,41,41,58,66,0,0,0,0,0,0,0,0,69,120,112,101,99,116,101,100,32,116,121,112,101,32,39,105,110,116,101,103,101,114,39,44,32,98,117,116,32,103,111,116,32,116,121,112,101,32,39,94,84,39,46,10,0,0,0,0,82,0,97,114,103,118,0,76,105,115,116,91,83,116,114,105,110,103,93,0,0,0,0,0,39,101,108,115,101,39,32,119,105,116,104,111,117,116,32,39,105,102,39,46,10,0,0,0,117,110,119,114,97,112,32,99,97,108,108,101,100,32,111,110,32,78,111,110,101,46,10,0,66,1,84,97,105,110,116,101,100,0,91,65,93,40,118,58,65,41,123,32,118,97,114,32,64,118,97,108,117,101,32,61,32,118,32,125,0,0,0,0,39,101,108,105,102,39,32,119,105,116,104,111,117,116,32,39,105,102,39,46,10,0,0,0,66,0,68,105,118,105,115,105,111,110,66,121,90,101,114,111,69,114,114,111,114,0,40,109,58,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,41,32,123,32,32,125,0,0,0,0,83,121,110,116,97,120,69,114,114,111,114,0,0,0,0,0,86,97,114,105,97,110,116,32,116,121,112,101,115,32,99,97,110,110,111,116,32,104,97,118,101,32,100,101,102,97,117,108,116,32,118,97,108,117,101,115,46,10,0,0,0,0,0,0,66,0,73,110,100,101,120,69,114,114,111,114,0,40,109,58,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,41,32,123,32,32,125,0,0,0,0,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,102,111,114,32,97,32,118,97,114,105,97,110,116,46,10,0,0,0,0,0,66,0,86,97,108,117,101,69,114,114,111,114,0,40,109,58,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,41,32,123,32,32,125,0,0,0,0,0,69,120,112,101,99,116,101,100,32,39,125,39,32,111,114,32,39,100,101,102,105,110,101,39,44,32,110,111,116,32,39,37,115,39,46,10,0,0,0,0,66,0,82,117,110,116,105,109,101,69,114,114,111,114,0,40,109,58,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,41,32,123,32,32,125,0,0,0,65,110,32,101,110,117,109,32,109,117,115,116,32,104,97,118,101,32,97,116,32,108,101,97,115,116,32,116,119,111,32,118,97,114,105,97,110,116,115,46,10,0,0,0,0,0,0,0,66,0,75,101,121,69,114,114,111,114,0,40,109,58,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,41,32,123,32,32,125,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,65,32,99,108,97,115,115,32,119,105,116,104,32,116,104,101,32,110,97,109,101,32,39,37,115,39,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,46,10,0,0,0,0,0,66,0,70,111,114,109,97,116,69,114,114,111,114,0,40,109,58,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,41,32,123,32,32,125,0,0,0,0,41,0,0,0,0,0,0,0,67,97,110,110,111,116,32,100,101,102,105,110,101,32,97,110,32,101,110,117,109,32,104,101,114,101,46,10,0,0,0,0,66,0,73,79,69,114,114,111,114,0,40,109,58,83,116,114,105,110,103,41,32,60,32,69,120,99,101,112,116,105,111,110,40,109,41,32,123,32,32,125,0,0,0,0,0,0,0,0,39,114,97,105,115,101,39,32,110,111,116,32,97,108,108,111,119,101,100,32,105,110,32,97,32,108,97,109,98,100,97,46,10,0,0,0,0,0,0,0,116,114,121,0,0,0,0,0,66,0,69,120,99,101,112,116,105,111,110,0,40,109,115,103,58,83,116,114,105,110,103,41,123,32,118,97,114,32,64,109,101,115,115,97,103,101,32,61,32,109,115,103,32,118,97,114,32,64,116,114,97,99,101,98,97,99,107,58,32,76,105,115,116,91,83,116,114,105,110,103,93,32,61,32,91,93,32,125,0,0,0,0,0,0,0,0,65,108,114,101,97,100,121,32,104,97,118,101,32,97,32,99,97,115,101,32,102,111,114,32,118,97,114,105,97,110,116,32,37,115,46,10,0,0,0,0,86,0,76,101,102,116,0,40,65,41,0,0,0,0,0,0,37,115,32,105,115,32,110,111,116,32,97,32,109,101,109,98,101,114,32,111,102,32,101,110,117,109,32,37,115,46,10,0,83,104,105,102,116,32,111,110,32,97,110,32,101,109,112,116,121,32,108,105,115,116,46,10,0,0,0,0,0,0,0,0,86,0,82,105,103,104,116,0,40,66,41,0,0,0,0,0,42,32,37,115,10,0,0,0,109,58,114,105,103,104,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,79,112,116,105,111,110,91,66,93,0,0,0,0,40,102,111,114,32,115,116,101,112,41,0,0,0,0,0,0,77,97,116,99,104,32,101,120,112,114,101,115,115,105,111,110,32,105,115,32,110,111,116,32,97,110,32,101,110,117,109,32,118,97,108,117,101,46,10,0,77,97,116,99,104,32,112,97,116,116,101,114,110,32,110,111,116,32,101,120,104,97,117,115,116,105,118,101,46,32,84,104,101,32,102,111,108,108,111,119,105,110,103,32,99,97,115,101,40,115,41,32,97,114,101,32,109,105,115,115,105,110,103,58,10,0,0,0,0,0,0,0,109,58,108,101,102,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,79,112,116,105,111,110,91,65,93,0,0,0,0,0,77,97,116,99,104,32,98,108,111,99,107,32,99,97,110,110,111,116,32,98,101,32,105,110,32,97,32,115,105,110,103,108,101,45,108,105,110,101,32,98,108,111,99,107,46,10,0,0,109,58,105,115,95,114,105,103,104,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,66,111,111,108,101,97,110,0,0,0,39,98,114,101,97,107,39,32,110,111,116,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,97,32,109,117,108,116,105,45,108,105,110,101,32,98,108,111,99,107,46,10,0,0,109,58,105,115,95,108,101,102,116,0,91,65,44,66,93,40,69,105,116,104,101,114,91,65,44,66,93,41,58,66,111,111,108,101,97,110,0,0,0,0,65,32,98,117,105,108,116,45,105,110,32,99,108,97,115,115,32,110,97,109,101,100,32,39,37,115,39,32,97,108,114,101,97,100,121,32,101,120,105,115,116,115,46,10,0,0,0,0,69,4,69,105,116,104,101,114,0,91,65,44,32,66,93,0,44,0,0,0,0,0,0,0,67,108,97,115,115,32,39,37,115,39,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,100,101,99,108,97,114,101,100,46,10,0,0,86,0,78,111,110,101,0,0,46,46,46,0,0,0,0,0,67,97,110,110,111,116,32,100,101,99,108,97,114,101,32,97,32,99,108,97,115,115,32,104,101,114,101,46,10,0,0,0,86,0,83,111,109,101,0,40,65,41,0,0,0,0,0,0,39,37,115,39,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,99,108,97,115,115,32,110,97,109,101,32,40,116,111,111,32,115,104,111,114,116,41,46,10,0,0,0,0,102,111,114,0,0,0,0,0,109,58,117,110,119,114,97,112,95,111,114,95,101,108,115,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,32,70,117,110,99,116,105,111,110,40,32,61,62,32,65,41,41,58,65,0,0,0,0,0,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,102,111,114,32,97,32,99,108,97,115,115,46,10,0,0,0,0,0,0,0,34,94,69,34,0,0,0,0,109,58,117,110,119,114,97,112,95,111,114,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,65,41,58,65,0,0,69,109,112,116,121,32,40,41,32,110,111,116,32,110,101,101,100,101,100,32,104,101,114,101,32,102,111,114,32,105,110,104,101,114,105,116,101,100,32,110,101,119,46,10,0,0,0,0,109,58,117,110,119,114,97,112,0,91,65,93,40,79,112,116,105,111,110,91,65,93,41,58,65,0,0,0,0,0,0,0,39,37,115,39,32,99,97,110,110,111,116,32,98,101,32,105,110,104,101,114,105,116,101,100,32,102,114,111,109,46,10,0,109,58,111,114,95,101,108,115,101,0,91,65,93,40,79,112,116,105,111,110,91,65,93,44,70,117,110,99,116,105,111,110,40,32,61,62,32,79,112,116,105,111,110,91,65,93,41,41,58,79,112,116,105,111,110,91,65,93,0,0,0,0,0,0,77,97,116,99,104,32,101,120,112,114,101,115,115,105,111,110,32,104,97,115,32,110,111,32,118,97,108,117,101,46,10,0,69,114,114,111,114,0,0,0,73,110,102,105,110,105,116,101,32,108,111,111,112,32,105,110,32,99,111,109,112,97,114,105,115,111,110,46,10,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);



var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
   
  Module["_memcpy"] = _memcpy;var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

   
  Module["_strlen"] = _strlen;

   
  Module["_strcpy"] = _strcpy;

  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }

   
  Module["_memcmp"] = _memcmp;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 0777, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0777 | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = {};
        for (var key in src.files) {
          if (!src.files.hasOwnProperty(key)) continue;
          var e = src.files[key];
          var e2 = dst.files[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create[key] = e;
            total++;
          }
        }
  
        var remove = {};
        for (var key in dst.files) {
          if (!dst.files.hasOwnProperty(key)) continue;
          var e = dst.files[key];
          var e2 = src.files[key];
          if (!e2) {
            remove[key] = e;
            total++;
          }
        }
  
        if (!total) {
          // early out
          return callback(null);
        }
  
        var completed = 0;
        function done(err) {
          if (err) return callback(err);
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        // create a single transaction to handle and IDB reads / writes we'll need to do
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        transaction.onerror = function transaction_onerror() { callback(this.error); };
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        for (var path in create) {
          if (!create.hasOwnProperty(path)) continue;
          var entry = create[path];
  
          if (dst.type === 'local') {
            // save file to local
            try {
              if (FS.isDir(entry.mode)) {
                FS.mkdir(path, entry.mode);
              } else if (FS.isFile(entry.mode)) {
                var stream = FS.open(path, 'w+', 0666);
                FS.write(stream, entry.contents, 0, entry.contents.length, 0, true /* canOwn */);
                FS.close(stream);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // save file to IDB
            var req = store.put(entry, path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
  
        for (var path in remove) {
          if (!remove.hasOwnProperty(path)) continue;
          var entry = remove[path];
  
          if (dst.type === 'local') {
            // delete file from local
            try {
              if (FS.isDir(entry.mode)) {
                // TODO recursive delete?
                FS.rmdir(path);
              } else if (FS.isFile(entry.mode)) {
                FS.unlink(path);
              }
              done(null);
            } catch (e) {
              return done(e);
            }
          } else {
            // delete file from IDB
            var req = store.delete(path);
            req.onsuccess = function req_onsuccess() { done(null); };
            req.onerror = function req_onerror() { done(this.error); };
          }
        }
      },getLocalSet:function (mount, callback) {
        var files = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint)
          .filter(isRealDir)
          .map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat, node;
  
          try {
            var lookup = FS.lookupPath(path);
            node = lookup.node;
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path)
              .filter(isRealDir)
              .map(toAbsolute(path)));
  
            files[path] = { mode: stat.mode, timestamp: stat.mtime };
          } else if (FS.isFile(stat.mode)) {
            files[path] = { contents: node.contents, mode: stat.mode, timestamp: stat.mtime };
          } else {
            return callback(new Error('node type not supported'));
          }
        }
  
        return callback(null, { type: 'local', files: files });
      },getDB:function (name, callback) {
        // look it up in the cache
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        req.onupgradeneeded = function req_onupgradeneeded() {
          db = req.result;
          db.createObjectStore(IDBFS.DB_STORE_NAME);
        };
        req.onsuccess = function req_onsuccess() {
          db = req.result;
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function req_onerror() {
          callback(this.error);
        };
      },getRemoteSet:function (mount, callback) {
        var files = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function transaction_onerror() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          store.openCursor().onsuccess = function store_openCursor_onsuccess(event) {
            var cursor = event.target.result;
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, files: files });
            }
  
            files[cursor.key] = cursor.value;
            cursor.continue();
          };
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[null],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || { recurse_count: 0 };
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            current = current.mount.root;
          }
  
          // follow symlinks
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
            this.parent = null;
            this.mount = null;
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            FS.hashAddNode(this);
          };
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          FS.FSNode.prototype = {};
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
        return new FS.FSNode(parent, name, mode, rdev);
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 1;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var completed = 0;
        var total = FS.mounts.length;
        function done(err) {
          if (err) {
            return callback(err);
          }
          if (++completed >= total) {
            callback(null);
          }
        };
  
        // sync all mounts
        for (var i = 0; i < FS.mounts.length; i++) {
          var mount = FS.mounts[i];
          if (!mount.type.syncfs) {
            done(null);
            continue;
          }
          mount.type.syncfs(mount, populate, done);
        }
      },mount:function (type, opts, mountpoint) {
        var lookup;
        if (mountpoint) {
          lookup = FS.lookupPath(mountpoint, { follow: false });
          mountpoint = lookup.path;  // use the absolute path
        }
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          root: null
        };
        // create a root node for the fs
        var root = type.mount(mount);
        root.mount = mount;
        mount.root = root;
        // assign the mount info to the mountpoint's node
        if (lookup) {
          lookup.node.mount = mount;
          lookup.node.mounted = true;
          // compatibility update FS.root if we mount to /
          if (mountpoint === '/') {
            FS.root = mount.root;
          }
        }
        // add to our cached list of mounts
        FS.mounts.push(mount);
        return root;
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 0666;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 0777;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 0666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path, { follow: false });
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 0666 : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0);
        } else {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=stdin.fd;
        assert(stdin.fd === 1, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=stdout.fd;
        assert(stdout.fd === 2, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=stderr.fd;
        assert(stderr.fd === 3, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.root = FS.createNode(null, '/', 16384 | 0777, 0);
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  
  
  
  
  
  
  
  var _mkport=undefined;var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 0777, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr;
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStream(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }

  var _llvm_va_start=undefined;

  function _llvm_va_end() {}

  function _abort() {
      Module['abort']();
    }

  
   
  Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;

   
  Module["_strncpy"] = _strncpy;

  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision === -1) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }


  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStream(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(stream, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStream(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }

  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }

  var _setjmp=undefined;

  
   
  Module["_memmove"] = _memmove;var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  function _isalpha(chr) {
      return (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }

  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }

  function _isalnum(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }

  function _isupper(chr) {
      return chr >= 65 && chr <= 90;
    }

   
  Module["_tolower"] = _tolower;

  function _islower(chr) {
      return chr >= 97 && chr <= 122;
    }

  function _toupper(chr) {
      if (chr >= 97 && chr <= 122) {
        return chr - 97 + 65;
      } else {
        return chr;
      }
    }

  var _llvm_memset_p0i8_i64=_memset;

  
  var DLFCN={error:null,errorMsg:null,loadedLibs:{},loadedLibNames:{}};
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _dlopen(filename, flag) {
      // void *dlopen(const char *file, int mode);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlopen.html
      filename = filename === 0 ? '__self__' : (ENV['LD_LIBRARY_PATH'] || '/') + Pointer_stringify(filename);
  
      abort('need to build with DLOPEN_SUPPORT=1 to get dlopen support in asm.js');
  
      if (DLFCN.loadedLibNames[filename]) {
        // Already loaded; increment ref count and return.
        var handle = DLFCN.loadedLibNames[filename];
        DLFCN.loadedLibs[handle].refcount++;
        return handle;
      }
  
      if (filename === '__self__') {
        var handle = -1;
        var lib_module = Module;
        var cached_functions = SYMBOL_TABLE;
      } else {
        var target = FS.findObject(filename);
        if (!target || target.isFolder || target.isDevice) {
          DLFCN.errorMsg = 'Could not find dynamic lib: ' + filename;
          return 0;
        } else {
          FS.forceLoadFile(target);
          var lib_data = intArrayToString(target.contents);
        }
  
        try {
          var lib_module = eval(lib_data)(
            DLFCN.functionTable.length,
            Module
          );
        } catch (e) {
          DLFCN.errorMsg = 'Could not evaluate dynamic lib: ' + filename;
          return 0;
        }
  
        // Not all browsers support Object.keys().
        var handle = 1;
        for (var key in DLFCN.loadedLibs) {
          if (DLFCN.loadedLibs.hasOwnProperty(key)) handle++;
        }
  
        // We don't care about RTLD_NOW and RTLD_LAZY.
        if (flag & 256) { // RTLD_GLOBAL
          for (var ident in lib_module) {
            if (lib_module.hasOwnProperty(ident)) {
              Module[ident] = lib_module[ident];
            }
          }
        }
  
        var cached_functions = {};
      }
      DLFCN.loadedLibs[handle] = {
        refcount: 1,
        name: filename,
        module: lib_module,
        cached_functions: cached_functions
      };
      DLFCN.loadedLibNames[filename] = handle;
  
      return handle;
    }

  function _dlsym(handle, symbol) {
      // void *dlsym(void *restrict handle, const char *restrict name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlsym.html
      symbol = '_' + Pointer_stringify(symbol);
  
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlsym() from an unopened handle: ' + handle;
        return 0;
      } else {
        var lib = DLFCN.loadedLibs[handle];
        // self-dlopen means that lib.module is not a superset of
        // cached_functions, so check the latter first
        if (lib.cached_functions.hasOwnProperty(symbol)) {
          return lib.cached_functions[symbol];
        } else {
          if (!lib.module.hasOwnProperty(symbol)) {
            DLFCN.errorMsg = ('Tried to lookup unknown symbol "' + symbol +
                                   '" in dynamic lib: ' + lib.name);
            return 0;
          } else {
            var result = lib.module[symbol];
            if (typeof result == 'function') {
              result = lib.module.SYMBOL_TABLE[symbol];
              assert(result);
              lib.cached_functions = result;
            }
            return result;
          }
        }
      }
    }

  function _dlclose(handle) {
      // int dlclose(void *handle);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/dlclose.html
      if (!DLFCN.loadedLibs[handle]) {
        DLFCN.errorMsg = 'Tried to dlclose() unopened handle: ' + handle;
        return 1;
      } else {
        var lib_record = DLFCN.loadedLibs[handle];
        if (--lib_record.refcount == 0) {
          if (lib_record.module.cleanups) {
            lib_record.module.cleanups.forEach(function(cleanup) { cleanup() });
          }
          delete DLFCN.loadedLibNames[lib_record.name];
          delete DLFCN.loadedLibs[handle];
        }
        return 0;
      }
    }

  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }


  function _strrchr(ptr, chr) {
      var ptr2 = ptr + _strlen(ptr);
      do {
        if (HEAP8[(ptr2)] == chr) return ptr2;
        ptr2--;
      } while (ptr2 >= ptr);
      return 0;
    }

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

   
  Module["_strcat"] = _strcat;

  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }

  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStream(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodl=_fmod;

  var _fabs=Math_abs;

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}






  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            var errorInfo = '?';
            function onContextCreationError(event) {
              errorInfo = event.statusMessage || errorInfo;
            }
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stdin=env._stdin|0;
  var _stderr=env._stderr|0;
  var _stdout=env._stdout|0;
  var NaN=+env.NaN;
  var Infinity=+env.Infinity;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var invoke_ii=env.invoke_ii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iii=env.invoke_iii;
  var _strncmp=env._strncmp;
  var _llvm_va_end=env._llvm_va_end;
  var _dlsym=env._dlsym;
  var _snprintf=env._snprintf;
  var _fgetc=env._fgetc;
  var _fclose=env._fclose;
  var _isprint=env._isprint;
  var _abort=env._abort;
  var _toupper=env._toupper;
  var _pread=env._pread;
  var _close=env._close;
  var _fflush=env._fflush;
  var _fopen=env._fopen;
  var _strchr=env._strchr;
  var _fputc=env._fputc;
  var ___buildEnvironment=env.___buildEnvironment;
  var _sysconf=env._sysconf;
  var _open=env._open;
  var ___setErrNo=env.___setErrNo;
  var __reallyNegative=env.__reallyNegative;
  var _send=env._send;
  var _write=env._write;
  var _fputs=env._fputs;
  var _isalpha=env._isalpha;
  var _sprintf=env._sprintf;
  var _llvm_lifetime_end=env._llvm_lifetime_end;
  var _strrchr=env._strrchr;
  var _fabs=env._fabs;
  var _isspace=env._isspace;
  var _fread=env._fread;
  var _longjmp=env._longjmp;
  var _read=env._read;
  var _copysign=env._copysign;
  var __formatString=env.__formatString;
  var _ungetc=env._ungetc;
  var _strstr=env._strstr;
  var _dlclose=env._dlclose;
  var _recv=env._recv;
  var _dlopen=env._dlopen;
  var _pwrite=env._pwrite;
  var _putchar=env._putchar;
  var _isalnum=env._isalnum;
  var _fsync=env._fsync;
  var _strerror_r=env._strerror_r;
  var ___errno_location=env.___errno_location;
  var _llvm_lifetime_start=env._llvm_lifetime_start;
  var _sbrk=env._sbrk;
  var _fmod=env._fmod;
  var _time=env._time;
  var _islower=env._islower;
  var _isupper=env._isupper;
  var _strcmp=env._strcmp;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 7)&-8;
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
  HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];
  HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];
  HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];
  HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}

function setTempRet1(value) {
  value = value|0;
  tempRet1 = value;
}

function setTempRet2(value) {
  value = value|0;
  tempRet2 = value;
}

function setTempRet3(value) {
  value = value|0;
  tempRet3 = value;
}

function setTempRet4(value) {
  value = value|0;
  tempRet4 = value;
}

function setTempRet5(value) {
  value = value|0;
  tempRet5 = value;
}

function setTempRet6(value) {
  value = value|0;
  tempRet6 = value;
}

function setTempRet7(value) {
  value = value|0;
  tempRet7 = value;
}

function setTempRet8(value) {
  value = value|0;
  tempRet8 = value;
}

function setTempRet9(value) {
  value = value|0;
  tempRet9 = value;
}
function runPostSets() {


}

function _lily_destroy_value($v){
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$11=0,$12=0,$15=0,$16=0,$19=0,$20=0,$23=0,$24=0,$27=0,$28=0,$31=0,$32=0,$34=0,$35=0;
 var $36=0,$37=0,$38=0,$39=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&640;
 $4=($3|0)==0;
 if (!($4)) {
  _destroy_list($v);
  return;
 }
 $7=$2&3072;
 $8=($7|0)==0;
 if (!($8)) {
  _destroy_instance($v);
  return;
 }
 $11=$2&24;
 $12=($11|0)==0;
 if (!($12)) {
  _destroy_string($v);
  return;
 }
 $15=$2&32;
 $16=($15|0)==0;
 if (!($16)) {
  _destroy_function($v);
  return;
 }
 $19=$2&256;
 $20=($19|0)==0;
 if (!($20)) {
  _lily_destroy_hash($v);
  return;
 }
 $23=$2&64;
 $24=($23|0)==0;
 if (!($24)) {
  _destroy_dynamic($v);
  return;
 }
 $27=$2&4096;
 $28=($27|0)==0;
 if (!($28)) {
  _destroy_file($v);
  return;
 }
 $31=$2&16384;
 $32=($31|0)==0;
 if ($32) {
  return;
 }
 $34=(($v+8)|0);
 $35=$34;
 $36=((HEAP32[(($35)>>2)])|0);
 $37=(($36+8)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=$38;
 FUNCTION_TABLE_vi[($39)&15]($v);
 return;
}


function _destroy_list($v){
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$i_01=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $_lcssa=0,$20=0,$21=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 $7=(($3+16)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 if ($6) {
  $_lcssa=$8;

  $20=$_lcssa;
  _lily_free($20);
  $21=$3;
  _lily_free($21);
  return;
 } else {
  $i_01=0;$9=$8;
 }
 while(1) {


  $10=(($9+($i_01<<2))|0);
  $11=((HEAP32[(($10)>>2)])|0);
  _lily_deref($11);
  $12=((HEAP32[(($7)>>2)])|0);
  $13=(($12+($i_01<<2))|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=$14;
  _lily_free($15);
  $16=((($i_01)+(1))|0);
  $17=((HEAP32[(($4)>>2)])|0);
  $18=($16>>>0)<($17>>>0);
  $19=((HEAP32[(($7)>>2)])|0);
  if ($18) {
   $i_01=$16;$9=$19;
  } else {
   $_lcssa=$19;
   break;
  }
 }

 $20=$_lcssa;
 _lily_free($20);
 $21=$3;
 _lily_free($21);
 return;
}


function _destroy_instance($v){
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=0,$14=0,$15=0,$full_destroy_0=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$i_01=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$_lcssa=0,$33=0,$34=0,$36=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+20)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 do {
  if ($6) {
   $full_destroy_0=1;
  } else {
   $8=(($5+4)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $10=($9|0)==-1;
   if ($10) {
    $12=((HEAP32[((1712)>>2)])|0);
    HEAP32[(($4)>>2)]=$12;
    $full_destroy_0=0;
    break;
   } else {
    $14=(($5+8)|0);
    $15=$14;
    HEAP32[(($15)>>2)]=0;
    $full_destroy_0=1;
    break;
   }
  }
 } while(0);

 $17=(($3+8)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=($18|0)==0;
 $20=(($3+16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 if ($19) {
  $_lcssa=$21;
 } else {
  $i_01=0;$22=$21;
  while(1) {


   $23=(($22+($i_01<<2))|0);
   $24=((HEAP32[(($23)>>2)])|0);
   _lily_deref($24);
   $25=((HEAP32[(($20)>>2)])|0);
   $26=(($25+($i_01<<2))|0);
   $27=((HEAP32[(($26)>>2)])|0);
   $28=$27;
   _lily_free($28);
   $29=((($i_01)+(1))|0);
   $30=((HEAP32[(($17)>>2)])|0);
   $31=($29>>>0)<($30>>>0);
   $32=((HEAP32[(($20)>>2)])|0);
   if ($31) {
    $i_01=$29;$22=$32;
   } else {
    $_lcssa=$32;
    break;
   }
  }
 }

 $33=$_lcssa;
 _lily_free($33);
 $34=($full_destroy_0|0)==0;
 if ($34) {
  return;
 }
 $36=$3;
 _lily_free($36);
 return;
}


function _destroy_string($v){
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 _lily_free($5);
 $6=$3;
 _lily_free($6);
 return;
}


function _destroy_function($v){
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$18=0,$20=0,$21=0,$22=0,$25=0,$26=0;
 var $full_destroy_0=0,$28=0,$29=0,$30=0,$31=0,$32=0,$i_01=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$42=0,$44=0,$45=0,$46=0,$47=0,$49=0;
 var label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+16)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((HEAP32[((1712)>>2)])|0);
 $7=($5|0)==($6|0);
 if ($7) {
  return;
 }
 $9=(($3+36)|0);
 $10=((HEAP16[(($9)>>1)])|0);
 $11=(($10<<16)>>16)==-1;
 if ($11) {
  $13=(($3+28)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=$14;
  _lily_free($15);
  $16=$3;
  _lily_free($16);
  return;
 }
 $18=($5|0)==0;
 do {
  if ($18) {
   $full_destroy_0=1;
  } else {
   $20=(($5+4)|0);
   $21=((HEAP32[(($20)>>2)])|0);
   $22=($21|0)==-1;
   if ($22) {
    HEAP32[(($4)>>2)]=$6;
    $full_destroy_0=0;
    break;
   } else {
    $25=(($5+8)|0);
    $26=$25;
    HEAP32[(($26)>>2)]=0;
    $full_destroy_0=1;
    break;
   }
  }
 } while(0);

 $28=(($3+40)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=((HEAP16[(($9)>>1)])|0);
 $31=($30&65535);
 $32=(($30<<16)>>16)==0;
 if (!($32)) {
  $i_01=0;
  while(1) {

   $33=(($29+($i_01<<2))|0);
   $34=((HEAP32[(($33)>>2)])|0);
   $35=($34|0)==0;
   do {
    if (!($35)) {
     $37=(($34+4)|0);
     $38=((HEAP32[(($37)>>2)])|0);
     $39=((($38)-(1))|0);
     HEAP32[(($37)>>2)]=$39;
     $40=($39|0)==0;
     if (!($40)) {
      break;
     }
     _lily_deref($34);
     $42=$34;
     _lily_free($42);
    }
   } while(0);
   $44=((($i_01)+(1))|0);
   $45=($44|0)<($31|0);
   if ($45) {
    $i_01=$44;
   } else {
    break;
   }
  }
 }
 $46=$29;
 _lily_free($46);
 $47=($full_destroy_0|0)==0;
 if ($47) {
  return;
 }
 $49=$3;
 _lily_free($49);
 return;
}


function _destroy_dynamic($v){
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+20)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 do {
  if (!($6)) {
   $8=(($5+4)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $10=($9|0)==-1;
   if (!($10)) {
    $17=(($5+8)|0);
    $18=$17;
    HEAP32[(($18)>>2)]=0;
    break;
   }
   $11=((HEAP32[((1712)>>2)])|0);
   HEAP32[(($4)>>2)]=$11;
   $12=(($3+16)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   _lily_deref($13);
   $14=((HEAP32[(($12)>>2)])|0);
   $15=$14;
   _lily_free($15);
   return;
  }
 } while(0);
 $20=(($3+16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 _lily_deref($21);
 $22=((HEAP32[(($20)>>2)])|0);
 $23=$22;
 _lily_free($23);
 $24=$3;
 _lily_free($24);
 return;
}


function _destroy_file($v){
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=0,$14=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+12)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 do {
  if (!($6)) {
   $8=(($3+6)|0);
   $9=((HEAP8[($8)])|0);
   $10=(($9<<24)>>24)==0;
   if (!($10)) {
    break;
   }
   $12=((_fclose((($5)|0)))|0);
  }
 } while(0);
 $14=$3;
 _lily_free($14);
 return;
}


function _lily_deref($value){
 $value=($value)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;

 $1=(($value)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if ($4) {
  return;
 }
 $6=(($value+8)|0);
 $7=$6;
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((($10)-(1))|0);
 HEAP32[(($9)>>2)]=$11;
 $12=((HEAP32[(($7)>>2)])|0);
 $13=(($12)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=($14|0)==0;
 if (!($15)) {
  return;
 }
 _lily_destroy_value($value);
 return;
}


function _lily_assign_value($left,$right){
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$19=0,$ld$0$0=0,$20$0=0,$ld$1$1=0,$20$1=0,$21=0;
 var $st$2$0=0,$st$3$1=0,$22=0,label=0;

 $1=(($right)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  $6=(($right+8)|0);
  $7=$6;
  $8=((HEAP32[(($7)>>2)])|0);
  $9=(($8)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=((($10)+(1))|0);
  HEAP32[(($9)>>2)]=$11;
 }
 $13=(($left)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=$14&8192;
 $16=($15|0)==0;
 if (!($16)) {
  _lily_deref($left);
 }
 $19=(($right+8)|0);
 $ld$0$0=(($19)|0);
 $20$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($19+4)|0);
 $20$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $21=(($left+8)|0);
 $st$2$0=(($21)|0);
 HEAP32[(($st$2$0)>>2)]=$20$0;
 $st$3$1=(($21+4)|0);
 HEAP32[(($st$3$1)>>2)]=$20$1;
 $22=((HEAP32[(($1)>>2)])|0);
 HEAP32[(($13)>>2)]=$22;
 return;
}


function _lily_assign_value_noref($left,$right){
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$ld$0$0=0,$8$0=0,$ld$1$1=0,$8$1=0,$9=0,$st$2$0=0,$st$3$1=0,$10=0,$11=0,label=0;

 $1=(($left)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($left);
 }
 $7=(($right+8)|0);
 $ld$0$0=(($7)|0);
 $8$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($7+4)|0);
 $8$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $9=(($left+8)|0);
 $st$2$0=(($9)|0);
 HEAP32[(($st$2$0)>>2)]=$8$0;
 $st$3$1=(($9+4)|0);
 HEAP32[(($st$3$1)>>2)]=$8$1;
 $10=(($right)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 HEAP32[(($1)>>2)]=$11;
 return;
}


function _lily_copy_value($input){
 $input=($input)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$ld$0$0=0,$20$0=0,$ld$1$1=0;
 var $20$1=0,$st$2$0=0,$st$3$1=0,label=0;

 $1=(($input)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  $6=(($input+8)|0);
  $7=$6;
  $8=((HEAP32[(($7)>>2)])|0);
  $9=(($8)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=((($10)+(1))|0);
  HEAP32[(($9)>>2)]=$11;
 }
 $13=((_lily_malloc(16))|0);
 $14=$13;
 $15=((HEAP32[(($1)>>2)])|0);
 $16=$13;
 HEAP32[(($16)>>2)]=$15;
 $17=(($13+8)|0);
 $18=(($input+8)|0);
 $19=$17;
 $ld$0$0=(($18)|0);
 $20$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($18+4)|0);
 $20$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $st$2$0=(($19)|0);
 HEAP32[(($st$2$0)>>2)]=$20$0;
 $st$3$1=(($19+4)|0);
 HEAP32[(($st$3$1)>>2)]=$20$1;
 return (($14)|0);
}


function _lily_eq_value($vm,$left,$right){
 $vm=($vm)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $depth=0,$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $depth=((sp)|0);
 HEAP32[(($depth)>>2)]=0;
 $1=((_lily_eq_value_raw($vm,$depth,$left,$right))|0);
 STACKTOP=sp;return (($1)|0);
}


function _lily_eq_value_raw($vm,$depth,$left,$right){
 $vm=($vm)|0;
 $depth=($depth)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$18=0,$ld$0$0=0,$19$0=0,$ld$1$1=0,$19$1=0,$20=0,$ld$2$0=0;
 var $21$0=0,$ld$3$1=0,$21$1=0,$22=0,$23=0,$25=0,$26=0,$28=0,$29=0,$30=.0,$31=0,$32=0,$33=.0,$34=0,$35=0,$37=0,$38=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0;
 var $65=0,$66=0,$67=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$phitmp1=0,$76=0,$77=0,$79=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$left_iter_04=0;
 var $88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$95=0,$left_iter_0=0,$96=0,$left_iter_06=0,$right_start_05=0,$98=0,$99=0,$100=0,$101=0,$ld$4$0=0,$102$0=0,$ld$5$1=0,$102$1=0,$103=0;
 var $104=0,$right_iter_03=0,$106=0,$ld$6$0=0,$107$0=0,$ld$7$1=0,$107$1=0,$108=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0;
 var $phitmp=0,$124=0,$125=0,$127=0,$128=0,$130=0,$131=0,$132=0,$right_start_1=0,$134=0,$135=0,$136=0,$138=0,$139=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0;
 var $147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$157=0,$158=0,$159=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0;
 var $169=0,$170=0,$172=0,$173=0,$174=0,$175=0,$176=0,$178=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$_0=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($left)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($right)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((HEAP32[(($depth)>>2)])|0);
 $6=($5|0)==100;
 if ($6) {
  $8=(($vm+96)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  _lily_raise($9,5,17824,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $11=$4^$2;
 $12=$11&-106497;
 $13=($12|0)==0;
 if (!($13)) {
  $_0=0;

  STACKTOP=sp;return (($_0)|0);
 }
 $15=$2&3;
 $16=($15|0)==0;
 if (!($16)) {
  $18=(($left+8)|0);
  $ld$0$0=(($18)|0);
  $19$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($18+4)|0);
  $19$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $20=(($right+8)|0);
  $ld$2$0=(($20)|0);
  $21$0=((HEAP32[(($ld$2$0)>>2)])|0);
  $ld$3$1=(($20+4)|0);
  $21$1=((HEAP32[(($ld$3$1)>>2)])|0);
  $22=(($19$0|0) == ($21$0|0)) & (($19$1|0) == ($21$1|0));
  $23=($22&1);
  $_0=$23;

  STACKTOP=sp;return (($_0)|0);
 }
 $25=$2&4;
 $26=($25|0)==0;
 if (!($26)) {
  $28=(($left+8)|0);
  $29=$28;
  $30=(+(HEAPF64[(($29)>>3)]));
  $31=(($right+8)|0);
  $32=$31;
  $33=(+(HEAPF64[(($32)>>3)]));
  $34=$30==$33;
  $35=($34&1);
  $_0=$35;

  STACKTOP=sp;return (($_0)|0);
 }
 $37=$2&8;
 $38=($37|0)==0;
 if (!($38)) {
  $40=(($left+8)|0);
  $41=$40;
  $42=((HEAP32[(($41)>>2)])|0);
  $43=(($42+8)|0);
  $44=((HEAP32[(($43)>>2)])|0);
  $45=(($right+8)|0);
  $46=$45;
  $47=((HEAP32[(($46)>>2)])|0);
  $48=(($47+8)|0);
  $49=((HEAP32[(($48)>>2)])|0);
  $50=((_strcmp((($44)|0),(($49)|0)))|0);
  $51=($50|0)==0;
  $52=($51&1);
  $_0=$52;

  STACKTOP=sp;return (($_0)|0);
 }
 $54=$2&16;
 $55=($54|0)==0;
 if (!($55)) {
  $57=(($left+8)|0);
  $58=$57;
  $59=((HEAP32[(($58)>>2)])|0);
  $60=(($right+8)|0);
  $61=$60;
  $62=((HEAP32[(($61)>>2)])|0);
  $63=(($59+4)|0);
  $64=((HEAP32[(($63)>>2)])|0);
  $65=(($62+4)|0);
  $66=((HEAP32[(($65)>>2)])|0);
  $67=($64|0)==($66|0);
  if (!($67)) {
   $_0=0;

   STACKTOP=sp;return (($_0)|0);
  }
  $69=(($62+8)|0);
  $70=(($59+8)|0);
  $71=((HEAP32[(($69)>>2)])|0);
  $72=((HEAP32[(($70)>>2)])|0);
  $73=((_memcmp((($72)|0),(($71)|0),(($64)|0)))|0);
  $74=($73|0)==0;
  $phitmp1=($74&1);
  $_0=$phitmp1;

  STACKTOP=sp;return (($_0)|0);
 }
 $76=$2&640;
 $77=($76|0)==0;
 if (!($77)) {
  $79=((_subvalue_eq($vm,$depth,$left,$right))|0);
  $_0=$79;

  STACKTOP=sp;return (($_0)|0);
 }
 $81=$2&256;
 $82=($81|0)==0;
 if ($82) {
  $138=$2&64;
  $139=($138|0)==0;
  if (!($139)) {
   $141=((HEAP32[(($depth)>>2)])|0);
   $142=((($141)+(1))|0);
   HEAP32[(($depth)>>2)]=$142;
   $143=(($left+8)|0);
   $144=$143;
   $145=((HEAP32[(($144)>>2)])|0);
   $146=(($145+16)|0);
   $147=((HEAP32[(($146)>>2)])|0);
   $148=(($right+8)|0);
   $149=$148;
   $150=((HEAP32[(($149)>>2)])|0);
   $151=(($150+16)|0);
   $152=((HEAP32[(($151)>>2)])|0);
   $153=((_lily_eq_value_raw($vm,$depth,$147,$152))|0);
   $154=((HEAP32[(($depth)>>2)])|0);
   $155=((($154)-(1))|0);
   HEAP32[(($depth)>>2)]=$155;
   STACKTOP=sp;return (($153)|0);
  }
  $157=$2&2048;
  $158=($157|0)==0;
  $159=(($left+8)|0);
  if ($158) {
   $180=$159;
   $181=((HEAP32[(($180)>>2)])|0);
   $182=(($right+8)|0);
   $183=$182;
   $184=((HEAP32[(($183)>>2)])|0);
   $185=($181|0)==($184|0);
   $186=($185&1);
   $_0=$186;

   STACKTOP=sp;return (($_0)|0);
  }
  $161=$159;
  $162=((HEAP32[(($161)>>2)])|0);
  $163=(($right+8)|0);
  $164=$163;
  $165=((HEAP32[(($164)>>2)])|0);
  $166=(($162+4)|0);
  $167=((HEAP16[(($166)>>1)])|0);
  $168=(($165+4)|0);
  $169=((HEAP16[(($168)>>1)])|0);
  $170=(($167<<16)>>16)==(($169<<16)>>16);
  if (!($170)) {
   $_0=0;

   STACKTOP=sp;return (($_0)|0);
  }
  $172=(($162+6)|0);
  $173=((HEAP16[(($172)>>1)])|0);
  $174=(($165+6)|0);
  $175=((HEAP16[(($174)>>1)])|0);
  $176=(($173<<16)>>16)==(($175<<16)>>16);
  if (!($176)) {
   $_0=0;

   STACKTOP=sp;return (($_0)|0);
  }
  $178=((_subvalue_eq($vm,$depth,$left,$right))|0);
  $_0=$178;

  STACKTOP=sp;return (($_0)|0);
 }
 $84=(($left+8)|0);
 $85=$84;
 $86=((HEAP32[(($85)>>2)])|0);
 $87=(($86+16)|0);
 $left_iter_04=((HEAP32[(($87)>>2)])|0);
 $88=($left_iter_04|0)==0;
 if ($88) {
  $_0=1;

  STACKTOP=sp;return (($_0)|0);
 }
 $89=(($right+8)|0);
 $90=$89;
 $91=((HEAP32[(($90)>>2)])|0);
 $92=(($91+16)|0);
 $93=((HEAP32[(($92)>>2)])|0);
 $right_start_05=$93;$left_iter_06=$left_iter_04;
 L50: while(1) {


  $98=((HEAP32[(($depth)>>2)])|0);
  $99=((($98)+(1))|0);
  HEAP32[(($depth)>>2)]=$99;
  $100=($right_start_05|0)==0;
  if ($100) {
   label = 21;
   break;
  }
  $101=(($left_iter_06)|0);
  $ld$4$0=(($101)|0);
  $102$0=((HEAP32[(($ld$4$0)>>2)])|0);
  $ld$5$1=(($101+4)|0);
  $102$1=((HEAP32[(($ld$5$1)>>2)])|0);
  $right_iter_03=$right_start_05;
  while(1) {

   $106=(($right_iter_03)|0);
   $ld$6$0=(($106)|0);
   $107$0=((HEAP32[(($ld$6$0)>>2)])|0);
   $ld$7$1=(($106+4)|0);
   $107$1=((HEAP32[(($ld$7$1)>>2)])|0);
   $108=(($102$0|0) == ($107$0|0)) & (($102$1|0) == ($107$1|0));
   if ($108) {
    break;
   }
   $130=(($right_iter_03+16)|0);
   $131=((HEAP32[(($130)>>2)])|0);
   $132=($131|0)==0;
   if ($132) {
    label = 21;
    break L50;
   } else {
    $right_iter_03=$131;
   }
  }
  $110=(($left_iter_06+8)|0);
  $111=((HEAP32[(($110)>>2)])|0);
  $112=(($right_iter_03+8)|0);
  $113=((HEAP32[(($112)>>2)])|0);
  $114=((_lily_eq_value_raw($vm,$depth,$111,$113))|0);
  $115=($114|0)==0;
  if ($115) {
   $124=0;
  } else {
   $117=(($left_iter_06+12)|0);
   $118=((HEAP32[(($117)>>2)])|0);
   $119=(($right_iter_03+12)|0);
   $120=((HEAP32[(($119)>>2)])|0);
   $121=((_lily_eq_value_raw($vm,$depth,$118,$120))|0);
   $122=($121|0)!=0;
   $phitmp=($122&1);
   $124=$phitmp;
  }

  $125=($right_iter_03|0)==($right_start_05|0);
  if ($125) {
   $127=(($right_start_05+16)|0);
   $128=((HEAP32[(($127)>>2)])|0);
   $right_start_1=$128;
  } else {
   $right_start_1=$right_start_05;
  }

  $134=((HEAP32[(($depth)>>2)])|0);
  $135=((($134)-(1))|0);
  HEAP32[(($depth)>>2)]=$135;
  $136=($124|0)==0;
  if ($136) {
   $_0=0;
   label = 36;
   break;
  }
  $95=(($left_iter_06+16)|0);
  $left_iter_0=((HEAP32[(($95)>>2)])|0);
  $96=($left_iter_0|0)==0;
  if ($96) {
   $_0=$124;
   label = 36;
   break;
  } else {
   $right_start_05=$right_start_1;$left_iter_06=$left_iter_0;
  }
 }
 if ((label|0) == 21) {
  $103=((HEAP32[(($depth)>>2)])|0);
  $104=((($103)-(1))|0);
  HEAP32[(($depth)>>2)]=$104;
  $_0=0;

  STACKTOP=sp;return (($_0)|0);
 }
 else if ((label|0) == 36) {

  STACKTOP=sp;return (($_0)|0);
 }
  return 0;
}


function _lily_move_boolean($v,$z$0,$z$1){
 $v=($v)|0;
 $z$0=($z$0)|0;
 $z$1=($z$1)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$st$0$0=0,$st$1$1=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $st$0$0=(($7)|0);
 HEAP32[(($st$0$0)>>2)]=$z$0;
 $st$1$1=(($7+4)|0);
 HEAP32[(($st$1$1)>>2)]=$z$1;
 HEAP32[(($1)>>2)]=1;
 return;
}


function _lily_move_double($v,$z){
 $v=($v)|0;
 $z=+($z);
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $8=$7;
 HEAPF64[(($8)>>3)]=$z;
 HEAP32[(($1)>>2)]=4;
 return;
}


function _lily_move_dynamic($v,$z){
 $v=($v)|0;
 $z=($z)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$z;
 HEAP32[(($1)>>2)]=73792;
 return;
}


function _lily_move_enum_f($f,$v,$z){
 $f=($f)|0;
 $v=($v)|0;
 $z=($z)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$z;
 $9=$f|2048;
 HEAP32[(($1)>>2)]=$9;
 return;
}


function _lily_move_file($v,$z){
 $v=($v)|0;
 $z=($z)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$z;
 HEAP32[(($1)>>2)]=12288;
 return;
}


function _lily_move_function_f($f,$v,$z){
 $f=($f)|0;
 $v=($v)|0;
 $z=($z)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$z;
 $9=$f|32;
 HEAP32[(($1)>>2)]=$9;
 return;
}


function _lily_move_hash_f($f,$v,$z){
 $f=($f)|0;
 $v=($v)|0;
 $z=($z)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$z;
 $9=$f|256;
 HEAP32[(($1)>>2)]=$9;
 return;
}


function _lily_move_integer($v,$z$0,$z$1){
 $v=($v)|0;
 $z$0=($z$0)|0;
 $z$1=($z$1)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$st$0$0=0,$st$1$1=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $st$0$0=(($7)|0);
 HEAP32[(($st$0$0)>>2)]=$z$0;
 $st$1$1=(($7+4)|0);
 HEAP32[(($st$1$1)>>2)]=$z$1;
 HEAP32[(($1)>>2)]=2;
 return;
}


function _lily_move_instance_f($f,$v,$z){
 $f=($f)|0;
 $v=($v)|0;
 $z=($z)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$z;
 $9=$f|1024;
 HEAP32[(($1)>>2)]=$9;
 return;
}


function _lily_move_list_f($f,$v,$z){
 $f=($f)|0;
 $v=($v)|0;
 $z=($z)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$z;
 $9=$f|128;
 HEAP32[(($1)>>2)]=$9;
 return;
}


function _lily_move_string($v,$z){
 $v=($v)|0;
 $z=($z)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$z;
 HEAP32[(($1)>>2)]=8200;
 return;
}


function _lily_move_tuple_f($f,$v,$z){
 $f=($f)|0;
 $v=($v)|0;
 $z=($z)|0;
 var $1=0,$2=0,$3=0,$4=0,$7=0,$8=0,$9=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8192;
 $4=($3|0)==0;
 if (!($4)) {
  _lily_deref($v);
 }
 $7=(($v+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$z;
 $9=$f|512;
 HEAP32[(($1)>>2)]=$9;
 return;
}


function _lily_new_empty_value(){
 var $1=0,$2=0,$3=0,label=0;

 $1=((_lily_malloc(16))|0);
 $2=$1;
 $3=$1;
 HEAP32[(($3)>>2)]=0;
 return (($2)|0);
}


function _lily_new_dynamic_val(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;

 $1=((_lily_malloc(24))|0);
 $2=$1;
 $3=((_lily_new_empty_value())|0);
 $4=(($1+16)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=$3;
 $6=(($1+20)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=0;
 $8=$1;
 HEAP32[(($8)>>2)]=1;
 return (($2)|0);
}


function _lily_new_file_val($inner_file,$mode){
 $inner_file=($inner_file)|0;
 $mode=($mode)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$phitmp=0,$_phitmp=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;

 $1=((_lily_malloc(16))|0);
 $2=$1;
 $3=((_strchr((($mode)|0),((43)|0)))|0);
 $4=($3|0)!=0;
 $5=$1;
 HEAP32[(($5)>>2)]=1;
 $6=(($1+12)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=$inner_file;
 $8=((HEAP8[($mode)])|0);
 $9=(($8<<24)>>24)==114;
 $phitmp=($4&1);
 $_phitmp=($9?1:$phitmp);
 $10=(($1+4)|0);
 HEAP8[($10)]=$_phitmp;
 $11=((HEAP8[($mode)])|0);
 $12=(($11<<24)>>24)==119;
 $13=($12?1:$phitmp);
 $14=(($1+5)|0);
 HEAP8[($14)]=$13;
 $15=(($1+6)|0);
 HEAP8[($15)]=0;
 return (($2)|0);
}


function _lily_new_foreign_function_val($func,$class_name,$name){
 $func=($func)|0;
 $class_name=($class_name)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;

 $1=((_lily_malloc(44))|0);
 $2=$1;
 $3=$1;
 HEAP32[(($3)>>2)]=1;
 $4=(($1+8)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=$class_name;
 $6=(($1+12)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=$name;
 $8=(($1+24)|0);
 $9=$8;
 HEAP32[(($9)>>2)]=$func;
 $10=(($1+28)|0);
 $11=$10;
 HEAP32[(($11)>>2)]=0;
 $12=(($1+36)|0);
 $13=$12;
 HEAP16[(($13)>>1)]=-1;
 $14=(($1+40)|0);
 $15=$14;
 HEAP32[(($15)>>2)]=0;
 $16=(($1+16)|0);
 $17=$16;
 HEAP32[(($17)>>2)]=0;
 $18=(($1+38)|0);
 $19=$18;
 HEAP16[(($19)>>1)]=-1;
 return (($2)|0);
}


function _lily_new_native_function_val($class_name,$name){
 $class_name=($class_name)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;

 $1=((_lily_malloc(44))|0);
 $2=$1;
 $3=$1;
 HEAP32[(($3)>>2)]=1;
 $4=(($1+8)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=$class_name;
 $6=(($1+12)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=$name;
 $8=(($1+24)|0);
 $9=$8;
 HEAP32[(($9)>>2)]=0;
 $10=(($1+28)|0);
 $11=$10;
 HEAP32[(($11)>>2)]=0;
 $12=(($1+36)|0);
 $13=$12;
 HEAP16[(($13)>>1)]=-1;
 $14=(($1+40)|0);
 $15=$14;
 HEAP32[(($15)>>2)]=0;
 $16=(($1+16)|0);
 $17=$16;
 HEAP32[(($17)>>2)]=0;
 $18=(($1+38)|0);
 $19=$18;
 HEAP16[(($19)>>1)]=-1;
 return (($2)|0);
}


function _lily_new_function_copy($to_copy){
 $to_copy=($to_copy)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=((_malloc(44))|0);
 $2=$1;
 $3=$to_copy;
 (_memcpy((($1)|0), (($3)|0), 44)|0);
 return (($2)|0);
}


function _lily_new_list_val(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=((_lily_malloc(20))|0);
 $2=$1;
 $3=$1;
 HEAP32[(($3)>>2)]=1;
 $4=(($1+16)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=0;
 $6=(($1+8)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=-1;
 $8=(($1+4)|0);
 $9=$8;
 HEAP32[(($9)>>2)]=0;
 return (($2)|0);
}


function _lily_new_hash_val(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=((_lily_malloc(20))|0);
 $2=$1;
 $3=$1;
 HEAP32[(($3)>>2)]=1;
 $4=(($1+4)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=0;
 $6=(($1+8)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=0;
 $8=(($1+16)|0);
 $9=$8;
 HEAP32[(($9)>>2)]=0;
 return (($2)|0);
}


function _lily_new_instance_val(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=((_lily_malloc(24))|0);
 $2=$1;
 $3=$1;
 HEAP32[(($3)>>2)]=1;
 $4=(($1+20)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=0;
 $6=(($1+16)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=0;
 $8=(($1+8)|0);
 $9=$8;
 HEAP32[(($9)>>2)]=-1;
 return (($2)|0);
}


function _lily_new_raw_string_sized($source,$len){
 $source=($source)|0;
 $len=($len)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=((($len)+(1))|0);
 $2=((_lily_malloc($1))|0);
 (_memcpy((($2)|0), (($source)|0), $len)|0);
 $3=(($2+$len)|0);
 HEAP8[($3)]=0;
 $4=((_new_sv($2,$len))|0);
 return (($4)|0);
}


function _new_sv($buffer,$size){
 $buffer=($buffer)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=((_lily_malloc(12))|0);
 $2=$1;
 $3=$1;
 HEAP32[(($3)>>2)]=1;
 $4=(($1+8)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=$buffer;
 $6=(($1+4)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=$size;
 return (($2)|0);
}


function _lily_new_raw_string($source){
 $source=($source)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;

 $1=((_strlen((($source)|0)))|0);
 $2=((($1)+(1))|0);
 $3=((_lily_malloc($2))|0);
 $4=((_strcpy((($3)|0),(($source)|0)))|0);
 $5=((_new_sv($3,$1))|0);
 return (($5)|0);
}


function _lily_new_string($source){
 $source=($source)|0;
 var $1=0,$2=0,label=0;

 $1=((_lily_new_empty_value())|0);
 $2=((_lily_new_raw_string($source))|0);
 _lily_move_string($1,$2);
 return (($1)|0);
}


function _lily_new_string_ncpy($source,$len){
 $source=($source)|0;
 $len=($len)|0;
 var $1=0,$2=0,label=0;

 $1=((_lily_new_empty_value())|0);
 $2=((_lily_new_raw_string_sized($source,$len))|0);
 _lily_move_string($1,$2);
 return (($1)|0);
}


function _lily_new_string_take($source){
 $source=($source)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=((_lily_new_empty_value())|0);
 $2=((_strlen((($source)|0)))|0);
 $3=((_new_sv($source,$2))|0);
 _lily_move_string($1,$3);
 return (($1)|0);
}


function _lily_new_some($v){
 $v=($v)|0;
 var $1=0,label=0;

 $1=((_new_enum_1(13,0,$v))|0);
 return (($1)|0);
}


function _new_enum_1($class_id,$variant_id,$v){
 $class_id=($class_id)|0;
 $variant_id=($variant_id)|0;
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=((_lily_new_instance_val())|0);
 $2=((_lily_malloc(16))|0);
 $3=$2;
 $4=(($1+16)|0);
 HEAP32[(($4)>>2)]=$3;
 HEAP32[(($3)>>2)]=$v;
 $5=(($1+8)|0);
 HEAP32[(($5)>>2)]=1;
 $6=(($1+6)|0);
 HEAP16[(($6)>>1)]=$variant_id;
 $7=(($1+4)|0);
 HEAP16[(($7)>>1)]=$class_id;
 return (($1)|0);
}


function _lily_get_none($vm){
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,label=0;

 $1=(($vm+32)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+52)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+36)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+4)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+24)|0);
 $10=$9;
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+24)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 return (($14)|0);
}


function _subvalue_eq($vm,$depth,$left,$right){
 $vm=($vm)|0;
 $depth=($depth)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$i_01=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$ok_0=0,label=0;

 $1=(($left+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($right+8)|0);
 $5=$4;
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($3+8)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($6+8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($8|0)==($10|0);
 if (!($11)) {
  $ok_0=0;

  return (($ok_0)|0);
 }
 $12=(($3+16)|0);
 $13=((HEAP32[(($7)>>2)])|0);
 $14=($13|0)==0;
 if ($14) {
  $ok_0=1;

  return (($ok_0)|0);
 }
 $15=(($6+16)|0);
 $i_01=0;
 while(1) {

  $20=((HEAP32[(($12)>>2)])|0);
  $21=(($20+($i_01<<2))|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=((HEAP32[(($15)>>2)])|0);
  $24=(($23+($i_01<<2))|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $26=((HEAP32[(($depth)>>2)])|0);
  $27=((($26)+(1))|0);
  HEAP32[(($depth)>>2)]=$27;
  $28=((_lily_eq_value_raw($vm,$depth,$22,$25))|0);
  $29=($28|0)==0;
  $30=((HEAP32[(($depth)>>2)])|0);
  $31=((($30)-(1))|0);
  HEAP32[(($depth)>>2)]=$31;
  $32=((($i_01)+(1))|0);
  if ($29) {
   $ok_0=0;
   label = 6;
   break;
  }
  $17=((HEAP32[(($7)>>2)])|0);
  $18=($32>>>0)<($17>>>0);
  if ($18) {
   $i_01=$32;
  } else {
   $ok_0=1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {

  return (($ok_0)|0);
 }
  return 0;
}


function _lily_new_raiser(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;

 $1=((_lily_malloc(24))|0);
 $2=$1;
 $3=((_malloc(164))|0);
 $4=$3;
 $5=$3;
 HEAP32[(($5)>>2)]=0;
 $6=(($3+4)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=0;
 $8=((_lily_new_msgbuf())|0);
 $9=(($1+4)|0);
 $10=$9;
 HEAP32[(($10)>>2)]=$8;
 $11=((_lily_new_msgbuf())|0);
 $12=(($1+8)|0);
 $13=$12;
 HEAP32[(($13)>>2)]=$11;
 $14=$1;
 HEAP32[(($14)>>2)]=$4;
 $15=(($1+16)|0);
 $16=$15;
 HEAP32[(($16)>>2)]=0;
 $17=(($1+12)|0);
 $18=$17;
 HEAP32[(($18)>>2)]=0;
 return (($2)|0);
}


function _lily_free_raiser($raiser){
 $raiser=($raiser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var label=0;

 $1=(($raiser)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  $6=($2|0)==0;
  if (!($6)) {
   $11=$2;
   label = 4;
  }
 } else {
  $7=$4;
  while(1) {

   HEAP32[(($1)>>2)]=$7;
   $8=(($7)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $10=($9|0)==0;
   if ($10) {
    $11=$7;
    label = 4;
    break;
   } else {
    $7=$9;
   }
  }
 }
 if ((label|0) == 4) {
  while(1) {
   label = 0;

   $12=(($11+4)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=$11;
   _lily_free($14);
   HEAP32[(($1)>>2)]=$13;
   $15=($13|0)==0;
   if ($15) {
    break;
   } else {
    $11=$13;
    label = 4;
   }
  }
 }
 $16=(($raiser+8)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 _lily_free_msgbuf($17);
 $18=(($raiser+4)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 _lily_free_msgbuf($19);
 $20=$raiser;
 _lily_free($20);
 return;
}


function _lily_jump_setup($raiser){
 $raiser=($raiser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$storemerge=0,label=0;

 $1=(($raiser)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if (!($5)) {
  $storemerge=$4;

  HEAP32[(($1)>>2)]=$storemerge;
  return (($storemerge)|0);
 }
 $7=((_lily_malloc(164))|0);
 $8=$7;
 $9=((HEAP32[(($1)>>2)])|0);
 $10=$7;
 HEAP32[(($10)>>2)]=$9;
 $11=((HEAP32[(($1)>>2)])|0);
 $12=(($11+4)|0);
 HEAP32[(($12)>>2)]=$8;
 $13=(($7+4)|0);
 $14=$13;
 HEAP32[(($14)>>2)]=0;
 $storemerge=$8;

 HEAP32[(($1)>>2)]=$storemerge;
 return (($storemerge)|0);
}


function _lily_release_jump($raiser){
 $raiser=($raiser)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=(($raiser)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$4;
 return;
}


function _lily_jump_back($raiser){
 $raiser=($raiser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;

 $1=(($raiser)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$4;
 $5=(($4+8)|0);
 _longjmp((($5)|0),((1)|0));

}


function _lily_raise($raiser,$error_code,$fmt,varrp){
 $raiser=($raiser)|0;
 $error_code=($error_code)|0;
 $fmt=($fmt)|0;
 varrp=(varrp)|0;
 var $var_args=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $var_args=((sp)|0);
 $1=(($raiser+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_msgbuf_flush($2);
 $3=(($raiser+12)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($var_args)|0);
 $5=$var_args;
 HEAP32[(($5)>>2)]=varrp;HEAP32[((($5)+(4))>>2)]=0;
 $6=((HEAP32[(($1)>>2)])|0);
 _lily_msgbuf_add_fmt_va($6,$fmt,$4);

 $7=(($error_code)&65535);
 $8=(($raiser+20)|0);
 HEAP16[(($8)>>1)]=$7;
 $9=(($raiser)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+8)|0);
 _longjmp((($11)|0),((1)|0));

}


function _lily_raise_class($raiser,$raise_cls,$msg){
 $raiser=($raiser)|0;
 $raise_cls=($raise_cls)|0;
 $msg=($msg)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=(($raiser+12)|0);
 HEAP32[(($1)>>2)]=$raise_cls;
 $2=(($raiser+4)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 _lily_msgbuf_flush($3);
 $4=((HEAP32[(($2)>>2)])|0);
 _lily_msgbuf_add($4,$msg);
 $5=(($raiser)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+8)|0);
 _longjmp((($7)|0),((1)|0));

}


function _lily_name_for_error($raiser){
 $raiser=($raiser)|0;
 var $1=0,$2=0,$3=0,$5=0,$7=0,$8=0,$9=0,$10=0,$result_0_in=0,$result_0=0,label=0;

 $1=(($raiser+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  $7=(($raiser+20)|0);
  $8=((HEAP16[(($7)>>1)])|0);
  $9=(($8<<16)>>16);
  $10=((1736+($9<<2))|0);
  $result_0_in=$10;
 } else {
  $5=(($2+12)|0);
  $result_0_in=$5;
 }

 $result_0=((HEAP32[(($result_0_in)>>2)])|0);
 return (($result_0)|0);
}


function _decode($state,$codep,$byte){
 $state=($state)|0;
 $codep=($codep)|0;
 $byte=($byte)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,label=0;

 $1=((8+$byte)|0);
 $2=((HEAP8[($1)])|0);
 $3=($2&255);
 $4=((HEAP32[(($state)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  $12=255>>>($3>>>0);
  $13=$12&$byte;
  $15=$13;
 } else {
  $7=$byte&63;
  $8=((HEAP32[(($codep)>>2)])|0);
  $9=$8<<6;
  $10=$9|$7;
  $15=$10;
 }

 HEAP32[(($codep)>>2)]=$15;
 $16=((HEAP32[(($state)>>2)])|0);
 $17=$16<<4;
 $18=$3|256;
 $19=((($18)+($17))|0);
 $20=((8+$19)|0);
 $21=((HEAP8[($20)])|0);
 $22=($21&255);
 HEAP32[(($state)>>2)]=$22;
 return (($22)|0);
}


function _lily_is_valid_utf8($input){
 $input=($input)|0;
 var $codepoint=0,$state=0,$1=0,$2=0,$4=0,$5=0,$6=0,$s_01=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $codepoint=((sp)|0);
 $state=(((sp)+(8))|0);
 HEAP32[(($state)>>2)]=0;
 $1=((HEAP8[($input)])|0);
 $2=(($1<<24)>>24)==0;
 L1: do {
  if (!($2)) {
   $s_01=$input;$6=$1;
   while(1) {


    $7=($6&255);
    $8=((_decode($state,$codepoint,$7))|0);
    $9=($8|0)==1;
    $10=(($s_01+1)|0);
    if ($9) {
     break L1;
    }
    $4=((HEAP8[($10)])|0);
    $5=(($4<<24)>>24)==0;
    if ($5) {
     break;
    } else {
     $s_01=$10;$6=$4;
    }
   }
  }
 } while(0);
 $11=((HEAP32[(($state)>>2)])|0);
 $12=($11|0)==0;
 $13=($12&1);
 STACKTOP=sp;return (($13)|0);
}


function _lily_is_valid_sized_utf8($input,$size){
 $input=($input)|0;
 $size=($size)|0;
 var $codepoint=0,$state=0,$1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$s_01=0,$8=0,$9=0,$10=0,$11=0,$s_0_lcssa_ph=0,$_pr=0,$12=0,$s_0_lcssa5=0,$13=0,$phitmp=0,$15=0;
 var label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $codepoint=((sp)|0);
 $state=(((sp)+(8))|0);
 $1=(($input+$size)|0);
 HEAP32[(($state)>>2)]=0;
 $2=((HEAP8[($input)])|0);
 $3=(($2<<24)>>24)==0;
 do {
  if ($3) {
   $s_0_lcssa5=$input;
  } else {
   $s_01=$input;$7=$2;
   while(1) {


    $8=($7&255);
    $9=((_decode($state,$codepoint,$8))|0);
    $10=($9|0)==1;
    $11=(($s_01+1)|0);
    if ($10) {
     $s_0_lcssa_ph=$s_01;
     break;
    }
    $5=((HEAP8[($11)])|0);
    $6=(($5<<24)>>24)==0;
    if ($6) {
     $s_0_lcssa_ph=$11;
     break;
    } else {
     $s_01=$11;$7=$5;
    }
   }

   $_pr=((HEAP32[(($state)>>2)])|0);
   $12=($_pr|0)==0;
   if ($12) {
    $s_0_lcssa5=$s_0_lcssa_ph;
    break;
   } else {
    $15=0;
   }

   STACKTOP=sp;return (($15)|0);
  }
 } while(0);

 $13=($s_0_lcssa5|0)==($1|0);
 $phitmp=($13&1);
 $15=$phitmp;

 STACKTOP=sp;return (($15)|0);
}


function _lily_malloc($size){
 $size=($size)|0;
 var $1=0,$2=0,label=0;

 $1=((_malloc($size))|0);
 $2=($1|0)==0;
 if ($2) {
  _abort(); return ((0)|0);
  return ((0)|0);
 } else {
  return (($1)|0);
 }
  return 0;
}


function _lily_realloc($ptr,$new_size){
 $ptr=($ptr)|0;
 $new_size=($new_size)|0;
 var $1=0,label=0;

 $1=((_realloc($ptr,$new_size))|0);
 return (($1)|0);
}


function _lily_free($ptr){
 $ptr=($ptr)|0;
 var label=0;

 _free($ptr);
 return;
}


function _lily_new_emit_state($symtab,$raiser){
 $symtab=($symtab)|0;
 $raiser=($raiser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$$etemp$0$0=0,$$etemp$0$1=0,$st$1$0=0,$st$2$1=0,$36=0;
 var $37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0;
 var $57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0;
 var $77=0,$78=0,$79=0,$80=0,label=0;

 $1=((_lily_malloc(128))|0);
 $2=$1;
 $3=((_lily_new_buffer_u16(4))|0);
 $4=$1;
 HEAP32[(($4)>>2)]=$3;
 $5=((_lily_malloc(16))|0);
 $6=$5;
 $7=(($1+4)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$6;
 $9=((_lily_new_type_maker())|0);
 $10=(($1+112)|0);
 $11=$10;
 HEAP32[(($11)>>2)]=$9;
 $12=(($symtab+68)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($13+24)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($symtab+96)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17+24)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=((_lily_new_type_system($9,$15,$19))|0);
 $21=(($1+108)|0);
 $22=$21;
 HEAP32[(($22)>>2)]=$20;
 $23=((_lily_new_buffer_u16(32))|0);
 $24=(($1+16)|0);
 $25=$24;
 HEAP32[(($25)>>2)]=$23;
 $26=(($1+20)|0);
 $27=$26;
 HEAP32[(($27)>>2)]=0;
 $28=((_lily_malloc(16))|0);
 $29=$28;
 $30=(($1+24)|0);
 $31=$30;
 HEAP32[(($31)>>2)]=$29;
 $32=(($1+28)|0);
 $33=$32;
 HEAP32[(($33)>>2)]=0;
 $34=(($1+32)|0);
 $35=$34;
 $$etemp$0$0=0;
 $$etemp$0$1=0;
 $st$1$0=(($35)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 $st$2$1=(($35+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 $36=((_lily_new_string_pile())|0);
 $37=(($1+104)|0);
 $38=$37;
 HEAP32[(($38)>>2)]=$36;
 $39=((HEAP32[(($12)>>2)])|0);
 $40=(($39+24)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=((HEAP32[(($11)>>2)])|0);
 $43=(($42+16)|0);
 HEAP32[(($43)>>2)]=$41;
 $44=((HEAP32[(($16)>>2)])|0);
 $45=(($44+24)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 $47=((HEAP32[(($11)>>2)])|0);
 $48=(($47+12)|0);
 HEAP32[(($48)>>2)]=$46;
 $49=((_lily_malloc(32))|0);
 $50=$49;
 $51=(($1+8)|0);
 $52=$51;
 HEAP32[(($52)>>2)]=$50;
 $53=(($1+12)|0);
 $54=$53;
 HEAP32[(($54)>>2)]=0;
 $55=(($1+40)|0);
 $56=$55;
 HEAP16[(($56)>>1)]=0;
 $57=(($1+42)|0);
 $58=$57;
 HEAP16[(($58)>>1)]=8;
 $59=(($1+44)|0);
 $60=$59;
 HEAP16[(($60)>>1)]=0;
 $61=(($1+46)|0);
 $62=$61;
 HEAP16[(($62)>>1)]=4;
 $63=(($1+52)|0);
 $64=$63;
 HEAP16[(($64)>>1)]=0;
 $65=(($1+54)|0);
 $66=$65;
 HEAP16[(($66)>>1)]=4;
 $67=(($1+84)|0);
 $68=$67;
 HEAP32[(($68)>>2)]=0;
 $69=(($1+68)|0);
 $70=$69;
 HEAP32[(($70)>>2)]=0;
 $71=(($1+64)|0);
 $72=$71;
 HEAP32[(($72)>>2)]=0;
 $73=(($1+72)|0);
 $74=$73;
 HEAP32[(($74)>>2)]=0;
 $75=(($1+90)|0);
 $76=$75;
 HEAP16[(($76)>>1)]=0;
 $77=(($1+100)|0);
 $78=$77;
 HEAP32[(($78)>>2)]=$raiser;
 $79=(($1+92)|0);
 $80=$79;
 HEAP32[(($80)>>2)]=1;
 _add_call_state($2);
 return (($2)|0);
}


function _lily_free_emit_state($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$current_0=0,$4=0,$6=0,$7=0,$8=0,$current_15=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$current_store_03=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$call_iter_0=0,$23=0,$24=0,$25=0,$call_iter_11=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$51=0,$52=0,$53=0,$54=0,$55=0,label=0;

 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $current_0=$2;
 while(1) {

  $4=($current_0|0)==0;
  if ($4) {
   break;
  }
  $6=(($current_0+56)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=($7|0)==0;
  if ($8) {
   $current_15=$current_0;
   label = 4;
   break;
  } else {
   $current_0=$7;
  }
 }
 if ((label|0) == 4) {
  while(1) {
   label = 0;

   $9=(($current_15+52)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=$current_15;
   _lily_free($11);
   $12=($10|0)==0;
   if ($12) {
    break;
   } else {
    $current_15=$10;
    label = 4;
   }
  }
 }
 $13=(($emit+64)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=($14|0)==0;
 if (!($15)) {
  $current_store_03=$14;
  while(1) {

   $16=(($current_store_03)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $18=$current_store_03;
   _lily_free($18);
   $19=($17|0)==0;
   if ($19) {
    break;
   } else {
    $current_store_03=$17;
   }
  }
 }
 $20=(($emit+12)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=($21|0)==0;
 if (!($22)) {
  $call_iter_0=$21;
  while(1) {

   $23=(($call_iter_0)|0);
   $24=((HEAP32[(($23)>>2)])|0);
   $25=($24|0)==0;
   if ($25) {
    $call_iter_11=$call_iter_0;
    break;
   } else {
    $call_iter_0=$24;
   }
  }
  while(1) {

   $26=(($call_iter_11+4)|0);
   $27=((HEAP32[(($26)>>2)])|0);
   $28=$call_iter_11;
   _lily_free($28);
   $29=($27|0)==0;
   if ($29) {
    break;
   } else {
    $call_iter_11=$27;
   }
  }
 }
 $30=(($emit+104)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 _lily_free_string_pile($31);
 $32=(($emit+28)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=$33;
 _lily_free($34);
 $35=(($emit+24)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=$36;
 _lily_free($37);
 $38=(($emit+8)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=$39;
 _lily_free($40);
 $41=(($emit+108)|0);
 $42=((HEAP32[(($41)>>2)])|0);
 _lily_free_type_system($42);
 $43=(($emit+4)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=$44;
 _lily_free($45);
 $46=(($emit+20)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=($47|0)==0;
 if ($48) {
  $51=(($emit)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  _lily_free_buffer_u16($52);
  $53=(($emit+16)|0);
  $54=((HEAP32[(($53)>>2)])|0);
  _lily_free_buffer_u16($54);
  $55=$emit;
  _lily_free($55);
  return;
 }
 _lily_free_buffer_u16($47);
 $51=(($emit)|0);
 $52=((HEAP32[(($51)>>2)])|0);
 _lily_free_buffer_u16($52);
 $53=(($emit+16)|0);
 $54=((HEAP32[(($53)>>2)])|0);
 _lily_free_buffer_u16($54);
 $55=$emit;
 _lily_free($55);
 return;
}


function _lily_emit_enter_main($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0;
 var $61=0,$62=0,$63=0,$64=0,label=0;

 _add_storage($emit);
 $1=(($emit+112)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_tm_add($2,0);
 $3=((HEAP32[(($1)>>2)])|0);
 $4=(($emit+120)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+72)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((_lily_tm_make($3,0,$7,1))|0);
 $9=((HEAP32[(($4)>>2)])|0);
 $10=((_lily_new_raw_var($9,$8,5008))|0);
 $11=(($10+8)|0);
 HEAP32[(($11)>>2)]=0;
 $12=(($10+36)|0);
 HEAP32[(($12)>>2)]=1;
 $13=(($10+6)|0);
 $14=((HEAP16[(($13)>>1)])|0);
 $15=$14|64;
 HEAP16[(($13)>>1)]=$15;
 $16=((HEAP32[(($4)>>2)])|0);
 $17=(($16+44)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((($18)+(1))|0);
 HEAP32[(($17)>>2)]=$19;
 $20=((_lily_malloc(60))|0);
 $21=$20;
 $22=(($10+16)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=((_lily_new_native_function_val(0,$23))|0);
 $25=((HEAP32[(($4)>>2)])|0);
 $26=(($25)|0);
 HEAP32[(($26)>>2)]=$10;
 $27=((HEAP32[(($4)>>2)])|0);
 $28=(($27+36)|0);
 HEAP32[(($28)>>2)]=$24;
 $29=(($24)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=((($30)+(1))|0);
 HEAP32[(($29)>>2)]=$31;
 $32=((HEAP32[(($4)>>2)])|0);
 _lily_tie_function($32,$10,$24);
 $33=(($20+56)|0);
 $34=$33;
 HEAP32[(($34)>>2)]=0;
 $35=(($20+52)|0);
 $36=$35;
 HEAP32[(($36)>>2)]=0;
 $37=(($20+22)|0);
 $38=$37;
 HEAP16[(($38)>>1)]=15;
 $39=(($20+8)|0);
 $40=$39;
 HEAP32[(($40)>>2)]=$10;
 $41=(($emit+64)|0);
 $42=((HEAP32[(($41)>>2)])|0);
 $43=$20;
 HEAP32[(($43)>>2)]=$42;
 $44=(($20+44)|0);
 $45=$44;
 HEAP32[(($45)>>2)]=0;
 $46=(($20+48)|0);
 $47=$46;
 HEAP32[(($47)>>2)]=0;
 $48=(($20+24)|0);
 $49=$48;
 HEAP32[(($49)>>2)]=0;
 $50=(($20+28)|0);
 $51=$50;
 HEAP32[(($51)>>2)]=0;
 $52=(($20+36)|0);
 $53=$52;
 HEAP32[(($53)>>2)]=0;
 $54=(($20+18)|0);
 $55=$54;
 HEAP16[(($55)>>1)]=-1;
 $56=(($20+20)|0);
 HEAP8[($56)]=0;
 $57=(($emit+56)|0);
 HEAP32[(($57)>>2)]=$10;
 $58=(($emit+60)|0);
 HEAP32[(($58)>>2)]=0;
 $59=(($emit+84)|0);
 HEAP32[(($59)>>2)]=$21;
 $60=(($emit+90)|0);
 $61=((HEAP16[(($60)>>1)])|0);
 $62=((($61)+(1))&65535);
 HEAP16[(($60)>>1)]=$62;
 $63=(($emit+76)|0);
 HEAP32[(($63)>>2)]=$21;
 $64=(($emit+80)|0);
 HEAP32[(($64)>>2)]=$21;
 return;
}


function _lily_emit_new_local_var($emit,$type,$name){
 $emit=($emit)|0;
 $type=($type)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_new_raw_var($2,$type,$name))|0);
 $4=(($emit+80)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+36)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($3+8)|0);
 HEAP32[(($8)>>2)]=$7;
 $9=((HEAP32[(($4)>>2)])|0);
 $10=(($9+36)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((($11)+(1))|0);
 HEAP32[(($10)>>2)]=$12;
 $13=(($emit+90)|0);
 $14=((HEAP16[(($13)>>1)])|0);
 $15=($14&65535);
 $16=(($3+36)|0);
 HEAP32[(($16)>>2)]=$15;
 return (($3)|0);
}


function _lily_emit_new_scoped_var($emit,$type,$name){
 $emit=($emit)|0;
 $type=($type)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_new_raw_var($2,$type,$name))|0);
 $4=(($emit+90)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($5<<16)>>16)==1;
 if ($6) {
  $8=(($emit+76)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(($9+36)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=(($3+8)|0);
  HEAP32[(($12)>>2)]=$11;
  $13=((HEAP32[(($8)>>2)])|0);
  $14=(($13+36)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=((($15)+(1))|0);
  HEAP32[(($14)>>2)]=$16;
  $17=(($3+6)|0);
  $18=((HEAP16[(($17)>>1)])|0);
  $19=$18|512;
  HEAP16[(($17)>>1)]=$19;
  $31=((HEAP16[(($4)>>1)])|0);
  $32=($31&65535);
  $33=(($3+36)|0);
  HEAP32[(($33)>>2)]=$32;
  return (($3)|0);
 } else {
  $21=(($emit+80)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=(($22+36)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=(($3+8)|0);
  HEAP32[(($25)>>2)]=$24;
  $26=((HEAP32[(($21)>>2)])|0);
  $27=(($26+36)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=((($28)+(1))|0);
  HEAP32[(($27)>>2)]=$29;
  $31=((HEAP16[(($4)>>1)])|0);
  $32=($31&65535);
  $33=(($3+36)|0);
  HEAP32[(($33)>>2)]=$32;
  return (($3)|0);
 }
  return 0;
}


function _lily_emit_new_define_var($emit,$type,$name){
 $emit=($emit)|0;
 $type=($type)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_new_raw_var($2,$type,$name))|0);
 $4=((HEAP32[(($1)>>2)])|0);
 $5=(($4+44)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($3+8)|0);
 HEAP32[(($7)>>2)]=$6;
 $8=((HEAP32[(($1)>>2)])|0);
 $9=(($8+44)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((($10)+(1))|0);
 HEAP32[(($9)>>2)]=$11;
 $12=(($3+36)|0);
 HEAP32[(($12)>>2)]=1;
 $13=(($3+6)|0);
 $14=((HEAP16[(($13)>>1)])|0);
 $15=$14|64;
 HEAP16[(($13)>>1)]=$15;
 return (($3)|0);
}


function _lily_emit_new_tied_dyna_var($emit,$func,$source,$type,$name){
 $emit=($emit)|0;
 $func=($func)|0;
 $source=($source)|0;
 $type=($type)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0;
 var $22=0,$23=0,$_c2=0,$24=0,$25=0,$26=0,$27=0,$28=0,$_c3=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$_c=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$_c1=0,$func_val_0=0,$47=0,label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_new_raw_unlinked_var($2,$type,$name))|0);
 $4=(($3+36)|0);
 HEAP32[(($4)>>2)]=1;
 $5=(($3+6)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=$6|1088;
 HEAP16[(($5)>>1)]=$7;
 $8=((HEAP32[(($1)>>2)])|0);
 $9=(($8+44)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($3+8)|0);
 HEAP32[(($11)>>2)]=$10;
 $12=((HEAP32[(($1)>>2)])|0);
 $13=(($12+44)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((($14)+(1))|0);
 HEAP32[(($13)>>2)]=$15;
 $16=(($source+4)|0);
 $17=((HEAP16[(($16)>>1)])|0);
 $18=(($17<<16)>>16)==5;
 if ($18) {
  $20=(($source+32)|0);
  $21=$20;
  $22=((HEAP32[(($21)>>2)])|0);
  $23=(($3)|0);
  HEAP32[(($23)>>2)]=$22;
  $_c2=$3;
  HEAP32[(($20)>>2)]=$_c2;
  $24=((_lily_new_foreign_function_val($func,0,$name))|0);
  $25=(($source+52)|0);
  $26=$25;
  $27=((HEAP32[(($26)>>2)])|0);
  $28=(($24+40)|0);
  $_c3=$27;
  HEAP32[(($28)>>2)]=$_c3;
  $func_val_0=$24;

  $47=((HEAP32[(($1)>>2)])|0);
  _lily_tie_function($47,$3,$func_val_0);
  return (($3)|0);
 } else {
  $30=$source;
  $31=(($source+32)|0);
  $32=$31;
  $33=((HEAP32[(($32)>>2)])|0);
  $34=$33;
  $35=(($3)|0);
  HEAP32[(($35)>>2)]=$34;
  $_c=$3;
  HEAP32[(($31)>>2)]=$_c;
  $36=(($3+40)|0);
  HEAP32[(($36)>>2)]=$30;
  $37=(($source+12)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=((_lily_new_foreign_function_val($func,$38,$name))|0);
  $40=(($source+48)|0);
  $41=$40;
  $42=((HEAP32[(($41)>>2)])|0);
  $43=(($42+52)|0);
  $44=((HEAP32[(($43)>>2)])|0);
  $45=(($39+40)|0);
  $_c1=$44;
  HEAP32[(($45)>>2)]=$_c1;
  $func_val_0=$39;

  $47=((HEAP32[(($1)>>2)])|0);
  _lily_tie_function($47,$3,$func_val_0);
  return (($3)|0);
 }
  return 0;
}


function _lily_emit_new_dyna_var($emit,$module,$type,$name){
 $emit=($emit)|0;
 $module=($module)|0;
 $type=($type)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_new_raw_unlinked_var($2,$type,$name))|0);
 $4=(($emit+76)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+36)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($3+8)|0);
 HEAP32[(($8)>>2)]=$7;
 $9=((HEAP32[(($4)>>2)])|0);
 $10=(($9+36)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((($11)+(1))|0);
 HEAP32[(($10)>>2)]=$12;
 $13=(($3+36)|0);
 HEAP32[(($13)>>2)]=1;
 $14=(($3+6)|0);
 $15=((HEAP16[(($14)>>1)])|0);
 $16=$15|512;
 HEAP16[(($14)>>1)]=$16;
 $17=(($module+32)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($3)|0);
 HEAP32[(($19)>>2)]=$18;
 HEAP32[(($17)>>2)]=$3;
 return (($3)|0);
}


function _lily_emit_write_import_call($emit,$var){
 $emit=($emit)|0;
 $var=($var)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=(($emit+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($emit+96)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5)&65535);
 $7=(($var+8)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8)&65535);
 _lily_u16_write_5($2,25,$6,$9,0,0);
 return;
}


function _lily_emit_write_optargs($emit,$optargs,$start){
 $emit=($emit)|0;
 $optargs=($optargs)|0;
 $start=($start)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$i_03=0,$24=0,$25=0,$26=0,$_lcssa=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$i_12=0,$jump_target_01=0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0;
 var $58=0,$59=0,$60=0,$jump_target_0_lcssa=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,label=0;

 $1=(($optargs+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($optargs)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($emit+96)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7)&65535);
 $9=((($2)-($start))|0);
 $10=(((($9|0))/(3))&-1);
 $11=((($10)+(1))|0);
 $12=(($emit+16)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($emit+84)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15+36)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=((($17)+(65535))|0);
 $19=(($18)&65535);
 $20=(($11)&65535);
 _lily_u16_write_3($13,55,$19,$20);
 $21=($9|0)>2;
 $22=((HEAP32[(($12)>>2)])|0);
 if ($21) {
  $i_03=0;$23=$22;
  while(1) {


   _lily_u16_write_1($23,0);
   $24=((($i_03)+(1))|0);
   $25=($24|0)<($10|0);
   $26=((HEAP32[(($12)>>2)])|0);
   if ($25) {
    $i_03=$24;$23=$26;
   } else {
    $_lcssa=$26;
    break;
   }
  }
 } else {
  $_lcssa=$22;
 }

 $27=(($_lcssa+4)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=((($28)+(2))|0);
 $30=(($29)&65535);
 _lily_u16_write_1($_lcssa,$30);
 $31=($2|0)==($start|0);
 if ($31) {
  $jump_target_0_lcssa=$28;

  $62=((HEAP32[(($12)>>2)])|0);
  $63=(($62+4)|0);
  $64=((HEAP32[(($63)>>2)])|0);
  $65=((HEAP32[(($14)>>2)])|0);
  $66=(($65+28)|0);
  $67=((HEAP32[(($66)>>2)])|0);
  $68=((($64)-($67))|0);
  $69=(($68)&65535);
  $70=(($62)|0);
  $71=((HEAP32[(($70)>>2)])|0);
  $72=(($71+($jump_target_0_lcssa<<1))|0);
  HEAP16[(($72)>>1)]=$69;
  return;
 }
 $32=((($2)-(3))|0);
 $33=((($32)-($start))|0);
 $34=(((($33>>>0))/(3))&-1);
 $jump_target_01=$28;$i_12=$start;
 while(1) {


  $36=(($4+($i_12<<1))|0);
  $37=((HEAP16[(($36)>>1)])|0);
  $38=((($i_12)+(1))|0);
  $39=(($4+($38<<1))|0);
  $40=((HEAP16[(($39)>>1)])|0);
  $41=((($i_12)+(2))|0);
  $42=(($4+($41<<1))|0);
  $43=((HEAP16[(($42)>>1)])|0);
  $44=((HEAP32[(($12)>>2)])|0);
  $45=(($44+4)|0);
  $46=((HEAP32[(($45)>>2)])|0);
  $47=((HEAP32[(($14)>>2)])|0);
  $48=(($47+28)|0);
  $49=((HEAP32[(($48)>>2)])|0);
  $50=((($46)-($49))|0);
  $51=(($50)&65535);
  $52=(($44)|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $54=(($53+($jump_target_01<<1))|0);
  HEAP16[(($54)>>1)]=$51;
  $55=((HEAP32[(($12)>>2)])|0);
  _lily_u16_write_4($55,$40,$8,$43,$37);
  $56=((($i_12)+(3))|0);
  $57=((($jump_target_01)-(1))|0);
  $58=($56|0)==($2|0);
  if ($58) {
   break;
  } else {
   $jump_target_01=$57;$i_12=$56;
  }
 }
 $59=((($28)-(1))|0);
 $60=((($59)-($34))|0);
 $jump_target_0_lcssa=$60;

 $62=((HEAP32[(($12)>>2)])|0);
 $63=(($62+4)|0);
 $64=((HEAP32[(($63)>>2)])|0);
 $65=((HEAP32[(($14)>>2)])|0);
 $66=(($65+28)|0);
 $67=((HEAP32[(($66)>>2)])|0);
 $68=((($64)-($67))|0);
 $69=(($68)&65535);
 $70=(($62)|0);
 $71=((HEAP32[(($70)>>2)])|0);
 $72=(($71+($jump_target_0_lcssa<<1))|0);
 HEAP16[(($72)>>1)]=$69;
 return;
}


function _lily_emit_finalize_for_in($emit,$user_loop_var,$for_start,$for_end,$for_step,$line_num){
 $emit=($emit)|0;
 $user_loop_var=($user_loop_var)|0;
 $for_start=($for_start)|0;
 $for_end=($for_end)|0;
 $for_step=($for_step)|0;
 $line_num=($line_num)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$_0=0,$18=0,$19=0,$20=0,$22=0;
 var $23=0,$24=0,$target_0_in=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$43=0;
 var $44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0;
 var $65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+48)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($for_step|0)==0;
 if ($5) {
  $7=(($4+24)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=((_lily_emit_new_local_var($emit,$8,16896))|0);
  $10=$9;
  $11=(($emit+16)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=(($line_num)&65535);
  $14=(($9+8)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=(($15)&65535);
  _lily_u16_write_4($12,43,$13,1,$16);
  $_0=$10;
 } else {
  $_0=$for_step;
 }

 $18=(($user_loop_var+36)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=($19|0)==1;
 if ($20) {
  $22=(($4+24)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=((_lily_emit_new_local_var($emit,$23,13544))|0);
  $target_0_in=$24;
 } else {
  $target_0_in=$user_loop_var;
 }

 $26=(($emit+16)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=(($line_num)&65535);
 $29=(($target_0_in+8)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=(($30)&65535);
 $32=(($for_start+8)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=(($33)&65535);
 $35=(($for_end+8)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=(($36)&65535);
 $38=(($_0+8)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=(($39)&65535);
 _lily_u16_write_6($27,37,$28,$31,$34,$37,$40);
 $41=($target_0_in|0)!=($user_loop_var|0);
 if ($41) {
  $43=((HEAP32[(($26)>>2)])|0);
  $44=((HEAP32[(($29)>>2)])|0);
  $45=(($44)&65535);
  $46=(($user_loop_var+8)|0);
  $47=((HEAP32[(($46)>>2)])|0);
  $48=(($47)&65535);
  _lily_u16_write_4($43,41,$28,$45,$48);
 }
 $50=((HEAP32[(($26)>>2)])|0);
 $51=(($50+4)|0);
 $52=((HEAP32[(($51)>>2)])|0);
 $53=(($52)&65535);
 $54=(($emit+84)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=(($55+18)|0);
 HEAP16[(($56)>>1)]=$53;
 $57=((HEAP32[(($26)>>2)])|0);
 $58=((HEAP32[(($29)>>2)])|0);
 $59=(($58)&65535);
 $60=((HEAP32[(($35)>>2)])|0);
 $61=(($60)&65535);
 $62=((HEAP32[(($38)>>2)])|0);
 $63=(($62)&65535);
 _lily_u16_write_5($57,36,$28,$59,$61,$63);
 $64=((HEAP32[(($26)>>2)])|0);
 $65=((HEAP32[(($32)>>2)])|0);
 $66=(($65)&65535);
 _lily_u16_write_2($64,$66,0);
 $67=(($emit)|0);
 $68=((HEAP32[(($67)>>2)])|0);
 $69=((HEAP32[(($26)>>2)])|0);
 $70=(($69+4)|0);
 $71=((HEAP32[(($70)>>2)])|0);
 $72=((($71)+(65535))|0);
 $73=(($72)&65535);
 _lily_u16_write_1($68,$73);
 if (!($41)) {
  return;
 }
 $75=((HEAP32[(($26)>>2)])|0);
 $76=((HEAP32[(($29)>>2)])|0);
 $77=(($76)&65535);
 $78=(($user_loop_var+8)|0);
 $79=((HEAP32[(($78)>>2)])|0);
 $80=(($79)&65535);
 _lily_u16_write_4($75,41,$28,$77,$80);
 return;
}


function _lily_emit_break($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+18)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($4<<16)>>16)==-1;
 if ($5) {
  $7=(($emit+100)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  _lily_raise($8,1,12480,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $10=((_find_deepest_loop($emit))|0);
 _write_pop_try_blocks_up_to($emit,$10);
 $11=(($emit+16)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 _lily_u16_write_2($12,22,0);
 $13=((HEAP32[(($11)>>2)])|0);
 $14=(($13+4)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((($15)+(65535))|0);
 $17=(($16)&65535);
 _inject_patch_into_block($emit,$10,$17);
 STACKTOP=sp;return;
}


function _lily_emit_continue($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+18)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($4<<16)>>16)==-1;
 if ($5) {
  $7=(($emit+100)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  _lily_raise($8,1,11200,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $10=((_find_deepest_loop($emit))|0);
 _write_pop_try_blocks_up_to($emit,$10);
 $11=(($emit+16)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((HEAP32[(($1)>>2)])|0);
 $14=(($13+18)|0);
 $15=((HEAP16[(($14)>>1)])|0);
 _lily_u16_write_2($12,22,$15);
 STACKTOP=sp;return;
}


function _lily_emit_try($emit,$line_num){
 $emit=($emit)|0;
 $line_num=($line_num)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;

 $1=(($emit+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($line_num)&65535);
 _lily_u16_write_3($2,47,$3,0);
 $4=(($emit)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((HEAP32[(($1)>>2)])|0);
 $7=(($6+4)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($8)+(65535))|0);
 $10=(($9)&65535);
 _lily_u16_write_1($5,$10);
 return;
}


function _lily_emit_except($emit,$except_type,$except_var,$line_num){
 $emit=($emit)|0;
 $except_type=($except_type)|0;
 $except_var=($except_var)|0;
 $line_num=($line_num)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,label=0;

 $1=($except_var|0)==0;
 $2=(($emit+16)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($line_num)&65535);
 if ($1) {
  $16=(($except_type)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=(($17+40)|0);
  $19=((HEAP16[(($18)>>1)])|0);
  _lily_u16_write_5($3,49,$4,$19,0,0);
 } else {
  $6=(($except_var+12)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(($9+40)|0);
  $11=((HEAP16[(($10)>>1)])|0);
  $12=(($except_var+8)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=(($13)&65535);
  _lily_u16_write_5($3,50,$4,$11,$14,0);
 }
 $21=(($emit)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((HEAP32[(($2)>>2)])|0);
 $24=(($23+4)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=((($25)+(65535))|0);
 $27=(($26)&65535);
 _lily_u16_write_1($22,$27);
 return;
}


function _write_block_patches($emit,$pos){
 $emit=($emit)|0;
 $pos=($pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$from_01=0,$10=0,$11=0,$12=0,$from_02=0,$14=0,$15=0,$16=0,$from_0=0,$17=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,label=0;

 $1=(($emit)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($emit+84)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+12)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $from_01=((($4)-(1))|0);
 $10=($from_01|0)<($9|0);
 if ($10) {
  return;
 }
 $11=(($pos)&65535);
 $12=(($emit+16)|0);
 $from_02=$from_01;
 while(1) {

  $14=((HEAP32[(($1)>>2)])|0);
  $15=((_lily_u16_pop($14))|0);
  $16=(($15<<16)>>16)==-1;
  if (!($16)) {
   $19=($15&65535);
   $20=((HEAP32[(($12)>>2)])|0);
   $21=(($20)|0);
   $22=((HEAP32[(($21)>>2)])|0);
   $23=(($22+($19<<1))|0);
   HEAP16[(($23)>>1)]=$11;
  }
  $from_0=((($from_02)-(1))|0);
  $17=($from_0|0)<($9|0);
  if ($17) {
   break;
  } else {
   $from_02=$from_0;
  }
 }
 return;
}


function _get_unique_storage($emit,$type){
 $emit=($emit)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;

 $1=(($emit+80)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 while(1) {
  $6=((_get_storage($emit,$type))|0);
  $7=((HEAP32[(($1)>>2)])|0);
  $8=(($7+36)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=($9|0)==($4|0);
  if (!($10)) {
   break;
  }
 }
 return (($6)|0);
}


function _lily_emit_enter_block($emit,$block_type){
 $emit=($emit)|0;
 $block_type=($block_type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$new_block_0=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=0,$62=0,$63=0;
 var $65=0,$66=0,$67=0,$68=0,$69=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$78=0,$79=0,$81=0,$82=0,$83=0,$84=0,$85=0,$87=0,$88=0;
 var $89=0,$90=0,$91=0,$93=0,$94=0,$96=0,$97=0,$98=0,$100=0,$103=0,$104=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0;
 var $115=0,$116=0,$117=0,$118=0,$119=0,$120=0,label=0;

 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+52)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  $7=((_lily_malloc(60))|0);
  $8=$7;
  $9=((HEAP32[(($1)>>2)])|0);
  $10=(($9+52)|0);
  HEAP32[(($10)>>2)]=$8;
  $11=((HEAP32[(($1)>>2)])|0);
  $12=(($7+56)|0);
  $13=$12;
  HEAP32[(($13)>>2)]=$11;
  $14=(($7+52)|0);
  $15=$14;
  HEAP32[(($15)>>2)]=0;
  $new_block_0=$8;
 } else {
  $new_block_0=$4;
 }

 $17=(($new_block_0+22)|0);
 $18=$17;
 $19=(($block_type)&65535);
 HEAP16[(($18)>>1)]=$19;
 $20=(($emit+120)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($21+24)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($23+32)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($new_block_0+4)|0);
 HEAP32[(($26)>>2)]=$25;
 $27=((HEAP32[(($1)>>2)])|0);
 $28=(($27+44)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=(($new_block_0+44)|0);
 HEAP32[(($30)>>2)]=$29;
 $31=((HEAP32[(($1)>>2)])|0);
 $32=(($31+48)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=(($new_block_0+48)|0);
 HEAP32[(($34)>>2)]=$33;
 $35=(($emit)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=(($36+4)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=(($38)&65535);
 $40=(($new_block_0+12)|0);
 HEAP16[(($40)>>1)]=$39;
 $41=(($new_block_0+40)|0);
 HEAP32[(($41)>>2)]=-1;
 $42=((HEAP32[(($1)>>2)])|0);
 $43=(($42+18)|0);
 $44=((HEAP16[(($43)>>1)])|0);
 $45=(($new_block_0+18)|0);
 HEAP16[(($45)>>1)]=$44;
 $46=(($new_block_0+20)|0);
 HEAP8[($46)]=0;
 $47=($block_type>>>0)<((12)>>>0);
 if ($47) {
  $49=((HEAP32[(($1)>>2)])|0);
  $50=(($49)|0);
  $51=((HEAP32[(($50)>>2)])|0);
  $52=(($new_block_0)|0);
  HEAP32[(($52)>>2)]=$51;
  $53=((HEAP32[(($1)>>2)])|0);
  $54=(($53+28)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=(($new_block_0+28)|0);
  HEAP32[(($56)>>2)]=$55;
  $57=(($new_block_0+21)|0);
  HEAP8[($57)]=1;
  if (((($block_type|0))|0)==((6)|0)|((($block_type|0))|0)==((5)|0)|((($block_type|0))|0)==((4)|0)) {
   $59=(($emit+16)|0);
   $60=((HEAP32[(($59)>>2)])|0);
   $61=(($60+4)|0);
   $62=((HEAP32[(($61)>>2)])|0);
   $63=(($62)&65535);
   HEAP16[(($45)>>1)]=$63;
   HEAP32[(($1)>>2)]=$new_block_0;
   return;
  } else if (((($block_type|0))|0)==((11)|0)) {
   $65=((HEAP32[(($20)>>2)])|0);
   $66=(($65+24)|0);
   $67=((HEAP32[(($66)>>2)])|0);
   $68=(($67+28)|0);
   $69=((HEAP32[(($68)>>2)])|0);
   HEAP32[(($30)>>2)]=$69;
   HEAP16[(($45)>>1)]=-1;
   HEAP32[(($1)>>2)]=$new_block_0;
   return;
  } else {
   HEAP32[(($1)>>2)]=$new_block_0;
   return;
  }
 }
 $71=((HEAP32[(($20)>>2)])|0);
 $72=(($71+24)|0);
 $73=((HEAP32[(($72)>>2)])|0);
 $74=(($73+32)|0);
 $75=((HEAP32[(($74)>>2)])|0);
 $76=($block_type|0)==13;
 if ($76) {
  $78=(($73+28)|0);
  $79=((HEAP32[(($78)>>2)])|0);
  HEAP32[(($30)>>2)]=$79;
 }
 $81=((HEAP32[(($30)>>2)])|0);
 $82=(($75+40)|0);
 HEAP32[(($82)>>2)]=$81;
 $83=(($emit+90)|0);
 $84=((HEAP16[(($83)>>1)])|0);
 $85=((($84&65535))>>>0)>((1)>>>0);
 do {
  if ($85) {
   $87=((HEAP32[(($1)>>2)])|0);
   $88=(($87+22)|0);
   $89=$88;
   $90=((HEAP16[(($89)>>1)])|0);
   $91=(($90<<16)>>16)==13;
   if ($91) {
    break;
   }
   $93=((HEAP16[(($18)>>1)])|0);
   $94=(($93<<16)>>16)==13;
   if ($94) {
    break;
   }
   $96=(($75+6)|0);
   $97=((HEAP16[(($96)>>1)])|0);
   $98=$97|256;
   HEAP16[(($96)>>1)]=$98;
  }
 } while(0);
 $100=(($new_block_0+36)|0);
 HEAP32[(($100)>>2)]=0;
 if (((($block_type|0))|0)==((14)|0)) {
  HEAP32[(($34)>>2)]=0;
  label = 15;
 } else if (!(((($block_type|0))|0)==((15)|0))) {
  label = 15;
 }
 if ((label|0) == 15) {
  $103=((HEAP16[(($83)>>1)])|0);
  $104=((($103)+(1))&65535);
  HEAP16[(($83)>>1)]=$104;
 }
 $106=(($emit+80)|0);
 HEAP32[(($106)>>2)]=$new_block_0;
 $107=(($emit+68)|0);
 $108=((HEAP32[(($107)>>2)])|0);
 $109=(($new_block_0)|0);
 HEAP32[(($109)>>2)]=$108;
 $110=(($new_block_0+8)|0);
 HEAP32[(($110)>>2)]=$75;
 $111=(($emit+16)|0);
 $112=((HEAP32[(($111)>>2)])|0);
 $113=(($112+4)|0);
 $114=((HEAP32[(($113)>>2)])|0);
 $115=(($new_block_0+24)|0);
 HEAP32[(($115)>>2)]=$114;
 $116=((HEAP32[(($111)>>2)])|0);
 $117=(($116+4)|0);
 $118=((HEAP32[(($117)>>2)])|0);
 $119=(($new_block_0+28)|0);
 HEAP32[(($119)>>2)]=$118;
 HEAP16[(($45)>>1)]=-1;
 $120=(($emit+56)|0);
 HEAP32[(($120)>>2)]=$75;
 HEAP32[(($1)>>2)]=$new_block_0;
 return;
}


function _lily_emit_leave_block($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$_off=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$41=0,$42=0,$43=0,$45=0,$46=0,$47=0,$48=0;
 var $49=0,$50=0,$51=0,$53=0,$54=0,$55=0,$56=0,$58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$73=0;
 var $74=0,$75=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+56)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  $7=(($emit+100)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  _lily_raise($8,1,9960,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $10=((HEAP32[(($1)>>2)])|0);
 $11=(($10+22)|0);
 $12=$11;
 $13=((HEAP16[(($12)>>1)])|0);
 $14=$13&-3;
 $15=(($14<<16)>>16)==4;
 do {
  if ($15) {
   $17=(($emit+16)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   $19=(($10+18)|0);
   $20=((HEAP16[(($19)>>1)])|0);
   $21=($20&65535);
   $22=(($10+28)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=((($21)-($23))|0);
   $25=(($24)&65535);
   _lily_u16_write_2($18,22,$25);
   label = 9;
  } else {
   $27=(($13<<16)>>16)==10;
   if ($27) {
    $28=(($10+16)|0);
    $29=((HEAP16[(($28)>>1)])|0);
    $30=(($emit+52)|0);
    HEAP16[(($30)>>1)]=$29;
    label = 10;
    break;
   }
   $_off=((($13)-(7))&65535);
   $32=((($_off&65535))>>>0)<((3)>>>0);
   if (!($32)) {
    label = 9;
    break;
   }
   $34=(($emit)|0);
   $35=((HEAP32[(($34)>>2)])|0);
   $36=(($35+4)|0);
   $37=((HEAP32[(($36)>>2)])|0);
   $38=((($37)-(1))|0);
   HEAP32[(($36)>>2)]=$38;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  if ((((($13<<16)>>16))|0)==((10)|0)|(((($13<<16)>>16))|0)==((9)|0)|(((($13<<16)>>16))|0)==((2)|0)) {
   label = 10;
  }
 }
 do {
  if ((label|0) == 10) {
   $41=(($10+21)|0);
   $42=((HEAP8[($41)])|0);
   $43=(($42<<24)>>24)==0;
   if ($43) {
    break;
   }
   $45=(($10+40)|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $47=(($emit+16)|0);
   $48=((HEAP32[(($47)>>2)])|0);
   $49=(($48+4)|0);
   $50=((HEAP32[(($49)>>2)])|0);
   $51=($46|0)==($50|0);
   if (!($51)) {
    break;
   }
   $53=((HEAP32[(($1)>>2)])|0);
   $54=(($53+56)|0);
   $55=((HEAP32[(($54)>>2)])|0);
   $56=(($55+40)|0);
   HEAP32[(($56)>>2)]=$50;
  }
 } while(0);
 $58=((($13&65535))>>>0)<((12)>>>0);
 if ($58) {
  $60=(($10+4)|0);
  $61=((HEAP32[(($60)>>2)])|0);
  $62=(($emit+16)|0);
  $63=((HEAP32[(($62)>>2)])|0);
  $64=(($63+4)|0);
  $65=((HEAP32[(($64)>>2)])|0);
  $66=(($10+28)|0);
  $67=((HEAP32[(($66)>>2)])|0);
  $68=((($65)-($67))|0);
  _write_block_patches($emit,$68);
  $69=(($emit+120)|0);
  $70=((HEAP32[(($69)>>2)])|0);
  _lily_hide_block_vars($70,$61);
  $73=((HEAP32[(($1)>>2)])|0);
  $74=(($73+56)|0);
  $75=((HEAP32[(($74)>>2)])|0);
  HEAP32[(($1)>>2)]=$75;
  STACKTOP=sp;return;
 } else {
  _leave_function($emit,$10);
  $73=((HEAP32[(($1)>>2)])|0);
  $74=(($73+56)|0);
  $75=((HEAP32[(($74)>>2)])|0);
  HEAP32[(($1)>>2)]=$75;
  STACKTOP=sp;return;
 }
}


function _lily_emit_change_block_to($emit,$new_type){
 $emit=($emit)|0;
 $new_type=($new_type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$new_type_off=0,$16=0,$18=0,$20=0,$_=0,$21=0,$22=0;
 var $24=0,$25=0,$28=0,$29=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$45=0,$46=0,$47=0,$48=0,$49=0;
 var $50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$68=0,$69=0,$70=0,$71=0;
 var $72=0,$73=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+22)|0);
 $4=$3;
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($2+40)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($emit+16)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+4)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=($7|0)==($11|0);
 if (!($12)) {
  $14=(($2+21)|0);
  HEAP8[($14)]=0;
 }
 $new_type_off=((($new_type)-(1))|0);
 $16=($new_type_off>>>0)<((2)>>>0);
 do {
  if ($16) {
   $18=(($5<<16)>>16)==2;
   if (!($18)) {
    break;
   }
   $20=($new_type|0)==1;
   $_=($20?8848:7496);
   $21=(($emit+100)|0);
   $22=((HEAP32[(($21)>>2)])|0);
   _lily_raise($22,1,6016,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$_,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  } else {
   $24=$new_type&-2;
   $25=($24|0)==8;
   if (!($25)) {
    break;
   }
   if ((((($5<<16)>>16))|0)==((9)|0)) {
    $28=(($emit+100)|0);
    $29=((HEAP32[(($28)>>2)])|0);
    _lily_raise($29,1,4744,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    break;
   } else if ((((($5<<16)>>16))|0)==((7)|0)) {
    $31=((HEAP32[(($8)>>2)])|0);
    _lily_u16_write_1($31,48);
    break;
   } else {
    break;
   }
  }
 } while(0);
 $33=((HEAP32[(($1)>>2)])|0);
 $34=(($33+4)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=(($emit+120)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=(($37+24)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=(($39+32)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=($35|0)==($41|0);
 if (!($42)) {
  _lily_hide_block_vars($37,$35);
 }
 $45=((HEAP32[(($8)>>2)])|0);
 _lily_u16_write_2($45,22,0);
 $46=((HEAP32[(($8)>>2)])|0);
 $47=(($46+4)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 $49=((($48)+(65535))|0);
 $50=(($emit)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=((_lily_u16_pop($51))|0);
 $53=(($52<<16)>>16)==-1;
 if ($53) {
  $68=((HEAP32[(($50)>>2)])|0);
  $69=(($49)&65535);
  _lily_u16_write_1($68,$69);
  $70=((HEAP32[(($1)>>2)])|0);
  $71=(($70+22)|0);
  $72=$71;
  $73=(($new_type)&65535);
  HEAP16[(($72)>>1)]=$73;
  STACKTOP=sp;return;
 }
 $55=($52&65535);
 $56=((HEAP32[(($8)>>2)])|0);
 $57=(($56+4)|0);
 $58=((HEAP32[(($57)>>2)])|0);
 $59=((HEAP32[(($1)>>2)])|0);
 $60=(($59+28)|0);
 $61=((HEAP32[(($60)>>2)])|0);
 $62=((($58)-($61))|0);
 $63=(($62)&65535);
 $64=(($56)|0);
 $65=((HEAP32[(($64)>>2)])|0);
 $66=(($65+($55<<1))|0);
 HEAP16[(($66)>>1)]=$63;
 $68=((HEAP32[(($50)>>2)])|0);
 $69=(($49)&65535);
 _lily_u16_write_1($68,$69);
 $70=((HEAP32[(($1)>>2)])|0);
 $71=(($70+22)|0);
 $72=$71;
 $73=(($new_type)&65535);
 HEAP16[(($72)>>1)]=$73;
 STACKTOP=sp;return;
}


function _lily_emit_variant_decompose($emit,$match_sym_spot,$variant_type){
 $emit=($emit)|0;
 $match_sym_spot=($match_sym_spot)|0;
 $variant_type=($variant_type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$var_iter_03_in=0,$i_02=0,$var_iter_03=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,label=0;

 $1=(($variant_type+10)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=((($2)-(1))&65535);
 $5=(($emit+16)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($emit+96)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9)&65535);
 _lily_u16_write_4($6,57,$10,$match_sym_spot,$4);
 $11=((($3)-(2))|0);
 $12=($11|0)>-1;
 if (!($12)) {
  return;
 }
 $13=(($emit+120)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+24)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+32)|0);
 $i_02=$11;$var_iter_03_in=$17;
 while(1) {


  $var_iter_03=((HEAP32[(($var_iter_03_in)>>2)])|0);
  $19=((HEAP32[(($5)>>2)])|0);
  $20=(($var_iter_03+8)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21)&65535);
  _lily_u16_write_1($19,$22);
  $23=(($var_iter_03)|0);
  $24=((($i_02)-(1))|0);
  $25=($i_02|0)>0;
  if ($25) {
   $i_02=$24;$var_iter_03_in=$23;
  } else {
   break;
  }
 }
 return;
}


function _lily_emit_add_match_case($emit,$pos){
 $emit=($emit)|0;
 $pos=($pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$i_02=0,$16=0,$17=0,$18=0,$19=0,$is_first_case_0=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$or_cond=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$45=0,$46=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0;
 var $65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$ret_0=0,label=0;

 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+16)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($emit+52)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=((($4&65535))>>>0)<((($7&65535))>>>0);
 L1: do {
  if ($8) {
   $9=(($emit+4)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $i_02=$5;
   while(1) {

    $16=(($10+($i_02<<2))|0);
    $17=((HEAP32[(($16)>>2)])|0);
    $18=($17|0)==1;
    $19=((($i_02)+(1))|0);
    if ($18) {
     $is_first_case_0=1;
     break L1;
    }
    $12=((HEAP16[(($6)>>1)])|0);
    $13=($12&65535);
    $14=($19|0)<($13|0);
    if ($14) {
     $i_02=$19;
    } else {
     $is_first_case_0=0;
     break;
    }
   }
  } else {
   $is_first_case_0=0;
  }
 } while(0);

 $20=((HEAP32[(($1)>>2)])|0);
 $21=(($20+40)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($emit+16)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($24+4)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=($22|0)!=($26|0);
 $or_cond=$27&$is_first_case_0;
 if ($or_cond) {
  $29=(($20+21)|0);
  HEAP8[($29)]=0;
 }
 $31=((($5)+($pos))|0);
 $32=(($emit+4)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=(($33+($31<<2))|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=($35|0)==0;
 if (!($36)) {
  $ret_0=0;

  return (($ret_0)|0);
 }
 HEAP32[(($34)>>2)]=1;
 if ($is_first_case_0) {
  $39=((HEAP32[(($23)>>2)])|0);
  _lily_u16_write_2($39,22,0);
  $40=(($emit)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=((HEAP32[(($23)>>2)])|0);
  $43=(($42+4)|0);
  $44=((HEAP32[(($43)>>2)])|0);
  $45=((($44)+(65535))|0);
  $46=(($45)&65535);
  _lily_u16_write_1($41,$46);
 }
 $48=((HEAP32[(($23)>>2)])|0);
 $49=(($48+4)|0);
 $50=((HEAP32[(($49)>>2)])|0);
 $51=((HEAP32[(($1)>>2)])|0);
 $52=(($51+28)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=((($50)-($53))|0);
 $55=(($54)&65535);
 $56=(($51+32)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 $58=((($57)+($pos))|0);
 $59=(($48)|0);
 $60=((HEAP32[(($59)>>2)])|0);
 $61=(($60+($58<<1))|0);
 HEAP16[(($61)>>1)]=$55;
 $62=((HEAP32[(($1)>>2)])|0);
 $63=(($62+4)|0);
 $64=((HEAP32[(($63)>>2)])|0);
 $65=(($emit+120)|0);
 $66=((HEAP32[(($65)>>2)])|0);
 $67=(($66+24)|0);
 $68=((HEAP32[(($67)>>2)])|0);
 $69=(($68+32)|0);
 $70=((HEAP32[(($69)>>2)])|0);
 $71=($64|0)==($70|0);
 if ($71) {
  $ret_0=1;

  return (($ret_0)|0);
 }
 _lily_hide_block_vars($66,$64);
 $ret_0=1;

 return (($ret_0)|0);
}


function _lily_emit_eval_match_expr($emit,$es){
 $emit=($emit)|0;
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$20=0,$21=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$41=0,$42=0,$43=0,$44=0,$45=0;
 var $47=0,$i_02=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$_lcssa=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0;
 var $65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$i_11=0,$74=0,$75=0,$76=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($es)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($emit+84)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _eval_enforce_value($emit,$2,0,17784);
 $5=(($2)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+12)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+6)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=$12&4;
 $14=(($13<<16)>>16)==0;
 if ($14) {
  label = 3;
 } else {
  $16=(($10+40)|0);
  $17=((HEAP16[(($16)>>1)])|0);
  $18=(($17<<16)>>16)==6;
  if ($18) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $20=(($emit+100)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  _lily_raise($21,1,16912,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $23=((HEAP32[(($5)>>2)])|0);
 $24=(($23+12)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=(($27+44)|0);
 $29=((HEAP16[(($28)>>1)])|0);
 $30=($29&65535);
 $31=(($emit+52)|0);
 $32=((HEAP16[(($31)>>1)])|0);
 $33=($32&65535);
 $34=((($33)+($30))|0);
 $35=(($emit+54)|0);
 $36=((HEAP16[(($35)>>1)])|0);
 $37=($36&65535);
 $38=($34|0)>($37|0);
 if ($38) {
  _grow_match_cases($emit);
 }
 $41=((HEAP16[(($31)>>1)])|0);
 $42=(($4+16)|0);
 HEAP16[(($42)>>1)]=$41;
 $43=(($29<<16)>>16)==0;
 $44=((HEAP16[(($31)>>1)])|0);
 if ($43) {
  $_lcssa=$44;
 } else {
  $45=(($emit+4)|0);
  $i_02=0;$47=$44;
  while(1) {


   $48=($47&65535);
   $49=((($48)+($i_02))|0);
   $50=((HEAP32[(($45)>>2)])|0);
   $51=(($50+($49<<2))|0);
   HEAP32[(($51)>>2)]=0;
   $52=((($i_02)+(1))|0);
   $53=($52|0)<($30|0);
   $54=((HEAP16[(($31)>>1)])|0);
   if ($53) {
    $i_02=$52;$47=$54;
   } else {
    $_lcssa=$54;
    break;
   }
  }
 }

 $55=((($_lcssa)+($29))&65535);
 HEAP16[(($31)>>1)]=$55;
 $56=(($emit+16)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 $58=(($57+4)|0);
 $59=((HEAP32[(($58)>>2)])|0);
 $60=((($59)+(4))|0);
 $61=(($4+32)|0);
 HEAP32[(($61)>>2)]=$60;
 $62=((HEAP32[(($56)>>2)])|0);
 $63=((($30)+(4))|0);
 _lily_u16_write_prep($62,$63);
 $64=((HEAP32[(($56)>>2)])|0);
 $65=(($emit+96)|0);
 $66=((HEAP32[(($65)>>2)])|0);
 $67=((HEAP32[(($66)>>2)])|0);
 $68=(($67)&65535);
 $69=((HEAP32[(($5)>>2)])|0);
 $70=(($69+8)|0);
 $71=((HEAP32[(($70)>>2)])|0);
 $72=(($71)&65535);
 _lily_u16_write_4($64,56,$68,$72,$29);
 $73=(($29<<16)>>16)==0;
 if ($73) {
  STACKTOP=sp;return;
 } else {
  $i_11=0;
 }
 while(1) {

  $74=((HEAP32[(($56)>>2)])|0);
  _lily_u16_write_1($74,0);
  $75=((($i_11)+(1))|0);
  $76=($75|0)<($30|0);
  if ($76) {
   $i_11=$75;
  } else {
   break;
  }
 }
 STACKTOP=sp;return;
}


function _eval_upvalue($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$i_01=0,$14=0,$15=0,$16=0,$17=0,$i_0_lcssa=0,$18=0,$19=0,$20=0;
 var $22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,label=0;

 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($emit+44)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($5<<16)>>16)==0;
 L1: do {
  if ($6) {
   $i_0_lcssa=0;
  } else {
   $7=(($emit+24)|0);
   $8=((HEAP32[(($7)>>2)])|0);
   $i_01=0;
   while(1) {

    $14=(($8+($i_01<<2))|0);
    $15=((HEAP32[(($14)>>2)])|0);
    $16=($15|0)==($3|0);
    $17=((($i_01)+(1))|0);
    if ($16) {
     $i_0_lcssa=$i_01;
     break L1;
    }
    $10=((HEAP16[(($4)>>1)])|0);
    $11=($10&65535);
    $12=($17|0)<($11|0);
    if ($12) {
     $i_01=$17;
    } else {
     $i_0_lcssa=$17;
     break;
    }
   }
  }
 } while(0);

 $18=((HEAP16[(($4)>>1)])|0);
 $19=($18&65535);
 $20=($i_0_lcssa|0)==($19|0);
 if ($20) {
  $22=((HEAP32[(($2)>>2)])|0);
  $23=$22;
  _checked_close_over_var($emit,$23);
 }
 $25=(($emit+80)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($26+20)|0);
 HEAP8[($27)]=1;
 $28=(($3+12)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=((_get_storage($emit,$29))|0);
 $31=(($emit+16)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=(($ast+8)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=(($34)&65535);
 $36=(($i_0_lcssa)&65535);
 $37=(($30+8)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=(($38)&65535);
 _lily_u16_write_4($32,58,$35,$36,$39);
 $40=$30;
 $41=(($ast)|0);
 HEAP32[(($41)>>2)]=$40;
 return;
}


function _eval_self($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;

 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+48)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=$4;
 $6=(($ast)|0);
 HEAP32[(($6)>>2)]=$5;
 return;
}


function _lily_emit_eval_expr($emit,$es){
 $emit=($emit)|0;
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;

 $1=(($es)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _eval_tree($emit,$2,0);
 $3=(($emit+92)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($4)+(1))|0);
 HEAP32[(($3)>>2)]=$5;
 return;
}


function _lily_emit_eval_interp_expr($emit,$es){
 $emit=($emit)|0;
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;

 $1=(($es)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _eval_tree($emit,$2,0);
 $3=((HEAP32[(($1)>>2)])|0);
 $4=(($3)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 return (($5)|0);
}


function _lily_emit_eval_expr_to_var($emit,$es,$var){
 $emit=($emit)|0;
 $es=($es)|0;
 $var=($var)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($es)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _eval_tree($emit,$2,0);
 $3=(($emit+92)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($4)+(1))|0);
 HEAP32[(($3)>>2)]=$5;
 $6=(($2)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+12)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+40)|0);
 $13=((HEAP16[(($12)>>1)])|0);
 $14=(($13<<16)>>16)==0;
 if (!($14)) {
  $16=(($emit+100)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  _lily_raise($17,1,15760,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$9,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $19=(($emit+16)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($2+8)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22)&65535);
 $24=((HEAP32[(($6)>>2)])|0);
 $25=(($24+8)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($26)&65535);
 $28=(($var+8)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=(($29)&65535);
 _lily_u16_write_4($20,0,$23,$27,$30);
 STACKTOP=sp;return;
}


function _lily_emit_eval_condition($emit,$es){
 $emit=($emit)|0;
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$switch=0,$13=0,$14=0,$15=0,$phitmp1=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$23=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,label=0;

 $1=(($es)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($emit+84)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+22)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 $8=(($2+4)|0);
 $9=$8;
 $10=((HEAP16[(($9)>>1)])|0);
 $11=$10&254;
 $switch=(($11<<16)>>16)==24;
 do {
  if ($switch) {
   $13=(($2+16)|0);
   $14=$13;
   $15=((HEAP16[(($14)>>1)])|0);
   $phitmp1=(($15<<16)>>16)==0;
   if ($phitmp1) {
    break;
   }
   $23=(($7<<16)>>16)==5;
   if ($23) {
    $28=(($emit+16)|0);
    $29=((HEAP32[(($28)>>2)])|0);
    $30=(($4+18)|0);
    $31=((HEAP16[(($30)>>1)])|0);
    _lily_u16_write_2($29,22,$31);
    return;
   } else {
    $25=(($emit)|0);
    $26=((HEAP32[(($25)>>2)])|0);
    _lily_u16_write_1($26,-1);
    return;
   }
  }
 } while(0);
 _eval_enforce_value($emit,$2,0,15232);
 $16=(($2)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17+12)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 _ensure_valid_condition_type($emit,$19);
 $20=(($7<<16)>>16)==5;
 $21=($20&1);
 _emit_jump_if($emit,$2,$21);
 return;
}


function _lily_emit_eval_lambda_body($emit,$es,$full_type){
 $emit=($emit)|0;
 $es=($es)|0;
 $full_type=($full_type)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$wanted_type_02=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$or_cond=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,label=0;

 $1=($full_type|0)==0;
 if ($1) {
  $7=1;$wanted_type_02=0;
 } else {
  $3=(($full_type+12)|0);
  $4=((HEAP32[(($3)>>2)])|0);
  $5=((HEAP32[(($4)>>2)])|0);
  $6=($5|0)!=0;
  $7=$6;$wanted_type_02=$5;
 }


 $8=(($es)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 _eval_tree($emit,$9,$wanted_type_02);
 $10=((HEAP32[(($8)>>2)])|0);
 $11=(($10)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=($12|0)!=0;
 $or_cond=$7&$13;
 if ($or_cond) {
  $15=(($emit+16)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=(($10+8)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=(($18)&65535);
  $20=(($12+8)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21)&65535);
  _lily_u16_write_3($16,27,$19,$22);
  return;
 }
 if ($7) {
  return;
 }
 HEAP32[(($11)>>2)]=0;
 return;
}


function _lily_emit_eval_return($emit,$es){
 $emit=($emit)|0;
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0,$45=0;
 var $46=0,$47=0,$48=0,$49=0,$50=0,$51=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($emit+60)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  $44=(($emit+80)|0);
  $45=((HEAP32[(($44)>>2)])|0);
  _write_pop_try_blocks_up_to($emit,$45);
  $46=(($emit+16)|0);
  $47=((HEAP32[(($46)>>2)])|0);
  $48=(($emit+96)|0);
  $49=((HEAP32[(($48)>>2)])|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $51=(($50)&65535);
  _lily_u16_write_2($47,28,$51);
  STACKTOP=sp;return;
 }
 $5=(($es)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 _eval_enforce_value($emit,$6,$2,14736);
 $7=(($6)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+12)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)==($2|0);
 do {
  if (!($11)) {
   $13=((_type_matchup($emit,$2,$6))|0);
   $14=($13|0)==0;
   if (!($14)) {
    break;
   }
   $16=(($6+8)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $18=(($emit+100)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=(($19+16)|0);
   HEAP32[(($20)>>2)]=$17;
   $21=((HEAP32[(($18)>>2)])|0);
   $22=((HEAP32[(($7)>>2)])|0);
   $23=(($22+12)|0);
   $24=((HEAP32[(($23)>>2)])|0);
   _lily_raise($21,1,14120,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$2,HEAP32[(((tempVarArgs)+(8))>>2)]=$24,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $26=(($emit+80)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 _write_pop_try_blocks_up_to($emit,$27);
 $28=(($emit+16)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=(($6+8)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=(($31)&65535);
 $33=((HEAP32[(($7)>>2)])|0);
 $34=(($33+8)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=(($35)&65535);
 _lily_u16_write_3($29,27,$32,$36);
 $37=((HEAP32[(($28)>>2)])|0);
 $38=(($37+4)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=(($emit+84)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=(($41+40)|0);
 HEAP32[(($42)>>2)]=$39;
 STACKTOP=sp;return;
}


function _lily_emit_update_function_block($emit,$self_type,$ret_type){
 $emit=($emit)|0;
 $self_type=($self_type)|0;
 $ret_type=($ret_type)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,label=0;

 $1=(($emit+60)|0);
 HEAP32[(($1)>>2)]=$ret_type;
 $2=($self_type|0)==0;
 if ($2) {
  return;
 }
 $4=((_get_storage($emit,$self_type))|0);
 $5=(($emit+84)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+48)|0);
 HEAP32[(($7)>>2)]=$4;
 $8=(($emit+16)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($emit+96)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12)&65535);
 $14=(($self_type)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15+40)|0);
 $17=((HEAP16[(($16)>>1)])|0);
 $18=(($4+8)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19)&65535);
 _lily_u16_write_4($9,52,$13,$17,$20);
 return;
}


function _lily_emit_raise($emit,$es){
 $emit=($emit)|0;
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($es)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _eval_enforce_value($emit,$2,0,13968);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($emit+120)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((_lily_find_class($10,0,13920))|0);
 $12=((_lily_class_greater_eq($11,$8))|0);
 $13=($12|0)==0;
 if ($13) {
  $15=(($emit+100)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=(($8+12)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  _lily_raise($16,1,13816,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$18,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $20=(($emit+16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($2+8)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($23)&65535);
 $25=((HEAP32[(($3)>>2)])|0);
 $26=(($25+8)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=(($27)&65535);
 _lily_u16_write_3($21,51,$24,$28);
 $29=((HEAP32[(($20)>>2)])|0);
 $30=(($29+4)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=(($emit+84)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=(($33+40)|0);
 HEAP32[(($34)>>2)]=$31;
 STACKTOP=sp;return;
}


function _lily_reset_main($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=(($emit+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 HEAP32[(($3)>>2)]=0;
 return;
}


function _lily_prepare_main($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($emit+76)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+36)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($emit+16)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 _lily_u16_write_prep($10,32);
 $11=((HEAP32[(($9)>>2)])|0);
 _lily_u16_write_1($11,65);
 $12=((HEAP32[(($9)>>2)])|0);
 $13=(($12)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($4+28)|0);
 HEAP32[(($15)>>2)]=$14;
 $16=(($8)&65535);
 $17=(($4+38)|0);
 HEAP16[(($17)>>1)]=$16;
 return;
}


function _add_call_state($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,label=0;

 $1=((_lily_malloc(32))|0);
 $2=$1;
 $3=(($emit+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if (!($5)) {
  $7=(($4+4)|0);
  HEAP32[(($7)>>2)]=$2;
 }
 $9=((HEAP32[(($3)>>2)])|0);
 $10=$1;
 HEAP32[(($10)>>2)]=$9;
 $11=(($1+4)|0);
 $12=$11;
 HEAP32[(($12)>>2)]=0;
 $13=(($1+8)|0);
 $14=$13;
 HEAP32[(($14)>>2)]=0;
 $15=(($1+16)|0);
 $16=$15;
 HEAP32[(($16)>>2)]=0;
 HEAP32[(($3)>>2)]=$2;
 return;
}


function _add_storage($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$17=0,$18=0,$19=0,$21=0,$22=0,label=0;

 $1=((_lily_malloc(20))|0);
 $2=$1;
 $3=(($1+12)|0);
 $4=$3;
 HEAP32[(($4)>>2)]=0;
 $5=$1;
 HEAP32[(($5)>>2)]=0;
 $6=(($1+16)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=0;
 $8=(($1+6)|0);
 $9=$8;
 HEAP16[(($9)>>1)]=0;
 $10=(($1+4)|0);
 $11=$10;
 HEAP16[(($11)>>1)]=2;
 $12=(($emit+64)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=($13|0)==0;
 if ($14) {
  HEAP32[(($12)>>2)]=$2;
  $21=(($emit+72)|0);
  HEAP32[(($21)>>2)]=$2;
  $22=(($emit+68)|0);
  HEAP32[(($22)>>2)]=$2;
  return;
 } else {
  $17=(($emit+72)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=(($18)|0);
  HEAP32[(($19)>>2)]=$2;
  $21=(($emit+72)|0);
  HEAP32[(($21)>>2)]=$2;
  $22=(($emit+68)|0);
  HEAP32[(($22)>>2)]=$2;
  return;
 }
}


function _find_deepest_loop($emit){
 $emit=($emit)|0;
 var $1=0,$block_01=0,$2=0,$4=0,$block_0=0,$5=0,$block_02=0,$6=0,$7=0,$8=0,$_off=0,$switch=0,$10=0,$ret_0=0,label=0;

 $1=(($emit+84)|0);
 $block_01=((HEAP32[(($1)>>2)])|0);
 $2=($block_01|0)==0;
 if ($2) {
  $ret_0=0;

  return (($ret_0)|0);
 } else {
  $block_02=$block_01;
 }
 while(1) {

  $6=(($block_02+22)|0);
  $7=$6;
  $8=((HEAP16[(($7)>>1)])|0);
  $_off=((($8)-(4))&65535);
  $switch=((($_off&65535))>>>0)<((3)>>>0);
  if ($switch) {
   $ret_0=$block_02;
   label = 5;
   break;
  }
  $10=((($8&65535))>>>0)>((11)>>>0);
  if ($10) {
   $ret_0=0;
   label = 5;
   break;
  }
  $4=(($block_02+56)|0);
  $block_0=((HEAP32[(($4)>>2)])|0);
  $5=($block_0|0)==0;
  if ($5) {
   $ret_0=0;
   label = 5;
   break;
  } else {
   $block_02=$block_0;
  }
 }
 if ((label|0) == 5) {

  return (($ret_0)|0);
 }
  return 0;
}


function _write_pop_try_blocks_up_to($emit,$stop_block){
 $emit=($emit)|0;
 $stop_block=($stop_block)|0;
 var $1=0,$block_iter_02=0,$2=0,$block_iter_04=0,$try_count_03=0,$3=0,$4=0,$5=0,$6=0,$7=0,$_try_count_0=0,$8=0,$block_iter_0=0,$9=0,$10=0,$11=0,$i_01=0,$13=0,$14=0,$15=0;
 var label=0;

 $1=(($emit+84)|0);
 $block_iter_02=((HEAP32[(($1)>>2)])|0);
 $2=($block_iter_02|0)==($stop_block|0);
 if ($2) {
  return;
 } else {
  $try_count_03=0;$block_iter_04=$block_iter_02;
 }
 while(1) {


  $3=(($block_iter_04+22)|0);
  $4=$3;
  $5=((HEAP16[(($4)>>1)])|0);
  $6=(($5<<16)>>16)==7;
  $7=($6&1);
  $_try_count_0=((($7)+($try_count_03))|0);
  $8=(($block_iter_04+56)|0);
  $block_iter_0=((HEAP32[(($8)>>2)])|0);
  $9=($block_iter_0|0)==($stop_block|0);
  if ($9) {
   break;
  } else {
   $try_count_03=$_try_count_0;$block_iter_04=$block_iter_0;
  }
 }
 $10=($_try_count_0|0)>0;
 if (!($10)) {
  return;
 }
 $11=(($emit+16)|0);
 $i_01=0;
 while(1) {

  $13=((HEAP32[(($11)>>2)])|0);
  _lily_u16_write_1($13,48);
  $14=((($i_01)+(1))|0);
  $15=($14|0)<($_try_count_0|0);
  if ($15) {
   $i_01=$14;
  } else {
   break;
  }
 }
 return;
}


function _inject_patch_into_block($emit,$block,$patch){
 $emit=($emit)|0;
 $block=($block)|0;
 $patch=($patch)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_01=0,$13=0,$_02=0,$14=0,$15=0,$16=0,$17=0,$_0=0,$18=0,label=0;

 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==($block|0);
 $4=(($emit)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 if ($3) {
  _lily_u16_write_1($5,$patch);
  return;
 }
 $8=(($block+52)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+12)|0);
 $11=((HEAP16[(($10)>>1)])|0);
 $12=($11&65535);
 _lily_u16_inject($5,$12,$patch);
 $_01=((HEAP32[(($8)>>2)])|0);
 $13=($_01|0)==0;
 if ($13) {
  return;
 } else {
  $_02=$_01;
 }
 while(1) {

  $14=(($_02+12)|0);
  $15=((HEAP16[(($14)>>1)])|0);
  $16=((($15)+(1))&65535);
  HEAP16[(($14)>>1)]=$16;
  $17=(($_02+52)|0);
  $_0=((HEAP32[(($17)>>2)])|0);
  $18=($_0|0)==0;
  if ($18) {
   break;
  } else {
   $_02=$_0;
  }
 }
 return;
}


function _get_storage($emit,$type){
 $emit=($emit)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$storage_iter_06=0,$6=0,$storage_iter_07=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$24=0,$26=0,$28=0,$29=0,$30=0,$33=0,$storage_iter_0=0,$34=0,$storage_iter_03=0,$35=0,$36=0,$37=0,$38=0,$41=0,$42=0,$43=0,label=0;

 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=(($emit+92)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $storage_iter_06=((HEAP32[(($3)>>2)])|0);
 $6=($storage_iter_06|0)==0;
 L1: do {
  if ($6) {
   $storage_iter_03=0;
  } else {
   $storage_iter_07=$storage_iter_06;
   while(1) {

    $7=(($storage_iter_07+12)|0);
    $8=((HEAP32[(($7)>>2)])|0);
    $9=($8|0)==0;
    if ($9) {
     break;
    }
    $26=($8|0)==($type|0);
    if ($26) {
     $28=(($storage_iter_07+16)|0);
     $29=((HEAP32[(($28)>>2)])|0);
     $30=($29|0)==($5|0);
     if (!($30)) {
      label = 7;
      break;
     }
    }
    $33=(($storage_iter_07)|0);
    $storage_iter_0=((HEAP32[(($33)>>2)])|0);
    $34=($storage_iter_0|0)==0;
    if ($34) {
     $storage_iter_03=0;
     break L1;
    } else {
     $storage_iter_07=$storage_iter_0;
    }
   }
   if ((label|0) == 7) {
    HEAP32[(($28)>>2)]=$5;
    $storage_iter_03=$storage_iter_07;
    break;
   }
   HEAP32[(($7)>>2)]=$type;
   $11=(($emit+80)|0);
   $12=((HEAP32[(($11)>>2)])|0);
   $13=(($12+36)|0);
   $14=((HEAP32[(($13)>>2)])|0);
   $15=(($storage_iter_07+8)|0);
   HEAP32[(($15)>>2)]=$14;
   $16=((HEAP32[(($11)>>2)])|0);
   $17=(($16+36)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   $19=((($18)+(1))|0);
   HEAP32[(($17)>>2)]=$19;
   $20=(($storage_iter_07)|0);
   $21=((HEAP32[(($20)>>2)])|0);
   $22=($21|0)==0;
   if ($22) {
    $storage_iter_03=$storage_iter_07;
    break;
   }
   $24=(($emit+68)|0);
   HEAP32[(($24)>>2)]=$21;
   $storage_iter_03=$storage_iter_07;
  }
 } while(0);

 $35=(($storage_iter_03+16)|0);
 HEAP32[(($35)>>2)]=$5;
 $36=(($storage_iter_03)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=($37|0)==0;
 if (!($38)) {
  $41=(($storage_iter_03+6)|0);
  $42=((HEAP16[(($41)>>1)])|0);
  $43=$42&-3;
  HEAP16[(($41)>>1)]=$43;
  return (($storage_iter_03)|0);
 }
 _add_storage($emit);
 $41=(($storage_iter_03+6)|0);
 $42=((HEAP16[(($41)>>1)])|0);
 $43=$42&-3;
 HEAP16[(($41)>>1)]=$43;
 return (($storage_iter_03)|0);
}


function _leave_function($emit,$block){
 $emit=($emit)|0;
 $block=($block)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0,$45=0;
 var $46=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$66=0,$67=0,$block_pn=0,$last_func_block_0_in=0;
 var $last_func_block_0=0,$70=0,$71=0,$72=0,$73=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0;
 var $91=0,$92=0,$93=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$126=0,$127=0,$129=0,$130=0,$131=0,$133=0,$134=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($block+22)|0);
 $2=$1;
 $3=((HEAP16[(($2)>>1)])|0);
 if ((((($3<<16)>>16))|0)==((14)|0)) {
  $35=(($emit+56)|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=(($36+12)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=(($38+12)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=(($emit+60)|0);
  HEAP32[(($42)>>2)]=$41;
  label = 6;
 } else if ((((($3<<16)>>16))|0)==((13)|0)) {
  $5=(($block+44)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  $7=(($6+6)|0);
  $8=((HEAP16[(($7)>>1)])|0);
  $9=$8&192;
  $10=(($9<<16)>>16)==0;
  if (!($10)) {
   $12=($8&65535)>>>7;
   $13=$12&1;
   $14=(((54)-($13))&65535);
   $15=(($block+24)|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=(($emit+16)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   $19=(($18)|0);
   $20=((HEAP32[(($19)>>2)])|0);
   $21=(($20+($16<<1))|0);
   HEAP16[(($21)>>1)]=$14;
  }
  $23=(($emit+16)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=(($emit+96)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=(($27)&65535);
  $29=(($block+48)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $31=(($30+8)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=(($32)&65535);
  _lily_u16_write_3($24,27,$28,$33);
 } else {
  label = 6;
 }
 do {
  if ((label|0) == 6) {
   $44=(($emit+60)|0);
   $45=((HEAP32[(($44)>>2)])|0);
   $46=($45|0)==0;
   if ($46) {
    $48=(($emit+16)|0);
    $49=((HEAP32[(($48)>>2)])|0);
    $50=(($emit+96)|0);
    $51=((HEAP32[(($50)>>2)])|0);
    $52=((HEAP32[(($51)>>2)])|0);
    $53=(($52)&65535);
    _lily_u16_write_2($49,28,$53);
    break;
   }
   $55=((HEAP16[(($2)>>1)])|0);
   $56=(($55<<16)>>16)==12;
   if (!($56)) {
    break;
   }
   $58=(($block+40)|0);
   $59=((HEAP32[(($58)>>2)])|0);
   $60=(($emit+16)|0);
   $61=((HEAP32[(($60)>>2)])|0);
   $62=(($61+4)|0);
   $63=((HEAP32[(($62)>>2)])|0);
   $64=($59|0)==($63|0);
   if ($64) {
    break;
   }
   $66=(($emit+100)|0);
   $67=((HEAP32[(($66)>>2)])|0);
   _lily_raise($67,1,5368,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 _finalize_function_block($emit,$block);
 $block_pn=$block;
 while(1) {

  $last_func_block_0_in=(($block_pn+56)|0);
  $last_func_block_0=((HEAP32[(($last_func_block_0_in)>>2)])|0);
  $70=(($last_func_block_0+22)|0);
  $71=$70;
  $72=((HEAP16[(($71)>>1)])|0);
  $73=((($72&65535))>>>0)<((12)>>>0);
  if ($73) {
   $block_pn=$last_func_block_0;
  } else {
   break;
  }
 }
 $75=(($last_func_block_0+8)|0);
 $76=((HEAP32[(($75)>>2)])|0);
 $77=(($emit+84)|0);
 $78=((HEAP32[(($77)>>2)])|0);
 $79=(($78+22)|0);
 $80=$79;
 $81=((HEAP16[(($80)>>1)])|0);
 if ((((($81<<16)>>16))|0)==((13)|0)) {
  $83=(($78+44)|0);
  $84=((HEAP32[(($83)>>2)])|0);
  $85=(($block+8)|0);
  $86=((HEAP32[(($85)>>2)])|0);
  $87=(($emit+120)|0);
  $88=((HEAP32[(($87)>>2)])|0);
  $89=(($88+24)|0);
  $90=((HEAP32[(($89)>>2)])|0);
  $91=(($90+32)|0);
  HEAP32[(($91)>>2)]=$86;
  $92=((HEAP32[(($87)>>2)])|0);
  $93=((HEAP32[(($85)>>2)])|0);
  _lily_add_class_method($92,$84,$93);
 } else if (!((((($81<<16)>>16))|0)==((15)|0))) {
  $95=(($block+8)|0);
  $96=((HEAP32[(($95)>>2)])|0);
  $97=(($emit+120)|0);
  $98=((HEAP32[(($97)>>2)])|0);
  $99=(($98+24)|0);
  $100=((HEAP32[(($99)>>2)])|0);
  $101=(($100+32)|0);
  HEAP32[(($101)>>2)]=$96;
 }
 $103=(($emit+56)|0);
 HEAP32[(($103)>>2)]=$76;
 $104=(($76+12)|0);
 $105=((HEAP32[(($104)>>2)])|0);
 $106=(($105+12)|0);
 $107=((HEAP32[(($106)>>2)])|0);
 $108=((HEAP32[(($107)>>2)])|0);
 $109=(($emit+60)|0);
 HEAP32[(($109)>>2)]=$108;
 $110=(($emit+80)|0);
 HEAP32[(($110)>>2)]=$last_func_block_0;
 $111=(($block+24)|0);
 $112=((HEAP32[(($111)>>2)])|0);
 $113=(($emit+16)|0);
 $114=((HEAP32[(($113)>>2)])|0);
 $115=(($114+4)|0);
 HEAP32[(($115)>>2)]=$112;
 $116=((HEAP16[(($2)>>1)])|0);
 $117=(($116<<16)>>16)==15;
 if ($117) {
  STACKTOP=sp;return;
 }
 $119=(($emit+90)|0);
 $120=((HEAP16[(($119)>>1)])|0);
 $121=((($120)-(1))&65535);
 HEAP16[(($119)>>1)]=$121;
 $122=(($block+20)|0);
 $123=((HEAP8[($122)])|0);
 $124=(($123<<24)>>24)==1;
 if (!($124)) {
  STACKTOP=sp;return;
 }
 $126=((HEAP16[(($71)>>1)])|0);
 $127=(($126<<16)>>16)==15;
 if ($127) {
  STACKTOP=sp;return;
 }
 $129=(($last_func_block_0+56)|0);
 $130=((HEAP32[(($129)>>2)])|0);
 $131=($130|0)==0;
 if ($131) {
  STACKTOP=sp;return;
 }
 $133=((HEAP32[(($110)>>2)])|0);
 $134=(($133+20)|0);
 HEAP8[($134)]=1;
 STACKTOP=sp;return;
}


function _eval_enforce_value($emit,$ast,$expect,$message){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 $message=($message)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 _eval_tree($emit,$ast,$expect);
 $1=(($emit+92)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(1))|0);
 HEAP32[(($1)>>2)]=$3;
 $4=(($ast)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 if (!($6)) {
  STACKTOP=sp;return;
 }
 $8=(($emit+100)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 _lily_raise($9,1,$message,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _grow_match_cases($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;

 $1=(($emit+54)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=$2<<1;
 HEAP16[(($1)>>1)]=$3;
 $4=(($emit+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5;
 $7=($3&65535);
 $8=$7<<2;
 $9=((_lily_realloc($6,$8))|0);
 $10=$9;
 HEAP32[(($4)>>2)]=$10;
 return;
}


function _checked_close_over_var($emit,$var){
 $emit=($emit)|0;
 $var=($var)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0;
 var $25=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($emit+80)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+22)|0);
 $4=$3;
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($5<<16)>>16)==12;
 do {
  if ($6) {
   $8=(($2+56)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $10=(($9+22)|0);
   $11=$10;
   $12=((HEAP16[(($11)>>1)])|0);
   $13=(($12<<16)>>16)==12;
   if (!($13)) {
    break;
   }
   $15=(($var+12)|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=(($16+6)|0);
   $18=((HEAP16[(($17)>>1)])|0);
   $19=$18&4;
   $20=(($19<<16)>>16)==0;
   if ($20) {
    break;
   }
   $22=(($emit+100)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   _lily_raise($23,1,5456,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $25=$var;
 _close_over_sym($emit,$25);
 STACKTOP=sp;return;
}


function _eval_tree($emit,$ast,$expect){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 var $1=0,$2=0,$3=0,$4=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$23=0,$31=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$42=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$53=0,$54=0,$55=0,$56=0,$57=0,$60=0,$61=0,$62=0,$63=0,$64=0;
 var $65=0,$66=0,$67=0,label=0;

 $1=(($ast+4)|0);
 $2=$1;
 $3=((HEAP16[(($2)>>1)])|0);
 $4=$3&255;
 switch ((($4<<16)>>16)) {
 case 0: {
  _eval_call($emit,$ast,$expect);
  return;
  break;
 }
 case 26: {
  $11=((($3&65535))>>>0)>((5375)>>>0);
  if ($11) {
   $13=(($ast+20)|0);
   $14=$13;
   $15=((HEAP32[(($14)>>2)])|0);
   $16=(($15+4)|0);
   $17=$16;
   $18=((HEAP16[(($17)>>1)])|0);
   $19=$18&253;
   $20=(($19<<16)>>16)==5;
   do {
    if ($20) {
     _eval_assign($emit,$ast);
    } else {
     $23=$18&255;
     if ((((($23<<16)>>16))|0)==((1)|0)) {
      _eval_sub_assign($emit,$ast);
      break;
     } else if ((((($23<<16)>>16))|0)==((8)|0)) {
      _eval_oo_assign($emit,$ast);
      break;
     } else if ((((($23<<16)>>16))|0)==((13)|0)) {
      _eval_property_assign($emit,$ast);
      break;
     } else if ((((($23<<16)>>16))|0)==((21)|0)) {
      _eval_upvalue_assign($emit,$ast);
      break;
     } else {
      _eval_assign($emit,$ast);
      break;
     }
    }
   } while(0);
   _assign_post_check($emit,$ast);
   return;
  }
  $31=($3&65535)>>>8;
  if ((((($31<<16)>>16))|0)==((19)|0)|(((($31<<16)>>16))|0)==((18)|0)) {
   _eval_logical_op($emit,$ast);
   return;
  } else if ((((($31<<16)>>16))|0)==((20)|0)) {
   _eval_func_pipe($emit,$ast,$expect);
   return;
  } else {
   $35=(($ast+20)|0);
   $36=$35;
   $37=((HEAP32[(($36)>>2)])|0);
   $38=(($37+4)|0);
   $39=$38;
   $40=((HEAP16[(($39)>>1)])|0);
   $41=$40&255;
   $42=(($41<<16)>>16)==5;
   if (!($42)) {
    _eval_tree($emit,$37,0);
   }
   $45=(($ast+24)|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $47=(($46+4)|0);
   $48=$47;
   $49=((HEAP16[(($48)>>1)])|0);
   $50=$49&255;
   $51=(($50<<16)>>16)==5;
   if (!($51)) {
    $53=((HEAP32[(($36)>>2)])|0);
    $54=(($53)|0);
    $55=((HEAP32[(($54)>>2)])|0);
    $56=(($55+12)|0);
    $57=((HEAP32[(($56)>>2)])|0);
    _eval_tree($emit,$46,$57);
   }
   _emit_binary_op($emit,$ast);
   return;
  }
  break;
 }
 case 14: {
  _eval_variant($emit,$ast,$expect);
  return;
  break;
 }
 case 15: {
  _eval_lambda($emit,$ast,$expect);
  return;
  break;
 }
 case 20: {
  _eval_self($emit,$ast);
  return;
  break;
 }
 case 21: {
  _eval_upvalue($emit,$ast);
  return;
  break;
 }
 case 7:case 6:case 19:case 18:case 17: {
  _emit_nonlocal_var($emit,$ast);
  return;
  break;
 }
 case 24: {
  _emit_boolean($emit,$ast);
  return;
  break;
 }
 case 9: {
  _eval_unary_op($emit,$ast);
  return;
  break;
 }
 case 22: {
  _eval_interpolation($emit,$ast);
  return;
  break;
 }
 case 2: {
  _eval_build_list($emit,$ast,$expect);
  return;
  break;
 }
 case 3: {
  _eval_build_hash($emit,$ast,$expect);
  return;
  break;
 }
 case 25: {
  _emit_integer($emit,$ast);
  return;
  break;
 }
 case 12: {
  _eval_build_tuple($emit,$ast,$expect);
  return;
  break;
 }
 case 1: {
  _eval_subscript($emit,$ast);
  return;
  break;
 }
 case 11: {
  _eval_typecast($emit,$ast);
  return;
  break;
 }
 case 8: {
  _eval_oo_access($emit,$ast);
  return;
  break;
 }
 case 13: {
  _eval_property($emit,$ast);
  return;
  break;
 }
 case 4: {
  $60=(($ast+24)|0);
  $61=((HEAP32[(($60)>>2)])|0);
  _eval_tree($emit,$61,$expect);
  $62=(($61+12)|0);
  $63=((HEAP16[(($62)>>1)])|0);
  $64=(($ast+12)|0);
  HEAP16[(($64)>>1)]=$63;
  $65=(($61)|0);
  $66=((HEAP32[(($65)>>2)])|0);
  $67=(($ast)|0);
  HEAP32[(($67)>>2)]=$66;
  return;
  break;
 }
 case 16: {
  _emit_literal($emit,$ast);
  return;
  break;
 }
 default: {
  return;
 }
 }
}


function _ensure_valid_condition_type($emit,$type){
 $emit=($emit)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($type)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 switch ((($4<<16)>>16)) {
 case 7:case 4:case 2:case 1:case 0: {
  STACKTOP=sp;return;
  break;
 }
 default: {
 }
 }
 $6=(($emit+100)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 _lily_raise($7,1,13720,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$type,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _emit_jump_if($emit,$ast,$jump_on){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $jump_on=($jump_on)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;

 $1=(($emit+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($jump_on)&65535);
 $4=(($ast)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+8)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7)&65535);
 _lily_u16_write_4($2,23,$3,$8,0);
 $9=(($emit)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP32[(($1)>>2)])|0);
 $12=(($11+4)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((($13)+(65535))|0);
 $15=(($14)&65535);
 _lily_u16_write_1($10,$15);
 return;
}


function _type_matchup($emit,$want_type,$right){
 $emit=($emit)|0;
 $want_type=($want_type)|0;
 $right=($right)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$not_=0,$_=0,label=0;

 $1=(($right)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==($want_type|0);
 if ($5) {
  return ((1)|0);
 } else {
  $7=(($emit+108)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=((_lily_ts_type_greater_eq($8,$want_type,$4))|0);
  $not_=($9|0)!=0;
  $_=($not_&1);
  return (($_)|0);
 }
  return 0;
}


function _finalize_function_block($emit,$function_block){
 $emit=($emit)|0;
 $function_block=($function_block)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$storage_iter_01=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $var_iter_03=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$storage_iter_02=0,$38=0,$39=0,$storage_iter_0=0;
 var $40=0,$41=0,$42=0,$43=0,$44=0,label=0;

 $1=((_create_code_block_for($emit,$function_block))|0);
 $2=(($emit+80)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+36)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($function_block)|0);
 $7=(($emit+90)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=((($8&65535))>>>0)>((1)>>>0);
 do {
  if ($9) {
   $12=(($function_block+8)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=(($emit+120)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=(($15+24)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $18=(($17+32)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=($19|0)==($13|0);
   if ($20) {
    break;
   } else {
    $var_iter_03=$19;
   }
   while(1) {

    $21=(($var_iter_03)|0);
    $22=((HEAP32[(($21)>>2)])|0);
    $23=(($var_iter_03+6)|0);
    $24=((HEAP16[(($23)>>1)])|0);
    $25=$24&64;
    $26=(($25<<16)>>16)==0;
    if ($26) {
     $28=(($var_iter_03+16)|0);
     $29=((HEAP32[(($28)>>2)])|0);
     _lily_free($29);
     $30=$var_iter_03;
     _lily_free($30);
    } else {
     $32=((HEAP32[(($14)>>2)])|0);
     $33=(($32+28)|0);
     $34=((HEAP32[(($33)>>2)])|0);
     HEAP32[(($21)>>2)]=$34;
     $35=((HEAP32[(($14)>>2)])|0);
     $36=(($35+28)|0);
     HEAP32[(($36)>>2)]=$var_iter_03;
    }
    $37=($22|0)==($13|0);
    if ($37) {
     break;
    } else {
     $var_iter_03=$22;
    }
   }
  }
 } while(0);
 $storage_iter_01=((HEAP32[(($6)>>2)])|0);
 $10=($storage_iter_01|0)==0;
 if ($10) {
  $41=((HEAP32[(($6)>>2)])|0);
  $42=(($emit+68)|0);
  HEAP32[(($42)>>2)]=$41;
  $43=(($5)&65535);
  $44=(($1+38)|0);
  HEAP16[(($44)>>1)]=$43;
  return;
 } else {
  $storage_iter_02=$storage_iter_01;
 }
 while(1) {

  $38=(($storage_iter_02+12)|0);
  HEAP32[(($38)>>2)]=0;
  $39=(($storage_iter_02)|0);
  $storage_iter_0=((HEAP32[(($39)>>2)])|0);
  $40=($storage_iter_0|0)==0;
  if ($40) {
   break;
  } else {
   $storage_iter_02=$storage_iter_0;
  }
 }
 $41=((HEAP32[(($6)>>2)])|0);
 $42=(($emit+68)|0);
 HEAP32[(($42)>>2)]=$41;
 $43=(($5)&65535);
 $44=(($1+38)|0);
 HEAP16[(($44)>>1)]=$43;
 return;
}


function _close_over_sym($emit,$sym){
 $emit=($emit)|0;
 $sym=($sym)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,label=0;

 $1=(($emit+44)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($emit+46)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($2<<16)>>16)==(($4<<16)>>16);
 if ($5) {
  _grow_closed_syms($emit);
 }
 $8=((HEAP16[(($1)>>1)])|0);
 $9=($8&65535);
 $10=(($emit+24)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+($9<<2))|0);
 HEAP32[(($12)>>2)]=$sym;
 $13=((HEAP16[(($1)>>1)])|0);
 $14=((($13)+(1))&65535);
 HEAP16[(($1)>>1)]=$14;
 $15=(($sym+6)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=$16|4;
 HEAP16[(($15)>>1)]=$17;
 $18=(($emit+80)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+20)|0);
 HEAP8[($20)]=1;
 return;
}


function _emit_nonlocal_var($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$opcode_0=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$44=0,$45=0,label=0;

 $1=(($ast+4)|0);
 $2=$1;
 $3=((HEAP16[(($2)>>1)])|0);
 $4=$3&255;
 $5=($4&65535);
 if (((($5|0))|0)==((7)|0)) {
  $opcode_0=40;
 } else if (((($5|0))|0)==((19)|0)) {
  $7=(($ast+20)|0);
  $8=$7;
  $9=((HEAP32[(($8)>>2)])|0);
  _ensure_valid_scope($emit,$9);
  label = 3;
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $opcode_0=42;
 }

 $12=(($ast+20)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+12)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((_get_storage($emit,$16))|0);
 $18=($opcode_0|0)==40;
 if (!($18)) {
  $20=(($17+6)|0);
  $21=((HEAP16[(($20)>>1)])|0);
  $22=$21|2;
  HEAP16[(($20)>>1)]=$22;
 }
 $24=((HEAP32[(($13)>>2)])|0);
 $25=(($24+6)|0);
 $26=((HEAP16[(($25)>>1)])|0);
 $27=$26&256;
 $28=(($27<<16)>>16)==0;
 if ($28) {
  $30=(($emit+16)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=(($opcode_0)&65535);
  $33=(($ast+8)|0);
  $34=((HEAP32[(($33)>>2)])|0);
  $35=(($34)&65535);
  $36=(($24+8)|0);
  $37=((HEAP32[(($36)>>2)])|0);
  $38=(($37)&65535);
  $39=(($17+8)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=(($40)&65535);
  _lily_u16_write_4($31,$32,$35,$38,$41);
  $44=$17;
  $45=(($ast)|0);
  HEAP32[(($45)>>2)]=$44;
  return;
 } else {
  _emit_create_function($emit,$24,$17);
  $44=$17;
  $45=(($ast)|0);
  HEAP32[(($45)>>2)]=$44;
  return;
 }
}


function _emit_literal($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,label=0;

 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((_get_storage($emit,$3))|0);
 $5=(($emit+16)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($ast+8)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8)&65535);
 $10=(($ast+16)|0);
 $11=$10;
 $12=((HEAP16[(($11)>>1)])|0);
 $13=(($4+8)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14)&65535);
 _lily_u16_write_4($6,42,$9,$12,$15);
 $16=$4;
 $17=(($ast)|0);
 HEAP32[(($17)>>2)]=$16;
 return;
}


function _emit_integer($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+48)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+24)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((_get_storage($emit,$6))|0);
 $8=(($emit+16)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($ast+8)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11)&65535);
 $13=(($ast+16)|0);
 $14=$13;
 $15=((HEAP16[(($14)>>1)])|0);
 $16=(($7+8)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17)&65535);
 _lily_u16_write_4($9,43,$12,$15,$18);
 $19=$7;
 $20=(($ast)|0);
 HEAP32[(($20)>>2)]=$19;
 return;
}


function _emit_boolean($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+64)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+24)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((_get_storage($emit,$6))|0);
 $8=(($emit+16)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($ast+8)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11)&65535);
 $13=(($ast+16)|0);
 $14=$13;
 $15=((HEAP16[(($14)>>1)])|0);
 $16=(($7+8)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17)&65535);
 _lily_u16_write_4($9,44,$12,$15,$18);
 $19=$7;
 $20=(($ast)|0);
 HEAP32[(($20)>>2)]=$19;
 return;
}


function _eval_call($emit,$ast,$expect){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 var $p=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$10=0,$11=0,$12=0,$13=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $p=((sp)|0);
 $1=(($ast+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=$3;
 $5=((HEAP16[(($4)>>1)])|0);
 $6=$5&255;
 $7=(($6<<16)>>16)==14;
 if ($7) {
  _eval_variant($emit,$ast,$expect);
  STACKTOP=sp;return;
 } else {
  $10=((_begin_call($emit,$ast))|0);
  $11=(($emit+108)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  _lily_ts_scope_save($12,$p);
  _eval_verify_call_args($emit,$10,$expect);
  _write_call($emit,$10);
  _end_call($emit,$10);
  $13=((HEAP32[(($11)>>2)])|0);
  _lily_ts_scope_restore($13,$p);
  STACKTOP=sp;return;
 }
}


function _eval_assign($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$64=0,$65=0;
 var $67=0,$68=0,$69=0,$70=0,$not_=0,$_=0,$72=0,$73=0,$74=0,$75=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$85=0,$86=0,$right_sym_0=0,$88=0;
 var $89=0,$91=0,$92=0,$93=0,$94=0,$96=0,$97=0,$98=0,$99=0,$100=0,$102=0,$pos_0=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0;
 var $113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$__=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$131=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+4)|0);
 $5=$4;
 $6=((HEAP16[(($5)>>1)])|0);
 $7=$6&255;
 if (!((((($7<<16)>>16))|0)==((7)|0)|(((($7<<16)>>16))|0)==((5)|0))) {
  $9=(($ast+8)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=(($emit+100)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=(($12+16)|0);
  HEAP32[(($13)>>2)]=$10;
  $14=((HEAP32[(($11)>>2)])|0);
  $15=(($ast+4)|0);
  $16=$15;
  $17=((HEAP16[(($16)>>1)])|0);
  $18=($17&65535)>>>8;
  $19=($18&65535);
  $20=((_opname($19))|0);
  _lily_raise($14,1,5864,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$20,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $22=(($ast+24)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=((HEAP32[(($2)>>2)])|0);
 $25=(($24)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($26+12)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 _eval_tree($emit,$23,$28);
 $29=((HEAP32[(($2)>>2)])|0);
 $30=(($29)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=(($31+12)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=($33|0)==0;
 if ($34) {
  $36=((HEAP32[(($22)>>2)])|0);
  $37=(($36)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=(($38+12)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  HEAP32[(($32)>>2)]=$40;
 }
 $42=((HEAP32[(($2)>>2)])|0);
 $43=(($42)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=(($44+6)|0);
 $46=((HEAP16[(($45)>>1)])|0);
 $47=$46&-2;
 HEAP16[(($45)>>1)]=$47;
 $48=((HEAP32[(($2)>>2)])|0);
 $49=(($48)|0);
 $50=((HEAP32[(($49)>>2)])|0);
 $51=((HEAP32[(($22)>>2)])|0);
 $52=(($51)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=(($50+12)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=(($55)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 $58=(($57+40)|0);
 $59=((HEAP16[(($58)>>1)])|0);
 $60=(($53+12)|0);
 $61=((HEAP32[(($60)>>2)])|0);
 $62=($55|0)==($61|0);
 do {
  if (!($62)) {
   $64=((_type_matchup($emit,$55,$51))|0);
   $65=($64|0)==0;
   if (!($65)) {
    break;
   }
   $67=(($ast+8)|0);
   $68=((HEAP32[(($67)>>2)])|0);
   $69=((HEAP32[(($54)>>2)])|0);
   $70=((HEAP32[(($60)>>2)])|0);
   _bad_assign_error($emit,$68,$69,$70);
  }
 } while(0);
 $not_=((($59&65535))>>>0)>((1)>>>0);
 $_=($not_&1);
 $72=(($ast+4)|0);
 $73=$72;
 $74=((HEAP16[(($73)>>1)])|0);
 $75=((($74&65535))>>>0)>((5631)>>>0);
 if ($75) {
  $77=((HEAP32[(($2)>>2)])|0);
  $78=(($77+4)|0);
  $79=$78;
  $80=((HEAP16[(($79)>>1)])|0);
  $81=$80&255;
  $82=(($81<<16)>>16)==7;
  if ($82) {
   _eval_tree($emit,$77,0);
  }
  _emit_op_for_compound($emit,$ast);
  $85=(($ast)|0);
  $86=((HEAP32[(($85)>>2)])|0);
  $right_sym_0=$86;
 } else {
  $right_sym_0=$53;
 }

 $88=((_assign_optimize_check($ast))|0);
 $89=($88|0)==0;
 if ($89) {
  $113=((HEAP32[(($2)>>2)])|0);
  $114=(($113+4)|0);
  $115=$114;
  $116=((HEAP16[(($115)>>1)])|0);
  $117=$116&255;
  $118=(($117<<16)>>16)==7;
  $__=($118?41:$_);
  $119=(($emit+16)|0);
  $120=((HEAP32[(($119)>>2)])|0);
  $121=(($ast+8)|0);
  $122=((HEAP32[(($121)>>2)])|0);
  $123=(($122)&65535);
  $124=(($right_sym_0+8)|0);
  $125=((HEAP32[(($124)>>2)])|0);
  $126=(($125)&65535);
  $127=(($50+8)|0);
  $128=((HEAP32[(($127)>>2)])|0);
  $129=(($128)&65535);
  _lily_u16_write_4($120,$__,$123,$126,$129);
  $131=(($ast)|0);
  HEAP32[(($131)>>2)]=$right_sym_0;
  STACKTOP=sp;return;
 }
 $91=((HEAP32[(($22)>>2)])|0);
 $92=(($91+12)|0);
 $93=((HEAP16[(($92)>>1)])|0);
 $94=(($93<<16)>>16)==0;
 if ($94) {
  $96=(($emit+16)|0);
  $97=((HEAP32[(($96)>>2)])|0);
  $98=(($97+4)|0);
  $99=((HEAP32[(($98)>>2)])|0);
  $100=((($99)-(1))|0);
  $pos_0=$100;
 } else {
  $102=($93&65535);
  $pos_0=$102;
 }

 $104=(($50+8)|0);
 $105=((HEAP32[(($104)>>2)])|0);
 $106=(($105)&65535);
 $107=(($emit+16)|0);
 $108=((HEAP32[(($107)>>2)])|0);
 $109=(($108)|0);
 $110=((HEAP32[(($109)>>2)])|0);
 $111=(($110+($pos_0<<1))|0);
 HEAP16[(($111)>>1)]=$106;
 $131=(($ast)|0);
 HEAP32[(($131)>>2)]=$right_sym_0;
 STACKTOP=sp;return;
}


function _eval_sub_assign($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$47=0,$48=0,$49=0,$50=0,$51=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$64=0,$65=0,$67=0,$68=0,$69=0;
 var $70=0,$71=0,$72=0,$73=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$88=0,$90=0,$91=0,$92=0;
 var $93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$ast_pn=0,$rhs_0_in=0;
 var $rhs_0=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+24)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+32)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((_determine_left_type($emit,$3))|0);
 $9=(($ast+24)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+4)|0);
 $12=$11;
 $13=((HEAP16[(($12)>>1)])|0);
 $14=$13&255;
 $15=(($14<<16)>>16)==5;
 if (!($15)) {
  _eval_tree($emit,$10,$8);
 }
 $18=((HEAP32[(($9)>>2)])|0);
 $19=(($18)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($5+4)|0);
 $22=$21;
 $23=((HEAP16[(($22)>>1)])|0);
 $24=$23&255;
 $25=(($24<<16)>>16)==5;
 do {
  if (!($25)) {
   _eval_tree($emit,$5,0);
   $27=(($5)|0);
   $28=((HEAP32[(($27)>>2)])|0);
   $29=(($28+6)|0);
   $30=((HEAP16[(($29)>>1)])|0);
   $31=$30&2;
   $32=(($31<<16)>>16)==0;
   if ($32) {
    break;
   }
   $34=(($ast+8)|0);
   $35=((HEAP32[(($34)>>2)])|0);
   $36=(($emit+100)|0);
   $37=((HEAP32[(($36)>>2)])|0);
   $38=(($37+16)|0);
   HEAP32[(($38)>>2)]=$35;
   $39=((HEAP32[(($36)>>2)])|0);
   $40=(($ast+4)|0);
   $41=$40;
   $42=((HEAP16[(($41)>>1)])|0);
   $43=($42&65535)>>>8;
   $44=($43&65535);
   $45=((_opname($44))|0);
   _lily_raise($39,1,5864,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$45,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $47=(($7+4)|0);
 $48=$47;
 $49=((HEAP16[(($48)>>1)])|0);
 $50=$49&255;
 $51=(($50<<16)>>16)==5;
 if (!($51)) {
  _eval_tree($emit,$7,0);
 }
 _check_valid_subscript($emit,$5,$7);
 $54=(($5)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=(($55+12)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 $58=(($57)|0);
 $59=((HEAP32[(($58)>>2)])|0);
 $60=(($59+40)|0);
 $61=((HEAP16[(($60)>>1)])|0);
 $62=(($61<<16)>>16)==2;
 if ($62) {
  $64=(($emit+100)|0);
  $65=((HEAP32[(($64)>>2)])|0);
  _lily_raise($65,1,5704,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $67=((HEAP32[(($54)>>2)])|0);
 $68=(($67+12)|0);
 $69=((HEAP32[(($68)>>2)])|0);
 $70=((_get_subscript_result($69,$7))|0);
 $71=((HEAP32[(($9)>>2)])|0);
 $72=((_type_matchup($emit,$70,$71))|0);
 $73=($72|0)==0;
 if ($73) {
  $75=(($ast+8)|0);
  $76=((HEAP32[(($75)>>2)])|0);
  $77=(($emit+100)|0);
  $78=((HEAP32[(($77)>>2)])|0);
  $79=(($78+16)|0);
  HEAP32[(($79)>>2)]=$76;
  $80=((HEAP32[(($75)>>2)])|0);
  $81=(($20+12)|0);
  $82=((HEAP32[(($81)>>2)])|0);
  _bad_assign_error($emit,$80,$70,$82);
 }
 $84=((HEAP32[(($9)>>2)])|0);
 $85=(($ast+4)|0);
 $86=$85;
 $87=((HEAP16[(($86)>>1)])|0);
 $88=((($87&65535))>>>0)>((5631)>>>0);
 if (!($88)) {
  $ast_pn=$84;

  $rhs_0_in=(($ast_pn)|0);
  $rhs_0=((HEAP32[(($rhs_0_in)>>2)])|0);
  $112=(($emit+16)|0);
  $113=((HEAP32[(($112)>>2)])|0);
  $114=(($ast+8)|0);
  $115=((HEAP32[(($114)>>2)])|0);
  $116=(($115)&65535);
  $117=((HEAP32[(($54)>>2)])|0);
  $118=(($117+8)|0);
  $119=((HEAP32[(($118)>>2)])|0);
  $120=(($119)&65535);
  $121=(($7)|0);
  $122=((HEAP32[(($121)>>2)])|0);
  $123=(($122+8)|0);
  $124=((HEAP32[(($123)>>2)])|0);
  $125=(($124)&65535);
  $126=(($rhs_0+8)|0);
  $127=((HEAP32[(($126)>>2)])|0);
  $128=(($127)&65535);
  _lily_u16_write_5($113,39,$116,$120,$125,$128);
  $129=(($ast)|0);
  HEAP32[(($129)>>2)]=$rhs_0;
  STACKTOP=sp;return;
 }
 $90=((_get_storage($emit,$70))|0);
 $91=(($emit+16)|0);
 $92=((HEAP32[(($91)>>2)])|0);
 $93=(($ast+8)|0);
 $94=((HEAP32[(($93)>>2)])|0);
 $95=(($94)&65535);
 $96=((HEAP32[(($54)>>2)])|0);
 $97=(($96+8)|0);
 $98=((HEAP32[(($97)>>2)])|0);
 $99=(($98)&65535);
 $100=(($7)|0);
 $101=((HEAP32[(($100)>>2)])|0);
 $102=(($101+8)|0);
 $103=((HEAP32[(($102)>>2)])|0);
 $104=(($103)&65535);
 $105=(($90+8)|0);
 $106=((HEAP32[(($105)>>2)])|0);
 $107=(($106)&65535);
 _lily_u16_write_5($92,38,$95,$99,$104,$107);
 $108=$90;
 $109=((HEAP32[(($2)>>2)])|0);
 $110=(($109)|0);
 HEAP32[(($110)>>2)]=$108;
 _emit_op_for_compound($emit,$ast);
 $ast_pn=$ast;

 $rhs_0_in=(($ast_pn)|0);
 $rhs_0=((HEAP32[(($rhs_0_in)>>2)])|0);
 $112=(($emit+16)|0);
 $113=((HEAP32[(($112)>>2)])|0);
 $114=(($ast+8)|0);
 $115=((HEAP32[(($114)>>2)])|0);
 $116=(($115)&65535);
 $117=((HEAP32[(($54)>>2)])|0);
 $118=(($117+8)|0);
 $119=((HEAP32[(($118)>>2)])|0);
 $120=(($119)&65535);
 $121=(($7)|0);
 $122=((HEAP32[(($121)>>2)])|0);
 $123=(($122+8)|0);
 $124=((HEAP32[(($123)>>2)])|0);
 $125=(($124)&65535);
 $126=(($rhs_0+8)|0);
 $127=((HEAP32[(($126)>>2)])|0);
 $128=(($127)&65535);
 _lily_u16_write_5($113,39,$116,$120,$125,$128);
 $129=(($ast)|0);
 HEAP32[(($129)>>2)]=$rhs_0;
 STACKTOP=sp;return;
}


function _eval_oo_assign($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$rhs_0=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0;
 var $67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 _eval_oo_access_for_item($emit,$3);
 $4=((HEAP32[(($2)>>2)])|0);
 $5=(($4+20)|0);
 $6=$5;
 $7=((HEAP32[(($6)>>2)])|0);
 _ensure_valid_scope($emit,$7);
 $8=((HEAP32[(($2)>>2)])|0);
 $9=(($8+20)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=(($12<<16)>>16)==4;
 if (!($13)) {
  $15=(($ast+8)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=(($emit+100)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=(($18+16)|0);
  HEAP32[(($19)>>2)]=$16;
  $20=((HEAP32[(($17)>>2)])|0);
  $21=(($ast+4)|0);
  $22=$21;
  $23=((HEAP16[(($22)>>1)])|0);
  $24=($23&65535)>>>8;
  $25=($24&65535);
  $26=((_opname($25))|0);
  _lily_raise($20,1,5864,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$26,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $28=((HEAP32[(($2)>>2)])|0);
 $29=((_get_solved_property_type($emit,$28))|0);
 $30=(($ast+24)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 _eval_tree($emit,$31,$29);
 $32=((HEAP32[(($30)>>2)])|0);
 $33=(($32)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=(($34+12)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=($29|0)==($36|0);
 do {
  if (!($37)) {
   $39=((_type_matchup($emit,$29,$32))|0);
   $40=($39|0)==0;
   if (!($40)) {
    break;
   }
   $42=(($ast+8)|0);
   $43=((HEAP32[(($42)>>2)])|0);
   $44=(($emit+100)|0);
   $45=((HEAP32[(($44)>>2)])|0);
   $46=(($45+16)|0);
   HEAP32[(($46)>>2)]=$43;
   $47=((HEAP32[(($42)>>2)])|0);
   _bad_assign_error($emit,$47,$29,$36);
  }
 } while(0);
 $49=(($ast+4)|0);
 $50=$49;
 $51=((HEAP16[(($50)>>1)])|0);
 $52=((($51&65535))>>>0)>((5631)>>>0);
 if ($52) {
  $54=((HEAP32[(($2)>>2)])|0);
  _oo_property_read($emit,$54);
  _emit_op_for_compound($emit,$ast);
  $55=(($ast)|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $rhs_0=$56;
 } else {
  $rhs_0=$34;
 }

 $58=(($emit+16)|0);
 $59=((HEAP32[(($58)>>2)])|0);
 $60=(($ast+8)|0);
 $61=((HEAP32[(($60)>>2)])|0);
 $62=(($61)&65535);
 $63=((HEAP32[(($2)>>2)])|0);
 $64=(($63+20)|0);
 $65=$64;
 $66=((HEAP32[(($65)>>2)])|0);
 $67=(($66+8)|0);
 $68=((HEAP32[(($67)>>2)])|0);
 $69=(($68)&65535);
 $70=(($63+24)|0);
 $71=((HEAP32[(($70)>>2)])|0);
 $72=(($71)|0);
 $73=((HEAP32[(($72)>>2)])|0);
 $74=(($73+8)|0);
 $75=((HEAP32[(($74)>>2)])|0);
 $76=(($75)&65535);
 $77=(($rhs_0+8)|0);
 $78=((HEAP32[(($77)>>2)])|0);
 $79=(($78)&65535);
 _lily_u16_write_5($59,46,$62,$69,$76,$79);
 $80=(($ast)|0);
 HEAP32[(($80)>>2)]=$rhs_0;
 STACKTOP=sp;return;
}


function _eval_property_assign($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$left_type_0=0,$43=0;
 var $44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$66=0,$ast_pn=0;
 var $rhs_0_in=0,$rhs_0=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0;
 var $86=0,$87=0,$88=0,$89=0,$90=0,label=0;

 $1=(($emit+80)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+22)|0);
 $4=$3;
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($5<<16)>>16)==14;
 if ($6) {
  _maybe_close_over_class_self($emit);
 }
 $9=(($ast+20)|0);
 $10=$9;
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+20)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 _ensure_valid_scope($emit,$14);
 $15=((HEAP32[(($10)>>2)])|0);
 $16=(($15+20)|0);
 $17=$16;
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+12)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($ast+24)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 _eval_tree($emit,$22,$20);
 $23=((HEAP32[(($21)>>2)])|0);
 $24=(($23)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25+12)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=($20|0)==0;
 if ($28) {
  $30=((HEAP32[(($10)>>2)])|0);
  $31=(($30+20)|0);
  $32=$31;
  $33=((HEAP32[(($32)>>2)])|0);
  $34=(($33+12)|0);
  HEAP32[(($34)>>2)]=$27;
  $35=((HEAP32[(($10)>>2)])|0);
  $36=(($35+20)|0);
  $37=$36;
  $38=((HEAP32[(($37)>>2)])|0);
  $39=(($38+6)|0);
  $40=((HEAP16[(($39)>>1)])|0);
  $41=$40&-2;
  HEAP16[(($39)>>1)]=$41;
  $left_type_0=$27;
 } else {
  $left_type_0=$20;
 }

 $43=((HEAP32[(($21)>>2)])|0);
 $44=(($43)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=(($45+12)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=($left_type_0|0)==($47|0);
 do {
  if (!($48)) {
   $50=((_type_matchup($emit,$left_type_0,$43))|0);
   $51=($50|0)==0;
   if (!($51)) {
    break;
   }
   $53=(($ast+8)|0);
   $54=((HEAP32[(($53)>>2)])|0);
   $55=(($emit+100)|0);
   $56=((HEAP32[(($55)>>2)])|0);
   $57=(($56+16)|0);
   HEAP32[(($57)>>2)]=$54;
   $58=((HEAP32[(($53)>>2)])|0);
   _bad_assign_error($emit,$58,$left_type_0,$27);
  }
 } while(0);
 $60=((HEAP32[(($21)>>2)])|0);
 $61=(($ast+4)|0);
 $62=$61;
 $63=((HEAP16[(($62)>>1)])|0);
 $64=((($63&65535))>>>0)>((5631)>>>0);
 if ($64) {
  $66=((HEAP32[(($10)>>2)])|0);
  _eval_tree($emit,$66,0);
  _emit_op_for_compound($emit,$ast);
  $ast_pn=$ast;
 } else {
  $ast_pn=$60;
 }

 $rhs_0_in=(($ast_pn)|0);
 $rhs_0=((HEAP32[(($rhs_0_in)>>2)])|0);
 $68=(($emit+16)|0);
 $69=((HEAP32[(($68)>>2)])|0);
 $70=(($ast+8)|0);
 $71=((HEAP32[(($70)>>2)])|0);
 $72=(($71)&65535);
 $73=((HEAP32[(($10)>>2)])|0);
 $74=(($73+20)|0);
 $75=$74;
 $76=((HEAP32[(($75)>>2)])|0);
 $77=(($76+8)|0);
 $78=((HEAP32[(($77)>>2)])|0);
 $79=(($78)&65535);
 $80=(($emit+84)|0);
 $81=((HEAP32[(($80)>>2)])|0);
 $82=(($81+48)|0);
 $83=((HEAP32[(($82)>>2)])|0);
 $84=(($83+8)|0);
 $85=((HEAP32[(($84)>>2)])|0);
 $86=(($85)&65535);
 $87=(($rhs_0+8)|0);
 $88=((HEAP32[(($87)>>2)])|0);
 $89=(($88)&65535);
 _lily_u16_write_5($69,46,$72,$79,$86,$89);
 $90=(($ast)|0);
 HEAP32[(($90)>>2)]=$rhs_0;
 return;
}


function _eval_upvalue_assign($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$extract_t1=0,$12=0,$13=0,$14=0,$15=0,$spot_0_off0=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$ast_pn=0;
 var $rhs_0_in=0,$rhs_0=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,label=0;

 $1=(($ast+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _eval_tree($emit,$2,0);
 $3=(($ast+20)|0);
 $4=$3;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+20)|0);
 $7=$6;
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((_find_closed_sym_spot($emit,$8))|0);
 $10=($9|0)==-1;
 $extract_t1=(($9)&65535);
 if ($10) {
  $12=$8;
  _checked_close_over_var($emit,$12);
  $13=(($emit+44)|0);
  $14=((HEAP16[(($13)>>1)])|0);
  $15=((($14)-(1))&65535);
  $spot_0_off0=$15;
 } else {
  $spot_0_off0=$extract_t1;
 }

 $17=((HEAP32[(($1)>>2)])|0);
 $18=(($ast+4)|0);
 $19=$18;
 $20=((HEAP16[(($19)>>1)])|0);
 $21=((($20&65535))>>>0)>((5631)>>>0);
 if ($21) {
  $23=((HEAP32[(($4)>>2)])|0);
  $24=(($23+20)|0);
  $25=$24;
  $26=((HEAP32[(($25)>>2)])|0);
  $27=(($26+12)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=((_get_storage($emit,$28))|0);
  $30=(($emit+16)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=(($ast+8)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=(($33)&65535);
  $35=(($29+8)|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=(($36)&65535);
  _lily_u16_write_4($31,58,$34,$spot_0_off0,$37);
  $38=$29;
  $39=((HEAP32[(($4)>>2)])|0);
  $40=(($39)|0);
  HEAP32[(($40)>>2)]=$38;
  _emit_op_for_compound($emit,$ast);
  $ast_pn=$ast;
 } else {
  $ast_pn=$17;
 }

 $rhs_0_in=(($ast_pn)|0);
 $rhs_0=((HEAP32[(($rhs_0_in)>>2)])|0);
 $42=(($emit+16)|0);
 $43=((HEAP32[(($42)>>2)])|0);
 $44=(($ast+8)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=(($45)&65535);
 $47=(($rhs_0+8)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 $49=(($48)&65535);
 _lily_u16_write_4($43,59,$46,$spot_0_off0,$49);
 $50=((HEAP32[(($1)>>2)])|0);
 $51=(($50)|0);
 $52=((HEAP32[(($51)>>2)])|0);
 $53=(($ast)|0);
 HEAP32[(($53)>>2)]=$52;
 return;
}


function _assign_post_check($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$or_cond=0,$12=0,$13=0,$_pr=0,$15=0,$16=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+28)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 do {
  if (!($3)) {
   $5=(($2+4)|0);
   $6=$5;
   $7=((HEAP16[(($6)>>1)])|0);
   $8=$7&255;
   $9=(($8<<16)>>16)!=26;
   $10=((($7&65535))>>>0)<((5376)>>>0);
   $or_cond=$9|$10;
   if ($or_cond) {
    $12=(($emit+100)|0);
    $13=((HEAP32[(($12)>>2)])|0);
    _lily_raise($13,1,6264,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    STACKTOP=sp;return;
   } else {
    $_pr=((HEAP32[(($1)>>2)])|0);
    $15=($_pr|0)==0;
    if ($15) {
     break;
    }
    STACKTOP=sp;return;
   }
  }
 } while(0);
 $16=(($ast)|0);
 HEAP32[(($16)>>2)]=0;
 STACKTOP=sp;return;
}


function _eval_logical_op($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$or_cond=0,$is_top_0=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$phitmp1_unshifted=0,$phitmp1=0,$38=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$45=0,$46=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$_mask=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0;
 var $66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0;
 var $86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$96=0,label=0;

 $1=(($ast+4)|0);
 $2=$1;
 $3=((HEAP16[(($2)>>1)])|0);
 $4=($3&65535)>>>8;
 $5=(($4<<16)>>16)==19;
 $6=($5&1);
 $7=(($ast+28)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==0;
 if ($9) {
  label = 3;
 } else {
  $11=(($8+4)|0);
  $12=$11;
  $13=((HEAP16[(($12)>>1)])|0);
  $14=$13&255;
  $15=(($14<<16)>>16)==26;
  $16=($13&65535)>>>8;
  $17=(($16<<16)>>16)==(($4<<16)>>16);
  $or_cond=$15&$17;
  if ($or_cond) {
   $is_top_0=0;
  } else {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _lily_emit_enter_block($emit,3);
  $is_top_0=1;
 }

 $20=(($ast+20)|0);
 $21=$20;
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22+4)|0);
 $24=$23;
 $25=((HEAP16[(($24)>>1)])|0);
 $26=$25&255;
 $27=(($26<<16)>>16)==5;
 if (!($27)) {
  _eval_tree($emit,$22,0);
 }
 $30=((HEAP32[(($21)>>2)])|0);
 $31=(($30+4)|0);
 $32=$31;
 $33=((HEAP16[(($32)>>1)])|0);
 $34=$33&255;
 $35=(($34<<16)>>16)==26;
 if ($35) {
  $37=((HEAP16[(($2)>>1)])|0);
  $phitmp1_unshifted=$37^$33;
  $phitmp1=((($phitmp1_unshifted&65535))>>>0)>((255)>>>0);
  if ($phitmp1) {
   label = 8;
  }
 } else {
  label = 8;
 }
 if ((label|0) == 8) {
  $38=((HEAP32[(($21)>>2)])|0);
  _emit_jump_if($emit,$38,$6);
 }
 $40=(($ast+24)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=(($41+4)|0);
 $43=$42;
 $44=((HEAP16[(($43)>>1)])|0);
 $45=$44&255;
 $46=(($45<<16)>>16)==5;
 if (!($46)) {
  _eval_tree($emit,$41,0);
 }
 $49=((HEAP32[(($40)>>2)])|0);
 _emit_jump_if($emit,$49,$6);
 $50=($is_top_0|0)==1;
 if ($50) {
  $52=(($emit+120)|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $54=(($53+64)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=(($55+24)|0);
  $57=((HEAP32[(($56)>>2)])|0);
  $58=((_get_storage($emit,$57))|0);
  $59=((HEAP16[(($2)>>1)])|0);
  $_mask=$59&-256;
  $60=(($_mask<<16)>>16)==4608;
  $61=(($emit+16)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=(($ast+8)|0);
  $64=((HEAP32[(($63)>>2)])|0);
  $65=(($64)&65535);
  $66=($60&1);
  $67=(($58+8)|0);
  $68=((HEAP32[(($67)>>2)])|0);
  $69=(($68)&65535);
  _lily_u16_write_4($62,44,$65,$66,$69);
  $70=((HEAP32[(($61)>>2)])|0);
  _lily_u16_write_2($70,22,0);
  $71=((HEAP32[(($61)>>2)])|0);
  $72=(($71+4)|0);
  $73=((HEAP32[(($72)>>2)])|0);
  $74=((($73)-(1))|0);
  _lily_emit_leave_block($emit);
  $75=((HEAP32[(($61)>>2)])|0);
  $76=((HEAP32[(($63)>>2)])|0);
  $77=(($76)&65535);
  $78=$66^1;
  $79=((HEAP32[(($67)>>2)])|0);
  $80=(($79)&65535);
  _lily_u16_write_4($75,44,$77,$78,$80);
  $81=((HEAP32[(($61)>>2)])|0);
  $82=(($81+4)|0);
  $83=((HEAP32[(($82)>>2)])|0);
  $84=(($emit+84)|0);
  $85=((HEAP32[(($84)>>2)])|0);
  $86=(($85+28)|0);
  $87=((HEAP32[(($86)>>2)])|0);
  $88=((($83)-($87))|0);
  $89=(($88)&65535);
  $90=(($81)|0);
  $91=((HEAP32[(($90)>>2)])|0);
  $92=(($91+($74<<1))|0);
  HEAP16[(($92)>>1)]=$89;
  $93=$58;
  $94=(($ast)|0);
  HEAP32[(($94)>>2)]=$93;
  return;
 } else {
  $96=(($ast)|0);
  HEAP32[(($96)>>2)]=0;
  return;
 }
}


function _eval_func_pipe($emit,$ast,$expect){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($ast+24)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+32)|0);
 HEAP32[(($6)>>2)]=$3;
 $7=(($ast+14)|0);
 HEAP16[(($7)>>1)]=2;
 _eval_call($emit,$ast,$expect);
 return;
}


function _emit_binary_op($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0,$42=0,$45=0;
 var $46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$extract_t=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0;
 var $65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$opcode_02_off0=0,$76=0,$77=0,$78=0,$79=0,$80=0,$82=0,$83=0,$84=0;
 var $85=0,$_=0,$87=0,$88=0,$89=0,$90=0,$92=0,$93=0,$94=0,$95=0,$storage_class_0=0,$97=0,$98=0,$99=0,$100=0,$or_cond=0,$102=0,$104=0,$105=0,$106=0;
 var $107=0,$or_cond1=0,$109=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$s_0=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0;
 var $128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$139=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($ast+24)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($5+12)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($9+12)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($13+40)|0);
 $19=((HEAP16[(($18)>>1)])|0);
 $20=($19&65535);
 $21=((($19&65535))>>>0)<((3)>>>0);
 do {
  if ($21) {
   $23=(($17+40)|0);
   $24=((HEAP16[(($23)>>1)])|0);
   $25=((($24&65535))>>>0)<((3)>>>0);
   if (!($25)) {
    label = 3;
    break;
   }
   $45=($24&65535);
   $46=(($ast+4)|0);
   $47=$46;
   $48=((HEAP16[(($47)>>1)])|0);
   $49=($48&65535)>>>8;
   $50=($49&65535);
   $51=((2504+((($50)*(36))&-1)+((($20)*(12))&-1)+($45<<2))|0);
   $52=((HEAP32[(($51)>>2)])|0);
   $53=($52|0)==-1;
   $extract_t=(($52)&65535);
   if ($53) {
    label = 7;
   } else {
    $opcode_02_off0=$extract_t;
   }
  } else {
   label = 3;
  }
 } while(0);
 do {
  if ((label|0) == 3) {
   $27=((HEAP32[(($2)>>2)])|0);
   $28=(($27)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=(($29+12)|0);
   $31=((HEAP32[(($30)>>2)])|0);
   $32=((HEAP32[(($6)>>2)])|0);
   $33=(($32)|0);
   $34=((HEAP32[(($33)>>2)])|0);
   $35=(($34+12)|0);
   $36=((HEAP32[(($35)>>2)])|0);
   $37=($31|0)==($36|0);
   if (!($37)) {
    label = 7;
    break;
   }
   $39=(($ast+4)|0);
   $40=$39;
   $41=((HEAP16[(($40)>>1)])|0);
   $42=($41&65535)>>>8;
   if ((((($42<<16)>>16))|0)==((2)|0)) {
    $opcode_02_off0=16;
    break;
   } else if (!((((($42<<16)>>16))|0)==((7)|0))) {
    label = 7;
    break;
   }
   $opcode_02_off0=17;
  }
 } while(0);
 if ((label|0) == 7) {
  $54=(($ast+8)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=(($emit+100)|0);
  $57=((HEAP32[(($56)>>2)])|0);
  $58=(($57+16)|0);
  HEAP32[(($58)>>2)]=$55;
  $59=((HEAP32[(($56)>>2)])|0);
  $60=((HEAP32[(($2)>>2)])|0);
  $61=(($60)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=(($62+12)|0);
  $64=((HEAP32[(($63)>>2)])|0);
  $65=(($ast+4)|0);
  $66=$65;
  $67=((HEAP16[(($66)>>1)])|0);
  $68=($67&65535)>>>8;
  $69=($68&65535);
  $70=((_opname($69))|0);
  $71=((HEAP32[(($6)>>2)])|0);
  $72=(($71)|0);
  $73=((HEAP32[(($72)>>2)])|0);
  $74=(($73+12)|0);
  $75=((HEAP32[(($74)>>2)])|0);
  _lily_raise($59,1,6496,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$64,HEAP32[(((tempVarArgs)+(8))>>2)]=$70,HEAP32[(((tempVarArgs)+(16))>>2)]=$75,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $opcode_02_off0=-1;
 }

 $76=(($ast+4)|0);
 $77=$76;
 $78=((HEAP16[(($77)>>1)])|0);
 $79=($78&65535)>>>8;
 $80=($79&65535);
 switch (($80|0)) {
 case 0:case 1:case 9:case 10: {
  $82=((HEAP16[(($18)>>1)])|0);
  $83=(($17+40)|0);
  $84=((HEAP16[(($83)>>1)])|0);
  $85=((($82&65535))>>>0)<((($84&65535))>>>0);
  $_=($85?$17:$13);
  $storage_class_0=$_;
  break;
 }
 case 2:case 3:case 4:case 5:case 6:case 7: {
  $87=(($emit+120)|0);
  $88=((HEAP32[(($87)>>2)])|0);
  $89=(($88+64)|0);
  $90=((HEAP32[(($89)>>2)])|0);
  $storage_class_0=$90;
  break;
 }
 default: {
  $92=(($emit+120)|0);
  $93=((HEAP32[(($92)>>2)])|0);
  $94=(($93+48)|0);
  $95=((HEAP32[(($94)>>2)])|0);
  $storage_class_0=$95;
 }
 }

 $97=(($5+4)|0);
 $98=((HEAP16[(($97)>>1)])|0);
 $99=(($98<<16)>>16)==2;
 $100=($13|0)==($storage_class_0|0);
 $or_cond=$99&$100;
 do {
  if ($or_cond) {
   $102=$5;
   $s_0=$102;
  } else {
   $104=(($9+4)|0);
   $105=((HEAP16[(($104)>>1)])|0);
   $106=(($105<<16)>>16)==2;
   $107=($17|0)==($storage_class_0|0);
   $or_cond1=$106&$107;
   if ($or_cond1) {
    $109=$9;
    $s_0=$109;
    break;
   } else {
    $111=(($storage_class_0+24)|0);
    $112=((HEAP32[(($111)>>2)])|0);
    $113=((_get_storage($emit,$112))|0);
    $114=(($113+6)|0);
    $115=((HEAP16[(($114)>>1)])|0);
    $116=$115|2;
    HEAP16[(($114)>>1)]=$116;
    $s_0=$113;
    break;
   }
  }
 } while(0);

 $118=(($emit+16)|0);
 $119=((HEAP32[(($118)>>2)])|0);
 $120=(($ast+8)|0);
 $121=((HEAP32[(($120)>>2)])|0);
 $122=(($121)&65535);
 $123=((HEAP32[(($2)>>2)])|0);
 $124=(($123)|0);
 $125=((HEAP32[(($124)>>2)])|0);
 $126=(($125+8)|0);
 $127=((HEAP32[(($126)>>2)])|0);
 $128=(($127)&65535);
 $129=((HEAP32[(($6)>>2)])|0);
 $130=(($129)|0);
 $131=((HEAP32[(($130)>>2)])|0);
 $132=(($131+8)|0);
 $133=((HEAP32[(($132)>>2)])|0);
 $134=(($133)&65535);
 $135=(($s_0+8)|0);
 $136=((HEAP32[(($135)>>2)])|0);
 $137=(($136)&65535);
 _lily_u16_write_5($119,$opcode_02_off0,$122,$128,$134,$137);
 $138=$s_0;
 $139=(($ast)|0);
 HEAP32[(($139)>>2)]=$138;
 STACKTOP=sp;return;
}


function _eval_unary_op($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$28=0,$30=0,$31=0,$32=0,$34=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0;
 var $48=0,$49=0,$opcode_03_off0=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0;
 var $67=0,$68=0,$69=0,$70=0,$71=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+4)|0);
 $5=$4;
 $6=((HEAP16[(($5)>>1)])|0);
 $7=$6&255;
 $8=(($7<<16)>>16)==5;
 if (!($8)) {
  _eval_tree($emit,$3,0);
 }
 $11=((HEAP32[(($2)>>2)])|0);
 $12=(($11)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($13+12)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($ast+4)|0);
 $19=$18;
 $20=((HEAP16[(($19)>>1)])|0);
 $21=($20&65535)>>>8;
 $22=(($emit+120)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($23+64)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($17|0)==($25|0);
 do {
  if ($26) {
   $28=(($21<<16)>>16)==16;
   if ($28) {
    $opcode_03_off0=29;
   } else {
    label = 8;
   }
  } else {
   $30=(($23+48)|0);
   $31=((HEAP32[(($30)>>2)])|0);
   $32=($17|0)==($31|0);
   if (!($32)) {
    label = 8;
    break;
   }
   $34=(($21<<16)>>16)==17;
   if ($34) {
    $opcode_03_off0=30;
    break;
   }
   $36=(($21<<16)>>16)==16;
   if ($36) {
    $opcode_03_off0=29;
   } else {
    label = 8;
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $38=(($ast+8)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  $40=(($emit+100)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=(($41+16)|0);
  HEAP32[(($42)>>2)]=$39;
  $43=((HEAP32[(($40)>>2)])|0);
  $44=((HEAP16[(($19)>>1)])|0);
  $45=($44&65535)>>>8;
  $46=($45&65535);
  $47=((_opname($46))|0);
  $48=(($17+12)|0);
  $49=((HEAP32[(($48)>>2)])|0);
  _lily_raise($43,1,10072,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$47,HEAP32[(((tempVarArgs)+(8))>>2)]=$49,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $opcode_03_off0=-1;
 }

 $50=(($17+24)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=((_get_storage($emit,$51))|0);
 $53=(($52+6)|0);
 $54=((HEAP16[(($53)>>1)])|0);
 $55=$54|2;
 HEAP16[(($53)>>1)]=$55;
 $56=(($emit+16)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 $58=(($ast+8)|0);
 $59=((HEAP32[(($58)>>2)])|0);
 $60=(($59)&65535);
 $61=((HEAP32[(($2)>>2)])|0);
 $62=(($61)|0);
 $63=((HEAP32[(($62)>>2)])|0);
 $64=(($63+8)|0);
 $65=((HEAP32[(($64)>>2)])|0);
 $66=(($65)&65535);
 $67=(($52+8)|0);
 $68=((HEAP32[(($67)>>2)])|0);
 $69=(($68)&65535);
 _lily_u16_write_4($57,$opcode_03_off0,$60,$66,$69);
 $70=$52;
 $71=(($ast)|0);
 HEAP32[(($71)>>2)]=$70;
 STACKTOP=sp;return;
}


function _eval_interpolation($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$tree_iter_03=0,$2=0,$3=0,$4=0,$5=0,$6=0,$tree_iter_04=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$32=0,$tree_iter_0=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$arg_01=0,$45=0,$arg_02=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$arg_0=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0;
 var $61=0,$62=0,$63=0,$64=0,$65=0,$66=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+24)|0);
 $tree_iter_03=((HEAP32[(($1)>>2)])|0);
 $2=($tree_iter_03|0)==0;
 if (!($2)) {
  $3=(($emit+104)|0);
  $4=(($emit+116)|0);
  $5=(($ast+8)|0);
  $6=(($emit+100)|0);
  $tree_iter_04=$tree_iter_03;
  while(1) {

   $8=(($tree_iter_04+4)|0);
   $9=$8;
   $10=((HEAP16[(($9)>>1)])|0);
   $11=$10&255;
   $12=(($11<<16)>>16)==23;
   if ($12) {
    $14=((HEAP32[(($3)>>2)])|0);
    $15=(($tree_iter_04+16)|0);
    $16=((HEAP32[(($15)>>2)])|0);
    $17=((_lily_sp_get($14,$16))|0);
    $18=((HEAP32[(($4)>>2)])|0);
    $19=((HEAP32[(($5)>>2)])|0);
    $20=((_lily_parser_interp_eval($18,$19,$17))|0);
    $21=($20|0)==0;
    if ($21) {
     $23=(($tree_iter_04+8)|0);
     $24=((HEAP32[(($23)>>2)])|0);
     $25=((HEAP32[(($6)>>2)])|0);
     $26=(($25+16)|0);
     HEAP32[(($26)>>2)]=$24;
     $27=((HEAP32[(($6)>>2)])|0);
     _lily_raise($27,1,10160,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=17904,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    }
    $29=(($tree_iter_04)|0);
    HEAP32[(($29)>>2)]=$20;
   } else {
    _emit_literal($emit,$tree_iter_04);
   }
   $32=(($tree_iter_04+32)|0);
   $tree_iter_0=((HEAP32[(($32)>>2)])|0);
   $33=($tree_iter_0|0)==0;
   if ($33) {
    break;
   } else {
    $tree_iter_04=$tree_iter_0;
   }
  }
 }
 $34=(($emit+16)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=(($ast+8)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=(($37)&65535);
 $39=(($ast+14)|0);
 $40=((HEAP16[(($39)>>1)])|0);
 _lily_u16_write_3($35,64,$38,$40);
 $41=((HEAP32[(($34)>>2)])|0);
 $42=((HEAP16[(($39)>>1)])|0);
 $43=($42&65535);
 $44=((($43)+(1))|0);
 _lily_u16_write_prep($41,$44);
 $arg_01=((HEAP32[(($1)>>2)])|0);
 $45=($arg_01|0)==0;
 if ($45) {
  $54=(($emit+120)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=(($55+56)|0);
  $57=((HEAP32[(($56)>>2)])|0);
  $58=(($57+24)|0);
  $59=((HEAP32[(($58)>>2)])|0);
  $60=((_get_storage($emit,$59))|0);
  $61=((HEAP32[(($34)>>2)])|0);
  $62=(($60+8)|0);
  $63=((HEAP32[(($62)>>2)])|0);
  $64=(($63)&65535);
  _lily_u16_write_1($61,$64);
  $65=$60;
  $66=(($ast)|0);
  HEAP32[(($66)>>2)]=$65;
  STACKTOP=sp;return;
 } else {
  $arg_02=$arg_01;
 }
 while(1) {

  $46=((HEAP32[(($34)>>2)])|0);
  $47=(($arg_02)|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=(($48+8)|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $51=(($50)&65535);
  _lily_u16_write_1($46,$51);
  $52=(($arg_02+32)|0);
  $arg_0=((HEAP32[(($52)>>2)])|0);
  $53=($arg_0|0)==0;
  if ($53) {
   break;
  } else {
   $arg_02=$arg_0;
  }
 }
 $54=(($emit+120)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=(($55+56)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 $58=(($57+24)|0);
 $59=((HEAP32[(($58)>>2)])|0);
 $60=((_get_storage($emit,$59))|0);
 $61=((HEAP32[(($34)>>2)])|0);
 $62=(($60+8)|0);
 $63=((HEAP32[(($62)>>2)])|0);
 $64=(($63)&65535);
 _lily_u16_write_1($61,$64);
 $65=$60;
 $66=(($ast)|0);
 HEAP32[(($66)>>2)]=$65;
 STACKTOP=sp;return;
}


function _eval_build_list($emit,$ast,$expect){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 var $1=0,$2=0,$3=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$elem_type_1=0,$23=0,$arg_01=0;
 var $24=0,$25=0,$arg_03=0,$elem_type_22=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$36=0,$arg_0=0,$37=0,$elem_type_2_lcssa=0,$38=0,$39=0,$40=0,$41=0,$43=0;
 var $44=0,$45=0,$elem_type_3=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0;
 var $64=0,label=0;

 $1=(($ast+14)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($2<<16)>>16)==0;
 if ($3) {
  _make_empty_list_or_hash($emit,$ast,$expect);
  return;
 }
 $6=($expect|0)==0;
 do {
  if ($6) {
   label = 6;
  } else {
   $8=(($expect)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $10=(($9+40)|0);
   $11=((HEAP16[(($10)>>1)])|0);
   $12=(($11<<16)>>16)==7;
   if (!($12)) {
    label = 6;
    break;
   }
   $14=(($expect+12)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=($16|0)==0;
   if ($17) {
    label = 6;
   } else {
    $elem_type_1=$16;
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $18=(($emit+108)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=(($19+24)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $elem_type_1=$21;
 }

 $23=(($ast+24)|0);
 $arg_01=((HEAP32[(($23)>>2)])|0);
 $24=($arg_01|0)==0;
 if ($24) {
  $elem_type_2_lcssa=$elem_type_1;
 } else {
  $25=(($emit+108)|0);
  $elem_type_22=$elem_type_1;$arg_03=$arg_01;
  while(1) {


   _eval_tree($emit,$arg_03,$elem_type_22);
   $27=((HEAP32[(($25)>>2)])|0);
   $28=(($arg_03)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=(($29+12)|0);
   $31=((HEAP32[(($30)>>2)])|0);
   $32=((_lily_ts_unify($27,$elem_type_22,$31))|0);
   $33=($32|0)==0;
   if ($33) {
    _inconsistent_type_error($emit,$arg_03,$elem_type_22,10344);
   }
   $36=(($arg_03+32)|0);
   $arg_0=((HEAP32[(($36)>>2)])|0);
   $37=($arg_0|0)==0;
   if ($37) {
    $elem_type_2_lcssa=$32;
    break;
   } else {
    $elem_type_22=$32;$arg_03=$arg_0;
   }
  }
 }

 $38=(($elem_type_2_lcssa+6)|0);
 $39=((HEAP16[(($38)>>1)])|0);
 $40=$39&16;
 $41=(($40<<16)>>16)==0;
 if ($41) {
  $elem_type_3=$elem_type_2_lcssa;
 } else {
  $43=(($emit+112)|0);
  $44=((HEAP32[(($43)>>2)])|0);
  $45=((_lily_tm_make_dynamicd_copy($44,$elem_type_2_lcssa))|0);
  $elem_type_3=$45;
 }

 $47=(($emit+112)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 _lily_tm_add($48,$elem_type_3);
 $49=((HEAP32[(($47)>>2)])|0);
 $50=(($emit+120)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=(($51+76)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=((_lily_tm_make($49,0,$53,1))|0);
 $55=((_get_storage($emit,$54))|0);
 $56=((HEAP32[(($23)>>2)])|0);
 $57=(($ast+8)|0);
 $58=((HEAP32[(($57)>>2)])|0);
 $59=((HEAP16[(($1)>>1)])|0);
 $60=($59&65535);
 $61=(($55+8)|0);
 $62=((HEAP32[(($61)>>2)])|0);
 _write_build_op($emit,31,$56,$58,$60,$62);
 $63=$55;
 $64=(($ast)|0);
 HEAP32[(($64)>>2)]=$63;
 return;
}


function _eval_build_hash($emit,$ast,$expect){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$_=0,$21=0;
 var $_1=0,$value_type_0=0,$key_type_1=0,$23=0,$tree_iter_02=0,$24=0,$25=0,$tree_iter_05=0,$key_type_24=0,$value_type_13=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$key_type_3=0;
 var $39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$value_type_2=0,$48=0,$49=0,$tree_iter_0=0,$50=0,$key_type_2_lcssa=0,$value_type_1_lcssa=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0;
 var $58=0,$value_type_3=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0;
 var $78=0,label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+96)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+24)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($expect|0)==0;
 do {
  if ($7) {
   $key_type_1=$6;$value_type_0=$6;
  } else {
   $9=(($expect)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=(($10+40)|0);
   $12=((HEAP16[(($11)>>1)])|0);
   $13=(($12<<16)>>16)==8;
   if (!($13)) {
    $key_type_1=$6;$value_type_0=$6;
    break;
   }
   $15=(($expect+12)|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $18=(($16+4)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=($17|0)==0;
   $_=($20?$6:$17);
   $21=($19|0)==0;
   $_1=($21?$6:$19);
   $key_type_1=$_;$value_type_0=$_1;
  }
 } while(0);


 $23=(($ast+24)|0);
 $tree_iter_02=((HEAP32[(($23)>>2)])|0);
 $24=($tree_iter_02|0)==0;
 if ($24) {
  $value_type_1_lcssa=$value_type_0;$key_type_2_lcssa=$key_type_1;
 } else {
  $25=(($emit+108)|0);
  $value_type_13=$value_type_0;$key_type_24=$key_type_1;$tree_iter_05=$tree_iter_02;
  while(1) {



   $27=(($tree_iter_05+32)|0);
   $28=((HEAP32[(($27)>>2)])|0);
   _eval_tree($emit,$tree_iter_05,$key_type_24);
   $29=((HEAP32[(($25)>>2)])|0);
   $30=(($tree_iter_05)|0);
   $31=((HEAP32[(($30)>>2)])|0);
   $32=(($31+12)|0);
   $33=((HEAP32[(($32)>>2)])|0);
   $34=((_lily_ts_unify($29,$key_type_24,$33))|0);
   $35=($34|0)==0;
   if ($35) {
    _inconsistent_type_error($emit,$tree_iter_05,$key_type_24,10872);
    $key_type_3=$key_type_24;
   } else {
    _ensure_valid_key_type($emit,$ast,$34);
    $key_type_3=$34;
   }

   _eval_tree($emit,$28,$value_type_13);
   $39=((HEAP32[(($25)>>2)])|0);
   $40=(($28)|0);
   $41=((HEAP32[(($40)>>2)])|0);
   $42=(($41+12)|0);
   $43=((HEAP32[(($42)>>2)])|0);
   $44=((_lily_ts_unify($39,$value_type_13,$43))|0);
   $45=($44|0)==0;
   if ($45) {
    _inconsistent_type_error($emit,$28,$value_type_13,10696);
    $value_type_2=$value_type_13;
   } else {
    $value_type_2=$44;
   }

   $48=((HEAP32[(($27)>>2)])|0);
   $49=(($48+32)|0);
   $tree_iter_0=((HEAP32[(($49)>>2)])|0);
   $50=($tree_iter_0|0)==0;
   if ($50) {
    $value_type_1_lcssa=$value_type_2;$key_type_2_lcssa=$key_type_3;
    break;
   } else {
    $value_type_13=$value_type_2;$key_type_24=$key_type_3;$tree_iter_05=$tree_iter_0;
   }
  }
 }


 $51=(($value_type_1_lcssa+6)|0);
 $52=((HEAP16[(($51)>>1)])|0);
 $53=$52&16;
 $54=(($53<<16)>>16)==0;
 if ($54) {
  $value_type_3=$value_type_1_lcssa;
 } else {
  $56=(($emit+112)|0);
  $57=((HEAP32[(($56)>>2)])|0);
  $58=((_lily_tm_make_dynamicd_copy($57,$value_type_1_lcssa))|0);
  $value_type_3=$58;
 }

 $60=((HEAP32[(($1)>>2)])|0);
 $61=(($60+80)|0);
 $62=((HEAP32[(($61)>>2)])|0);
 $63=(($emit+112)|0);
 $64=((HEAP32[(($63)>>2)])|0);
 _lily_tm_add($64,$key_type_2_lcssa);
 $65=((HEAP32[(($63)>>2)])|0);
 _lily_tm_add($65,$value_type_3);
 $66=((HEAP32[(($63)>>2)])|0);
 $67=((_lily_tm_make($66,0,$62,2))|0);
 $68=((_get_storage($emit,$67))|0);
 $69=((HEAP32[(($23)>>2)])|0);
 $70=(($ast+8)|0);
 $71=((HEAP32[(($70)>>2)])|0);
 $72=(($ast+14)|0);
 $73=((HEAP16[(($72)>>1)])|0);
 $74=($73&65535);
 $75=(($68+8)|0);
 $76=((HEAP32[(($75)>>2)])|0);
 _write_build_op($emit,33,$69,$71,$74,$76);
 $77=$68;
 $78=(($ast)|0);
 HEAP32[(($78)>>2)]=$77;
 return;
}


function _eval_build_tuple($emit,$ast,$expect){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$_0=0,$22=0,$arg_05=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$arg_07=0,$i_06=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$43=0,$45=0,$46=0,$arg_0=0;
 var $47=0,$48=0,$arg_13_in=0,$i_12=0,$arg_13=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$_lcssa=0,$i_1_lcssa=0,$59=0,$60=0,$61=0;
 var $62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+14)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($2<<16)>>16)==0;
 if ($3) {
  $5=(($emit+100)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  _lily_raise($6,1,10960,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $8=($expect|0)==0;
 do {
  if ($8) {
   $_0=0;
  } else {
   $10=(($expect)|0);
   $11=((HEAP32[(($10)>>2)])|0);
   $12=(($11+40)|0);
   $13=((HEAP16[(($12)>>1)])|0);
   $14=(($13<<16)>>16)==9;
   if ($14) {
    $16=((HEAP16[(($1)>>1)])|0);
    $17=(($expect+10)|0);
    $18=((HEAP16[(($17)>>1)])|0);
    $19=((($16&65535))>>>0)>((($18&65535))>>>0);
    if (!($19)) {
     $_0=$expect;
     break;
    }
   }
   $_0=0;
  }
 } while(0);

 $22=(($ast+24)|0);
 $arg_05=((HEAP32[(($22)>>2)])|0);
 $23=($arg_05|0)==0;
 if (!($23)) {
  $24=($_0|0)==0;
  $25=(($_0+12)|0);
  $i_06=0;$arg_07=$arg_05;
  while(1) {


   do {
    if ($24) {
     _eval_tree($emit,$arg_07,0);
    } else {
     $32=((HEAP32[(($25)>>2)])|0);
     $33=(($32+($i_06<<2))|0);
     $34=((HEAP32[(($33)>>2)])|0);
     _eval_tree($emit,$arg_07,$34);
     $35=($34|0)==0;
     if ($35) {
      break;
     }
     $37=(($arg_07)|0);
     $38=((HEAP32[(($37)>>2)])|0);
     $39=(($38+12)|0);
     $40=((HEAP32[(($39)>>2)])|0);
     $41=($34|0)==($40|0);
     if ($41) {
      break;
     }
     $43=((_type_matchup($emit,$34,$arg_07))|0);
    }
   } while(0);
   $45=((($i_06)+(1))|0);
   $46=(($arg_07+32)|0);
   $arg_0=((HEAP32[(($46)>>2)])|0);
   $47=($arg_0|0)==0;
   if ($47) {
    break;
   } else {
    $i_06=$45;$arg_07=$arg_0;
   }
  }
 }
 $26=((HEAP16[(($1)>>1)])|0);
 $27=(($26<<16)>>16)==0;
 $28=(($emit+112)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 if ($27) {
  $i_1_lcssa=0;$_lcssa=$29;
 } else {
  $i_12=0;$arg_13_in=$22;$48=$29;
  while(1) {



   $arg_13=((HEAP32[(($arg_13_in)>>2)])|0);
   $49=(($arg_13)|0);
   $50=((HEAP32[(($49)>>2)])|0);
   $51=(($50+12)|0);
   $52=((HEAP32[(($51)>>2)])|0);
   _lily_tm_add($48,$52);
   $53=((($i_12)+(1))|0);
   $54=(($arg_13+32)|0);
   $55=((HEAP16[(($1)>>1)])|0);
   $56=($55&65535);
   $57=($53|0)<($56|0);
   $58=((HEAP32[(($28)>>2)])|0);
   if ($57) {
    $i_12=$53;$arg_13_in=$54;$48=$58;
   } else {
    $i_1_lcssa=$53;$_lcssa=$58;
    break;
   }
  }
 }


 $59=(($emit+120)|0);
 $60=((HEAP32[(($59)>>2)])|0);
 $61=(($60+84)|0);
 $62=((HEAP32[(($61)>>2)])|0);
 $63=((_lily_tm_make($_lcssa,0,$62,$i_1_lcssa))|0);
 $64=((_get_storage($emit,$63))|0);
 $65=((HEAP32[(($22)>>2)])|0);
 $66=(($ast+8)|0);
 $67=((HEAP32[(($66)>>2)])|0);
 $68=((HEAP16[(($1)>>1)])|0);
 $69=($68&65535);
 $70=(($64+8)|0);
 $71=((HEAP32[(($70)>>2)])|0);
 _write_build_op($emit,32,$65,$67,$69,$71);
 $72=$64;
 $73=(($ast)|0);
 HEAP32[(($73)>>2)]=$72;
 STACKTOP=sp;return;
}


function _eval_subscript($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$12=0,$13=0,$14=0,$15=0,$16=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$48=0,$49=0,$50=0,$52=0,$53=0,label=0;

 $1=(($ast+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+32)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+4)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 $8=$7&255;
 $9=(($8<<16)>>16)==5;
 if (!($9)) {
  _eval_tree($emit,$2,0);
 }
 $12=(($4+4)|0);
 $13=$12;
 $14=((HEAP16[(($13)>>1)])|0);
 $15=$14&255;
 $16=(($15<<16)>>16)==5;
 if (!($16)) {
  _eval_tree($emit,$4,0);
 }
 _check_valid_subscript($emit,$2,$4);
 $19=(($2)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+12)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((_get_subscript_result($22,$4))|0);
 $24=((_get_storage($emit,$23))|0);
 $25=(($emit+16)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($ast+8)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($28)&65535);
 $30=((HEAP32[(($19)>>2)])|0);
 $31=(($30+8)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=(($32)&65535);
 $34=(($4)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=(($35+8)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=(($37)&65535);
 $39=(($24+8)|0);
 $40=((HEAP32[(($39)>>2)])|0);
 $41=(($40)&65535);
 _lily_u16_write_5($26,38,$29,$33,$38,$41);
 $42=((HEAP32[(($19)>>2)])|0);
 $43=(($42+6)|0);
 $44=((HEAP16[(($43)>>1)])|0);
 $45=$44&2;
 $46=(($45<<16)>>16)==0;
 if ($46) {
  $52=$24;
  $53=(($ast)|0);
  HEAP32[(($53)>>2)]=$52;
  return;
 }
 $48=(($24+6)|0);
 $49=((HEAP16[(($48)>>1)])|0);
 $50=$49|2;
 HEAP16[(($48)>>1)]=$50;
 $52=$24;
 $53=(($ast)|0);
 HEAP32[(($53)>>2)]=$52;
 return;
}


function _eval_typecast($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$45=0,$46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+32)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+20)|0);
 $6=$5;
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+12)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=((HEAP32[(($9)>>2)])|0);
 _eval_tree($emit,$2,$10);
 $11=(($2)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12+12)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+40)|0);
 $18=((HEAP16[(($17)>>1)])|0);
 $19=(($18<<16)>>16)==6;
 if (!($19)) {
  $49=(($ast+8)|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $51=(($emit+100)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=(($52+16)|0);
  HEAP32[(($53)>>2)]=$50;
  $54=((HEAP32[(($51)>>2)])|0);
  _lily_raise($54,1,11608,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$14,HEAP32[(((tempVarArgs)+(8))>>2)]=$10,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  STACKTOP=sp;return;
 }
 $21=(($10)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22+42)|0);
 $24=((HEAP16[(($23)>>1)])|0);
 $25=(($24<<16)>>16)==0;
 if (!($25)) {
  $27=(($emit+100)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  _lily_raise($28,1,11728,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $30=((_get_storage($emit,$7))|0);
 $31=(($emit+16)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=(($ast+8)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=(($34)&65535);
 $36=((HEAP32[(($21)>>2)])|0);
 $37=(($36+40)|0);
 $38=((HEAP16[(($37)>>1)])|0);
 $39=((HEAP32[(($11)>>2)])|0);
 $40=(($39+8)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=(($41)&65535);
 $43=(($30+8)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=(($44)&65535);
 _lily_u16_write_5($32,35,$35,$38,$42,$45);
 $46=$30;
 $47=(($ast)|0);
 HEAP32[(($47)>>2)]=$46;
 STACKTOP=sp;return;
}


function _eval_oo_access($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,label=0;

 _eval_oo_access_for_item($emit,$ast);
 $1=(($ast+20)|0);
 $2=(($1)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+4)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($5<<16)>>16)==4;
 if ($6) {
  _oo_property_read($emit,$ast);
  return;
 } else {
  $9=$1;
  $10=((HEAP32[(($9)>>2)])|0);
  $11=(($10+12)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=((_get_storage($emit,$12))|0);
  $14=(($emit+16)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=(($ast+8)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=(($17)&65535);
  $19=((HEAP32[(($9)>>2)])|0);
  $20=(($19+8)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21)&65535);
  $23=(($13+8)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=(($24)&65535);
  _lily_u16_write_4($15,42,$18,$22,$25);
  $26=$13;
  $27=(($ast)|0);
  HEAP32[(($27)>>2)]=$26;
  return;
 }
}


function _eval_property($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 _ensure_valid_scope($emit,$3);
 $4=(($emit+80)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+22)|0);
 $7=$6;
 $8=((HEAP16[(($7)>>1)])|0);
 $9=(($8<<16)>>16)==14;
 if ($9) {
  _maybe_close_over_class_self($emit);
 }
 $12=$1;
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($13+12)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=($15|0)==0;
 if ($16) {
  $18=(($ast+8)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=(($emit+100)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21+16)|0);
  HEAP32[(($22)>>2)]=$19;
  $23=((HEAP32[(($20)>>2)])|0);
  $24=((HEAP32[(($12)>>2)])|0);
  $25=(($24+16)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  _lily_raise($23,1,11832,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$26,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $28=((HEAP32[(($12)>>2)])|0);
 $29=(($28+12)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=((_get_storage($emit,$30))|0);
 $32=(($emit+16)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=(($ast+8)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=(($35)&65535);
 $37=((HEAP32[(($12)>>2)])|0);
 $38=(($37+8)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=(($39)&65535);
 $41=(($emit+84)|0);
 $42=((HEAP32[(($41)>>2)])|0);
 $43=(($42+48)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=(($44+8)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 $47=(($46)&65535);
 $48=(($31+8)|0);
 $49=((HEAP32[(($48)>>2)])|0);
 $50=(($49)&65535);
 _lily_u16_write_5($33,45,$36,$40,$47,$50);
 $51=$31;
 $52=(($ast)|0);
 HEAP32[(($52)>>2)]=$51;
 STACKTOP=sp;return;
}


function _eval_variant($emit,$ast,$expect){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 var $p=0,$p3=0,$1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$45=0,$46=0,$48=0,$49=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0;
 var $65=0,$67=0,$68=0,$69=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$79=0,$80=0,$81=0,$82=0,$83=0,$padded_type_0=0,$85=0,$86=0,$87=0,$88=0;
 var $89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 $p=((sp)|0);
 $p3=(((sp)+(16))|0);
 $1=(($ast+4)|0);
 $2=$1;
 $3=((HEAP16[(($2)>>1)])|0);
 $4=$3&255;
 do {
  if ((((($4<<16)>>16))|0)==((0)|0)|(((($4<<16)>>16))|0)==((26)|0)) {
   $6=(($ast)|0);
   HEAP32[(($6)>>2)]=0;
   $7=(($ast+24)|0);
   $8=((HEAP32[(($7)>>2)])|0);
   $9=(($8+20)|0);
   $10=$9;
   $11=((HEAP32[(($10)>>2)])|0);
   $12=(($11+24)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=(($11+28)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=(($15+52)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $18=(($13+10)|0);
   $19=((HEAP16[(($18)>>1)])|0);
   $20=(($19<<16)>>16)==1;
   if ($20) {
    $22=(($emit+100)|0);
    $23=((HEAP32[(($22)>>2)])|0);
    $24=(($11+12)|0);
    $25=((HEAP32[(($24)>>2)])|0);
    _lily_raise($23,1,13616,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$25,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   $27=((_begin_call($emit,$ast))|0);
   $28=(($emit+108)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   _lily_ts_scope_save($29,$p);
   _eval_verify_call_args($emit,$27,$expect);
   $30=((HEAP32[(($28)>>2)])|0);
   $31=(($30+24)|0);
   $32=((HEAP32[(($31)>>2)])|0);
   $33=((_lily_ts_resolve_with($30,$17,$32))|0);
   _write_build_enum($emit,$27,$11);
   _end_call($emit,$27);
   $34=((HEAP32[(($28)>>2)])|0);
   _lily_ts_scope_restore($34,$p);
   $padded_type_0=$33;
  } else {
   $36=(($ast+20)|0);
   $37=$36;
   $38=((HEAP32[(($37)>>2)])|0);
   $39=(($38+28)|0);
   $40=((HEAP32[(($39)>>2)])|0);
   $41=(($40+52)|0);
   $42=((HEAP32[(($41)>>2)])|0);
   $43=(($38+6)|0);
   $44=((HEAP16[(($43)>>1)])|0);
   $45=$44&32;
   $46=(($45<<16)>>16)==0;
   if ($46) {
    $48=(($38+24)|0);
    $49=((HEAP32[(($48)>>2)])|0);
    _verify_argument_count($emit,$ast,$49,-1);
   }
   $51=(($emit+16)|0);
   $52=((HEAP32[(($51)>>2)])|0);
   $53=(($ast+8)|0);
   $54=((HEAP32[(($53)>>2)])|0);
   $55=(($54)&65535);
   $56=(($38+24)|0);
   $57=$56;
   $58=((HEAP32[(($57)>>2)])|0);
   $59=(($58+8)|0);
   $60=((HEAP32[(($59)>>2)])|0);
   $61=(($60)&65535);
   _lily_u16_write_3($52,42,$55,$61);
   $62=((HEAP32[(($39)>>2)])|0);
   $63=(($62+42)|0);
   $64=((HEAP16[(($63)>>1)])|0);
   $65=(($64<<16)>>16)==0;
   if ($65) {
    $padded_type_0=$42;
    break;
   }
   $67=(($emit+108)|0);
   $68=((HEAP32[(($67)>>2)])|0);
   _lily_ts_scope_save($68,$p3);
   $69=($expect|0)==0;
   do {
    if (!($69)) {
     $71=(($expect)|0);
     $72=((HEAP32[(($71)>>2)])|0);
     $73=((HEAP32[(($39)>>2)])|0);
     $74=($72|0)==($73|0);
     if (!($74)) {
      break;
     }
     $76=((HEAP32[(($67)>>2)])|0);
     $77=((_lily_ts_check($76,$42,$expect))|0);
    }
   } while(0);
   $79=((HEAP32[(($67)>>2)])|0);
   $80=(($79+24)|0);
   $81=((HEAP32[(($80)>>2)])|0);
   $82=((_lily_ts_resolve_with($79,$42,$81))|0);
   $83=((HEAP32[(($67)>>2)])|0);
   _lily_ts_scope_restore($83,$p3);
   $padded_type_0=$82;
  }
 } while(0);

 $85=(($emit+16)|0);
 $86=((HEAP32[(($85)>>2)])|0);
 $87=(($86+4)|0);
 $88=((HEAP32[(($87)>>2)])|0);
 $89=(($88)&65535);
 $90=(($ast+12)|0);
 HEAP16[(($90)>>1)]=$89;
 $91=((_get_storage($emit,$padded_type_0))|0);
 $92=((HEAP32[(($85)>>2)])|0);
 $93=(($91+8)|0);
 $94=((HEAP32[(($93)>>2)])|0);
 $95=(($94)&65535);
 _lily_u16_write_1($92,$95);
 $96=$91;
 $97=(($ast)|0);
 HEAP32[(($97)>>2)]=$96;
 STACKTOP=sp;return;
}


function _eval_lambda($emit,$ast,$expect){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$expect_=0,$_0=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$43=0;
 var $44=0,label=0;

 $1=(($emit+92)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($emit+104)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($ast+16)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((_lily_sp_get($4,$6))|0);
 $8=($expect|0)==0;
 if ($8) {
  $_0=0;
 } else {
  $10=(($expect)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=(($11+40)|0);
  $13=((HEAP16[(($12)>>1)])|0);
  $14=(($13<<16)>>16)==5;
  $expect_=($14?$expect:0);
  $_0=$expect_;
 }

 $16=(($emit+116)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($ast+8)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=((_lily_parser_lambda_eval($17,$19,$7,$_0))|0);
 HEAP32[(($1)>>2)]=$2;
 $21=(($20+12)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((_get_storage($emit,$22))|0);
 $24=(($emit+80)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25+20)|0);
 $27=((HEAP8[($26)])|0);
 $28=(($27<<24)>>24)==0;
 if ($28) {
  $30=(($emit+16)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=((HEAP32[(($18)>>2)])|0);
  $33=(($32)&65535);
  $34=(($20+8)|0);
  $35=((HEAP32[(($34)>>2)])|0);
  $36=(($35)&65535);
  $37=(($23+8)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=(($38)&65535);
  _lily_u16_write_4($31,42,$33,$36,$39);
  $43=$23;
  $44=(($ast)|0);
  HEAP32[(($44)>>2)]=$43;
  return;
 } else {
  $41=$20;
  _emit_create_function($emit,$41,$23);
  $43=$23;
  $44=(($ast)|0);
  HEAP32[(($44)>>2)]=$43;
  return;
 }
}


function _create_code_block_for($emit,$function_block){
 $emit=($emit)|0;
 $function_block=($function_block)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$class_name_0=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$code_start_0=0,$code_size_0=0,$_pn=0,$source_0_in=0,$source_0=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,label=0;

 $1=(($function_block+44)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  $class_name_0=0;
 } else {
  $5=(($2+12)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  $class_name_0=$6;
 }

 $8=(($function_block+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+16)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((_lily_new_native_function_val($class_name_0,$11))|0);
 $13=(($emit+120)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 _lily_tie_function($14,$9,$12);
 $15=(($function_block+20)|0);
 $16=((HEAP8[($15)])|0);
 $17=(($16<<24)>>24)==0;
 if ($17) {
  $19=(($emit+84)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=(($20+24)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=(($emit+16)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=(($24+4)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((($26)-($22))|0);
  $_pn=$24;$code_size_0=$27;$code_start_0=$22;
 } else {
  _perform_closure_transform($emit,$12);
  $29=(($emit+20)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $31=(($30+4)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $_pn=$30;$code_size_0=$32;$code_start_0=0;
 }



 $source_0_in=(($_pn)|0);
 $source_0=((HEAP32[(($source_0_in)>>2)])|0);
 $34=$code_size_0<<1;
 $35=((($34)+(2))|0);
 $36=((_lily_malloc($35))|0);
 $37=$36;
 $38=(($source_0+($code_start_0<<1))|0);
 $39=$38;
 (_memcpy((($36)|0), (($39)|0), $34)|0);
 $40=(($12+28)|0);
 HEAP32[(($40)>>2)]=$37;
 return (($12)|0);
}


function _grow_closed_syms($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;

 $1=(($emit+46)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=$2<<1;
 HEAP16[(($1)>>1)]=$3;
 $4=(($emit+24)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5;
 $7=($3&65535);
 $8=$7<<2;
 $9=((_lily_realloc($6,$8))|0);
 $10=$9;
 HEAP32[(($4)>>2)]=$10;
 return;
}


function _ensure_valid_scope($emit,$sym){
 $emit=($emit)|0;
 $sym=($sym)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$19=0,$20=0,$parent_0_in=0,$name_0_in=0,$parent_0=0;
 var $name_0=0,$22=0,$_not=0,$23=0,$or_cond=0,$25=0,$27=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($sym+6)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=$3&24;
 $5=($4|0)==0;
 if ($5) {
  STACKTOP=sp;return;
 }
 $7=(($emit+84)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+44)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$3&8;
 $12=(($sym+4)|0);
 $13=((HEAP16[(($12)>>1)])|0);
 $14=(($13<<16)>>16)==4;
 if ($14) {
  $16=(($sym+32)|0);
  $17=$16;
  $parent_0_in=$17;
 } else {
  $19=(($sym+40)|0);
  $20=$19;
  $parent_0_in=$20;
 }

 $name_0_in=(($sym+16)|0);
 $parent_0=((HEAP32[(($parent_0_in)>>2)])|0);
 $name_0=((HEAP32[(($name_0_in)>>2)])|0);
 $22=($11|0)!=0;
 $_not=$22^1;
 $23=($10|0)==($parent_0|0);
 $or_cond=$23|$_not;
 do {
  if ($or_cond) {
   $25=($11|0)==0;
   if (!($25)) {
    STACKTOP=sp;return;
   }
   $27=($10|0)==0;
   if ($27) {
    break;
   }
   $29=((_lily_class_greater_eq($parent_0,$10))|0);
   $30=($29|0)==0;
   if ($30) {
    break;
   }
   STACKTOP=sp;return;
  }
 } while(0);
 $32=($22?12232:12112);
 $33=(($emit+100)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=(($parent_0+12)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 _lily_raise($34,1,11976,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$36,HEAP32[(((tempVarArgs)+(8))>>2)]=$name_0,HEAP32[(((tempVarArgs)+(16))>>2)]=$32,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _emit_create_function($emit,$func_sym,$target){
 $emit=($emit)|0;
 $func_sym=($func_sym)|0;
 $target=($target)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,label=0;

 $1=(($emit+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($func_sym+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4)&65535);
 $6=(($target+8)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7)&65535);
 _lily_u16_write_4($2,61,0,$5,$8);
 $9=(($emit+80)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+20)|0);
 HEAP8[($11)]=1;
 return;
}


function _begin_call($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0,$45=0,$46=0;
 var $47=0,$48=0,$50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$call_item_07=0,$66=0,$67=0,$68=0;
 var $call_item_06=0,$call_type_1=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$or_cond5=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$88=0;
 var $89=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$106=0,$107=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($emit+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_call_state($emit);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+12)|0);
 HEAP32[(($9)>>2)]=$ast;
 $10=(($2+26)|0);
 HEAP16[(($10)>>1)]=0;
 $11=(($ast+24)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12+4)|0);
 $14=$13;
 $15=((HEAP16[(($14)>>1)])|0);
 $16=$15&255;
 L4: do {
  switch ((($16<<16)>>16)) {
  case 18:case 17:case 6: {
   $18=(($12+20)|0);
   $19=(($18)|0);
   $20=((HEAP32[(($19)>>2)])|0);
   $21=(($20+6)|0);
   $22=((HEAP16[(($21)>>1)])|0);
   $23=$22&256;
   $24=(($23<<16)>>16)==0;
   if ($24) {
    $call_item_07=$20;
    label = 11;
    break L4;
   }
   $26=$18;
   $27=((HEAP32[(($26)>>2)])|0);
   $28=(($27+12)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=((_get_storage($emit,$29))|0);
   $31=((HEAP32[(($11)>>2)])|0);
   $32=(($31+20)|0);
   $33=$32;
   $34=((HEAP32[(($33)>>2)])|0);
   _emit_create_function($emit,$34,$30);
   $35=$30;
   $call_item_07=$35;
   label = 11;
   break;
  }
  case 8: {
   _eval_oo_access_for_item($emit,$12);
   $44=(($12+20)|0);
   $45=((HEAP32[(($44)>>2)])|0);
   $46=(($45+4)|0);
   $47=((HEAP16[(($46)>>1)])|0);
   $48=(($47<<16)>>16)==4;
   if (!($48)) {
    $call_item_07=$45;
    label = 11;
    break L4;
   }
   _oo_property_read($emit,$12);
   $50=(($12)|0);
   $51=((HEAP32[(($50)>>2)])|0);
   $52=$51;
   $call_item_07=$52;
   label = 11;
   break;
  }
  case 19: {
   $37=(($12+20)|0);
   $38=$37;
   $39=((HEAP32[(($38)>>2)])|0);
   _ensure_valid_scope($emit,$39);
   $40=((HEAP32[(($11)>>2)])|0);
   $41=(($40+20)|0);
   $42=((HEAP32[(($41)>>2)])|0);
   $call_item_07=$42;
   label = 11;
   break;
  }
  case 14: {
   $59=(($12+20)|0);
   $60=$59;
   $61=((HEAP32[(($60)>>2)])|0);
   $62=$61;
   $63=(($61+24)|0);
   $64=((HEAP32[(($63)>>2)])|0);
   $65=($64|0)==0;
   if ($65) {
    $call_item_07=$62;
    label = 11;
   } else {
    $call_type_1=$64;$call_item_06=$62;
   }
   break;
  }
  default: {
   _eval_tree($emit,$12,0);
   $54=((HEAP32[(($11)>>2)])|0);
   $55=(($54)|0);
   $56=((HEAP32[(($55)>>2)])|0);
   $57=$56;
   $call_item_07=$57;
   label = 11;
  }
  }
 } while(0);
 if ((label|0) == 11) {

  $66=(($call_item_07+12)|0);
  $67=$66;
  $68=((HEAP32[(($67)>>2)])|0);
  $call_type_1=$68;$call_item_06=$call_item_07;
 }


 $70=(($call_type_1)|0);
 $71=((HEAP32[(($70)>>2)])|0);
 $72=(($71+40)|0);
 $73=((HEAP16[(($72)>>1)])|0);
 $74=(($73<<16)>>16)!=5;
 $75=(($16<<16)>>16)!=14;
 $or_cond5=$74&$75;
 if ($or_cond5) {
  $77=(($ast+8)|0);
  $78=((HEAP32[(($77)>>2)])|0);
  $79=(($emit+100)|0);
  $80=((HEAP32[(($79)>>2)])|0);
  $81=(($80+16)|0);
  HEAP32[(($81)>>2)]=$78;
  $82=((HEAP32[(($79)>>2)])|0);
  _lily_raise($82,1,12712,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$call_type_1,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $84=(($2+8)|0);
 HEAP32[(($84)>>2)]=$call_item_06;
 $85=(($2+16)|0);
 HEAP32[(($85)>>2)]=$call_type_1;
 $86=(($call_type_1+6)|0);
 $87=((HEAP16[(($86)>>1)])|0);
 $88=$87&1;
 $89=(($88<<16)>>16)==0;
 if ($89) {
  $106=(($2+20)|0);
  HEAP32[(($106)>>2)]=0;
  $107=(($2+24)|0);
  HEAP16[(($107)>>1)]=-1;
  STACKTOP=sp;return (($2)|0);
 } else {
  $91=(($call_type_1+10)|0);
  $92=((HEAP16[(($91)>>1)])|0);
  $93=($92&65535);
  $94=((($93)-(1))|0);
  $95=(($call_type_1+12)|0);
  $96=((HEAP32[(($95)>>2)])|0);
  $97=(($96+($94<<2))|0);
  $98=((HEAP32[(($97)>>2)])|0);
  $99=(($98+12)|0);
  $100=((HEAP32[(($99)>>2)])|0);
  $101=((HEAP32[(($100)>>2)])|0);
  $102=(($2+20)|0);
  HEAP32[(($102)>>2)]=$101;
  $103=(($94)&65535);
  $104=(($2+24)|0);
  HEAP16[(($104)>>1)]=$103;
  STACKTOP=sp;return (($2)|0);
 }
  return 0;
}


function _eval_verify_call_args($emit,$cs,$expect){
 $emit=($emit)|0;
 $cs=($cs)|0;
 $expect=($expect)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$arg_0_in1=0,$arg_02=0,$9=0,$arg_03=0,$arg_0_in=0,$arg_0=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0;
 var $16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$vararg_type_0=0,$36=0,$37=0;
 var $38=0,$39=0,label=0;

 $1=(($cs+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+14)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=((($5)-(1))|0);
 _validate_and_prep_call($emit,$cs,$expect,$6);
 $7=(($2+24)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $arg_0_in1=(($8+32)|0);
 $arg_02=((HEAP32[(($arg_0_in1)>>2)])|0);
 $9=($arg_02|0)==0;
 if (!($9)) {
  $arg_03=$arg_02;
  while(1) {

   _eval_call_arg($emit,$cs,$arg_03);
   $arg_0_in=(($arg_03+32)|0);
   $arg_0=((HEAP32[(($arg_0_in)>>2)])|0);
   $10=($arg_0|0)==0;
   if ($10) {
    break;
   } else {
    $arg_03=$arg_0;
   }
  }
 }
 $11=(($emit+108)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 _lily_ts_default_incomplete_solves($12);
 $13=(($cs+16)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+6)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=$16&1;
 $18=(($17<<16)>>16)==0;
 if ($18) {
  return;
 }
 $20=(($14+10)|0);
 $21=((HEAP16[(($20)>>1)])|0);
 $22=($21&65535);
 $23=((($22)-(1))|0);
 $24=(($14+12)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25+($23<<2))|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=(($27+6)|0);
 $29=((HEAP16[(($28)>>1)])|0);
 $30=$29&4;
 $31=(($30<<16)>>16)==0;
 if ($31) {
  $vararg_type_0=$27;
 } else {
  $33=((HEAP32[(($11)>>2)])|0);
  $34=((_lily_ts_resolve($33,$27))|0);
  $vararg_type_0=$34;
 }

 $36=((HEAP32[(($13)>>2)])|0);
 $37=(($36+10)|0);
 $38=((HEAP16[(($37)>>1)])|0);
 $39=((($38)-(2))&65535);
 _write_varargs($emit,$cs,$vararg_type_0,$39);
 return;
}


function _write_call($emit,$cs){
 $emit=($emit)|0;
 $cs=($cs)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$return_type_0=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0;
 var $66=0,$67=0,$68=0,$69=0,$71=0,$72=0,$73=0,$75=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0;
 var $90=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($cs+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($cs+12)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($3+6)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=$7&64;
 $9=(($8<<16)>>16)==0;
 if ($9) {
  $25=(($emit+16)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=(($5+8)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=(($28)&65535);
  $30=(($3+8)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=(($31)&65535);
  $33=(($cs+26)|0);
  $34=((HEAP16[(($33)>>1)])|0);
  _lily_u16_write_4($26,26,$29,$32,$34);
 } else {
  $11=($7&65535)>>>10;
  $12=$11&1;
  $13=$12^25;
  $14=(($emit+16)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=(($5+8)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=(($17)&65535);
  $19=(($3+8)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=(($20)&65535);
  $22=(($cs+26)|0);
  $23=((HEAP16[(($22)>>1)])|0);
  _lily_u16_write_4($15,$13,$18,$21,$23);
 }
 $36=(($emit+16)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 _lily_u16_write_1($37,0);
 $38=(($cs+16)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=(($39+12)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=((HEAP32[(($41)>>2)])|0);
 $43=($42|0)==0;
 if (!($43)) {
  $45=(($42+6)|0);
  $46=((HEAP16[(($45)>>1)])|0);
  $47=$46&36;
  $48=(($47<<16)>>16)==0;
  if ($48) {
   $return_type_0=$42;
  } else {
   $50=(($emit+108)|0);
   $51=((HEAP32[(($50)>>2)])|0);
   $52=((_lily_ts_resolve($51,$42))|0);
   $return_type_0=$52;
  }

  $54=((_get_storage($emit,$return_type_0))|0);
  $55=(($54+6)|0);
  $56=((HEAP16[(($55)>>1)])|0);
  $57=$56|2;
  HEAP16[(($55)>>1)]=$57;
  $58=$54;
  $59=(($5)|0);
  HEAP32[(($59)>>2)]=$58;
  $60=(($54+8)|0);
  $61=((HEAP32[(($60)>>2)])|0);
  $62=(($61)&65535);
  $63=((HEAP32[(($36)>>2)])|0);
  $64=(($63+4)|0);
  $65=((HEAP32[(($64)>>2)])|0);
  $66=((($65)-(1))|0);
  $67=(($63)|0);
  $68=((HEAP32[(($67)>>2)])|0);
  $69=(($68+($66<<1))|0);
  HEAP16[(($69)>>1)]=$62;
  $92=((HEAP32[(($36)>>2)])|0);
  $93=(($92+4)|0);
  $94=((HEAP32[(($93)>>2)])|0);
  $95=((($94)+(65535))|0);
  $96=(($95)&65535);
  $97=(($5+12)|0);
  HEAP16[(($97)>>1)]=$96;
  _write_call_values($emit,$cs,0);
  STACKTOP=sp;return;
 }
 $71=(($5+28)|0);
 $72=((HEAP32[(($71)>>2)])|0);
 $73=($72|0)==0;
 if ($73) {
  $75=(($5)|0);
  HEAP32[(($75)>>2)]=0;
 } else {
  $77=(($5+8)|0);
  $78=((HEAP32[(($77)>>2)])|0);
  $79=(($emit+100)|0);
  $80=((HEAP32[(($79)>>2)])|0);
  $81=(($80+16)|0);
  HEAP32[(($81)>>2)]=$78;
  $82=((HEAP32[(($79)>>2)])|0);
  _lily_raise($82,1,5592,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=17904,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $84=((HEAP32[(($36)>>2)])|0);
 $85=(($84+4)|0);
 $86=((HEAP32[(($85)>>2)])|0);
 $87=((($86)-(1))|0);
 $88=(($84)|0);
 $89=((HEAP32[(($88)>>2)])|0);
 $90=(($89+($87<<1))|0);
 HEAP16[(($90)>>1)]=0;
 $92=((HEAP32[(($36)>>2)])|0);
 $93=(($92+4)|0);
 $94=((HEAP32[(($93)>>2)])|0);
 $95=((($94)+(65535))|0);
 $96=(($95)&65535);
 $97=(($5+12)|0);
 HEAP16[(($97)>>1)]=$96;
 _write_call_values($emit,$cs,0);
 STACKTOP=sp;return;
}


function _end_call($emit,$cs){
 $emit=($emit)|0;
 $cs=($cs)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;

 $1=(($cs+26)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($emit+40)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=((($4)-($2))&65535);
 HEAP16[(($3)>>1)]=$5;
 $6=(($emit+12)|0);
 HEAP32[(($6)>>2)]=$cs;
 return;
}


function _opname($op){
 $op=($op)|0;
 var $1=0,$2=0,label=0;

 $1=((1280+($op<<2))|0);
 $2=((HEAP32[(($1)>>2)])|0);
 return (($2)|0);
}


function _bad_assign_error($emit,$line_num,$left_type,$right_type){
 $emit=($emit)|0;
 $line_num=($line_num)|0;
 $left_type=($left_type)|0;
 $right_type=($right_type)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($emit+100)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+16)|0);
 HEAP32[(($3)>>2)]=$line_num;
 $4=((HEAP32[(($1)>>2)])|0);
 _lily_raise($4,1,5976,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$right_type,HEAP32[(((tempVarArgs)+(8))>>2)]=$left_type,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _emit_op_for_compound($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$12=0,$13=0,$14=0,$15=0,$spoof_op_0_off0=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+4)|0);
 $2=$1;
 $3=((HEAP16[(($2)>>1)])|0);
 $4=($3&65535)>>>8;
 switch ((($4<<16)>>16)) {
 case 26: {
  $spoof_op_0_off0=2560;
  break;
 }
 case 22: {
  $spoof_op_0_off0=0;
  break;
 }
 case 23: {
  $spoof_op_0_off0=256;
  break;
 }
 case 28: {
  $spoof_op_0_off0=3072;
  break;
 }
 case 27: {
  $spoof_op_0_off0=2816;
  break;
 }
 case 24: {
  $spoof_op_0_off0=2048;
  break;
 }
 case 25: {
  $spoof_op_0_off0=2304;
  break;
 }
 default: {
  $12=($4&65535);
  $13=(($emit+100)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=((_opname($12))|0);
  _lily_raise($14,1,6120,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$15,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $spoof_op_0_off0=-256;
 }
 }

 $17=((HEAP16[(($2)>>1)])|0);
 $18=$17&255;
 $19=$18|$spoof_op_0_off0;
 HEAP16[(($2)>>1)]=$19;
 _emit_binary_op($emit,$ast);
 $20=((HEAP16[(($2)>>1)])|0);
 $21=$4<<8;
 $22=$20&255;
 $23=$22|$21;
 HEAP16[(($2)>>1)]=$23;
 STACKTOP=sp;return;
}


function _assign_optimize_check($ast){
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$ast_pn=0,$right_tree_0_in=0,$right_tree_0=0,$9=0,$10=0,$11=0,$12=0,$14=0,$switch=0,$15=0,$16=0,$17=0;
 var $18=0,$or_cond=0,$19=0,$_=0,label=0;

 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+4)|0);
 $5=$4;
 $6=((HEAP16[(($5)>>1)])|0);
 $7=$6&255;
 $8=(($7<<16)>>16)==7;
 if ($8) {
  return ((0)|0);
 } else {
  $ast_pn=$ast;
 }
 while(1) {

  $right_tree_0_in=(($ast_pn+24)|0);
  $right_tree_0=((HEAP32[(($right_tree_0_in)>>2)])|0);
  $9=(($right_tree_0+4)|0);
  $10=$9;
  $11=((HEAP16[(($10)>>1)])|0);
  $12=$11&255;
  if ((((($12<<16)>>16))|0)==((5)|0)) {
   label = 5;
   break;
  } else if ((((($12<<16)>>16))|0)==((26)|0)) {
   label = 3;
   break;
  } else if ((((($12<<16)>>16))|0)==((4)|0)) {
   $ast_pn=$right_tree_0;
  } else {
   break;
  }
 }
 if ((label|0) == 5) {
  return ((0)|0);
 }
 do {
  if ((label|0) == 3) {
   $14=$11&-512;
   $switch=(($14<<16)>>16)==4608;
   if (!($switch)) {
    break;
   }
   return ((0)|0);
  }
 } while(0);
 $15=((HEAP16[(($10)>>1)])|0);
 $16=$15&255;
 $17=(($16<<16)>>16)==26;
 $18=((($15&65535))>>>0)>((5375)>>>0);
 $or_cond=$17&$18;
 $19=($or_cond&1);
 $_=$19^1;
 return (($_)|0);
}


function _determine_left_type($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$24=0;
 var $25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$46=0,$47=0,$48=0;
 var $49=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$77=0,$78=0,$79=0,$result_type_0=0,label=0;

 $1=(($ast+4)|0);
 $2=$1;
 $3=((HEAP16[(($2)>>1)])|0);
 $4=$3&255;
 do {
  if ((((($4<<16)>>16))|0)==((1)|0)) {
   $12=(($ast+24)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=(($13+32)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=((_determine_left_type($emit,$13))|0);
   $17=($16|0)==0;
   if ($17) {
    $result_type_0=0;
    break;
   }
   $19=(($16)|0);
   $20=((HEAP32[(($19)>>2)])|0);
   $21=(($20+40)|0);
   $22=((HEAP16[(($21)>>1)])|0);
   if ((((($22<<16)>>16))|0)==((7)|0)) {
    $51=(($16+12)|0);
    $52=((HEAP32[(($51)>>2)])|0);
    $53=((HEAP32[(($52)>>2)])|0);
    $result_type_0=$53;
    break;
   } else if ((((($22<<16)>>16))|0)==((9)|0)) {
    $29=(($15+4)|0);
    $30=$29;
    $31=((HEAP16[(($30)>>1)])|0);
    $32=$31&255;
    $33=(($32<<16)>>16)==25;
    if (!($33)) {
     $result_type_0=0;
     break;
    }
    $35=(($15+16)|0);
    $36=$35;
    $37=((HEAP16[(($36)>>1)])|0);
    $38=(($37<<16)>>16);
    $39=(($37<<16)>>16)<0;
    if ($39) {
     $result_type_0=0;
     break;
    }
    $41=(($16+10)|0);
    $42=((HEAP16[(($41)>>1)])|0);
    $43=($42&65535);
    $44=($38|0)>($43|0);
    if ($44) {
     $result_type_0=0;
     break;
    }
    $46=(($16+12)|0);
    $47=((HEAP32[(($46)>>2)])|0);
    $48=(($47+($38<<2))|0);
    $49=((HEAP32[(($48)>>2)])|0);
    $result_type_0=$49;
    break;
   } else if ((((($22<<16)>>16))|0)==((8)|0)) {
    $24=(($16+12)|0);
    $25=((HEAP32[(($24)>>2)])|0);
    $26=(($25+4)|0);
    $27=((HEAP32[(($26)>>2)])|0);
    $result_type_0=$27;
    break;
   } else {
    $result_type_0=$16;
    break;
   }
  } else if ((((($4<<16)>>16))|0)==((7)|0)|(((($4<<16)>>16))|0)==((5)|0)) {
   $6=(($ast+20)|0);
   $7=$6;
   $8=((HEAP32[(($7)>>2)])|0);
   $9=(($8+12)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $result_type_0=$10;
  } else if ((((($4<<16)>>16))|0)==((8)|0)) {
   $55=(($ast+24)|0);
   $56=((HEAP32[(($55)>>2)])|0);
   $57=((_determine_left_type($emit,$56))|0);
   $58=($57|0)==0;
   if ($58) {
    $result_type_0=0;
    break;
   }
   $60=(($emit+104)|0);
   $61=((HEAP32[(($60)>>2)])|0);
   $62=(($ast+16)|0);
   $63=((HEAP32[(($62)>>2)])|0);
   $64=((_lily_sp_get($61,$63))|0);
   $65=(($57)|0);
   $66=((HEAP32[(($65)>>2)])|0);
   $67=((_lily_find_property($66,$64))|0);
   $68=($67|0)==0;
   if ($68) {
    $result_type_0=0;
    break;
   }
   $70=(($67+12)|0);
   $71=((HEAP32[(($70)>>2)])|0);
   $72=(($71+6)|0);
   $73=((HEAP16[(($72)>>1)])|0);
   $74=$73&4;
   $75=(($74<<16)>>16)==0;
   if ($75) {
    $result_type_0=$71;
    break;
   }
   $77=(($emit+108)|0);
   $78=((HEAP32[(($77)>>2)])|0);
   $79=((_lily_ts_resolve_by_second($78,$57,$71))|0);
   $result_type_0=$79;
  } else {
   $result_type_0=0;
  }
 } while(0);

 return (($result_type_0)|0);
}


function _check_valid_subscript($emit,$var_ast,$index_ast){
 $emit=($emit)|0;
 $var_ast=($var_ast)|0;
 $index_ast=($index_ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$43=0,$44=0;
 var $45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$63=0,$64=0,$65=0,$66=0,$67=0;
 var $68=0,$69=0,$70=0,$72=0,$73=0,$74=0,$75=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0;
 var $91=0,$92=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($var_ast)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+40)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 if ((((($8<<16)>>16))|0)==((8)|0)) {
  $34=(($4+12)|0);
  $35=((HEAP32[(($34)>>2)])|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=(($index_ast)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=(($38+12)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=($36|0)==($40|0);
  if ($41) {
   STACKTOP=sp;return;
  }
  $43=(($var_ast+8)|0);
  $44=((HEAP32[(($43)>>2)])|0);
  $45=(($emit+100)|0);
  $46=((HEAP32[(($45)>>2)])|0);
  $47=(($46+16)|0);
  HEAP32[(($47)>>2)]=$44;
  $48=((HEAP32[(($45)>>2)])|0);
  _lily_raise($48,1,11376,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$36,HEAP32[(((tempVarArgs)+(8))>>2)]=$40,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  STACKTOP=sp;return;
 } else if ((((($8<<16)>>16))|0)==((9)|0)) {
  $50=(($index_ast+4)|0);
  $51=$50;
  $52=((HEAP16[(($51)>>1)])|0);
  $53=$52&255;
  $54=(($53<<16)>>16)==25;
  if (!($54)) {
   $56=(($var_ast+8)|0);
   $57=((HEAP32[(($56)>>2)])|0);
   $58=(($emit+100)|0);
   $59=((HEAP32[(($58)>>2)])|0);
   $60=(($59+16)|0);
   HEAP32[(($60)>>2)]=$57;
   $61=((HEAP32[(($58)>>2)])|0);
   _lily_raise($61,1,11272,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=17904,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $63=(($index_ast+16)|0);
  $64=$63;
  $65=((HEAP16[(($64)>>1)])|0);
  $66=(($65<<16)>>16);
  $67=((HEAP32[(($1)>>2)])|0);
  $68=(($67+12)|0);
  $69=((HEAP32[(($68)>>2)])|0);
  $70=(($65<<16)>>16)<0;
  do {
   if (!($70)) {
    $72=(($69+10)|0);
    $73=((HEAP16[(($72)>>1)])|0);
    $74=($73&65535);
    $75=($66|0)<($74|0);
    if (!($75)) {
     break;
    }
    STACKTOP=sp;return;
   }
  } while(0);
  $77=(($var_ast+8)|0);
  $78=((HEAP32[(($77)>>2)])|0);
  $79=(($emit+100)|0);
  $80=((HEAP32[(($79)>>2)])|0);
  $81=(($80+16)|0);
  HEAP32[(($81)>>2)]=$78;
  $82=((HEAP32[(($79)>>2)])|0);
  _lily_raise($82,1,11136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$66,HEAP32[(((tempVarArgs)+(8))>>2)]=$69,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  STACKTOP=sp;return;
 } else if ((((($8<<16)>>16))|0)==((7)|0)|(((($8<<16)>>16))|0)==((2)|0)) {
  $10=(($index_ast)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=(($11+12)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=(($13)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=(($15+40)|0);
  $17=((HEAP16[(($16)>>1)])|0);
  $18=(($17<<16)>>16)==0;
  if ($18) {
   STACKTOP=sp;return;
  }
  $20=(($var_ast+8)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($emit+100)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=(($23+16)|0);
  HEAP32[(($24)>>2)]=$21;
  $25=((HEAP32[(($22)>>2)])|0);
  $26=((HEAP32[(($1)>>2)])|0);
  $27=(($26+12)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=(($28)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $31=(($30+12)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  _lily_raise($25,1,11528,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$32,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  STACKTOP=sp;return;
 } else {
  $84=(($var_ast+8)|0);
  $85=((HEAP32[(($84)>>2)])|0);
  $86=(($emit+100)|0);
  $87=((HEAP32[(($86)>>2)])|0);
  $88=(($87+16)|0);
  HEAP32[(($88)>>2)]=$85;
  $89=((HEAP32[(($86)>>2)])|0);
  $90=((HEAP32[(($1)>>2)])|0);
  $91=(($90+12)|0);
  $92=((HEAP32[(($91)>>2)])|0);
  _lily_raise($89,1,11048,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$92,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  STACKTOP=sp;return;
 }
}


function _get_subscript_result($type,$index_ast){
 $type=($type)|0;
 $index_ast=($index_ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$result_0=0;
 var label=0;

 $1=(($type)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 if ((((($4<<16)>>16))|0)==((7)|0)) {
  $6=(($type+12)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $result_0=$8;
 } else if ((((($4<<16)>>16))|0)==((9)|0)) {
  $15=(($index_ast+16)|0);
  $16=$15;
  $17=((HEAP16[(($16)>>1)])|0);
  $18=(($17<<16)>>16);
  $19=(($type+12)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=(($20+($18<<2))|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $result_0=$22;
 } else if ((((($4<<16)>>16))|0)==((2)|0)) {
  $result_0=$type;
 } else if ((((($4<<16)>>16))|0)==((8)|0)) {
  $10=(($type+12)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=(($11+4)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $result_0=$13;
 } else {
  $result_0=0;
 }

 return (($result_0)|0);
}


function _eval_oo_access_for_item($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$lookup_class_0=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0;
 var $47=0,$48=0,$49=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$67=0,$68=0,$70=0,$72=0;
 var label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($emit+80)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+22)|0);
 $4=$3;
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($5<<16)>>16)==14;
 do {
  if ($6) {
   $8=(($ast+24)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $10=(($9+4)|0);
   $11=$10;
   $12=((HEAP16[(($11)>>1)])|0);
   $13=$12&255;
   $14=(($13<<16)>>16)==20;
   if (!($14)) {
    break;
   }
   _maybe_close_over_class_self($emit);
  }
 } while(0);
 $17=(($ast+24)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+4)|0);
 $20=$19;
 $21=((HEAP16[(($20)>>1)])|0);
 $22=$21&255;
 $23=(($22<<16)>>16)==5;
 if (!($23)) {
  _eval_tree($emit,$18,0);
 }
 $26=((HEAP32[(($17)>>2)])|0);
 $27=(($26)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($28+12)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=(($30)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=(($32+6)|0);
 $34=((HEAP16[(($33)>>1)])|0);
 $35=$34&8;
 $36=(($35<<16)>>16)==0;
 if ($36) {
  $lookup_class_0=$32;
 } else {
  $38=(($32+28)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  $lookup_class_0=$39;
 }

 $41=(($emit+104)|0);
 $42=((HEAP32[(($41)>>2)])|0);
 $43=(($ast+16)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=((_lily_sp_get($42,$44))|0);
 $46=(($emit+116)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=((_lily_find_or_dl_member($47,$lookup_class_0,$45))|0);
 $49=($48|0)==0;
 if ($49) {
  $51=(($emit+100)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=(($lookup_class_0+12)|0);
  $54=((HEAP32[(($53)>>2)])|0);
  _lily_raise($52,1,12552,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$54,HEAP32[(((tempVarArgs)+(8))>>2)]=$45,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $72=$48;
  _ensure_valid_scope($emit,$72);
  STACKTOP=sp;return;
 }
 $56=(($48+4)|0);
 $57=((HEAP16[(($56)>>1)])|0);
 $58=(($57<<16)>>16)==4;
 do {
  if ($58) {
   $60=((HEAP32[(($17)>>2)])|0);
   $61=(($60+4)|0);
   $62=$61;
   $63=((HEAP16[(($62)>>1)])|0);
   $64=$63&255;
   $65=(($64<<16)>>16)==20;
   if (!($65)) {
    break;
   }
   $67=(($emit+100)|0);
   $68=((HEAP32[(($67)>>2)])|0);
   _lily_raise($68,1,12360,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   $72=$48;
   _ensure_valid_scope($emit,$72);
   STACKTOP=sp;return;
  }
 } while(0);
 $70=(($ast+20)|0);
 HEAP32[(($70)>>2)]=$48;
 $72=$48;
 _ensure_valid_scope($emit,$72);
 STACKTOP=sp;return;
}


function _get_solved_property_type($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$property_type_0=0,label=0;

 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+12)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+6)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=$7&4;
 $9=(($8<<16)>>16)==0;
 if ($9) {
  $property_type_0=$5;

  return (($property_type_0)|0);
 }
 $11=(($emit+108)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($ast+24)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+12)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((_lily_ts_resolve_by_second($12,$18,$5))|0);
 $property_type_0=$19;

 return (($property_type_0)|0);
}


function _oo_property_read($emit,$ast){
 $emit=($emit)|0;
 $ast=($ast)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,label=0;

 $1=(($ast+20)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((_get_solved_property_type($emit,$ast))|0);
 $5=((_get_storage($emit,$4))|0);
 $6=(($emit+16)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($ast+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9)&65535);
 $11=(($3+8)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12)&65535);
 $14=(($ast+24)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17+8)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19)&65535);
 $21=(($5+8)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22)&65535);
 _lily_u16_write_5($7,45,$10,$13,$20,$23);
 $24=$5;
 $25=(($ast)|0);
 HEAP32[(($25)>>2)]=$24;
 return;
}


function _maybe_close_over_class_self($emit){
 $emit=($emit)|0;
 var $1=0,$block_0_in=0,$block_0=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$27=0,$28=0,$29=0,label=0;

 $1=(($emit+84)|0);
 $block_0_in=$1;
 while(1) {

  $block_0=((HEAP32[(($block_0_in)>>2)])|0);
  $3=(($block_0+22)|0);
  $4=$3;
  $5=((HEAP16[(($4)>>1)])|0);
  $6=(($5<<16)>>16)==13;
  $7=(($block_0+56)|0);
  if ($6) {
   break;
  } else {
   $block_0_in=$7;
  }
 }
 $9=(($block_0+48)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$10;
 $12=((_find_closed_sym_spot($emit,$11))|0);
 $13=($12|0)==-1;
 if ($13) {
  _close_over_sym($emit,$11);
 }
 $16=((HEAP32[(($1)>>2)])|0);
 $17=(($16+48)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=($18|0)==0;
 if (!($19)) {
  $27=(($emit+80)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=(($28+20)|0);
  HEAP8[($29)]=1;
  return;
 }
 $21=(($10+12)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((_get_storage($emit,$22))|0);
 $24=((HEAP32[(($1)>>2)])|0);
 $25=(($24+48)|0);
 HEAP32[(($25)>>2)]=$23;
 $27=(($emit+80)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($28+20)|0);
 HEAP8[($29)]=1;
 return;
}


function _find_closed_sym_spot($emit,$sym){
 $emit=($emit)|0;
 $sym=($sym)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$i_01=0,$11=0,$12=0,$13=0,$14=0,$result_0=0,label=0;

 $1=(($emit+44)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($2<<16)>>16)==0;
 if ($3) {
  $result_0=-1;

  return (($result_0)|0);
 }
 $4=(($emit+24)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $i_01=0;
 while(1) {

  $11=(($5+($i_01<<2))|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=($12|0)==($sym|0);
  $14=((($i_01)+(1))|0);
  if ($13) {
   $result_0=$i_01;
   label = 5;
   break;
  }
  $7=((HEAP16[(($1)>>1)])|0);
  $8=($7&65535);
  $9=($14|0)<($8|0);
  if ($9) {
   $i_01=$14;
  } else {
   $result_0=-1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {

  return (($result_0)|0);
 }
  return 0;
}


function _make_empty_list_or_hash($emit,$ast,$expect){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$value_type_0=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$elem_type_0=0,$43=0,$44=0,$45=0;
 var $46=0,$op_0=0,$num_0=0,$cls_0_in=0,$cls_0=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,label=0;

 $1=(($emit+120)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+68)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+24)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($expect|0)==0;
 do {
  if ($7) {
   label = 8;
  } else {
   $9=(($expect)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=(($10+40)|0);
   $12=((HEAP16[(($11)>>1)])|0);
   if ((((($12<<16)>>16))|0)==((7)|0)) {
    $34=(($expect+12)|0);
    $35=((HEAP32[(($34)>>2)])|0);
    $36=((HEAP32[(($35)>>2)])|0);
    $37=(($36)|0);
    $38=((HEAP32[(($37)>>2)])|0);
    $39=(($38+40)|0);
    $40=((HEAP16[(($39)>>1)])|0);
    $41=(($40<<16)>>16)==12;
    if ($41) {
     label = 8;
     break;
    } else {
     $elem_type_0=$36;
     label = 9;
     break;
    }
   } else if (!((((($12<<16)>>16))|0)==((8)|0))) {
    label = 8;
    break;
   }
   $14=(($expect+12)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=(($15+4)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   _ensure_valid_key_type($emit,$ast,$16);
   $19=($18|0)==0;
   if ($19) {
    label = 5;
   } else {
    $21=(($18)|0);
    $22=((HEAP32[(($21)>>2)])|0);
    $23=(($22+40)|0);
    $24=((HEAP16[(($23)>>1)])|0);
    $25=(($24<<16)>>16)==12;
    if ($25) {
     label = 5;
    } else {
     $value_type_0=$18;
    }
   }
   if ((label|0) == 5) {
    $value_type_0=$6;
   }

   $28=(($emit+112)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   _lily_tm_add($29,$16);
   $30=((HEAP32[(($28)>>2)])|0);
   _lily_tm_add($30,$value_type_0);
   $31=((HEAP32[(($1)>>2)])|0);
   $32=(($31+80)|0);
   $cls_0_in=$32;$num_0=2;$op_0=33;
  }
 } while(0);
 if ((label|0) == 8) {
  $elem_type_0=$6;
  label = 9;
 }
 if ((label|0) == 9) {

  $43=(($emit+112)|0);
  $44=((HEAP32[(($43)>>2)])|0);
  _lily_tm_add($44,$elem_type_0);
  $45=((HEAP32[(($1)>>2)])|0);
  $46=(($45+76)|0);
  $cls_0_in=$46;$num_0=1;$op_0=31;
 }



 $cls_0=((HEAP32[(($cls_0_in)>>2)])|0);
 $48=(($emit+112)|0);
 $49=((HEAP32[(($48)>>2)])|0);
 $50=((_lily_tm_make($49,0,$cls_0,$num_0))|0);
 $51=((_get_storage($emit,$50))|0);
 $52=(($ast+24)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=(($ast+8)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=(($51+8)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 _write_build_op($emit,$op_0,$53,$55,0,$57);
 $58=$51;
 $59=(($ast)|0);
 HEAP32[(($59)>>2)]=$58;
 return;
}


function _inconsistent_type_error($emit,$ast,$expect,$context){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $expect=($expect)|0;
 $context=($context)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ast+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($emit+100)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+16)|0);
 HEAP32[(($5)>>2)]=$2;
 $6=((HEAP32[(($3)>>2)])|0);
 $7=(($ast)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+12)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 _lily_raise($6,1,10432,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$context,HEAP32[(((tempVarArgs)+(8))>>2)]=$expect,HEAP32[(((tempVarArgs)+(16))>>2)]=$10,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _write_build_op($emit,$opcode,$first_arg,$line_num,$num_values,$reg_spot){
 $emit=($emit)|0;
 $opcode=($opcode)|0;
 $first_arg=($first_arg)|0;
 $line_num=($line_num)|0;
 $num_values=($num_values)|0;
 $reg_spot=($reg_spot)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$arg_01=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $_lcssa=0,$20=0,label=0;

 $1=(($emit+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($num_values)+(4))|0);
 _lily_u16_write_prep($2,$3);
 $4=((HEAP32[(($1)>>2)])|0);
 $5=(($opcode)&65535);
 $6=(($line_num)&65535);
 $7=(($num_values)&65535);
 _lily_u16_write_3($4,$5,$6,$7);
 $8=($first_arg|0)==0;
 $9=((HEAP32[(($1)>>2)])|0);
 if ($8) {
  $_lcssa=$9;

  $20=(($reg_spot)&65535);
  _lily_u16_write_1($_lcssa,$20);
  return;
 } else {
  $arg_01=$first_arg;$10=$9;
 }
 while(1) {


  $11=(($arg_01)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=(($12+8)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=(($14)&65535);
  _lily_u16_write_1($10,$15);
  $16=(($arg_01+32)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=($17|0)==0;
  $19=((HEAP32[(($1)>>2)])|0);
  if ($18) {
   $_lcssa=$19;
   break;
  } else {
   $arg_01=$17;$10=$19;
  }
 }

 $20=(($reg_spot)&65535);
 _lily_u16_write_1($_lcssa,$20);
 return;
}


function _ensure_valid_key_type($emit,$ast,$key_type){
 $emit=($emit)|0;
 $ast=($ast)|0;
 $key_type=($key_type)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$_01=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $_02=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=($key_type|0)==0;
 if ($1) {
  label = 3;
 } else {
  $3=(($key_type)|0);
  $4=((HEAP32[(($3)>>2)])|0);
  $5=(($4+40)|0);
  $6=((HEAP16[(($5)>>1)])|0);
  $7=(($6<<16)>>16)==12;
  if ($7) {
   label = 3;
  } else {
   $_01=$key_type;
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $9=(($emit+120)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=(($10+68)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=(($12+24)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=($14|0)==0;
  if ($15) {
   $_02=0;
  } else {
   $_01=$14;
   label = 4;
  }
 }
 do {
  if ((label|0) == 4) {

   $16=(($_01)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $18=(($17+6)|0);
   $19=((HEAP16[(($18)>>1)])|0);
   $20=$19&1;
   $21=(($20<<16)>>16)==0;
   if ($21) {
    $_02=$_01;
    break;
   }
   STACKTOP=sp;return;
  }
 } while(0);

 $23=(($ast+8)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($emit+100)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($26+16)|0);
 HEAP32[(($27)>>2)]=$24;
 $28=((HEAP32[(($25)>>2)])|0);
 _lily_raise($28,1,10576,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$_02,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _write_build_enum($emit,$cs,$variant_cls){
 $emit=($emit)|0;
 $cs=($cs)|0;
 $variant_cls=($variant_cls)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;

 $1=(($emit+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($cs+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+8)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6)&65535);
 $8=(($variant_cls+28)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+40)|0);
 $11=((HEAP16[(($10)>>1)])|0);
 $12=(($variant_cls+8)|0);
 $13=((HEAP16[(($12)>>1)])|0);
 $14=(($cs+26)|0);
 $15=((HEAP16[(($14)>>1)])|0);
 _lily_u16_write_5($2,34,$7,$11,$13,$15);
 _write_call_values($emit,$cs,0);
 return;
}


function _verify_argument_count($emit,$target,$call_type,$num_args){
 $emit=($emit)|0;
 $target=($target)|0;
 $call_type=($call_type)|0;
 $num_args=($num_args)|0;
 var $min=0,$max=0,$class_name=0,$separator=0,$name=0,$arg_str=0,$min_str=0,$max_str=0,$1=0,$2=0,$3=0,$or_cond=0,$4=0,$5=0,$or_cond4=0,$$etemp$0$0=0,$$etemp$0$1=0,$st$1$0=0,$st$2$1=0,$$etemp$3$0=0;
 var $$etemp$3$1=0,$st$4$0=0,$st$5$1=0,$7=0,$9=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$22=0,$23=0,$div_str_0=0,$25=0,$26=0,$27=0,$28=0;
 var $29=0,$30=0,$31=0,$32=0,$33=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+64)|0;
 $min=((sp)|0);
 $max=(((sp)+(8))|0);
 $class_name=(((sp)+(16))|0);
 $separator=(((sp)+(24))|0);
 $name=(((sp)+(32))|0);
 $arg_str=(((sp)+(40))|0);
 $min_str=(((sp)+(48))|0);
 $max_str=(((sp)+(56))|0);
 _get_func_min_max($call_type,$min,$max);
 $1=($num_args|0)==-1;
 $2=((HEAP32[(($min)>>2)])|0);
 $3=($2>>>0)>($num_args>>>0);
 $or_cond=$1|$3;
 $4=((HEAP32[(($max)>>2)])|0);
 $5=($4>>>0)<($num_args>>>0);
 $or_cond4=$or_cond|$5;
 if (!($or_cond4)) {
  STACKTOP=sp;return;
 }
 $$etemp$0$0=0;
 $$etemp$0$1=0;
 $st$1$0=(($min_str)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 $st$2$1=(($min_str+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 $$etemp$3$0=0;
 $$etemp$3$1=0;
 $st$4$0=(($max_str)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 $st$5$1=(($max_str+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 $7=(($arg_str)|0);
 if ($1) {
  $9=((_strncpy((($7)|0),((13480)|0),((8)|0)))|0);
 } else {
  $11=((_snprintf((($7)|0),((8)|0),((13384)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$num_args,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 }
 $13=$min_str;
 $14=((HEAP32[(($min)>>2)])|0);
 $15=((_snprintf((($13)|0),((8)|0),((13384)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$14,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 $16=((HEAP32[(($min)>>2)])|0);
 $17=((HEAP32[(($max)>>2)])|0);
 $18=($16|0)==($17|0);
 do {
  if ($18) {
   $div_str_0=17904;
  } else {
   $20=($17|0)==-1;
   if ($20) {
    $div_str_0=13320;
    break;
   }
   $22=$max_str;
   $23=((_snprintf((($22)|0),((8)|0),((13384)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$17,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
   $div_str_0=13256;
  }
 } while(0);

 _get_error_name($target,$class_name,$separator,$name);
 $25=(($target+8)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($emit+100)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($28+16)|0);
 HEAP32[(($29)>>2)]=$26;
 $30=((HEAP32[(($27)>>2)])|0);
 $31=((HEAP32[(($class_name)>>2)])|0);
 $32=((HEAP32[(($separator)>>2)])|0);
 $33=((HEAP32[(($name)>>2)])|0);
 _lily_raise($30,1,13160,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 56)|0,HEAP32[((tempVarArgs)>>2)]=$31,HEAP32[(((tempVarArgs)+(8))>>2)]=$32,HEAP32[(((tempVarArgs)+(16))>>2)]=$33,HEAP32[(((tempVarArgs)+(24))>>2)]=$7,HEAP32[(((tempVarArgs)+(32))>>2)]=$min_str,HEAP32[(((tempVarArgs)+(40))>>2)]=$div_str_0,HEAP32[(((tempVarArgs)+(48))>>2)]=$max_str,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _perform_closure_transform($emit,$f){
 $emit=($emit)|0;
 $f=($f)|0;
 var $ci=0,$1=0,$2=0,$3=0,$5=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$64=0,$66=0;
 var $67=0,$68=0,$69=0,$70=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$89=0,$90=0;
 var $91=0,$92=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$101=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$110=0,$111=0,$112=0,$113=0,$114=0;
 var $closure_prop2_0=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$133=0,$134=0,$135=0;
 var $136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$155=0,$156=0,$157=0;
 var $158=0,$159=0,$160=0,$161=0,$162=0,$start_0=0,$164=0,$165=0,$167=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0,$178=0,$179=0;
 var $180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0;
 var $200=0,$201=0,$202=0,$203=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0,$216=0,$219=0,$220=0,$221=0,$222=0;
 var $224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$231=0,$232=0,$233=0,$235=0,$236=0,$237=0,$pos_0=0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=0,$245=0;
 var $246=0,$247=0,$i_01=0,$249=0,$250=0,$251=0,$252=0,$253=0,$255=0,$256=0,$257=0,$259=0,$260=0,$261=0,$262=0,$_lcssa=0,$263=0,$pos_1=0,$265=0,$266=0;
 var $_off=0,$switch=0,$269=0,$270=0,$272=0,$pos_2=0,$274=0,$275=0,$277=0,$278=0,$output_start_0=0,$pos_3=0,$280=0,$281=0,$283=0,$284=0,$285=0,$286=0,$287=0,$_off1=0;
 var $switch2=0,$288=0,$289=0,$i_13=0,$290=0,$291=0,$292=0,$293=0,$294=0,$295=0,$296=0,$298=0,$299=0,$300=0,$302=0,$303=0,$304=0,$305=0,$307=0,$308=0;
 var $309=0,$310=0,$311=0,$312=0,$i_25=0,$313=0,$314=0,$315=0,$316=0,$317=0,$318=0,$319=0,$321=0,$322=0,$323=0,$324=0,$325=0,$326=0,$327=0,$328=0;
 var $329=0,$330=0,$332=0,$333=0,$334=0,$335=0,$336=0,$337=0,$338=0,$339=0,$340=0,$341=0,$342=0,$343=0,$344=0,$345=0,$i_39=0,$346=0,$347=0,$348=0;
 var $349=0,$350=0,$_pr=0,$351=0,$352=0,$353=0,$354=0,$or_cond=0,$i6_015=0,$355=0,$356=0,$357=0,$358=0,$359=0,$360=0,$361=0,$362=0,$363=0,$364=0,$365=0;
 var $366=0,$367=0,$368=0,$369=0,$370=0,$371=0,$372=0,$373=0,$374=0,$375=0,$376=0,$377=0,$i_418=0,$379=0,$380=0,$381=0,$382=0,$383=0,$384=0,$386=0;
 var $387=0,$388=0,$390=0,$391=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 $ci=((sp)|0);
 $1=(($emit+20)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  $5=((_lily_new_buffer_u16(8))|0);
  HEAP32[(($1)>>2)]=$5;
 } else {
  $7=(($2+4)|0);
  HEAP32[(($7)>>2)]=0;
 }
 $9=(($emit+84)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+24)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($10+8)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+12)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((_get_unique_storage($emit,$16))|0);
 $18=((_find_closed_self_spot($emit))|0);
 $19=(($emit+90)|0);
 $20=((HEAP16[(($19)>>1)])|0);
 $21=(($20<<16)>>16)==2;
 L5: do {
  if ($21) {
   $23=((HEAP32[(($1)>>2)])|0);
   $24=(($f+4)|0);
   $25=((HEAP32[(($24)>>2)])|0);
   $26=(($25)&65535);
   $27=(($emit+44)|0);
   $28=((HEAP16[(($27)>>1)])|0);
   $29=(($17+8)|0);
   $30=((HEAP32[(($29)>>2)])|0);
   $31=(($30)&65535);
   _lily_u16_write_4($23,60,$26,$28,$31);
   $32=((HEAP32[(($9)>>2)])|0);
   $33=(($32+22)|0);
   $34=$33;
   $35=((HEAP16[(($34)>>1)])|0);
   $36=(($35<<16)>>16)==13;
   if (!($36)) {
    $start_0=$12;
    break;
   }
   $38=(($32+44)|0);
   $39=((HEAP32[(($38)>>2)])|0);
   $40=(($39+6)|0);
   $41=((HEAP16[(($40)>>1)])|0);
   $42=$41|64;
   HEAP16[(($40)>>1)]=$42;
   $43=((($12)+(1))|0);
   $44=(($emit+16)|0);
   $45=((HEAP32[(($44)>>2)])|0);
   $46=(($45)|0);
   $47=((HEAP32[(($46)>>2)])|0);
   $48=(($47+($43<<1))|0);
   $49=((HEAP16[(($48)>>1)])|0);
   $50=((($12)+(2))|0);
   $51=(($47+($50<<1))|0);
   $52=((HEAP16[(($51)>>1)])|0);
   $53=((($12)+(3))|0);
   $54=(($47+($53<<1))|0);
   $55=((HEAP16[(($54)>>1)])|0);
   $56=((HEAP32[(($1)>>2)])|0);
   _lily_u16_write_4($56,54,$49,$52,$55);
   $57=((($12)+(4))|0);
   $58=($18|0)==-1;
   if (!($58)) {
    $60=((HEAP32[(($1)>>2)])|0);
    $61=(($18)&65535);
    _lily_u16_write_4($60,59,$49,$61,$55);
    $62=(($emit+24)|0);
    $63=((HEAP32[(($62)>>2)])|0);
    $64=(($63+($18<<2))|0);
    HEAP32[(($64)>>2)]=0;
   }
   $66=((HEAP32[(($9)>>2)])|0);
   $67=(($66+44)|0);
   $68=((HEAP32[(($67)>>2)])|0);
   $69=((_lily_find_property($68,5272))|0);
   $70=($69|0)==0;
   if ($70) {
    $start_0=$57;
    break;
   }
   $72=((HEAP32[(($1)>>2)])|0);
   $73=(($69+8)|0);
   $74=((HEAP32[(($73)>>2)])|0);
   $75=(($74)&65535);
   $76=((HEAP32[(($29)>>2)])|0);
   $77=(($76)&65535);
   _lily_u16_write_5($72,46,$49,$75,$55,$77);
   $start_0=$57;
  } else {
   $79=((HEAP32[(($9)>>2)])|0);
   $80=(($79+56)|0);
   $81=((HEAP32[(($80)>>2)])|0);
   $82=($81|0)==0;
   do {
    if (!($82)) {
     $84=(($81+22)|0);
     $85=$84;
     $86=((HEAP16[(($85)>>1)])|0);
     $87=(($86<<16)>>16)==13;
     if (!($87)) {
      break;
     }
     $89=(($79+22)|0);
     $90=$89;
     $91=((HEAP16[(($90)>>1)])|0);
     $92=(($91<<16)>>16)==14;
     if ($92) {
      $133=((HEAP32[(($1)>>2)])|0);
      $134=(($f+4)|0);
      $135=((HEAP32[(($134)>>2)])|0);
      $136=(($135)&65535);
      $137=(($17+8)|0);
      $138=((HEAP32[(($137)>>2)])|0);
      $139=(($138)&65535);
      _lily_u16_write_4($133,63,$136,0,$139);
      $140=((HEAP32[(($9)>>2)])|0);
      $141=(($140+48)|0);
      $142=((HEAP32[(($141)>>2)])|0);
      $143=($142|0)==0;
      if ($143) {
       $start_0=$12;
       break L5;
      }
      $145=((HEAP32[(($1)>>2)])|0);
      $146=(($emit+96)|0);
      $147=((HEAP32[(($146)>>2)])|0);
      $148=((HEAP32[(($147)>>2)])|0);
      $149=(($148)&65535);
      $150=(($18)&65535);
      $151=(($142+8)|0);
      $152=((HEAP32[(($151)>>2)])|0);
      $153=(($152)&65535);
      _lily_u16_write_4($145,58,$149,$150,$153);
      $start_0=$12;
      break L5;
     }
     $94=(($79+44)|0);
     $95=((HEAP32[(($94)>>2)])|0);
     $96=((_lily_find_property($95,5272))|0);
     $97=(($95+28)|0);
     $98=((HEAP32[(($97)>>2)])|0);
     $99=($96|0)==0;
     do {
      if ($99) {
       label = 16;
      } else {
       $101=($98|0)==0;
       if ($101) {
        $closure_prop2_0=$96;
        break;
       }
       $103=(($96+8)|0);
       $104=((HEAP32[(($103)>>2)])|0);
       $105=(($98+44)|0);
       $106=((HEAP16[(($105)>>1)])|0);
       $107=($106&65535);
       $108=($104>>>0)>($107>>>0);
       if ($108) {
        $closure_prop2_0=$96;
       } else {
        label = 16;
       }
      }
     } while(0);
     if ((label|0) == 16) {
      $110=(($emit+120)|0);
      $111=((HEAP32[(($110)>>2)])|0);
      $112=(($17+12)|0);
      $113=((HEAP32[(($112)>>2)])|0);
      $114=((_lily_add_class_property($111,$95,$113,5272,0))|0);
      $closure_prop2_0=$114;
     }

     $116=((HEAP32[(($1)>>2)])|0);
     $117=(($f+4)|0);
     $118=((HEAP32[(($117)>>2)])|0);
     $119=(($118)&65535);
     $120=(($closure_prop2_0+8)|0);
     $121=((HEAP32[(($120)>>2)])|0);
     $122=(($121)&65535);
     $123=((HEAP32[(($9)>>2)])|0);
     $124=(($123+48)|0);
     $125=((HEAP32[(($124)>>2)])|0);
     $126=(($125+8)|0);
     $127=((HEAP32[(($126)>>2)])|0);
     $128=(($127)&65535);
     $129=(($17+8)|0);
     $130=((HEAP32[(($129)>>2)])|0);
     $131=(($130)&65535);
     _lily_u16_write_5($116,62,$119,$122,$128,$131);
     $start_0=$12;
     break L5;
    }
   } while(0);
   $155=((HEAP32[(($1)>>2)])|0);
   $156=(($f+4)|0);
   $157=((HEAP32[(($156)>>2)])|0);
   $158=(($157)&65535);
   _lily_u16_write_2($155,63,$158);
   _write_closure_zap($emit);
   $159=((HEAP32[(($1)>>2)])|0);
   $160=(($17+8)|0);
   $161=((HEAP32[(($160)>>2)])|0);
   $162=(($161)&65535);
   _lily_u16_write_1($159,$162);
   $start_0=$12;
  }
 } while(0);

 _ensure_params_in_closure($emit);
 _setup_transform_table($emit);
 $164=((HEAP16[(($19)>>1)])|0);
 $165=(($164<<16)>>16)==2;
 if ($165) {
  $167=(($emit+44)|0);
  HEAP16[(($167)>>1)]=0;
 }
 $169=(($emit+16)|0);
 $170=((HEAP32[(($169)>>2)])|0);
 $171=(($170)|0);
 $172=((HEAP32[(($171)>>2)])|0);
 $173=(($start_0)&65535);
 $174=(($170+4)|0);
 $175=((HEAP32[(($174)>>2)])|0);
 $176=(($175)&65535);
 _lily_ci_init($ci,$172,$173,$176);
 $177=(($emit+28)|0);
 $178=((HEAP32[(($177)>>2)])|0);
 $179=(($emit)|0);
 $180=((HEAP32[(($179)>>2)])|0);
 $181=(($180+4)|0);
 $182=((HEAP32[(($181)>>2)])|0);
 $183=((_lily_ci_next($ci))|0);
 $184=($183|0)==0;
 if ($184) {
  STACKTOP=sp;return;
 }
 $185=(($ci)|0);
 $186=(($ci+4)|0);
 $187=(($ci+12)|0);
 $188=(($ci+14)|0);
 $189=(($ci+16)|0);
 $190=(($ci+18)|0);
 $191=(($ci+20)|0);
 $192=(($ci+22)|0);
 $193=(($ci+24)|0);
 $194=$182&65535;
 $195=(($ci+8)|0);
 $196=(($ci+26)|0);
 $197=(($f+4)|0);
 $198=(($emit+100)|0);
 $199=(($f+4)|0);
 $200=(($emit+100)|0);
 $201=(($f+4)|0);
 $202=(($17+8)|0);
 $203=(($f+4)|0);
 while(1) {
  $205=((HEAP32[(($185)>>2)])|0);
  $206=((HEAP16[(($186)>>1)])|0);
  $207=($206&65535);
  $208=((($207)+(1))|0);
  $209=(($205+($207<<1))|0);
  $210=((HEAP16[(($209)>>1)])|0);
  $211=($210&65535);
  $212=((HEAP16[(($187)>>1)])|0);
  $213=($212&65535);
  $214=((($208)+($213))|0);
  $215=((HEAP16[(($188)>>1)])|0);
  $216=(($215<<16)>>16)==0;
  do {
   if ($216) {
    $pos_0=$214;
   } else {
    if (((($211|0))|0)==((61)|0)) {
     $219=((HEAP32[(($202)>>2)])|0);
     $220=(($219)&65535);
     $221=(($205+($214<<1))|0);
     HEAP16[(($221)>>1)]=$220;
     $222=((($214)+(1))|0);
     $pos_0=$222;
     break;
    } else if (((($211|0))|0)==((26)|0)|((($211|0))|0)==((56)|0)|((($211|0))|0)==((57)|0)) {
     label = 28;
    }
    do {
     if ((label|0) == 28) {
      label = 0;
      $224=(($205+($214<<1))|0);
      $225=((HEAP16[(($224)>>1)])|0);
      $226=($225&65535);
      $227=(($178+($226<<1))|0);
      $228=((HEAP16[(($227)>>1)])|0);
      $229=(($228<<16)>>16)==-1;
      if ($229) {
       break;
      }
      $231=((HEAP32[(($1)>>2)])|0);
      $232=((HEAP32[(($203)>>2)])|0);
      $233=(($232)&65535);
      _lily_u16_write_4($231,58,$233,$228,$225);
     }
    } while(0);
    $235=((HEAP16[(($188)>>1)])|0);
    $236=($235&65535);
    $237=((($236)+($214))|0);
    $pos_0=$237;
   }
  } while(0);

  $239=((HEAP16[(($189)>>1)])|0);
  $240=($239&65535);
  $241=((($240)+($pos_0))|0);
  $242=((HEAP16[(($190)>>1)])|0);
  $243=(($242<<16)>>16)==0;
  if ($243) {
   $pos_1=$241;
  } else {
   $244=((HEAP16[(($190)>>1)])|0);
   $245=($244&65535);
   $246=(($244<<16)>>16)==0;
   if ($246) {
    $_lcssa=$245;
   } else {
    $247=(($205+($241<<1))|0);
    $i_01=0;
    while(1) {

     $249=((HEAP16[(($247)>>1)])|0);
     $250=($249&65535);
     $251=(($178+($250<<1))|0);
     $252=((HEAP16[(($251)>>1)])|0);
     $253=(($252<<16)>>16)==-1;
     if (!($253)) {
      $255=((HEAP32[(($1)>>2)])|0);
      $256=((HEAP32[(($201)>>2)])|0);
      $257=(($256)&65535);
      _lily_u16_write_4($255,58,$257,$252,$249);
     }
     $259=((($i_01)+(1))|0);
     $260=((HEAP16[(($190)>>1)])|0);
     $261=($260&65535);
     $262=($259|0)<($261|0);
     if ($262) {
      $i_01=$259;
     } else {
      $_lcssa=$261;
      break;
     }
    }
   }

   $263=((($_lcssa)+($241))|0);
   $pos_1=$263;
  }

  $265=((HEAP16[(($191)>>1)])|0);
  $266=(($265<<16)>>16)==0;
  do {
   if ($266) {
    $pos_2=$pos_1;
   } else {
    $_off=((($211)-(61))|0);
    $switch=($_off>>>0)<((3)>>>0);
    if ($switch) {
     $269=($265&65535);
     $270=((($269)+($pos_1))|0);
     $pos_2=$270;
     break;
    } else {
     $272=((HEAP32[(($200)>>2)])|0);
     _lily_raise($272,0,5144,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$211,tempVarArgs))|0)); STACKTOP=tempVarArgs;
     $pos_2=$pos_1;
     break;
    }
   }
  } while(0);

  $274=((HEAP16[(($192)>>1)])|0);
  $275=(($274<<16)>>16)==0;
  if ($275) {
   $pos_3=$pos_2;$output_start_0=0;
  } else {
   $277=($274&65535);
   $278=((($277)+($pos_2))|0);
   $pos_3=$278;$output_start_0=$pos_2;
  }


  $280=((HEAP16[(($193)>>1)])|0);
  $281=(($280<<16)>>16)==0;
  do {
   if (!($281)) {
    $283=((HEAP16[(($186)>>1)])|0);
    $284=($283&65535);
    $285=(($205+($284<<1))|0);
    $286=((HEAP16[(($285)>>1)])|0);
    $287=($286&65535);
    $_off1=((($287)-(24))|0);
    $switch2=($_off1>>>0)<((3)>>>0);
    if (!($switch2)) {
     $307=((HEAP32[(($198)>>2)])|0);
     _lily_raise($307,0,4960,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$287,tempVarArgs))|0)); STACKTOP=tempVarArgs;
     break;
    }
    $288=((HEAP16[(($193)>>1)])|0);
    $289=(($288<<16)>>16)==0;
    if ($289) {
     break;
    } else {
     $i_13=0;
    }
    while(1) {

     $290=((($i_13)+($pos_3))|0);
     $291=(($205+($290<<1))|0);
     $292=((HEAP16[(($291)>>1)])|0);
     $293=($292&65535);
     $294=(($178+($293<<1))|0);
     $295=((HEAP16[(($294)>>1)])|0);
     $296=(($295<<16)>>16)==-1;
     if (!($296)) {
      $298=((HEAP32[(($1)>>2)])|0);
      $299=((HEAP32[(($199)>>2)])|0);
      $300=(($299)&65535);
      _lily_u16_write_4($298,58,$300,$295,$292);
     }
     $302=((($i_13)+(1))|0);
     $303=((HEAP16[(($193)>>1)])|0);
     $304=($303&65535);
     $305=($302|0)<($304|0);
     if ($305) {
      $i_13=$302;
     } else {
      break;
     }
    }
   }
  } while(0);
  $308=((HEAP32[(($179)>>2)])|0);
  $309=(($308+4)|0);
  $310=((HEAP32[(($309)>>2)])|0);
  $311=($194|0)==($310|0);
  if (!($311)) {
   $i_25=$194;$312=$308;
   while(1) {


    $313=((($i_25)+(1))|0);
    $314=(($312)|0);
    $315=((HEAP32[(($314)>>2)])|0);
    $316=(($315+($313<<1))|0);
    $317=((HEAP16[(($316)>>1)])|0);
    $318=((HEAP16[(($186)>>1)])|0);
    $319=(($318<<16)>>16)==(($317<<16)>>16);
    if ($319) {
     $321=((HEAP32[(($1)>>2)])|0);
     $322=(($321+4)|0);
     $323=((HEAP32[(($322)>>2)])|0);
     $324=(($323)&65535);
     $325=(($315+($i_25<<1))|0);
     $326=((HEAP16[(($325)>>1)])|0);
     $327=($326&65535);
     $328=(($321)|0);
     $329=((HEAP32[(($328)>>2)])|0);
     $330=(($329+($327<<1))|0);
     HEAP16[(($330)>>1)]=$324;
    }
    $332=((($i_25)+(2))|0);
    $333=((HEAP32[(($179)>>2)])|0);
    $334=(($333+4)|0);
    $335=((HEAP32[(($334)>>2)])|0);
    $336=($332|0)==($335|0);
    if ($336) {
     break;
    } else {
     $i_25=$332;$312=$333;
    }
   }
  }
  $337=((HEAP16[(($186)>>1)])|0);
  $338=($337&65535);
  $339=((HEAP16[(($195)>>1)])|0);
  $340=($339&65535);
  $341=((($340)+($338))|0);
  $342=((HEAP16[(($196)>>1)])|0);
  $343=($342&65535);
  $344=((($341)-($343))|0);
  $345=($338|0)<($344|0);
  if ($345) {
   $i_39=$338;
   while(1) {

    $346=((HEAP32[(($1)>>2)])|0);
    $347=(($205+($i_39<<1))|0);
    $348=((HEAP16[(($347)>>1)])|0);
    _lily_u16_write_1($346,$348);
    $349=((($i_39)+(1))|0);
    $350=($349|0)<($344|0);
    if ($350) {
     $i_39=$349;
    } else {
     break;
    }
   }
   $_pr=((HEAP16[(($196)>>1)])|0);
   $351=$_pr;
  } else {
   $351=$342;
  }

  $352=(($351<<16)>>16)==0;
  $353=((HEAP16[(($196)>>1)])|0);
  $354=(($353<<16)>>16)==0;
  $or_cond=$352|$354;
  if (!($or_cond)) {
   $i6_015=0;
   while(1) {

    $355=((HEAP32[(($1)>>2)])|0);
    _lily_u16_write_1($355,0);
    $356=((HEAP32[(($179)>>2)])|0);
    $357=((HEAP32[(($1)>>2)])|0);
    $358=(($357+4)|0);
    $359=((HEAP32[(($358)>>2)])|0);
    $360=((($359)+(65535))|0);
    $361=(($360)&65535);
    $362=((($i6_015)+($344))|0);
    $363=(($205+($362<<1))|0);
    $364=((HEAP16[(($363)>>1)])|0);
    $365=($364&65535);
    $366=((($365)+($start_0))|0);
    $367=(($366)&65535);
    _lily_u16_write_2($356,$361,$367);
    $368=((($i6_015)+(1))|0);
    $369=((HEAP16[(($196)>>1)])|0);
    $370=($369&65535);
    $371=($368|0)<($370|0);
    if ($371) {
     $i6_015=$368;
    } else {
     break;
    }
   }
  }
  $372=((HEAP16[(($192)>>1)])|0);
  $373=(($372<<16)>>16)==0;
  if (!($373)) {
   $376=($372&65535);
   $377=((($376)+($output_start_0))|0);
   $i_418=$output_start_0;
   while(1) {

    $379=(($205+($i_418<<1))|0);
    $380=((HEAP16[(($379)>>1)])|0);
    $381=($380&65535);
    $382=(($178+($381<<1))|0);
    $383=((HEAP16[(($382)>>1)])|0);
    $384=(($383<<16)>>16)==-1;
    if (!($384)) {
     $386=((HEAP32[(($1)>>2)])|0);
     $387=((HEAP32[(($197)>>2)])|0);
     $388=(($387)&65535);
     _lily_u16_write_4($386,59,$388,$383,$380);
    }
    $390=((($i_418)+(1))|0);
    $391=($390|0)<($377|0);
    if ($391) {
     $i_418=$390;
    } else {
     break;
    }
   }
  }
  $374=((_lily_ci_next($ci))|0);
  $375=($374|0)==0;
  if ($375) {
   break;
  }
 }
 STACKTOP=sp;return;
}


function _validate_and_prep_call($emit,$cs,$expect,$num_args){
 $emit=($emit)|0;
 $cs=($cs)|0;
 $expect=($expect)|0;
 $num_args=($num_args)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$_=0,$11=0,$12=0,$13=0,$14=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $23=0,$24=0,$25=0,$or_cond3=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$or_cond5=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$45=0,$47=0,$48=0,$49=0,label=0;

 $1=(($cs+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+24)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+4)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 $8=$7&255;
 $9=(($8<<16)>>16)==8;
 $10=(($8<<16)>>16)==18;
 $_=$9|$10;
 $11=($_&1);
 $12=(($cs+16)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((($11)+($num_args))|0);
 _verify_argument_count($emit,$2,$13,$14);
 if ((((($8<<16)>>16))|0)==((18)|0)|(((($8<<16)>>16))|0)==((8)|0)) {
  _push_first_tree_value($emit,$cs);
 }
 $17=((HEAP32[(($12)>>2)])|0);
 $18=(($17+6)|0);
 $19=((HEAP16[(($18)>>1)])|0);
 $20=$19&4;
 $21=(($20<<16)>>16)==0;
 if ($21) {
  return;
 }
 $23=$7&239;
 $24=(($23<<16)>>16)==5;
 $25=(($8<<16)>>16)==17;
 $or_cond3=$24|$25;
 if ($or_cond3) {
  $27=(($emit+108)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=((_lily_ts_check($28,$17,$17))|0);
  return;
 }
 $31=(($17+12)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=($33|0)!=0;
 $35=($expect|0)!=0;
 $or_cond5=$34&$35;
 if (!($or_cond5)) {
  return;
 }
 $37=(($expect)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=(($38+40)|0);
 $40=((HEAP16[(($39)>>1)])|0);
 $41=(($33)|0);
 $42=((HEAP32[(($41)>>2)])|0);
 $43=(($42+40)|0);
 $44=((HEAP16[(($43)>>1)])|0);
 $45=(($40<<16)>>16)==(($44<<16)>>16);
 if (!($45)) {
  return;
 }
 $47=(($emit+108)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 $49=((_lily_ts_check($48,$33,$expect))|0);
 return;
}


function _eval_call_arg($emit,$cs,$arg){
 $emit=($emit)|0;
 $cs=($cs)|0;
 $arg=($arg)|0;
 var $p=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$want_type_0=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$eval_type_0=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$_=0,$result_type_0=0,$53=0,$54=0,$55=0,$57=0,$58=0,$59=0,$60=0,$62=0,$63=0,$64=0;
 var $66=0,$67=0,$69=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $p=((sp)|0);
 $1=(($cs+26)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=((_get_expected_type($cs,$3))|0);
 $5=(($4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+40)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=(($8<<16)>>16)==-4;
 if ($9) {
  $11=(($4+12)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $want_type_0=$13;
 } else {
  $want_type_0=$4;
 }

 $15=(($want_type_0+6)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=$16&4;
 $18=(($17<<16)>>16)==0;
 if ($18) {
  $eval_type_0=$want_type_0;
 } else {
  $20=(($emit+108)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21+24)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=((_lily_ts_resolve_with($21,$want_type_0,$23))|0);
  $eval_type_0=$24;
 }

 _eval_tree($emit,$arg,$eval_type_0);
 $26=(($arg)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=(($27+12)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=(($29+6)|0);
 $31=((HEAP16[(($30)>>1)])|0);
 $32=$31&4;
 $33=(($32<<16)>>16)==0;
 do {
  if ($33) {
   $result_type_0=$29;
  } else {
   $35=(($arg+4)|0);
   $36=$35;
   $37=((HEAP16[(($36)>>1)])|0);
   $38=$37&255;
   if (!((((($38<<16)>>16))|0)==((19)|0)|(((($38<<16)>>16))|0)==((6)|0))) {
    $result_type_0=$29;
    break;
   }
   $40=(($emit+108)|0);
   $41=((HEAP32[(($40)>>2)])|0);
   $42=(($41+24)|0);
   $43=((HEAP32[(($42)>>2)])|0);
   $44=((_lily_ts_resolve_with($41,$want_type_0,$43))|0);
   $45=((HEAP32[(($40)>>2)])|0);
   _lily_ts_scope_save($45,$p);
   $46=((HEAP32[(($40)>>2)])|0);
   $47=((_lily_ts_check($46,$29,$44))|0);
   $48=((HEAP32[(($40)>>2)])|0);
   $49=((_lily_ts_resolve_with($48,$29,$43))|0);
   $50=((HEAP32[(($40)>>2)])|0);
   _lily_ts_scope_restore($50,$p);
   $51=($44|0)==($49|0);
   $_=($51?$49:$29);
   $result_type_0=$_;
  }
 } while(0);

 $53=((HEAP16[(($15)>>1)])|0);
 $54=$53&4;
 $55=(($54<<16)>>16)==0;
 if ($55) {
  label = 10;
 } else {
  $57=(($emit+108)|0);
  $58=((HEAP32[(($57)>>2)])|0);
  $59=((_lily_ts_check($58,$want_type_0,$result_type_0))|0);
  $60=($59|0)==0;
  if ($60) {
   label = 10;
  }
 }
 do {
  if ((label|0) == 10) {
   $62=((HEAP16[(($15)>>1)])|0);
   $63=$62&4;
   $64=(($63<<16)>>16)==0;
   if ($64) {
    $66=((_type_matchup($emit,$want_type_0,$arg))|0);
    $67=($66|0)==0;
    if (!($67)) {
     break;
    }
   }
   _bad_arg_error($emit,$cs,$want_type_0,$result_type_0);
   STACKTOP=sp;return;
  }
 } while(0);
 $69=((HEAP32[(($26)>>2)])|0);
 _add_value($emit,$cs,$69);
 STACKTOP=sp;return;
}


function _write_varargs($emit,$cs,$type,$from){
 $emit=($emit)|0;
 $cs=($cs)|0;
 $type=($type)|0;
 $from=($from)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,label=0;

 $1=((_get_storage($emit,$type))|0);
 $2=(($cs+26)|0);
 $3=((HEAP16[(($2)>>1)])|0);
 $4=($3&65535);
 $5=($from&65535);
 $6=((($4)-($5))|0);
 $7=(($emit+16)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($cs+12)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+8)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12)&65535);
 $14=(($6)&65535);
 _lily_u16_write_3($8,31,$13,$14);
 _write_call_values($emit,$cs,$from);
 $15=((HEAP32[(($7)>>2)])|0);
 $16=(($1+8)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17)&65535);
 _lily_u16_write_1($15,$18);
 $19=(($emit+40)|0);
 $20=((HEAP16[(($19)>>1)])|0);
 $21=($20&65535);
 $22=((($21)-($6))|0);
 $23=(($22)&65535);
 HEAP16[(($19)>>1)]=$23;
 $24=((HEAP16[(($2)>>1)])|0);
 $25=($24&65535);
 $26=((($25)-($6))|0);
 $27=(($26)&65535);
 HEAP16[(($2)>>1)]=$27;
 $28=$1;
 _add_value($emit,$cs,$28);
 return;
}


function _write_call_values($emit,$cs,$from){
 $emit=($emit)|0;
 $cs=($cs)|0;
 $from=($from)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$i_01=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,label=0;

 $1=(($cs+26)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=($from&65535);
 $5=((($3)-($4))|0);
 $6=($5|0)>0;
 if (!($6)) {
  return;
 }
 $7=(($emit+40)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($emit+16)|0);
 $11=((($9)+($4))|0);
 $12=((($11)-($3))|0);
 $13=(($emit+8)|0);
 $i_01=0;
 while(1) {

  $15=((HEAP32[(($10)>>2)])|0);
  $16=((($12)+($i_01))|0);
  $17=((HEAP32[(($13)>>2)])|0);
  $18=(($17+($16<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=(($19+8)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21)&65535);
  _lily_u16_write_1($15,$22);
  $23=((($i_01)+(1))|0);
  $24=($23|0)<($5|0);
  if ($24) {
   $i_01=$23;
  } else {
   break;
  }
 }
 return;
}


function _get_func_min_max($call_type,$min,$max){
 $call_type=($call_type)|0;
 $min=($min)|0;
 $max=($max)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$i_01=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$i_0_lcssa=0,$27=0,$29=0,$30=0,$32=0,$33=0,label=0;

 $1=(($call_type+10)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=((($3)-(1))|0);
 HEAP32[(($min)>>2)]=$4;
 HEAP32[(($max)>>2)]=$4;
 $5=(($call_type+6)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=($6&65535);
 $8=$7&8;
 $9=($8|0)==0;
 if ($9) {
  $29=$7&1;
  $30=($29|0)==0;
  if ($30) {
   return;
  }
  HEAP32[(($max)>>2)]=-1;
  $32=((HEAP32[(($min)>>2)])|0);
  $33=((($32)-(1))|0);
  HEAP32[(($min)>>2)]=$33;
  return;
 }
 $10=((HEAP16[(($1)>>1)])|0);
 $11=((($10&65535))>>>0)>((1)>>>0);
 L8: do {
  if ($11) {
   $12=(($call_type+12)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $i_01=1;
   while(1) {

    $19=(($13+($i_01<<2))|0);
    $20=((HEAP32[(($19)>>2)])|0);
    $21=(($20)|0);
    $22=((HEAP32[(($21)>>2)])|0);
    $23=(($22+40)|0);
    $24=((HEAP16[(($23)>>1)])|0);
    $25=(($24<<16)>>16)==-4;
    $26=((($i_01)+(1))|0);
    if ($25) {
     $i_0_lcssa=$i_01;
     break L8;
    }
    $15=((HEAP16[(($1)>>1)])|0);
    $16=($15&65535);
    $17=($26|0)<($16|0);
    if ($17) {
     $i_01=$26;
    } else {
     $i_0_lcssa=$26;
     break;
    }
   }
  } else {
   $i_0_lcssa=1;
  }
 } while(0);

 $27=((($i_0_lcssa)-(1))|0);
 HEAP32[(($min)>>2)]=$27;
 return;
}


function _get_error_name($ast,$class_name,$separator,$name){
 $ast=($ast)|0;
 $class_name=($class_name)|0;
 $separator=($separator)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$_0=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0,$25=0;
 var $26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,label=0;

 HEAP32[(($class_name)>>2)]=17904;
 HEAP32[(($separator)>>2)]=17904;
 $1=(($ast+4)|0);
 $2=$1;
 $3=((HEAP16[(($2)>>1)])|0);
 $4=$3&255;
 if ((((($4<<16)>>16))|0)==((14)|0)) {
  $_0=$ast;
 } else if ((((($4<<16)>>16))|0)==((26)|0)) {
  $6=(($ast+24)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $_0=$7;
 } else {
  $9=(($ast+24)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $_0=$10;
 }

 $12=(($_0+20)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($13+4)|0);
 $15=((HEAP16[(($14)>>1)])|0);
 if ((((($15<<16)>>16))|0)==((4)|0)) {
  $32=(($13+32)|0);
  $33=$32;
  $34=((HEAP32[(($33)>>2)])|0);
  $35=(($34+12)|0);
  $36=((HEAP32[(($35)>>2)])|0);
  HEAP32[(($class_name)>>2)]=$36;
  HEAP32[(($separator)>>2)]=13088;
  $37=(($13+16)|0);
  $38=$37;
  $39=((HEAP32[(($38)>>2)])|0);
  HEAP32[(($name)>>2)]=$39;
  return;
 } else if ((((($15<<16)>>16))|0)==((1)|0)) {
  $17=(($13+40)|0);
  $18=$17;
  $19=((HEAP32[(($18)>>2)])|0);
  $20=($19|0)==0;
  if (!($20)) {
   $22=(($19+12)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   HEAP32[(($class_name)>>2)]=$23;
   HEAP32[(($separator)>>2)]=13088;
  }
  $25=(($13+16)|0);
  $26=$25;
  $27=((HEAP32[(($26)>>2)])|0);
  HEAP32[(($name)>>2)]=$27;
  return;
 } else if ((((($15<<16)>>16))|0)==((3)|0)) {
  $29=(($13+12)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  HEAP32[(($name)>>2)]=$30;
  return;
 } else {
  HEAP32[(($name)>>2)]=13024;
  return;
 }
}


function _find_closed_self_spot($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$i_01=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$result_0=0,label=0;

 $1=(($emit+44)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($2<<16)>>16)==0;
 if ($3) {
  $result_0=-1;

  return (($result_0)|0);
 }
 $4=(($emit+24)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $i_01=0;
 while(1) {

  $7=(($5+($i_01<<2))|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=($8|0)==0;
  if (!($9)) {
   $11=(($8+4)|0);
   $12=((HEAP16[(($11)>>1)])|0);
   $13=(($12<<16)>>16)==1;
   if (!($13)) {
    $result_0=$i_01;
    label = 6;
    break;
   }
  }
  $15=((($i_01)+(1))|0);
  $16=((HEAP16[(($1)>>1)])|0);
  $17=($16&65535);
  $18=($15|0)<($17|0);
  if ($18) {
   $i_01=$15;
  } else {
   $result_0=-1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {

  return (($result_0)|0);
 }
  return 0;
}


function _write_closure_zap($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$count_02=0,$i_01=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$count_1=0,$31=0,$32=0,$33=0,$34=0,$extract_t=0,$count_0_lcssa_off0=0,$36=0,$37=0,$38=0,$39=0,label=0;

 $1=(($emit+20)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_u16_write_1($2,0);
 $5=(($emit+44)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=(($6<<16)>>16)==0;
 if ($7) {
  $count_0_lcssa_off0=0;

  $36=((HEAP32[(($1)>>2)])|0);
  $37=(($36)|0);
  $38=((HEAP32[(($37)>>2)])|0);
  $39=(($38+($4<<1))|0);
  HEAP16[(($39)>>1)]=$count_0_lcssa_off0;
  return;
 }
 $8=(($emit+24)|0);
 $9=(($emit+90)|0);
 $i_01=0;$count_02=0;
 while(1) {


  $11=((HEAP32[(($8)>>2)])|0);
  $12=(($11+($i_01<<2))|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=($13|0)==0;
  do {
   if ($14) {
    $count_1=$count_02;
   } else {
    $16=(($13+4)|0);
    $17=((HEAP16[(($16)>>1)])|0);
    $18=(($17<<16)>>16)==1;
    if (!($18)) {
     $count_1=$count_02;
     break;
    }
    $20=(($13+36)|0);
    $21=$20;
    $22=((HEAP32[(($21)>>2)])|0);
    $23=((HEAP16[(($9)>>1)])|0);
    $24=($23&65535);
    $25=($22|0)==($24|0);
    if (!($25)) {
     $count_1=$count_02;
     break;
    }
    $27=((HEAP32[(($1)>>2)])|0);
    $28=(($i_01)&65535);
    _lily_u16_write_1($27,$28);
    $29=((($count_02)+(1))|0);
    $count_1=$29;
   }
  } while(0);

  $31=((($i_01)+(1))|0);
  $32=((HEAP16[(($5)>>1)])|0);
  $33=($32&65535);
  $34=($31|0)<($33|0);
  if ($34) {
   $i_01=$31;$count_02=$count_1;
  } else {
   break;
  }
 }
 $extract_t=(($count_1)&65535);
 $count_0_lcssa_off0=$extract_t;

 $36=((HEAP32[(($1)>>2)])|0);
 $37=(($36)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=(($38+($4<<1))|0);
 HEAP16[(($39)>>1)]=$count_0_lcssa_off0;
 return;
}


function _ensure_params_in_closure($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $var_iter_01=0,$22=0,$23=0,$24=0,$var_iter_02=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0;
 var $44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$var_iter_0=0,$51=0,label=0;

 $1=(($emit+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+10)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=((($9)-(1))|0);
 $11=($10|0)==0;
 if ($11) {
  return;
 }
 $13=(($emit+120)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+88)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($6+12)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($14+24)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+32)|0);
 $var_iter_01=((HEAP32[(($21)>>2)])|0);
 $22=($var_iter_01|0)==($4|0);
 if ($22) {
  return;
 }
 $23=(($emit+20)|0);
 $24=(($4+32)|0);
 $var_iter_02=$var_iter_01;
 while(1) {

  $26=(($var_iter_02+6)|0);
  $27=((HEAP16[(($26)>>1)])|0);
  $28=$27&4;
  $29=(($28<<16)>>16)==0;
  do {
   if (!($29)) {
    $31=(($var_iter_02+8)|0);
    $32=((HEAP32[(($31)>>2)])|0);
    $33=($32>>>0)<($10>>>0);
    if (!($33)) {
     break;
    }
    $35=((($32)+(1))|0);
    $36=(($18+($35<<2))|0);
    $37=((HEAP32[(($36)>>2)])|0);
    $38=(($37)|0);
    $39=((HEAP32[(($38)>>2)])|0);
    $40=($39|0)==($16|0);
    if ($40) {
     break;
    }
    $42=((HEAP32[(($23)>>2)])|0);
    $43=((HEAP32[(($24)>>2)])|0);
    $44=(($43)&65535);
    $45=$var_iter_02;
    $46=((_find_closed_sym_spot($emit,$45))|0);
    $47=(($46)&65535);
    $48=(($32)&65535);
    _lily_u16_write_4($42,59,$44,$47,$48);
   }
  } while(0);
  $50=(($var_iter_02)|0);
  $var_iter_0=((HEAP32[(($50)>>2)])|0);
  $51=($var_iter_0|0)==($4|0);
  if ($51) {
   break;
  } else {
   $var_iter_02=$var_iter_0;
  }
 }
 return;
}


function _setup_transform_table($emit){
 $emit=($emit)|0;
 var $1=0,$ld$0$0=0,$2$0=0,$ld$1$1=0,$2$1=0,$3=0,$4=0,$5=0,$6=0,$7$0=0,$7$1=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var $18=0,$19$0=0,$19$1=0,$st$2$0=0,$st$3$1=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$i_01=0,$34=0,$35=0;
 var $36=0,$37=0,$39=0,$40=0,$41=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$59=0;
 var $60=0,$61=0,label=0;

 $1=(($emit+32)|0);
 $ld$0$0=(($1)|0);
 $2$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($1+4)|0);
 $2$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $3=(($emit+80)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+36)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7$0=$6;
 $7$1=0;
 $8=(($2$1>>>0) < ($7$1>>>0)) | (((($2$1>>>0) == ($7$1>>>0) & ($2$0>>>0) <  ($7$0>>>0))));
 if ($8) {
  $10=(($emit+28)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=$11;
  $13=$6<<1;
  $14=((_lily_realloc($12,$13))|0);
  $15=$14;
  HEAP32[(($10)>>2)]=$15;
  $16=((HEAP32[(($3)>>2)])|0);
  $17=(($16+36)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19$0=$18;
  $19$1=0;
  $st$2$0=(($1)|0);
  HEAP32[(($st$2$0)>>2)]=$19$0;
  $st$3$1=(($1+4)|0);
  HEAP32[(($st$3$1)>>2)]=$19$1;
 }
 $21=(($emit+28)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=$22;
 $24=((HEAP32[(($3)>>2)])|0);
 $25=(($24+36)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=$26<<1;
 _memset((((($23)|0))|0), ((((-1)|0))|0), (((($27)|0))|0))|0;
 $28=(($emit+44)|0);
 $29=((HEAP16[(($28)>>1)])|0);
 $30=(($29<<16)>>16)==0;
 if ($30) {
  return;
 }
 $31=(($emit+24)|0);
 $32=(($emit+90)|0);
 $i_01=0;
 while(1) {

  $34=((HEAP32[(($31)>>2)])|0);
  $35=(($34+($i_01<<2))|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=($36|0)==0;
  do {
   if (!($37)) {
    $39=(($36+4)|0);
    $40=((HEAP16[(($39)>>1)])|0);
    $41=(($40<<16)>>16)==1;
    if (!($41)) {
     break;
    }
    $43=(($36+36)|0);
    $44=$43;
    $45=((HEAP32[(($44)>>2)])|0);
    $46=((HEAP16[(($32)>>1)])|0);
    $47=($46&65535);
    $48=($45|0)==($47|0);
    if (!($48)) {
     break;
    }
    $50=(($i_01)&65535);
    $51=(($36+8)|0);
    $52=((HEAP32[(($51)>>2)])|0);
    $53=((HEAP32[(($21)>>2)])|0);
    $54=(($53+($52<<1))|0);
    HEAP16[(($54)>>1)]=$50;
    $55=((HEAP32[(($31)>>2)])|0);
    $56=(($55+($i_01<<2))|0);
    HEAP32[(($56)>>2)]=0;
   }
  } while(0);
  $58=((($i_01)+(1))|0);
  $59=((HEAP16[(($28)>>1)])|0);
  $60=($59&65535);
  $61=($58|0)<($60|0);
  if ($61) {
   $i_01=$58;
  } else {
   break;
  }
 }
 return;
}


function _push_first_tree_value($emit,$cs){
 $emit=($emit)|0;
 $cs=($cs)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $push_value_0=0,$push_type_0_in=0,$push_type_0=0,$24=0,$25=0,$26=0,$27=0,$28=0,label=0;

 $1=(($cs+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+24)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+4)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 $8=$7&255;
 $9=(($8<<16)>>16)==18;
 if ($9) {
  $11=(($emit+84)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=(($12+48)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=(($14+12)|0);
  $16=$14;
  $push_type_0_in=$15;$push_value_0=$16;
 } else {
  $18=(($4+24)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=(($19)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21+12)|0);
  $push_type_0_in=$22;$push_value_0=$21;
 }


 $push_type_0=((HEAP32[(($push_type_0_in)>>2)])|0);
 $24=((_get_expected_type($cs,0))|0);
 $25=(($emit+108)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=((_lily_ts_check($26,$24,$push_type_0))|0);
 $28=($27|0)==1;
 if ($28) {
  _add_value($emit,$cs,$push_value_0);
  return;
 } else {
  _bad_arg_error($emit,$cs,$24,$push_type_0);
  return;
 }
}


function _get_expected_type($cs,$pos){
 $cs=($cs)|0;
 $pos=($pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$23=0;
 var $24=0,$result_0=0,label=0;

 $1=(($cs+24)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=((($pos)+(1))|0);
 $5=($3|0)>($4|0);
 if (!($5)) {
  $23=(($cs+20)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $result_0=$24;

  return (($result_0)|0);
 }
 $7=(($cs+16)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+12)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+($4<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+40)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=(($16<<16)>>16)==-4;
 if (!($17)) {
  $result_0=$12;

  return (($result_0)|0);
 }
 $19=(($12+12)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $result_0=$21;

 return (($result_0)|0);
}


function _add_value($emit,$cs,$sym){
 $emit=($emit)|0;
 $cs=($cs)|0;
 $sym=($sym)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,label=0;

 $1=(($emit+40)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($emit+42)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($2<<16)>>16)==(($4<<16)>>16);
 if ($5) {
  _grow_call_values($emit);
 }
 $8=((HEAP16[(($1)>>1)])|0);
 $9=($8&65535);
 $10=(($emit+8)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+($9<<2))|0);
 HEAP32[(($12)>>2)]=$sym;
 $13=((HEAP16[(($1)>>1)])|0);
 $14=((($13)+(1))&65535);
 HEAP16[(($1)>>1)]=$14;
 $15=(($cs+26)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=((($16)+(1))&65535);
 HEAP16[(($15)>>1)]=$17;
 return;
}


function _bad_arg_error($emit,$cs,$expected,$got){
 $emit=($emit)|0;
 $cs=($cs)|0;
 $expected=($expected)|0;
 $got=($got)|0;
 var $class_name=0,$separator=0,$name=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;
 var $18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 $class_name=((sp)|0);
 $separator=(((sp)+(8))|0);
 $name=(((sp)+(16))|0);
 $1=(($cs+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _get_error_name($2,$class_name,$separator,$name);
 $3=(($emit+100)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+8)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((HEAP32[(($1)>>2)])|0);
 $8=(($7+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($4+16)|0);
 HEAP32[(($10)>>2)]=$9;
 $11=(($emit+108)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 _lily_ts_resolve_as_question($12);
 $13=((HEAP32[(($11)>>2)])|0);
 $14=(($13+24)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($cs+26)|0);
 $17=((HEAP16[(($16)>>1)])|0);
 $18=($17&65535);
 $19=((($18)+(1))|0);
 $20=((HEAP32[(($class_name)>>2)])|0);
 $21=((HEAP32[(($separator)>>2)])|0);
 $22=((HEAP32[(($name)>>2)])|0);
 $23=((_lily_ts_resolve_with($13,$expected,$15))|0);
 _lily_msgbuf_add_fmt($6,12896,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 48)|0,HEAP32[((tempVarArgs)>>2)]=$19,HEAP32[(((tempVarArgs)+(8))>>2)]=$20,HEAP32[(((tempVarArgs)+(16))>>2)]=$21,HEAP32[(((tempVarArgs)+(24))>>2)]=$22,HEAP32[(((tempVarArgs)+(32))>>2)]=$23,HEAP32[(((tempVarArgs)+(40))>>2)]=$got,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $24=((HEAP32[(($3)>>2)])|0);
 $25=(($6)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 _lily_raise($24,1,$26,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _grow_call_values($emit){
 $emit=($emit)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;

 $1=(($emit+42)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=$2<<1;
 HEAP16[(($1)>>1)]=$3;
 $4=(($emit+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5;
 $7=($3&65535);
 $8=$7<<2;
 $9=((_lily_realloc($6,$8))|0);
 $10=$9;
 HEAP32[(($4)>>2)]=$10;
 return;
}


function _lily_ci_init($iter,$buffer,$start,$stop){
 $iter=($iter)|0;
 $buffer=($buffer)|0;
 $start=($start)|0;
 $stop=($stop)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=(($iter)|0);
 HEAP32[(($1)>>2)]=$buffer;
 $2=(($iter+6)|0);
 HEAP16[(($2)>>1)]=$stop;
 $3=(($iter+4)|0);
 HEAP16[(($3)>>1)]=$start;
 $4=(($iter+8)|0);
 HEAP16[(($4)>>1)]=0;
 return;
}


function _lily_ci_next($iter){
 $iter=($iter)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0;
 var $23=0,$25=0,$26=0,$27=0,$29=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$_sum7=0,$39=0,$40=0,$41=0,$42=0,$43=0,$45=0,$46=0;
 var $48=0,$50=0,$51=0,$52=0,$54=0,$55=0,$_sum6=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$63=0,$64=0,$65=0,$_sum5=0,$66=0,$67=0,$68=0;
 var $69=0,$70=0,$71=0,$73=0,$74=0,$75=0,$76=0,$78=0,$79=0,$80=0,$81=0,$83=0,$84=0,$86=0,$87=0,$88=0,$90=0,$91=0,$93=0,$94=0;
 var $95=0,$97=0,$98=0,$99=0,$101=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$110=0,$111=0,$114=0,$115=0,$116=0,$117=0,$119=0,$120=0,$121=0;
 var $122=0,$124=0,$125=0,$127=0,$128=0,$129=0,$131=0,$132=0,$_sum4=0,$133=0,$134=0,$135=0,$136=0,$137=0,$139=0,$140=0,$141=0,$_sum3=0,$142=0,$143=0;
 var $144=0,$145=0,$146=0,$148=0,$149=0,$150=0,$_sum2=0,$151=0,$152=0,$153=0,$154=0,$155=0,$157=0,$158=0,$159=0,$161=0,$162=0,$163=0,$165=0,$166=0;
 var $167=0,$169=0,$170=0,$171=0,$173=0,$174=0,$175=0,$176=0,$178=0,$179=0,$_sum1=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$187=0,$188=0,$_sum=0;
 var $189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$_0=0,label=0;

 $1=(($iter+8)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($iter+4)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=((($4)+($2))&65535);
 HEAP16[(($3)>>1)]=$5;
 $6=(($iter+6)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=(($5<<16)>>16)==(($7<<16)>>16);
 if ($8) {
  $_0=0;

  return (($_0)|0);
 }
 $10=$1;
 _memset((((($10)|0))|0), ((((0)|0))|0), ((((20)|0))|0))|0;
 $11=(($iter)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((HEAP16[(($3)>>1)])|0);
 $14=($13&65535);
 $15=(($12+($14<<1))|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=(($iter+10)|0);
 HEAP16[(($17)>>1)]=$16;
 $18=((HEAP16[(($15)>>1)])|0);
 $19=($18&65535);
 switch (($19|0)) {
 case 34: {
  $63=(($iter+12)|0);
  HEAP16[(($63)>>1)]=1;
  $64=(($iter+14)|0);
  HEAP16[(($64)>>1)]=2;
  $65=(($iter+16)|0);
  HEAP16[(($65)>>1)]=1;
  $_sum5=((($14)+(4))|0);
  $66=(($12+($_sum5<<1))|0);
  $67=((HEAP16[(($66)>>1)])|0);
  $68=(($iter+18)|0);
  HEAP16[(($68)>>1)]=$67;
  $69=(($iter+22)|0);
  HEAP16[(($69)>>1)]=1;
  $70=((HEAP16[(($66)>>1)])|0);
  $71=((($70)+(6))&65535);
  HEAP16[(($1)>>1)]=$71;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 40:case 42:case 43:case 44: {
  $97=(($iter+12)|0);
  HEAP16[(($97)>>1)]=1;
  $98=(($iter+14)|0);
  HEAP16[(($98)>>1)]=1;
  $99=(($iter+22)|0);
  HEAP16[(($99)>>1)]=1;
  HEAP16[(($1)>>1)]=4;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 22: {
  $29=(($iter+26)|0);
  HEAP16[(($29)>>1)]=1;
  HEAP16[(($1)>>1)]=2;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 59: {
  $161=(($iter+12)|0);
  HEAP16[(($161)>>1)]=1;
  $162=(($iter+14)|0);
  HEAP16[(($162)>>1)]=1;
  $163=(($iter+18)|0);
  HEAP16[(($163)>>1)]=1;
  HEAP16[(($1)>>1)]=4;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 60: {
  $165=(($iter+12)|0);
  HEAP16[(($165)>>1)]=1;
  $166=(($iter+14)|0);
  HEAP16[(($166)>>1)]=1;
  $167=(($iter+22)|0);
  HEAP16[(($167)>>1)]=1;
  HEAP16[(($1)>>1)]=4;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 61: {
  $169=(($iter+14)|0);
  HEAP16[(($169)>>1)]=1;
  $170=(($iter+20)|0);
  HEAP16[(($170)>>1)]=1;
  $171=(($iter+22)|0);
  HEAP16[(($171)>>1)]=1;
  HEAP16[(($1)>>1)]=4;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 62: {
  $173=(($iter+12)|0);
  HEAP16[(($173)>>1)]=1;
  $174=(($iter+14)|0);
  HEAP16[(($174)>>1)]=1;
  $175=(($iter+18)|0);
  HEAP16[(($175)>>1)]=1;
  $176=(($iter+22)|0);
  HEAP16[(($176)>>1)]=1;
  HEAP16[(($1)>>1)]=5;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 23: {
  $31=(($iter+14)|0);
  HEAP16[(($31)>>1)]=1;
  $32=(($iter+18)|0);
  HEAP16[(($32)>>1)]=1;
  $33=(($iter+26)|0);
  HEAP16[(($33)>>1)]=1;
  HEAP16[(($1)>>1)]=4;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 55: {
  $131=(($iter+14)|0);
  HEAP16[(($131)>>1)]=1;
  $132=(($iter+16)|0);
  HEAP16[(($132)>>1)]=1;
  $_sum4=((($14)+(2))|0);
  $133=(($12+($_sum4<<1))|0);
  $134=((HEAP16[(($133)>>1)])|0);
  $135=(($iter+26)|0);
  HEAP16[(($135)>>1)]=$134;
  $136=((HEAP16[(($133)>>1)])|0);
  $137=((($136)+(3))&65535);
  HEAP16[(($1)>>1)]=$137;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 56: {
  $139=(($iter+12)|0);
  HEAP16[(($139)>>1)]=1;
  $140=(($iter+14)|0);
  HEAP16[(($140)>>1)]=1;
  $141=(($iter+16)|0);
  HEAP16[(($141)>>1)]=1;
  $_sum3=((($14)+(3))|0);
  $142=(($12+($_sum3<<1))|0);
  $143=((HEAP16[(($142)>>1)])|0);
  $144=(($iter+26)|0);
  HEAP16[(($144)>>1)]=$143;
  $145=((HEAP16[(($142)>>1)])|0);
  $146=((($145)+(4))&65535);
  HEAP16[(($1)>>1)]=$146;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 57: {
  $148=(($iter+12)|0);
  HEAP16[(($148)>>1)]=1;
  $149=(($iter+14)|0);
  HEAP16[(($149)>>1)]=1;
  $150=(($iter+16)|0);
  HEAP16[(($150)>>1)]=1;
  $_sum2=((($14)+(3))|0);
  $151=(($12+($_sum2<<1))|0);
  $152=((HEAP16[(($151)>>1)])|0);
  $153=(($iter+22)|0);
  HEAP16[(($153)>>1)]=$152;
  $154=((HEAP16[(($151)>>1)])|0);
  $155=((($154)+(4))&65535);
  HEAP16[(($1)>>1)]=$155;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 58: {
  $157=(($iter+12)|0);
  HEAP16[(($157)>>1)]=1;
  $158=(($iter+14)|0);
  HEAP16[(($158)>>1)]=1;
  $159=(($iter+22)|0);
  HEAP16[(($159)>>1)]=1;
  HEAP16[(($1)>>1)]=4;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 27: {
  $45=(($iter+12)|0);
  HEAP16[(($45)>>1)]=1;
  $46=(($iter+18)|0);
  HEAP16[(($46)>>1)]=1;
  HEAP16[(($1)>>1)]=3;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 49: {
  $119=(($iter+12)|0);
  HEAP16[(($119)>>1)]=1;
  $120=(($iter+14)|0);
  HEAP16[(($120)>>1)]=1;
  $121=(($iter+24)|0);
  HEAP16[(($121)>>1)]=1;
  $122=(($iter+26)|0);
  HEAP16[(($122)>>1)]=1;
  HEAP16[(($1)>>1)]=5;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 51: {
  $124=(($iter+12)|0);
  HEAP16[(($124)>>1)]=1;
  $125=(($iter+18)|0);
  HEAP16[(($125)>>1)]=1;
  HEAP16[(($1)>>1)]=3;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 41: {
  $93=(($iter+12)|0);
  HEAP16[(($93)>>1)]=1;
  $94=(($iter+14)|0);
  HEAP16[(($94)>>1)]=1;
  $95=(($iter+18)|0);
  HEAP16[(($95)>>1)]=1;
  HEAP16[(($1)>>1)]=4;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 0:case 1: {
  $21=(($iter+12)|0);
  HEAP16[(($21)>>1)]=1;
  $22=(($iter+18)|0);
  HEAP16[(($22)>>1)]=1;
  $23=(($iter+22)|0);
  HEAP16[(($23)>>1)]=1;
  HEAP16[(($1)>>1)]=4;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 35: {
  $73=(($iter+12)|0);
  HEAP16[(($73)>>1)]=1;
  $74=(($iter+14)|0);
  HEAP16[(($74)>>1)]=1;
  $75=(($iter+18)|0);
  HEAP16[(($75)>>1)]=1;
  $76=(($iter+22)|0);
  HEAP16[(($76)>>1)]=1;
  HEAP16[(($1)>>1)]=5;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 28: {
  $48=(($iter+12)|0);
  HEAP16[(($48)>>1)]=1;
  HEAP16[(($1)>>1)]=2;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 36: {
  $78=(($iter+12)|0);
  HEAP16[(($78)>>1)]=1;
  $79=(($iter+18)|0);
  HEAP16[(($79)>>1)]=3;
  $80=(($iter+22)|0);
  HEAP16[(($80)>>1)]=1;
  $81=(($iter+26)|0);
  HEAP16[(($81)>>1)]=1;
  HEAP16[(($1)>>1)]=7;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 31:case 32:case 33: {
  $54=(($iter+12)|0);
  HEAP16[(($54)>>1)]=1;
  $55=(($iter+16)|0);
  HEAP16[(($55)>>1)]=1;
  $_sum6=((($14)+(2))|0);
  $56=(($12+($_sum6<<1))|0);
  $57=((HEAP16[(($56)>>1)])|0);
  $58=(($iter+18)|0);
  HEAP16[(($58)>>1)]=$57;
  $59=(($iter+22)|0);
  HEAP16[(($59)>>1)]=1;
  $60=((HEAP16[(($56)>>1)])|0);
  $61=((($60)+(4))&65535);
  HEAP16[(($1)>>1)]=$61;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21: {
  $25=(($iter+12)|0);
  HEAP16[(($25)>>1)]=1;
  $26=(($iter+18)|0);
  HEAP16[(($26)>>1)]=2;
  $27=(($iter+22)|0);
  HEAP16[(($27)>>1)]=1;
  HEAP16[(($1)>>1)]=5;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 25:case 24:case 26: {
  $35=(($iter+12)|0);
  HEAP16[(($35)>>1)]=1;
  $36=(($iter+14)|0);
  HEAP16[(($36)>>1)]=1;
  $37=(($iter+16)|0);
  HEAP16[(($37)>>1)]=1;
  $38=(($iter+22)|0);
  HEAP16[(($38)>>1)]=1;
  $_sum7=((($14)+(3))|0);
  $39=(($12+($_sum7<<1))|0);
  $40=((HEAP16[(($39)>>1)])|0);
  $41=(($iter+24)|0);
  HEAP16[(($41)>>1)]=$40;
  $42=((HEAP16[(($39)>>1)])|0);
  $43=((($42)+(5))&65535);
  HEAP16[(($1)>>1)]=$43;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 63: {
  $178=(($iter+12)|0);
  HEAP16[(($178)>>1)]=1;
  $179=(($iter+16)|0);
  HEAP16[(($179)>>1)]=1;
  $_sum1=((($14)+(2))|0);
  $180=(($12+($_sum1<<1))|0);
  $181=((HEAP16[(($180)>>1)])|0);
  $182=(($iter+20)|0);
  HEAP16[(($182)>>1)]=$181;
  $183=(($iter+22)|0);
  HEAP16[(($183)>>1)]=1;
  $184=((HEAP16[(($180)>>1)])|0);
  $185=((($184)+(4))&65535);
  HEAP16[(($1)>>1)]=$185;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 64: {
  $187=(($iter+12)|0);
  HEAP16[(($187)>>1)]=1;
  $188=(($iter+16)|0);
  HEAP16[(($188)>>1)]=1;
  $_sum=((($14)+(2))|0);
  $189=(($12+($_sum<<1))|0);
  $190=((HEAP16[(($189)>>1)])|0);
  $191=(($iter+18)|0);
  HEAP16[(($191)>>1)]=$190;
  $192=(($iter+22)|0);
  HEAP16[(($192)>>1)]=1;
  $193=((HEAP16[(($189)>>1)])|0);
  $194=((($193)+(4))&65535);
  HEAP16[(($1)>>1)]=$194;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 29:case 30: {
  $50=(($iter+12)|0);
  HEAP16[(($50)>>1)]=1;
  $51=(($iter+18)|0);
  HEAP16[(($51)>>1)]=1;
  $52=(($iter+22)|0);
  HEAP16[(($52)>>1)]=1;
  HEAP16[(($1)>>1)]=4;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 37: {
  $83=(($iter+12)|0);
  HEAP16[(($83)>>1)]=1;
  $84=(($iter+18)|0);
  HEAP16[(($84)>>1)]=4;
  HEAP16[(($1)>>1)]=6;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 38: {
  $86=(($iter+12)|0);
  HEAP16[(($86)>>1)]=1;
  $87=(($iter+18)|0);
  HEAP16[(($87)>>1)]=2;
  $88=(($iter+22)|0);
  HEAP16[(($88)>>1)]=1;
  HEAP16[(($1)>>1)]=5;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 39: {
  $90=(($iter+12)|0);
  HEAP16[(($90)>>1)]=1;
  $91=(($iter+18)|0);
  HEAP16[(($91)>>1)]=3;
  HEAP16[(($1)>>1)]=5;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 45: {
  $101=(($iter+12)|0);
  HEAP16[(($101)>>1)]=1;
  $102=(($iter+14)|0);
  HEAP16[(($102)>>1)]=1;
  $103=(($iter+18)|0);
  HEAP16[(($103)>>1)]=1;
  $104=(($iter+22)|0);
  HEAP16[(($104)>>1)]=1;
  HEAP16[(($1)>>1)]=5;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 46: {
  $106=(($iter+12)|0);
  HEAP16[(($106)>>1)]=1;
  $107=(($iter+14)|0);
  HEAP16[(($107)>>1)]=1;
  $108=(($iter+18)|0);
  HEAP16[(($108)>>1)]=2;
  HEAP16[(($1)>>1)]=5;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 52:case 53:case 54: {
  $127=(($iter+12)|0);
  HEAP16[(($127)>>1)]=1;
  $128=(($iter+14)|0);
  HEAP16[(($128)>>1)]=1;
  $129=(($iter+22)|0);
  HEAP16[(($129)>>1)]=1;
  HEAP16[(($1)>>1)]=4;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 47: {
  $110=(($iter+12)|0);
  HEAP16[(($110)>>1)]=1;
  $111=(($iter+26)|0);
  HEAP16[(($111)>>1)]=1;
  HEAP16[(($1)>>1)]=3;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 48:case 65: {
  HEAP16[(($1)>>1)]=1;
  $_0=1;

  return (($_0)|0);
  break;
 }
 case 50: {
  $114=(($iter+12)|0);
  HEAP16[(($114)>>1)]=1;
  $115=(($iter+14)|0);
  HEAP16[(($115)>>1)]=1;
  $116=(($iter+22)|0);
  HEAP16[(($116)>>1)]=1;
  $117=(($iter+26)|0);
  HEAP16[(($117)>>1)]=1;
  HEAP16[(($1)>>1)]=5;
  $_0=1;

  return (($_0)|0);
  break;
 }
 default: {
  $_0=0;

  return (($_0)|0);
 }
 }
  return 0;
}


function _lily_boolean_to_i($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$ld$0$0=0,$13$0=0,$ld$1$1=0,$13$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((HEAP16[(($code)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($7+8)|0);
 $ld$0$0=(($12)|0);
 $13$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($12+4)|0);
 $13$1=((HEAP32[(($ld$1$1)>>2)])|0);
 _lily_move_integer($11,$13$0,$13$1);
 return;
}


function _lily_boolean_to_s($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$ld$0$0=0,$9$0=0,$ld$1$1=0,$9$1=0,$10=0,$11=0,$12=0,$13=0,$$etemp$2$0=0,$$etemp$2$1=0,$14=0,$_=0;
 var $15=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $ld$0$0=(($8)|0);
 $9$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($8+4)|0);
 $9$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $10=((HEAP16[(($code)>>1)])|0);
 $11=($10&65535);
 $12=(($2+($11<<2))|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $$etemp$2$0=0;
 $$etemp$2$1=0;
 $14=(($9$0|0) == ($$etemp$2$0|0)) & (($9$1|0) == ($$etemp$2$1|0));
 $_=($14?4888:13704);
 $15=((_lily_new_raw_string($_))|0);
 _lily_move_string($13,$15);
 return;
}


function _lily_bytestring_encode($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$41=0,$43=0,$44=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($argc<<16)>>16)==2;
 if ($11) {
  $13=(($code+4)|0);
  $14=((HEAP16[(($13)>>1)])|0);
  $15=($14&65535);
  $16=(($2+($15<<2))|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=(($17+8)|0);
  $19=$18;
  $20=((HEAP32[(($19)>>2)])|0);
  $21=(($20+8)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $24=$22;
 } else {
  $24=12824;
 }

 $25=((HEAP16[(($code)>>1)])|0);
 $26=($25&65535);
 $27=(($2+($26<<2))|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=((_strcmp((($24)|0),((12824)|0)))|0);
 $30=($29|0)==0;
 if (!($30)) {
  $41=((_lily_get_none($vm))|0);
  _lily_move_enum_f(0,$28,$41);
  return;
 }
 $32=(($10+8)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 $34=(($10+4)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=((_lily_is_valid_sized_utf8($33,$35))|0);
 $37=($36|0)==0;
 if ($37) {
  $39=((_lily_get_none($vm))|0);
  _lily_move_enum_f(0,$28,$39);
  return;
 } else {
  $43=((_lily_new_string($33))|0);
  $44=((_lily_new_some($43))|0);
  _lily_move_enum_f(8192,$28,$44);
  return;
 }
}


function _lily_double_to_i($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=.0,$12=0,$13=0,$14=0,$15=0,$11$0=0,$11$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=(+(HEAPF64[(($9)>>3)]));
 $11$0=(~~((+($10))))>>>0;$11$1=(tempDouble=(+($10)),(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0);
 $12=((HEAP16[(($code)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 _lily_move_integer($15,$11$0,$11$1);
 return;
}


function _lily_dynamic_new($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$24=0,$25=0,$26=0,$27=0,$28=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=$13&8192;
 $15=($14|0)==0;
 if (!($15)) {
  $17=(($11+8)|0);
  $18=$17;
  $19=((HEAP32[(($18)>>2)])|0);
  $20=(($19)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=((($21)+(1))|0);
  HEAP32[(($20)>>2)]=$22;
 }
 $24=((_lily_new_dynamic_val())|0);
 $25=(($24+16)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=$26;
 $28=$11;
 HEAP32[(($27)>>2)]=((HEAP32[(($28)>>2)])|0);HEAP32[((($27)+(4))>>2)]=((HEAP32[((($28)+(4))>>2)])|0);HEAP32[((($27)+(8))>>2)]=((HEAP32[((($28)+(8))>>2)])|0);HEAP32[((($27)+(12))>>2)]=((HEAP32[((($28)+(12))>>2)])|0);
 _lily_move_dynamic($6,$24);
 _lily_tag_value($vm,$6);
 return;
}


function _lily_either_is_left($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var label=0;

 _either_is_left_right($vm,$code,1);
 return;
}


function _lily_either_is_right($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var label=0;

 _either_is_left_right($vm,$code,0);
 return;
}


function _lily_either_left($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var label=0;

 _either_optionize_left_right($vm,$code,1);
 return;
}


function _lily_either_right($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var label=0;

 _either_optionize_left_right($vm,$code,0);
 return;
}


function _lily_file_close($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$19=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+12)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=($12|0)==0;
 if ($13) {
  return;
 }
 $15=(($10+6)|0);
 $16=((HEAP8[($15)])|0);
 $17=(($16<<24)>>24)==0;
 if ($17) {
  $19=((_fclose((($12)|0)))|0);
 }
 HEAP32[(($11)>>2)]=0;
 return;
}


function _lily_file_open($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$_=0,$34=0,$35=0,$36=0,$mode_ch_1=0,$37=0,$phitmp=0,$39=0;
 var $40=0,$42=0,$44=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+8)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($code+4)|0);
 $14=((HEAP16[(($13)>>1)])|0);
 $15=($14&65535);
 $16=(($2+($15<<2))|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17+8)|0);
 $19=$18;
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+8)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((HEAP16[(($code)>>1)])|0);
 $24=($23&65535);
 $25=(($2+($24<<2))|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=((___errno_location())|0);
 HEAP32[(($27)>>2)]=0;
 $28=((HEAP8[($22)])|0);
 if ((((($28<<24)>>24))|0)==((114)|0)|(((($28<<24)>>24))|0)==((119)|0)|(((($28<<24)>>24))|0)==((97)|0)) {
  $30=(($22+1)|0);
  $31=((HEAP8[($30)])|0);
  $32=(($31<<24)>>24)==98;
  $33=(($22+2)|0);
  $_=($32?$33:$30);
  $34=((HEAP8[($_)])|0);
  $35=(($34<<24)>>24)==43;
  $36=(($_+1)|0);
  $mode_ch_1=($35?$36:$_);
  $37=((HEAP8[($mode_ch_1)])|0);
  $phitmp=(($37<<24)>>24)==0;
  if (!($phitmp)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  _lily_vm_raise_fmt($vm,16,11448,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$22,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $39=((_fopen((($12)|0),(($22)|0)))|0);
 $40=($39|0)==0;
 if (!($40)) {
  $44=((_lily_new_file_val($39,$22))|0);
  _lily_move_file($26,$44);
  STACKTOP=sp;return;
 }
 $42=((HEAP32[(($27)>>2)])|0);
 _lily_vm_raise_fmt($vm,16,10248,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$42,HEAP32[(((tempVarArgs)+(8))>>2)]=$42,HEAP32[(((tempVarArgs)+(16))>>2)]=$12,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $44=((_lily_new_file_val($39,$22))|0);
 _lily_move_file($26,$44);
 STACKTOP=sp;return;
}


function _lily_file_print($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,label=0;

 _lily_file_write($vm,0,$code);
 $1=(($code+2)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=(($vm)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+($3<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+12)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((_fputc(((10)|0),(($12)|0)))|0);
 return;
}


function _lily_file_write($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 _write_check($vm,$10);
 $16=(($15)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=$17&8;
 $19=($18|0)==0;
 if ($19) {
  $30=(($vm+80)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  _lily_msgbuf_flush($31);
  _lily_vm_add_value_to_msgbuf($vm,$31,$15);
  $32=(($31)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=(($10+12)|0);
  $35=((HEAP32[(($34)>>2)])|0);
  $36=((_fputs((($33)|0),(($35)|0)))|0);
  return;
 } else {
  $21=(($15+8)|0);
  $22=$21;
  $23=((HEAP32[(($22)>>2)])|0);
  $24=(($23+8)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $26=(($10+12)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=((_fputs((($25)|0),(($27)|0)))|0);
  return;
 }
}


function _lily_file_read_line($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$buffer_0=0,$pos_0=0,$buffer_size_0=0,$25=0,$26=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$buffer_1=0,$buffer_size_1=0,$36=0,$37=0,$buffer_2=0,$pos_1=0;
 var $39=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP16[(($code)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($vm+80)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 _lily_msgbuf_flush($16);
 $17=(($16+8)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((($18)-(1))|0);
 $20=(($16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 _read_check($vm,$10);
 $22=(($10+12)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $buffer_size_0=$19;$pos_0=0;$buffer_0=$21;
 while(1) {



  $25=((_fgetc((($23)|0)))|0);
  $26=($25|0)==-1;
  if ($26) {
   $pos_1=$pos_0;$buffer_2=$buffer_0;
   label = 6;
   break;
  }
  $28=(($25)&255);
  $29=(($buffer_0+$pos_0)|0);
  HEAP8[($29)]=$28;
  $30=($pos_0|0)==($buffer_size_0|0);
  if ($30) {
   _lily_msgbuf_grow($16);
   $32=((HEAP32[(($20)>>2)])|0);
   $33=((HEAP32[(($17)>>2)])|0);
   $34=((($33)-(1))|0);
   $buffer_size_1=$34;$buffer_1=$32;
  } else {
   $buffer_size_1=$buffer_size_0;$buffer_1=$buffer_0;
  }


  $36=((($pos_0)+(1))|0);
  $37=($25|0)==10;
  if ($37) {
   $pos_1=$36;$buffer_2=$buffer_1;
   label = 6;
   break;
  } else {
   $buffer_size_0=$buffer_size_1;$pos_0=$36;$buffer_0=$buffer_1;
  }
 }
 if ((label|0) == 6) {


  $39=((_lily_new_raw_string_sized($buffer_2,$pos_1))|0);
  _lily_move_string($14,$39);
  return;
 }
}


function _lily_hash_get_elem($vm,$hash_val,$key){
 $vm=($vm)|0;
 $hash_val=($hash_val)|0;
 $key=($key)|0;
 var $1$0=0,$1$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$elem_iter_01=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20$0=0,$20$1=0,$21$0=0,$21$1=0,$22$0=0,$22$1=0,$23$0=0,$23$1=0,$elem_iter_02=0,$25=0,$ld$0$0=0,$26$0=0,$ld$1$1=0,$26$1=0,$27=0,$29=0,$30=0,$31=0,$32=0;
 var $33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40$0=0,$40$1=0,$41$0=0,$41$1=0,$42$0=0,$42$1=0,$43$0=0,$43$1=0,$44=0,$47=0,$49=0,$50=0,$51=0,$52=0;
 var $54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$elem_iter_0=0,$60=0,$elem_iter_0_lcssa=0,label=0;

 $1$0=((_lily_siphash($vm,$key))|0);
 $1$1=tempRet0;
 $2=(($hash_val+16)|0);
 $3=(($key+8)|0);
 $4=$3;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($key)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $elem_iter_01=((HEAP32[(($2)>>2)])|0);
 $8=($elem_iter_01|0)==0;
 if ($8) {
  $elem_iter_0_lcssa=0;

  return (($elem_iter_0_lcssa)|0);
 }
 $9=$key;
 $10=(($9+12)|0);
 $11=$10;
 $12=((HEAP32[(($11)>>2)])|0);
 $13=$5;
 $14=$7&2;
 $15=($14|0)==0;
 $16=$7&8;
 $17=($16|0)==0;
 $18=(($5+4)|0);
 $19=(($5+8)|0);
 $20$0=$12;
 $20$1=0;
 $21$0=0;
 $21$1=$20$0;
 $22$0=$13;
 $22$1=0;
 $23$0=$21$0|$22$0;
 $23$1=$21$1|$22$1;
 $elem_iter_02=$elem_iter_01;
 L4: while(1) {

  $25=(($elem_iter_02)|0);
  $ld$0$0=(($25)|0);
  $26$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($25+4)|0);
  $26$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $27=(($26$0|0) == ($1$0|0)) & (($26$1|0) == ($1$1|0));
  do {
   if ($27) {
    $29=(($elem_iter_02+8)|0);
    $30=((HEAP32[(($29)>>2)])|0);
    $31=(($30+8)|0);
    $32=$31;
    $33=((HEAP32[(($32)>>2)])|0);
    if (!($15)) {
     $35=$30;
     $36=(($35+12)|0);
     $37=$36;
     $38=$33;
     $39=((HEAP32[(($37)>>2)])|0);
     $40$0=$39;
     $40$1=0;
     $41$0=0;
     $41$1=$40$0;
     $42$0=$38;
     $42$1=0;
     $43$0=$41$0|$42$0;
     $43$1=$41$1|$42$1;
     $44=(($43$0|0) == ($23$0|0)) & (($43$1|0) == ($23$1|0));
     if ($44) {
      $elem_iter_0_lcssa=$elem_iter_02;
      label = 11;
      break L4;
     }
    }
    if ($17) {
     break;
    }
    $47=($33|0)==($5|0);
    if ($47) {
     $elem_iter_0_lcssa=$elem_iter_02;
     label = 11;
     break L4;
    }
    $49=(($33+4)|0);
    $50=((HEAP32[(($49)>>2)])|0);
    $51=((HEAP32[(($18)>>2)])|0);
    $52=($50|0)==($51|0);
    if (!($52)) {
     break;
    }
    $54=(($33+8)|0);
    $55=((HEAP32[(($54)>>2)])|0);
    $56=((HEAP32[(($19)>>2)])|0);
    $57=((_strcmp((($55)|0),(($56)|0)))|0);
    $58=($57|0)==0;
    if ($58) {
     $elem_iter_0_lcssa=$elem_iter_02;
     label = 11;
     break L4;
    }
   }
  } while(0);
  $59=(($elem_iter_02+16)|0);
  $elem_iter_0=((HEAP32[(($59)>>2)])|0);
  $60=($elem_iter_0|0)==0;
  if ($60) {
   $elem_iter_0_lcssa=0;
   label = 11;
   break;
  } else {
   $elem_iter_02=$elem_iter_0;
  }
 }
 if ((label|0) == 11) {

  return (($elem_iter_0_lcssa)|0);
 }
  return 0;
}


function _lily_hash_add_unique($vm,$hash_val,$pair_key,$pair_value){
 $vm=($vm)|0;
 $hash_val=($hash_val)|0;
 $pair_key=($pair_key)|0;
 $pair_value=($pair_value)|0;
 var $1=0,$2=0,label=0;

 _remove_key_check($vm,$hash_val);
 $1=((_lily_copy_value($pair_key))|0);
 $2=((_lily_copy_value($pair_value))|0);
 _hash_add_unique_nocopy($vm,$hash_val,$1,$2);
 return;
}


function _lily_hash_set_elem($vm,$hash_val,$pair_key,$pair_value){
 $vm=($vm)|0;
 $hash_val=($hash_val)|0;
 $pair_key=($pair_key)|0;
 $pair_value=($pair_value)|0;
 var $1=0,$2=0,$5=0,$6=0,label=0;

 $1=((_lily_hash_get_elem($vm,$hash_val,$pair_key))|0);
 $2=($1|0)==0;
 if ($2) {
  _lily_hash_add_unique($vm,$hash_val,$pair_key,$pair_value);
  return;
 } else {
  $5=(($1+12)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  _lily_assign_value($6,$pair_value);
  return;
 }
}


function _lily_destroy_hash($v){
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 _destroy_hash_elems($3);
 $4=$3;
 _lily_free($4);
 return;
}


function _lily_hash_clear($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$16=0,$17=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+4)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=($12|0)==0;
 if (!($13)) {
  _lily_vm_raise($vm,19,9080);
 }
 _destroy_hash_elems($10);
 $16=(($10+16)|0);
 HEAP32[(($16)>>2)]=0;
 $17=(($10+8)|0);
 HEAP32[(($17)>>2)]=0;
 return;
}


function _lily_hash_get($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$31=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($code+6)|0);
 $14=((HEAP16[(($13)>>1)])|0);
 $15=($14&65535);
 $16=(($2+($15<<2))|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=((HEAP16[(($code)>>1)])|0);
 $19=($18&65535);
 $20=(($2+($19<<2))|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($7+8)|0);
 $23=$22;
 $24=((HEAP32[(($23)>>2)])|0);
 $25=((_lily_hash_get_elem($vm,$24,$12))|0);
 $26=($25|0)==0;
 if ($26) {
  $31=$17;

  _lily_assign_value($21,$31);
  return;
 }
 $28=(($25+12)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $31=$29;

 _lily_assign_value($21,$31);
 return;
}


function _lily_hash_keys($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$elem_iter_01=0,$24=0,$elem_iter_03=0,$i_02=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$elem_iter_0=0,$32=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP16[(($code)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($10+8)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((_lily_new_list_val())|0);
 $18=(($17+8)|0);
 HEAP32[(($18)>>2)]=$16;
 $19=$16<<2;
 $20=((_lily_malloc($19))|0);
 $21=$20;
 $22=(($17+16)|0);
 HEAP32[(($22)>>2)]=$21;
 $23=(($10+16)|0);
 $elem_iter_01=((HEAP32[(($23)>>2)])|0);
 $24=($elem_iter_01|0)==0;
 if ($24) {
  _lily_move_list_f(73728,$14,$17);
  return;
 } else {
  $i_02=0;$elem_iter_03=$elem_iter_01;
 }
 while(1) {


  $25=(($elem_iter_03+8)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((_lily_copy_value($26))|0);
  $28=((HEAP32[(($22)>>2)])|0);
  $29=(($28+($i_02<<2))|0);
  HEAP32[(($29)>>2)]=$27;
  $30=((($i_02)+(1))|0);
  $31=(($elem_iter_03+16)|0);
  $elem_iter_0=((HEAP32[(($31)>>2)])|0);
  $32=($elem_iter_0|0)==0;
  if ($32) {
   break;
  } else {
   $i_02=$30;$elem_iter_03=$elem_iter_0;
  }
 }
 _lily_move_list_f(73728,$14,$17);
 return;
}


function _lily_hash_delete($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0;
 var $23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$34=0,$35=0,$36=0,$38=0,$40=0,$41=0,$42=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 _remove_key_check($vm,$10);
 $16=((_lily_hash_get_elem($vm,$10,$15))|0);
 $17=($16|0)==0;
 if ($17) {
  return;
 }
 $19=(($16+16)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=($20|0)==0;
 if (!($21)) {
  $23=(($16+20)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=(($20+20)|0);
  HEAP32[(($25)>>2)]=$24;
 }
 $27=(($16+20)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=($28|0)==0;
 if (!($29)) {
  $31=((HEAP32[(($19)>>2)])|0);
  $32=(($28+16)|0);
  HEAP32[(($32)>>2)]=$31;
 }
 $34=(($10+16)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=($16|0)==($35|0);
 if ($36) {
  $38=((HEAP32[(($19)>>2)])|0);
  HEAP32[(($34)>>2)]=$38;
 }
 _destroy_elem($16);
 $40=(($10+8)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=((($41)-(1))|0);
 HEAP32[(($40)>>2)]=$42;
 return;
}


function _lily_hash_each_pair($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$elem_iter_01=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0;
 var $40=0,$41=0,$42=0,label=0,setjmpLabel=0,setjmpTable=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
setjmpLabel=0;
setjmpTable=STACKTOP;STACKTOP = (STACKTOP + 168)|0;
HEAP32[((setjmpTable)>>2)]=0; while(1)switch(((label)|0)){
 case 1: 
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($10+16)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $18=(($10+4)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=((($19)+(1))|0);
 HEAP32[(($18)>>2)]=$20;
 $21=(($vm+96)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((invoke_ii(2,(($22)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $24=(($23+8)|0);
 $25=_saveSetjmp((($24)|0), label, setjmpTable)|0;
 label=7;break;
 case 7: 
 $26=($25|0)==0;
 if($26){label=2;break;}else{label=5;break;}
 case 2: 
 $27=($17|0)==0;
 if($27){label=4;break;}else{$elem_iter_01=$17;label=3;break;}
 case 3: 

 $28=(($elem_iter_01+8)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=(($elem_iter_01+12)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=((invoke_iiiiiii(2,(($vm)|0),(($cached)|0),((0)|0),(($15)|0),((2)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$29,HEAP32[(((tempVarArgs)+(8))>>2)]=$31,tempVarArgs))|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;; STACKTOP=tempVarArgs;
 $33=(($elem_iter_01+16)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=($34|0)==0;
 if($35){label=4;break;}else{$elem_iter_01=$34;label=3;break;}
 case 4: 
 $36=((HEAP32[(($18)>>2)])|0);
 $37=((($36)-(1))|0);
 HEAP32[(($18)>>2)]=$37;
 $38=((HEAP32[(($21)>>2)])|0);
 invoke_vi(10,(($38)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=6;break;
 case 5: 
 $40=((HEAP32[(($18)>>2)])|0);
 $41=((($40)-(1))|0);
 HEAP32[(($18)>>2)]=$41;
 $42=((HEAP32[(($21)>>2)])|0);
 invoke_vi(12,(($42)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=6;break;
 case 6: 
 STACKTOP=sp;return;
 case -1: if ((setjmpLabel|0) == 1) { $25 = threwValue; label = 7 }
__THREW__ = threwValue = 0;
break;
 }

}


function _lily_hash_has_key($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22$0=0,$22$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((_lily_hash_get_elem($vm,$10,$15))|0);
 $17=((HEAP16[(($code)>>1)])|0);
 $18=($17&65535);
 $19=(($2+($18<<2))|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=($16|0)!=0;
 $22$0=($21&1);
 $22$1=0;
 _lily_move_boolean($20,$22$0,$22$1);
 return;
}


function _lily_hash_map_values($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$elem_iter_01=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$66=0,$67=0,$68=0,label=0,setjmpLabel=0,setjmpTable=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
setjmpLabel=0;
setjmpTable=STACKTOP;STACKTOP = (STACKTOP + 168)|0;
HEAP32[((setjmpTable)>>2)]=0; while(1)switch(((label)|0)){
 case 1: 
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((HEAP16[(($code)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($10+16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($vm+84)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $24=((HEAP32[(($22)>>2)])|0);
 $25=(($24+4)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($10+8)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=$28<<1;
 invoke_vii(56,(($vm)|0),(($29)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $30=(($10+4)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=((($31)+(1))|0);
 HEAP32[(($30)>>2)]=$32;
 $33=(($vm+96)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=((invoke_ii(2,(($34)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $36=(($35+8)|0);
 $37=_saveSetjmp((($36)|0), label, setjmpTable)|0;
 label=8;break;
 case 8: 
 $38=($37|0)==0;
 if($38){label=2;break;}else{label=6;break;}
 case 2: 
 $39=($21|0)==0;
 if($39){label=5;break;}else{label=3;break;}
 case 3: 
 $40=(($23+4)|0);
 $41=(($23)|0);
 $elem_iter_01=$21;label=4;break;
 case 4: 

 $43=(($elem_iter_01+12)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=((invoke_iiiiiii(2,(($vm)|0),(($cached)|0),((1)|0),(($15)|0),((1)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$44,tempVarArgs))|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;; STACKTOP=tempVarArgs;
 $46=(($elem_iter_01+8)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=((invoke_ii(6,(($47)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $49=((HEAP32[(($40)>>2)])|0);
 $50=((HEAP32[(($41)>>2)])|0);
 $51=(($50+($49<<2))|0);
 HEAP32[(($51)>>2)]=$48;
 $52=((invoke_ii(6,(($45)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $53=((HEAP32[(($40)>>2)])|0);
 $54=((($53)+(1))|0);
 $55=((HEAP32[(($41)>>2)])|0);
 $56=(($55+($54<<2))|0);
 HEAP32[(($56)>>2)]=$52;
 $57=((HEAP32[(($40)>>2)])|0);
 $58=((($57)+(2))|0);
 HEAP32[(($40)>>2)]=$58;
 $59=(($elem_iter_01+16)|0);
 $60=((HEAP32[(($59)>>2)])|0);
 $61=($60|0)==0;
 if($61){label=5;break;}else{$elem_iter_01=$60;label=4;break;}
 case 5: 
 invoke_viii(46,(($vm)|0),(($26)|0),(($19)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $62=((HEAP32[(($30)>>2)])|0);
 $63=((($62)-(1))|0);
 HEAP32[(($30)>>2)]=$63;
 $64=((HEAP32[(($33)>>2)])|0);
 invoke_vi(10,(($64)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=7;break;
 case 6: 
 $66=((HEAP32[(($30)>>2)])|0);
 $67=((($66)-(1))|0);
 HEAP32[(($30)>>2)]=$67;
 $68=((HEAP32[(($33)>>2)])|0);
 invoke_vi(12,(($68)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=7;break;
 case 7: 
 STACKTOP=sp;return;
 case -1: if ((setjmpLabel|0) == 1) { $37 = threwValue; label = 8 }
__THREW__ = threwValue = 0;
break;
 }

}


function _lily_hash_merge($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$elem_iter_06=0,$25=0,$26=0,$27=0,$28=0,$29=0,$elem_iter_07=0,$30=0,$31=0,$32=0,$33=0,$34=0,$elem_iter_0=0,$35=0,$i_03=0,$37=0;
 var $38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$elem_iter_11=0,$44=0,$elem_iter_12=0,$45=0,$46=0,$47=0,$48=0,$49=0,$elem_iter_1=0,$50=0,$51=0,$52=0,$53=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15+8)|0);
 $17=$16;
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((HEAP16[(($code)>>1)])|0);
 $20=($19&65535);
 $21=(($2+($20<<2))|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((_lily_new_hash_val())|0);
 $24=(($10+16)|0);
 $elem_iter_06=((HEAP32[(($24)>>2)])|0);
 $25=($elem_iter_06|0)==0;
 if (!($25)) {
  $elem_iter_07=$elem_iter_06;
  while(1) {

   $30=(($elem_iter_07+8)|0);
   $31=((HEAP32[(($30)>>2)])|0);
   $32=(($elem_iter_07+12)|0);
   $33=((HEAP32[(($32)>>2)])|0);
   _lily_hash_add_unique($vm,$23,$31,$33);
   $34=(($elem_iter_07+16)|0);
   $elem_iter_0=((HEAP32[(($34)>>2)])|0);
   $35=($elem_iter_0|0)==0;
   if ($35) {
    break;
   } else {
    $elem_iter_07=$elem_iter_0;
   }
  }
 }
 $26=(($18+8)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=($27|0)==0;
 if ($28) {
  _lily_move_hash_f(73728,$22,$23);
  return;
 }
 $29=(($18+16)|0);
 $i_03=0;
 while(1) {

  $37=((HEAP32[(($29)>>2)])|0);
  $38=(($37+($i_03<<2))|0);
  $39=((HEAP32[(($38)>>2)])|0);
  $40=(($39+8)|0);
  $41=$40;
  $42=((HEAP32[(($41)>>2)])|0);
  $43=(($42+16)|0);
  $elem_iter_11=((HEAP32[(($43)>>2)])|0);
  $44=($elem_iter_11|0)==0;
  if (!($44)) {
   $elem_iter_12=$elem_iter_11;
   while(1) {

    $45=(($elem_iter_12+8)|0);
    $46=((HEAP32[(($45)>>2)])|0);
    $47=(($elem_iter_12+12)|0);
    $48=((HEAP32[(($47)>>2)])|0);
    _lily_hash_set_elem($vm,$23,$46,$48);
    $49=(($elem_iter_12+16)|0);
    $elem_iter_1=((HEAP32[(($49)>>2)])|0);
    $50=($elem_iter_1|0)==0;
    if ($50) {
     break;
    } else {
     $elem_iter_12=$elem_iter_1;
    }
   }
  }
  $51=((($i_03)+(1))|0);
  $52=((HEAP32[(($26)>>2)])|0);
  $53=($51>>>0)<($52>>>0);
  if ($53) {
   $i_03=$51;
  } else {
   break;
  }
 }
 _lily_move_hash_f(73728,$22,$23);
 return;
}


function _lily_hash_reject($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var label=0;

 _hash_select_reject_common($vm,$code,0);
 return;
}


function _lily_hash_select($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var label=0;

 _hash_select_reject_common($vm,$code,1);
 return;
}


function _lily_hash_size($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17$0=0,$17$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP16[(($code)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($10+8)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17$0=$16;
 $17$1=0;
 _lily_move_integer($14,$17$0,$17$1);
 return;
}


function _lily_integer_to_d($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$ld$0$0=0,$13$0=0,$ld$1$1=0,$13$1=0,$14=.0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $ld$0$0=(($12)|0);
 $13$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($12+4)|0);
 $13$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $14=((+(($13$0>>>0)))+((+(($13$1|0)))*4294967296.0));
 _lily_move_double($6,$14);
 return;
}


function _lily_integer_to_s($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $buffer=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$ld$0$0=0,$9$0=0,$ld$1$1=0,$9$1=0,$10=0,$11=0,$12=0,$13=0,$14=0,$$etemp$2=0,$15=0;
 var $16=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;
 $buffer=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $ld$0$0=(($8)|0);
 $9$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($8+4)|0);
 $9$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $10=((HEAP16[(($code)>>1)])|0);
 $11=($10&65535);
 $12=(($2+($11<<2))|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($buffer)|0);
 $$etemp$2=7696;
 $15=((_snprintf((($14)|0),((32)|0),(($$etemp$2)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$9$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$9$1,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 $16=((_lily_new_raw_string($14))|0);
 _lily_move_string($13,$16);
 STACKTOP=sp;return;
}


function _lily_list_size($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17$0=0,$17$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP16[(($code)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($10+8)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17$0=$16;
 $17$1=0;
 _lily_move_integer($14,$17$0,$17$1);
 return;
}


function _lily_list_push($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($10+4)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=($17|0)==0;
 if ($18) {
  _make_extra_space_in_list($10);
 }
 $21=(($10+8)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((_lily_copy_value($15))|0);
 $24=(($10+16)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25+($22<<2))|0);
 HEAP32[(($26)>>2)]=$23;
 $27=((HEAP32[(($21)>>2)])|0);
 $28=((($27)+(1))|0);
 HEAP32[(($21)>>2)]=$28;
 $29=((HEAP32[(($16)>>2)])|0);
 $30=((($29)-(1))|0);
 HEAP32[(($16)>>2)]=$30;
 return;
}


function _lily_list_pop($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP16[(($code)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($10+8)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==0;
 if ($17) {
  _lily_vm_raise($vm,21,6328);
 }
 $20=((HEAP32[(($15)>>2)])|0);
 $21=((($20)-(1))|0);
 $22=(($10+16)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($23+($21<<2))|0);
 $25=((HEAP32[(($24)>>2)])|0);
 _lily_assign_value_noref($14,$25);
 $26=((HEAP32[(($15)>>2)])|0);
 $27=((($26)-(1))|0);
 $28=((HEAP32[(($22)>>2)])|0);
 $29=(($28+($27<<2))|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=$30;
 _lily_free($31);
 $32=((HEAP32[(($15)>>2)])|0);
 $33=((($32)-(1))|0);
 HEAP32[(($15)>>2)]=$33;
 $34=(($10+4)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=((($35)+(1))|0);
 HEAP32[(($34)>>2)]=$36;
 return;
}


function _lily_list_insert($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$ld$0$0=0,$17$0=0,$ld$1$1=0,$17$1=0;
 var $18=0,$19=0,$20=0,$21=0,$22=0,$23$0=0,$23$1=0,$24=0,$25=0,$26=0,$29=0,$30=0,$31$0=0,$31$1=0,$32=0,$34=0,$35=0,$36$0=0,$36=0,$37=0;
 var $_sum=0,$38=0,$39=0,$40=0,$42$0=0,$42$1=0,$43$0=0,$43=0,$45=0,$46$0=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$41$0=0,$41$1=0;
 var label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15+8)|0);
 $ld$0$0=(($16)|0);
 $17$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($16+4)|0);
 $17$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $18=(($code+6)|0);
 $19=((HEAP16[(($18)>>1)])|0);
 $20=($19&65535);
 $21=(($2+($20<<2))|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23$0=((_get_relative_index($vm,$10,$17$0,$17$1))|0);
 $23$1=tempRet0;
 $24=(($10+4)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($25|0)==0;
 if ($26) {
  _make_extra_space_in_list($10);
 }
 $29=(($10+8)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31$0=$30;
 $31$1=0;
 $32=(($31$0|0) == ($23$0|0)) & (($31$1|0) == ($23$1|0));
 if (!($32)) {
  $34=(($10+16)|0);
  $35=((HEAP32[(($34)>>2)])|0);
  $36$0=$23$0;
  $36=$36$0;
  $37=(($35+($36<<2))|0);
  $_sum=((($36)+(1))|0);
  $38=(($35+($_sum<<2))|0);
  $39=$38;
  $40=$37;
  $41$0=((_i64Subtract($31$0,$31$1,$23$0,$23$1))|0);$41$1=tempRet0;
  $42$0=($41$0<<2)|(0>>>30);
  $42$1=($41$1<<2)|($41$0>>>30);
  $43$0=$42$0;
  $43=$43$0;
  ((_memmove((($39)|0),(($40)|0),(($43)|0)))|0);
 }
 $45=((_lily_copy_value($22))|0);
 $46$0=$23$0;
 $46=$46$0;
 $47=(($10+16)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 $49=(($48+($46<<2))|0);
 HEAP32[(($49)>>2)]=$45;
 $50=((HEAP32[(($29)>>2)])|0);
 $51=((($50)+(1))|0);
 HEAP32[(($29)>>2)]=$51;
 $52=((HEAP32[(($24)>>2)])|0);
 $53=((($52)-(1))|0);
 HEAP32[(($24)>>2)]=$53;
 return;
}


function _lily_list_delete_at($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$ld$0$0=0,$17$0=0,$ld$1$1=0,$17$1=0;
 var $18=0,$19=0,$20=0,$23$0=0,$23$1=0,$24=0,$25=0,$26=0,$29$0=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36$0=0,$36$1=0,$37=0,$39=0;
 var $40=0,$41=0,$_sum=0,$42=0,$43=0,$45$0=0,$45$1=0,$46$0=0,$46=0,$48=0,$49=0,$50=0,$51=0,$44$0=0,$44$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15+8)|0);
 $ld$0$0=(($16)|0);
 $17$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($16+4)|0);
 $17$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $18=(($10+8)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=($19|0)==0;
 if ($20) {
  _lily_vm_raise($vm,21,5024);
 }
 $23$0=((_get_relative_index($vm,$10,$17$0,$17$1))|0);
 $23$1=tempRet0;
 $24=(($10+4)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($25|0)==0;
 if ($26) {
  _make_extra_space_in_list($10);
 }
 $29$0=$23$0;
 $29=$29$0;
 $30=(($10+16)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=(($31+($29<<2))|0);
 $33=((HEAP32[(($32)>>2)])|0);
 _lily_deref($33);
 $34=$33;
 _lily_free($34);
 $35=((HEAP32[(($18)>>2)])|0);
 $36$0=$35;
 $36$1=0;
 $37=(($36$0|0) == ($23$0|0)) & (($36$1|0) == ($23$1|0));
 if ($37) {
  $48=((HEAP32[(($18)>>2)])|0);
  $49=((($48)-(1))|0);
  HEAP32[(($18)>>2)]=$49;
  $50=((HEAP32[(($24)>>2)])|0);
  $51=((($50)+(1))|0);
  HEAP32[(($24)>>2)]=$51;
  return;
 }
 $39=((HEAP32[(($30)>>2)])|0);
 $40=(($39+($29<<2))|0);
 $41=$40;
 $_sum=((($29)+(1))|0);
 $42=(($39+($_sum<<2))|0);
 $43=$42;
 $44$0=((_i64Subtract($36$0,$36$1,$23$0,$23$1))|0);$44$1=tempRet0;
 $45$0=($44$0<<2)|(0>>>30);
 $45$1=($44$1<<2)|($44$0>>>30);
 $46$0=$45$0;
 $46=$46$0;
 ((_memmove((($41)|0),(($43)|0),(($46)|0)))|0);
 $48=((HEAP32[(($18)>>2)])|0);
 $49=((($48)-(1))|0);
 HEAP32[(($18)>>2)]=$49;
 $50=((HEAP32[(($24)>>2)])|0);
 $51=((($50)+(1))|0);
 HEAP32[(($24)>>2)]=$51;
 return;
}


function _lily_list_clear($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$i_02=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$_lcssa1=0,$26=0,$27=0,$28=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+8)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=($12|0)==0;
 if ($13) {
  $_lcssa1=0;

  $26=(($10+4)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=((($27)+($_lcssa1))|0);
  HEAP32[(($26)>>2)]=$28;
  HEAP32[(($11)>>2)]=0;
  return;
 }
 $14=(($10+16)|0);
 $i_02=0;
 while(1) {

  $16=((HEAP32[(($14)>>2)])|0);
  $17=(($16+($i_02<<2))|0);
  $18=((HEAP32[(($17)>>2)])|0);
  _lily_deref($18);
  $19=((HEAP32[(($14)>>2)])|0);
  $20=(($19+($i_02<<2))|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=$21;
  _lily_free($22);
  $23=((($i_02)+(1))|0);
  $24=((HEAP32[(($11)>>2)])|0);
  $25=($23>>>0)<($24>>>0);
  if ($25) {
   $i_02=$23;
  } else {
   $_lcssa1=$24;
   break;
  }
 }

 $26=(($10+4)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=((($27)+($_lcssa1))|0);
 HEAP32[(($26)>>2)]=$28;
 HEAP32[(($11)>>2)]=0;
 return;
}


function _lily_list_each($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$i_01=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($7+8)|0);
 $14=$13;
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((HEAP16[(($code)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $20=(($15+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=($21|0)==0;
 if ($22) {
  _lily_assign_value($19,$7);
  STACKTOP=sp;return;
 }
 $23=(($15+16)|0);
 $i_01=0;
 while(1) {

  $25=((HEAP32[(($23)>>2)])|0);
  $26=(($25+($i_01<<2))|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=((_lily_foreign_call($vm,$cached,1,$12,1,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
  $29=((($i_01)+(1))|0);
  $30=((HEAP32[(($20)>>2)])|0);
  $31=($29>>>0)<($30>>>0);
  if ($31) {
   $i_01=$29;
  } else {
   break;
  }
 }
 _lily_assign_value($19,$7);
 STACKTOP=sp;return;
}


function _lily_list_each_index($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $fake_reg=0,$cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$$etemp$0$0=0,$$etemp$0$1=0,$st$1$0=0,$st$2$1=0,$21=0,$22=0,$23=0,$24=0,$i_01=0,$25=0,$26=0,$ld$3$0=0,$27$0=0,$ld$4$1=0,$27$1=0,$$etemp$5$0=0,$$etemp$5$1=0,$st$6$0=0;
 var $st$7$1=0,$29=0,$30=0,$28$0=0,$28$1=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 $fake_reg=((sp)|0);
 $cached=(((sp)+(16))|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($7+8)|0);
 $14=$13;
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((HEAP16[(($code)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($fake_reg+8)|0);
 $$etemp$0$0=0;
 $$etemp$0$1=0;
 $st$1$0=(($20)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 $st$2$1=(($20+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 $21=(($fake_reg)|0);
 HEAP32[(($21)>>2)]=2;
 HEAP32[(($cached)>>2)]=0;
 $22=(($15+8)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=($23|0)==0;
 if ($24) {
  _lily_assign_value($19,$7);
  STACKTOP=sp;return;
 } else {
  $i_01=0;
 }
 while(1) {

  $25=((_lily_foreign_call($vm,$cached,0,$12,1,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$fake_reg,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
  $26=((($i_01)+(1))|0);
  $ld$3$0=(($20)|0);
  $27$0=((HEAP32[(($ld$3$0)>>2)])|0);
  $ld$4$1=(($20+4)|0);
  $27$1=((HEAP32[(($ld$4$1)>>2)])|0);
  $$etemp$5$0=1;
  $$etemp$5$1=0;
  $28$0=((_i64Add($27$0,$27$1,$$etemp$5$0,$$etemp$5$1))|0);$28$1=tempRet0;
  $st$6$0=(($20)|0);
  HEAP32[(($st$6$0)>>2)]=$28$0;
  $st$7$1=(($20+4)|0);
  HEAP32[(($st$7$1)>>2)]=$28$1;
  $29=((HEAP32[(($22)>>2)])|0);
  $30=($26>>>0)<($29>>>0);
  if ($30) {
   $i_01=$26;
  } else {
   break;
  }
 }
 _lily_assign_value($19,$7);
 STACKTOP=sp;return;
}


function _lily_list_fill($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$ld$0$0=0,$9$0=0,$ld$1$1=0,$9$1=0,$10$0=0,$10=0,$11=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$i_01=0,$29=0,$30=0,$31=0,$32=0,$33=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $ld$0$0=(($8)|0);
 $9$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($8+4)|0);
 $9$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $10$0=$9$0;
 $10=$10$0;
 $11=($10|0)<0;
 if ($11) {
  _lily_vm_raise_fmt($vm,20,4848,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$10,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $14=(($code+4)|0);
 $15=((HEAP16[(($14)>>1)])|0);
 $16=($15&65535);
 $17=(($2+($16<<2))|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((HEAP16[(($code)>>1)])|0);
 $20=($19&65535);
 $21=(($2+($20<<2))|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((_lily_new_list_val())|0);
 _lily_move_list_f(73728,$22,$23);
 $24=$10<<2;
 $25=((_lily_malloc($24))|0);
 $26=$25;
 $27=(($23+16)|0);
 HEAP32[(($27)>>2)]=$26;
 $28=($10|0)>0;
 if ($28) {
  $i_01=0;
 } else {
  $33=(($23+8)|0);
  HEAP32[(($33)>>2)]=$10;
  STACKTOP=sp;return;
 }
 while(1) {

  $29=((_lily_copy_value($18))|0);
  $30=(($26+($i_01<<2))|0);
  HEAP32[(($30)>>2)]=$29;
  $31=((($i_01)+(1))|0);
  $32=($31|0)<($10|0);
  if ($32) {
   $i_01=$31;
  } else {
   break;
  }
 }
 $33=(($23+8)|0);
 HEAP32[(($33)>>2)]=$10;
 STACKTOP=sp;return;
}


function _lily_list_count($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$count_02=0,$i_01=0,$25=0,$26=0,$27=0,$28=0,$29=0,$ld$0$0=0,$30$0=0,$ld$1$1=0,$30$1=0,$$etemp$2$0=0,$$etemp$2$1=0,$31=0,$32=0,$_count_0=0;
 var $33=0,$34=0,$35=0,$phitmp$0=0,$phitmp$1=0,$count_0_lcssa$0=0,$count_0_lcssa$1=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($code+4)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $20=(($14+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=($21|0)==0;
 if ($22) {
  $count_0_lcssa$1=0;$count_0_lcssa$0=0;


  _lily_move_integer($6,$count_0_lcssa$0,$count_0_lcssa$1);
  STACKTOP=sp;return;
 }
 $23=(($14+16)|0);
 $i_01=0;$count_02=0;
 while(1) {


  $25=((HEAP32[(($23)>>2)])|0);
  $26=(($25+($i_01<<2))|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=((_lily_foreign_call($vm,$cached,1,$19,1,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
  $29=(($28+8)|0);
  $ld$0$0=(($29)|0);
  $30$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($29+4)|0);
  $30$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $$etemp$2$0=1;
  $$etemp$2$1=0;
  $31=(($30$0|0) == ($$etemp$2$0|0)) & (($30$1|0) == ($$etemp$2$1|0));
  $32=($31&1);
  $_count_0=((($32)+($count_02))|0);
  $33=((($i_01)+(1))|0);
  $34=((HEAP32[(($20)>>2)])|0);
  $35=($33>>>0)<($34>>>0);
  if ($35) {
   $i_01=$33;$count_02=$_count_0;
  } else {
   break;
  }
 }
 $phitmp$0=$_count_0;
 $phitmp$1=((((($_count_0|0)<0))|0)?-1:0);
 $count_0_lcssa$1=$phitmp$1;$count_0_lcssa$0=$phitmp$0;


 _lily_move_integer($6,$count_0_lcssa$0,$count_0_lcssa$1);
 STACKTOP=sp;return;
}


function _lily_list_join($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$delim_0=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$i_01=0,$38=0,$39=0,$40=0,$41=0;
 var $43=0,$i_0_lcssa2=0,$44=0,$45=0,$47=0,$48=0,$49=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($argc<<16)>>16)==2;
 if ($15) {
  $17=(($code+4)|0);
  $18=((HEAP16[(($17)>>1)])|0);
  $19=($18&65535);
  $20=(($2+($19<<2))|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21+8)|0);
  $23=$22;
  $24=((HEAP32[(($23)>>2)])|0);
  $25=(($24+8)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $delim_0=$26;
 } else {
  $delim_0=17920;
 }

 $28=(($vm+80)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 _lily_msgbuf_flush($29);
 $30=(($14+8)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=($31|0)==0;
 if ($32) {
  $47=(($29)|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=((_lily_new_raw_string($48))|0);
  _lily_move_string($6,$49);
  return;
 }
 $34=((($31)-(1))|0);
 $35=(($14+16)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=($34|0)>0;
 do {
  if ($37) {
   $i_01=0;
   while(1) {

    $38=(($36+($i_01<<2))|0);
    $39=((HEAP32[(($38)>>2)])|0);
    _lily_vm_add_value_to_msgbuf($vm,$29,$39);
    _lily_msgbuf_add($29,$delim_0);
    $40=((($i_01)+(1))|0);
    $41=($40|0)<($34|0);
    if ($41) {
     $i_01=$40;
    } else {
     break;
    }
   }
   $43=((($31)-(1))|0);
   if (!($32)) {
    $i_0_lcssa2=$43;
    break;
   }
   $47=(($29)|0);
   $48=((HEAP32[(($47)>>2)])|0);
   $49=((_lily_new_raw_string($48))|0);
   _lily_move_string($6,$49);
   return;
  } else {
   $i_0_lcssa2=0;
  }
 } while(0);

 $44=(($36+($i_0_lcssa2<<2))|0);
 $45=((HEAP32[(($44)>>2)])|0);
 _lily_vm_add_value_to_msgbuf($vm,$29,$45);
 $47=(($29)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 $49=((_lily_new_raw_string($48))|0);
 _lily_move_string($6,$49);
 return;
}


function _lily_list_select($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var label=0;

 _list_select_reject_common($vm,$code,1);
 return;
}


function _lily_list_reject($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var label=0;

 _list_select_reject_common($vm,$code,0);
 return;
}


function _lily_list_map($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$i_01=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$42=0,$43=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($code+4)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($vm+84)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($21+4)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $24=(($14+8)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 _lily_vm_list_ensure($vm,$25);
 $26=((HEAP32[(($24)>>2)])|0);
 $27=($26|0)==0;
 if ($27) {
  _slice_vm_list($vm,$23,$6);
  STACKTOP=sp;return;
 }
 $28=(($14+16)|0);
 $29=(($21)|0);
 $i_01=0;
 while(1) {

  $31=((HEAP32[(($28)>>2)])|0);
  $32=(($31+($i_01<<2))|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=((_lily_foreign_call($vm,$cached,1,$19,1,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$33,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
  $35=((_lily_copy_value($34))|0);
  $36=((HEAP32[(($22)>>2)])|0);
  $37=((HEAP32[(($29)>>2)])|0);
  $38=(($37+($36<<2))|0);
  HEAP32[(($38)>>2)]=$35;
  $39=((HEAP32[(($22)>>2)])|0);
  $40=((($39)+(1))|0);
  HEAP32[(($22)>>2)]=$40;
  $41=((($i_01)+(1))|0);
  $42=((HEAP32[(($24)>>2)])|0);
  $43=($41>>>0)<($42>>>0);
  if ($43) {
   $i_01=$41;
  } else {
   break;
  }
 }
 _slice_vm_list($vm,$23,$6);
 STACKTOP=sp;return;
}


function _lily_list_shift($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP16[(($code)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($10+8)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==0;
 if ($17) {
  _lily_vm_raise($vm,21,16800);
 }
 $20=(($10+16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=((HEAP32[(($21)>>2)])|0);
 _lily_assign_value_noref($14,$22);
 $23=((HEAP32[(($20)>>2)])|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=$24;
 _lily_free($25);
 $26=((HEAP32[(($15)>>2)])|0);
 $27=($26|0)==1;
 if ($27) {
  $36=((HEAP32[(($15)>>2)])|0);
  $37=((($36)-(1))|0);
  HEAP32[(($15)>>2)]=$37;
  $38=(($10+4)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  $40=((($39)+(1))|0);
  HEAP32[(($38)>>2)]=$40;
  return;
 }
 $29=((HEAP32[(($20)>>2)])|0);
 $30=$29;
 $31=(($29+4)|0);
 $32=$31;
 $33=$26<<2;
 $34=((($33)-(4))|0);
 ((_memmove((($30)|0),(($32)|0),(($34)|0)))|0);
 $36=((HEAP32[(($15)>>2)])|0);
 $37=((($36)-(1))|0);
 HEAP32[(($15)>>2)]=$37;
 $38=(($10+4)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=((($39)+(1))|0);
 HEAP32[(($38)>>2)]=$40;
 return;
}


function _lily_list_unshift($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$21=0,$22=0;
 var $23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($10+4)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=($17|0)==0;
 if ($18) {
  _make_extra_space_in_list($10);
 }
 $21=(($10+8)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($22|0)==0;
 if (!($23)) {
  $25=(($10+16)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=(($26+4)|0);
  $28=$27;
  $29=$26;
  $30=$22<<2;
  ((_memmove((($28)|0),(($29)|0),(($30)|0)))|0);
 }
 $32=((_lily_copy_value($15))|0);
 $33=(($10+16)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 HEAP32[(($34)>>2)]=$32;
 $35=((HEAP32[(($21)>>2)])|0);
 $36=((($35)+(1))|0);
 HEAP32[(($21)>>2)]=$36;
 $37=((HEAP32[(($16)>>2)])|0);
 $38=((($37)-(1))|0);
 HEAP32[(($16)>>2)]=$38;
 return;
}


function _lily_list_fold($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$i_02=0,$current_01=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$current_0_lcssa=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($code+4)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($code+6)|0);
 $21=((HEAP16[(($20)>>1)])|0);
 $22=($21&65535);
 $23=(($2+($22<<2))|0);
 $24=((HEAP32[(($23)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $25=(($14+8)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=($26|0)==0;
 if ($27) {
  $current_0_lcssa=$19;

  _lily_assign_value($6,$current_0_lcssa);
  STACKTOP=sp;return;
 }
 $28=(($14+16)|0);
 $current_01=$19;$i_02=0;
 while(1) {


  $30=((HEAP32[(($28)>>2)])|0);
  $31=(($30+($i_02<<2))|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=((_lily_foreign_call($vm,$cached,1,$24,2,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$current_01,HEAP32[(((tempVarArgs)+(8))>>2)]=$32,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
  $34=((($i_02)+(1))|0);
  $35=((HEAP32[(($25)>>2)])|0);
  $36=($34>>>0)<($35>>>0);
  if ($36) {
   $current_01=$33;$i_02=$34;
  } else {
   $current_0_lcssa=$33;
   break;
  }
 }

 _lily_assign_value($6,$current_0_lcssa);
 STACKTOP=sp;return;
}


function _lily_option_and($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$source_0=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((HEAP16[(($code)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($7+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+6)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=(($16<<16)>>16)==0;
 if (!($17)) {
  $source_0=$7;

  _lily_assign_value($11,$source_0);
  return;
 }
 $19=(($code+4)|0);
 $20=((HEAP16[(($19)>>1)])|0);
 $21=($20&65535);
 $22=(($2+($21<<2))|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $source_0=$23;

 _lily_assign_value($11,$source_0);
 return;
}


function _lily_option_and_then($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$24=0,$25=0,$26=0,$27=0,$source_0=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((HEAP16[(($code)>>1)])|0);
 $14=($13&65535);
 $15=(($2+($14<<2))|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($7+8)|0);
 $18=$17;
 $19=((HEAP32[(($18)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $20=(($19+6)|0);
 $21=((HEAP16[(($20)>>1)])|0);
 $22=(($21<<16)>>16)==0;
 if (!($22)) {
  $source_0=$7;

  _lily_assign_value($16,$source_0);
  STACKTOP=sp;return;
 }
 $24=(($19+16)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=((_lily_foreign_call($vm,$cached,1,$12,1,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$26,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 $source_0=$27;

 _lily_assign_value($16,$source_0);
 STACKTOP=sp;return;
}


function _lily_option_map($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((HEAP16[(($code)>>1)])|0);
 $14=($13&65535);
 $15=(($2+($14<<2))|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($7+8)|0);
 $18=$17;
 $19=((HEAP32[(($18)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $20=(($19+6)|0);
 $21=((HEAP16[(($20)>>1)])|0);
 $22=(($21<<16)>>16)==0;
 if ($22) {
  $24=(($19+16)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((_lily_foreign_call($vm,$cached,1,$12,1,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$26,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
  $28=((_lily_copy_value($27))|0);
  $29=((_lily_new_some($28))|0);
  _lily_move_enum_f(73728,$16,$29);
  STACKTOP=sp;return;
 } else {
  $31=((_lily_get_none($vm))|0);
  _lily_move_enum_f(65536,$16,$31);
  STACKTOP=sp;return;
 }
}


function _lily_option_is_some($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var label=0;

 _option_is_some_or_none($vm,$code,1);
 return;
}


function _lily_option_is_none($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var label=0;

 _option_is_some_or_none($vm,$code,0);
 return;
}


function _lily_option_or($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$source_0=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((HEAP16[(($code)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($7+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+6)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=(($16<<16)>>16)==0;
 if ($17) {
  $source_0=$7;

  _lily_assign_value($11,$source_0);
  return;
 }
 $19=(($code+4)|0);
 $20=((HEAP16[(($19)>>1)])|0);
 $21=($20&65535);
 $22=(($2+($21<<2))|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $source_0=$23;

 _lily_assign_value($11,$source_0);
 return;
}


function _lily_option_unwrap($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($10+6)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=(($12<<16)>>16)==0;
 if ($13) {
  $15=((HEAP16[(($code)>>1)])|0);
  $16=($15&65535);
  $17=(($2+($16<<2))|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=(($10+16)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=((HEAP32[(($20)>>2)])|0);
  _lily_assign_value($18,$21);
  return;
 } else {
  _lily_vm_raise($vm,20,15856);
  return;
 }
}


function _lily_option_unwrap_or($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$22=0;
 var $23=0,$24=0,$25=0,$source_0_in=0,$source_0=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP16[(($code)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($10+6)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=(($16<<16)>>16)==0;
 if ($17) {
  $19=(($10+16)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $source_0_in=$20;

  $source_0=((HEAP32[(($source_0_in)>>2)])|0);
  _lily_assign_value($14,$source_0);
  return;
 } else {
  $22=(($code+4)|0);
  $23=((HEAP16[(($22)>>1)])|0);
  $24=($23&65535);
  $25=(($2+($24<<2))|0);
  $source_0_in=$25;

  $source_0=((HEAP32[(($source_0_in)>>2)])|0);
  _lily_assign_value($14,$source_0);
  return;
 }
}


function _lily_option_or_else($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$24=0,$source_0=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((HEAP16[(($code)>>1)])|0);
 $14=($13&65535);
 $15=(($2+($14<<2))|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($7+8)|0);
 $18=$17;
 $19=((HEAP32[(($18)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $20=(($19+6)|0);
 $21=((HEAP16[(($20)>>1)])|0);
 $22=(($21<<16)>>16)==0;
 if ($22) {
  $source_0=$7;

  _lily_assign_value($16,$source_0);
  STACKTOP=sp;return;
 }
 $24=((_lily_foreign_call($vm,$cached,1,$12,0,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 $source_0=$24;

 _lily_assign_value($16,$source_0);
 STACKTOP=sp;return;
}


function _lily_option_unwrap_or_else($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$24=0,$25=0,$26=0,$27=0,$29=0,$source_0=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((HEAP16[(($code)>>1)])|0);
 $14=($13&65535);
 $15=(($2+($14<<2))|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($7+8)|0);
 $18=$17;
 $19=((HEAP32[(($18)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $20=(($19+6)|0);
 $21=((HEAP16[(($20)>>1)])|0);
 $22=(($21<<16)>>16)==0;
 if ($22) {
  $24=((HEAP32[(($18)>>2)])|0);
  $25=(($24+16)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $source_0=$27;

  _lily_assign_value($16,$source_0);
  STACKTOP=sp;return;
 } else {
  $29=((_lily_foreign_call($vm,$cached,1,$12,0,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
  $source_0=$29;

  _lily_assign_value($16,$source_0);
  STACKTOP=sp;return;
 }
}


function _lily_string_is_digit($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$$etemp$0$0=0,$$etemp$0$1=0,$20=0;
 var $21=0,$$etemp$1$0=0,$$etemp$1$1=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$i_01=0,$31=0,$32=0,$33=0,$isdigittmp=0,$isdigit=0,$34=0,$36=0,$$etemp$2$0=0;
 var $$etemp$2$1=0,$st$3$0=0,$st$4$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+4)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==0;
 if ($17) {
  $$etemp$0$0=0;
  $$etemp$0$1=0;
  _lily_move_boolean($6,$$etemp$0$0,$$etemp$0$1);
  return;
 }
 $20=(($14+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $$etemp$1$0=1;
 $$etemp$1$1=0;
 _lily_move_boolean($6,$$etemp$1$0,$$etemp$1$1);
 $22=((HEAP32[(($13)>>2)])|0);
 $23=(($22+4)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==0;
 if ($25) {
  return;
 } else {
  $i_01=0;
 }
 while(1) {

  $31=(($21+$i_01)|0);
  $32=((HEAP8[($31)])|0);
  $33=(($32<<24)>>24);
  $isdigittmp=((($33)-(48))|0);
  $isdigit=($isdigittmp>>>0)<((10)>>>0);
  $34=((($i_01)+(1))|0);
  if (!($isdigit)) {
   break;
  }
  $27=((HEAP32[(($13)>>2)])|0);
  $28=(($27+4)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  $30=($34>>>0)<($29>>>0);
  if ($30) {
   $i_01=$34;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return;
 }
 $36=(($6+8)|0);
 $$etemp$2$0=0;
 $$etemp$2$1=0;
 $st$3$0=(($36)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 $st$4$1=(($36+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 return;
}


function _lily_string_is_alpha($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$$etemp$0$0=0,$$etemp$0$1=0,$20=0;
 var $21=0,$$etemp$1$0=0,$$etemp$1$1=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$i_01=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$$etemp$2$0=0;
 var $$etemp$2$1=0,$st$3$0=0,$st$4$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+4)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==0;
 if ($17) {
  $$etemp$0$0=0;
  $$etemp$0$1=0;
  _lily_move_boolean($6,$$etemp$0$0,$$etemp$0$1);
  return;
 }
 $20=(($14+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $$etemp$1$0=1;
 $$etemp$1$1=0;
 _lily_move_boolean($6,$$etemp$1$0,$$etemp$1$1);
 $22=((HEAP32[(($13)>>2)])|0);
 $23=(($22+4)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==0;
 if ($25) {
  return;
 } else {
  $i_01=0;
 }
 while(1) {

  $31=(($21+$i_01)|0);
  $32=((HEAP8[($31)])|0);
  $33=(($32<<24)>>24);
  $34=((_isalpha((($33)|0)))|0);
  $35=($34|0)==0;
  $36=((($i_01)+(1))|0);
  if ($35) {
   break;
  }
  $27=((HEAP32[(($13)>>2)])|0);
  $28=(($27+4)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  $30=($36>>>0)<($29>>>0);
  if ($30) {
   $i_01=$36;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return;
 }
 $38=(($6+8)|0);
 $$etemp$2$0=0;
 $$etemp$2$1=0;
 $st$3$0=(($38)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 $st$4$1=(($38+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 return;
}


function _lily_string_is_space($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$$etemp$0$0=0,$$etemp$0$1=0,$20=0;
 var $21=0,$$etemp$1$0=0,$$etemp$1$1=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$i_01=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$$etemp$2$0=0;
 var $$etemp$2$1=0,$st$3$0=0,$st$4$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+4)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==0;
 if ($17) {
  $$etemp$0$0=0;
  $$etemp$0$1=0;
  _lily_move_boolean($6,$$etemp$0$0,$$etemp$0$1);
  return;
 }
 $20=(($14+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $$etemp$1$0=1;
 $$etemp$1$1=0;
 _lily_move_boolean($6,$$etemp$1$0,$$etemp$1$1);
 $22=((HEAP32[(($13)>>2)])|0);
 $23=(($22+4)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==0;
 if ($25) {
  return;
 } else {
  $i_01=0;
 }
 while(1) {

  $31=(($21+$i_01)|0);
  $32=((HEAP8[($31)])|0);
  $33=(($32<<24)>>24);
  $34=((_isspace((($33)|0)))|0);
  $35=($34|0)==0;
  $36=((($i_01)+(1))|0);
  if ($35) {
   break;
  }
  $27=((HEAP32[(($13)>>2)])|0);
  $28=(($27+4)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  $30=($36>>>0)<($29>>>0);
  if ($30) {
   $i_01=$36;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return;
 }
 $38=(($6+8)|0);
 $$etemp$2$0=0;
 $$etemp$2$1=0;
 $st$3$0=(($38)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 $st$4$1=(($38+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 return;
}


function _lily_string_is_alnum($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$$etemp$0$0=0,$$etemp$0$1=0,$20=0;
 var $21=0,$$etemp$1$0=0,$$etemp$1$1=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$i_01=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$$etemp$2$0=0;
 var $$etemp$2$1=0,$st$3$0=0,$st$4$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+4)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==0;
 if ($17) {
  $$etemp$0$0=0;
  $$etemp$0$1=0;
  _lily_move_boolean($6,$$etemp$0$0,$$etemp$0$1);
  return;
 }
 $20=(($14+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $$etemp$1$0=1;
 $$etemp$1$1=0;
 _lily_move_boolean($6,$$etemp$1$0,$$etemp$1$1);
 $22=((HEAP32[(($13)>>2)])|0);
 $23=(($22+4)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==0;
 if ($25) {
  return;
 } else {
  $i_01=0;
 }
 while(1) {

  $31=(($21+$i_01)|0);
  $32=((HEAP8[($31)])|0);
  $33=(($32<<24)>>24);
  $34=((_isalnum((($33)|0)))|0);
  $35=($34|0)==0;
  $36=((($i_01)+(1))|0);
  if ($35) {
   break;
  }
  $27=((HEAP32[(($13)>>2)])|0);
  $28=(($27+4)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  $30=($36>>>0)<($29>>>0);
  if ($30) {
   $i_01=$36;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return;
 }
 $38=(($6+8)|0);
 $$etemp$2$0=0;
 $$etemp$2$1=0;
 $st$3$0=(($38)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 $st$4$1=(($38+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 return;
}


function _lily_string_ends_with($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$$etemp$0$0=0,$$etemp$0$1=0,$input_i_0_in=0,$suffix_i_0_in=0,$suffix_i_0=0,$input_i_0=0,$33=0,$35=0,$36=0;
 var $37=0,$38=0,$39=0,$ok_0$0=0,$ok_0$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((HEAP16[(($code)>>1)])|0);
 $14=($13&65535);
 $15=(($2+($14<<2))|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($7+8)|0);
 $18=$17;
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($12+8)|0);
 $23=$22;
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($24+8)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($19+4)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($24+4)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=($30|0)>($28|0);
 if ($31) {
  $$etemp$0$0=0;
  $$etemp$0$1=0;
  _lily_move_boolean($16,$$etemp$0$0,$$etemp$0$1);
  return;
 } else {
  $suffix_i_0_in=$30;$input_i_0_in=$28;
 }
 while(1) {


  $suffix_i_0=((($suffix_i_0_in)-(1))|0);
  $input_i_0=((($input_i_0_in)-(1))|0);
  $33=($suffix_i_0_in|0)>0;
  if (!($33)) {
   $ok_0$1=0;$ok_0$0=1;
   break;
  }
  $35=(($21+$input_i_0)|0);
  $36=((HEAP8[($35)])|0);
  $37=(($26+$suffix_i_0)|0);
  $38=((HEAP8[($37)])|0);
  $39=(($36<<24)>>24)==(($38<<24)>>24);
  if ($39) {
   $suffix_i_0_in=$suffix_i_0;$input_i_0_in=$input_i_0;
  } else {
   $ok_0$1=0;$ok_0$0=0;
   break;
  }
 }


 _lily_move_boolean($16,$ok_0$0,$ok_0$1);
 return;
}


function _lily_string_find($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$or_cond=0,$34=0,$36=0,$37=0,$38=0,$39=0,$i_010=0,$41=0;
 var $42=0,$43=0,$45=0,$j_06_in=0,$k_05=0,$j_06=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55$0=0,$55$1=0,$56=0,$57=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((HEAP16[(($code)>>1)])|0);
 $14=($13&65535);
 $15=(($2+($14<<2))|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($7+8)|0);
 $18=$17;
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($19+4)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($12+8)|0);
 $25=$24;
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($26+8)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($26+4)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=($23|0)<($30|0);
 $32=($30|0)==0;
 $or_cond=$31|$32;
 if ($or_cond) {
  $34=((_lily_get_none($vm))|0);
  _lily_move_enum_f(0,$16,$34);
  return;
 }
 $36=((($23)-($30))|0);
 $37=((HEAP8[($28)])|0);
 $38=($36|0)<0;
 L5: do {
  if (!($38)) {
   $39=($30|0)>1;
   $i_010=0;
   L7: while(1) {

    $41=(($21+$i_010)|0);
    $42=((HEAP8[($41)])|0);
    $43=(($42<<24)>>24)==(($37<<24)>>24);
    L9: do {
     if ($43) {
      if ($39) {
       $k_05=1;$j_06_in=$i_010;
      } else {
       break L7;
      }
      while(1) {


       $j_06=((($j_06_in)+(1))|0);
       $46=(($21+$j_06)|0);
       $47=((HEAP8[($46)])|0);
       $48=(($28+$k_05)|0);
       $49=((HEAP8[($48)])|0);
       $50=(($47<<24)>>24)==(($49<<24)>>24);
       $51=((($k_05)+(1))|0);
       if (!($50)) {
        break L9;
       }
       $45=($51|0)<($30|0);
       if ($45) {
        $k_05=$51;$j_06_in=$j_06;
       } else {
        break L7;
       }
      }
     }
    } while(0);
    $52=((($i_010)+(1))|0);
    $53=($i_010|0)<($36|0);
    if ($53) {
     $i_010=$52;
    } else {
     break L5;
    }
   }
   $54=((_lily_new_empty_value())|0);
   $55$0=$i_010;
   $55$1=((((($i_010|0)<0))|0)?-1:0);
   _lily_move_integer($54,$55$0,$55$1);
   $56=((_lily_new_some($54))|0);
   _lily_move_enum_f(8192,$16,$56);
   return;
  }
 } while(0);
 $57=((_lily_get_none($vm))|0);
 _lily_move_enum_f(65536,$16,$57);
 return;
}


function _lily_maybe_html_encode_to_buffer($vm,$input){
 $vm=($vm)|0;
 $input=($input)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$start_0=0,$ch_0=0,$12=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$22=0;
 var $23=0,$24=0,$start_1=0,$26=0,$28=0,$30=0,$31=0,$32=0,label=0;

 $1=(($vm+80)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_msgbuf_flush($2);
 $3=(($input+8)|0);
 $4=$3;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+8)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=$7;
 $9=$7;
 $10=$7;
 $ch_0=$7;$start_0=0;
 while(1) {


  $12=((HEAP8[($ch_0)])|0);
  if ((((($12<<24)>>24))|0)==((62)|0)) {
   $22=$ch_0;
   $23=((($22)-($10))|0);
   _lily_msgbuf_add_text_range($2,$7,$start_0,$23);
   _lily_msgbuf_add($2,14056);
   $24=((($23)+(1))|0);
   $start_1=$24;
  } else if ((((($12<<24)>>24))|0)==((60)|0)) {
   $18=$ch_0;
   $19=((($18)-($9))|0);
   _lily_msgbuf_add_text_range($2,$7,$start_0,$19);
   _lily_msgbuf_add($2,14696);
   $20=((($19)+(1))|0);
   $start_1=$20;
  } else if ((((($12<<24)>>24))|0)==((0)|0)) {
   break;
  } else if ((((($12<<24)>>24))|0)==((38)|0)) {
   $14=$ch_0;
   $15=((($14)-($8))|0);
   _lily_msgbuf_add_text_range($2,$7,$start_0,$15);
   _lily_msgbuf_add($2,15176);
   $16=((($15)+(1))|0);
   $start_1=$16;
  } else {
   $start_1=$start_0;
  }

  $26=(($ch_0+1)|0);
  $ch_0=$26;$start_0=$start_1;
 }
 $28=($start_0|0)==0;
 if ($28) {
  return (($start_0)|0);
 }
 $30=$ch_0;
 $31=$7;
 $32=((($30)-($31))|0);
 _lily_msgbuf_add_text_range($2,$7,$start_0,$32);
 return (($start_0)|0);
}


function _lily_string_html_encode($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$16=0,$17=0,$18=0,$19=0,$20=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((HEAP16[(($code)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((_lily_maybe_html_encode_to_buffer($vm,$7))|0);
 $13=($12|0)==0;
 if ($13) {
  _lily_assign_value($11,$7);
  return;
 } else {
  $16=(($vm+80)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=(($17)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=((_lily_new_raw_string($19))|0);
  _lily_move_string($11,$20);
  return;
 }
}


function _lily_string_lstrip($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$32=0,$33=0,$34=0,$35=0,$37=0,$i_01=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0;
 var $copy_from_0=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((HEAP16[(($code)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($7+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+4)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==0;
 do {
  if (!($17)) {
   $19=(($code+4)|0);
   $20=((HEAP16[(($19)>>1)])|0);
   $21=($20&65535);
   $22=(($2+($21<<2))|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=(($23+8)|0);
   $25=$24;
   $26=((HEAP32[(($25)>>2)])|0);
   $27=(($26+4)|0);
   $28=((HEAP32[(($27)>>2)])|0);
   $29=($28|0)==0;
   if ($29) {
    break;
   }
   $32=(($26+8)|0);
   $33=((HEAP32[(($32)>>2)])|0);
   $34=((_strlen((($33)|0)))|0);
   $35=($34|0)>0;
   L4: do {
    if ($35) {
     $i_01=0;
     while(1) {

      $38=(($33+$i_01)|0);
      $39=((HEAP8[($38)])|0);
      $40=(($39<<24)>>24)<0;
      $41=((($i_01)+(1))|0);
      if ($40) {
       break;
      }
      $37=($41|0)<($34|0);
      if ($37) {
       $i_01=$41;
      } else {
       label = 7;
       break L4;
      }
     }
     $44=((_lstrip_utf8_start($7,$26))|0);
     $copy_from_0=$44;
    } else {
     label = 7;
    }
   } while(0);
   if ((label|0) == 7) {
    $42=((_lstrip_ascii_start($7,$26))|0);
    $copy_from_0=$42;
   }

   $46=((HEAP32[(($13)>>2)])|0);
   $47=(($46+4)|0);
   $48=((HEAP32[(($47)>>2)])|0);
   $49=(((1)-($copy_from_0))|0);
   $50=((($49)+($48))|0);
   $51=((_make_sv($50))|0);
   $52=(($51+8)|0);
   $53=((HEAP32[(($52)>>2)])|0);
   $54=((HEAP32[(($13)>>2)])|0);
   $55=(($54+8)|0);
   $56=((HEAP32[(($55)>>2)])|0);
   $57=(($56+$copy_from_0)|0);
   $58=((_strcpy((($53)|0),(($57)|0)))|0);
   _lily_move_string($11,$51);
   return;
  }
 } while(0);
 _lily_assign_value($11,$7);
 return;
}


function _lily_string_lower($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$i_01=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$37=0,$39=0,$40=0,$41=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((HEAP16[(($code)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($7+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+4)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((($16)+(1))|0);
 $18=((_make_sv($17))|0);
 $19=(($18+8)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=((HEAP32[(($13)>>2)])|0);
 $22=(($21+8)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($21+4)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($25|0)>0;
 if ($26) {
  $i_01=0;
 } else {
  $41=(($20+$25)|0);
  HEAP8[($41)]=0;
  _lily_move_string($11,$18);
  return;
 }
 while(1) {

  $27=(($23+$i_01)|0);
  $28=((HEAP8[($27)])|0);
  $29=(($28<<24)>>24);
  $30=((_isupper((($29)|0)))|0);
  $31=($30|0)==0;
  if ($31) {
   $37=(($20+$i_01)|0);
   HEAP8[($37)]=$28;
  } else {
   $33=((_tolower((($29)|0)))|0);
   $34=(($33)&255);
   $35=(($20+$i_01)|0);
   HEAP8[($35)]=$34;
  }
  $39=((($i_01)+(1))|0);
  $40=($39|0)<($25|0);
  if ($40) {
   $i_01=$39;
  } else {
   break;
  }
 }
 $41=(($20+$25)|0);
 HEAP8[($41)]=0;
 _lily_move_string($11,$18);
 return;
}


function _lily_string_parse_i($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$21=0,$is_negative_0=0;
 var $input_0=0,$23=0,$24=0,$input_0_pn=0,$input_1=0,$25=0,$26=0,$leading_zeroes_0_ph=0,$input_2_ph=0,$27=0,$_off5=0,$28=0,$29=0,$input_28=0,$rounds_07=0,$value_06$0=0,$value_06$1=0,$$etemp$0$0=0,$$etemp$0$1=0,$31=0;
 var $32=0,$33$0=0,$33$1=0,$35=0,$36=0,$37=0,$_off=0,$38=0,$39=0,$or_cond4=0,$40$0=0,$40$1=0,$$etemp$1$0=0,$$etemp$1$1=0,$42=0,$value_0_lcssa17$0=0,$value_0_lcssa17$1=0,$rounds_0_lcssa16=0,$_lcssa15=0,$43=0;
 var $44=0,$45=0,$or_cond3=0,$47=0,$49=0,$$etemp$2$0=0,$$etemp$2$1=0,$signed_value_0$0=0,$signed_value_0$1=0,$51=0,$52=0,$30$0=0,$30$1=0,$34$0=0,$34$1=0,$41$0=0,$41$1=0,$50$0=0,$50$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+8)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP8[($16)])|0);
 if ((((($17<<24)>>24))|0)==((43)|0)) {
  $21=(($16+1)|0);
  $input_0=$21;$is_negative_0=0;
 } else if ((((($17<<24)>>24))|0)==((45)|0)) {
  $19=(($16+1)|0);
  $input_0=$19;$is_negative_0=1;
 } else {
  $input_0=$16;$is_negative_0=0;
 }


 $23=((HEAP8[($input_0)])|0);
 $24=(($23<<24)>>24)==48;
 if ($24) {
  $input_0_pn=$input_0;
  while(1) {

   $input_1=(($input_0_pn+1)|0);
   $25=((HEAP8[($input_1)])|0);
   $26=(($25<<24)>>24)==48;
   if ($26) {
    $input_0_pn=$input_1;
   } else {
    $input_2_ph=$input_1;$leading_zeroes_0_ph=1;
    break;
   }
  }
 } else {
  $input_2_ph=$input_0;$leading_zeroes_0_ph=0;
 }


 $27=((HEAP8[($input_2_ph)])|0);
 $_off5=((($27)-(48))&255);
 $28=((($_off5&255))>>>0)<((10)>>>0);
 if ($28) {
  $value_06$1=0;$value_06$0=0;$rounds_07=0;$input_28=$input_2_ph;$29=$27;
  while(1) {





   $$etemp$0$0=10;
   $$etemp$0$1=0;
   $30$0=((___muldi3($value_06$0,$value_06$1,$$etemp$0$0,$$etemp$0$1))|0);$30$1=tempRet0;
   $31=(($29<<24)>>24);
   $32=((($31)-(48))|0);
   $33$0=$32;
   $33$1=((((($32|0)<0))|0)?-1:0);
   $34$0=((_i64Add($33$0,$33$1,$30$0,$30$1))|0);$34$1=tempRet0;
   $35=(($input_28+1)|0);
   $36=((($rounds_07)+(1))|0);
   $37=((HEAP8[($35)])|0);
   $_off=((($37)-(48))&255);
   $38=((($_off&255))>>>0)<((10)>>>0);
   $39=($36|0)!=20;
   $or_cond4=$38&$39;
   if ($or_cond4) {
    $value_06$1=$34$1;$value_06$0=$34$0;$rounds_07=$36;$input_28=$35;$29=$37;
   } else {
    break;
   }
  }
  $40$0=$is_negative_0;
  $40$1=0;
  $$etemp$1$0=-1;
  $$etemp$1$1=2147483647;
  $41$0=((_i64Add($40$0,$40$1,$$etemp$1$0,$$etemp$1$1))|0);$41$1=tempRet0;
  $42=(($34$1>>>0) > ($41$1>>>0)) | (((($34$1>>>0) == ($41$1>>>0) & ($34$0>>>0) >  ($41$0>>>0))));
  if (!($42)) {
   $_lcssa15=$37;$rounds_0_lcssa16=$36;$value_0_lcssa17$1=$34$1;$value_0_lcssa17$0=$34$0;
   label = 9;
  }
 } else {
  $_lcssa15=$27;$rounds_0_lcssa16=0;$value_0_lcssa17$1=0;$value_0_lcssa17$0=0;
  label = 9;
 }
 do {
  if ((label|0) == 9) {




   $43=(($_lcssa15<<24)>>24)!=0;
   $44=$leading_zeroes_0_ph|$rounds_0_lcssa16;
   $45=($44|0)==0;
   $or_cond3=$43|$45;
   if ($or_cond3) {
    break;
   }
   $49=($is_negative_0|0)==0;
   $$etemp$2$0=0;
   $$etemp$2$1=0;
   $50$0=((_i64Subtract($$etemp$2$0,$$etemp$2$1,$value_0_lcssa17$0,$value_0_lcssa17$1))|0);$50$1=tempRet0;
   $signed_value_0$0=($49?$value_0_lcssa17$0:$50$0);
   $signed_value_0$1=($49?$value_0_lcssa17$1:$50$1);
   $51=((_lily_new_empty_value())|0);
   _lily_move_integer($51,$signed_value_0$0,$signed_value_0$1);
   $52=((_lily_new_some($51))|0);
   _lily_move_enum_f(8192,$6,$52);
   return;
  }
 } while(0);
 $47=((_lily_get_none($vm))|0);
 _lily_move_enum_f(0,$6,$47);
 return;
}


function _lily_string_rstrip($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$32=0,$33=0,$34=0,$35=0,$37=0,$i_01=0,$38=0,$39=0,$40=0,$41=0,$42=0,$44=0;
 var $copy_to_0=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((HEAP16[(($code)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($7+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+4)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==0;
 do {
  if (!($17)) {
   $19=(($code+4)|0);
   $20=((HEAP16[(($19)>>1)])|0);
   $21=($20&65535);
   $22=(($2+($21<<2))|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=(($23+8)|0);
   $25=$24;
   $26=((HEAP32[(($25)>>2)])|0);
   $27=(($26+4)|0);
   $28=((HEAP32[(($27)>>2)])|0);
   $29=($28|0)==0;
   if ($29) {
    break;
   }
   $32=(($26+8)|0);
   $33=((HEAP32[(($32)>>2)])|0);
   $34=((_strlen((($33)|0)))|0);
   $35=($34|0)>0;
   L4: do {
    if ($35) {
     $i_01=0;
     while(1) {

      $38=(($33+$i_01)|0);
      $39=((HEAP8[($38)])|0);
      $40=(($39<<24)>>24)<0;
      $41=((($i_01)+(1))|0);
      if ($40) {
       break;
      }
      $37=($41|0)<($34|0);
      if ($37) {
       $i_01=$41;
      } else {
       label = 7;
       break L4;
      }
     }
     $44=((_rstrip_utf8_stop($7,$26))|0);
     $copy_to_0=$44;
    } else {
     label = 7;
    }
   } while(0);
   if ((label|0) == 7) {
    $42=((_rstrip_ascii_stop($7,$26))|0);
    $copy_to_0=$42;
   }

   $46=((($copy_to_0)+(1))|0);
   $47=((_make_sv($46))|0);
   $48=(($47+8)|0);
   $49=((HEAP32[(($48)>>2)])|0);
   $50=((HEAP32[(($13)>>2)])|0);
   $51=(($50+8)|0);
   $52=((HEAP32[(($51)>>2)])|0);
   $53=((_strncpy((($49)|0),(($52)|0),(($copy_to_0)|0)))|0);
   $54=((HEAP32[(($48)>>2)])|0);
   $55=(($54+$copy_to_0)|0);
   HEAP8[($55)]=0;
   _lily_move_string($11,$47);
   return;
  }
 } while(0);
 _lily_assign_value($11,$7);
 return;
}


function _lily_string_starts_with($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$$etemp$0$0=0,$$etemp$0$1=0,$35=0,$i_01=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$ok_0$0=0,$ok_0$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((HEAP16[(($code)>>1)])|0);
 $14=($13&65535);
 $15=(($2+($14<<2))|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($7+8)|0);
 $18=$17;
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($12+8)|0);
 $23=$22;
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($24+8)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($24+4)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($19+4)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=($30>>>0)<($28>>>0);
 if ($31) {
  $$etemp$0$0=0;
  $$etemp$0$1=0;
  _lily_move_boolean($16,$$etemp$0$0,$$etemp$0$1);
  return;
 }
 $32=($28|0)>0;
 L5: do {
  if ($32) {
   $i_01=0;
   while(1) {

    $36=(($21+$i_01)|0);
    $37=((HEAP8[($36)])|0);
    $38=(($26+$i_01)|0);
    $39=((HEAP8[($38)])|0);
    $40=(($37<<24)>>24)==(($39<<24)>>24);
    $41=((($i_01)+(1))|0);
    if (!($40)) {
     $ok_0$1=0;$ok_0$0=0;
     break L5;
    }
    $35=($41|0)<($28|0);
    if ($35) {
     $i_01=$41;
    } else {
     $ok_0$1=0;$ok_0$0=1;
     break;
    }
   }
  } else {
   $ok_0$1=0;$ok_0$0=1;
  }
 } while(0);


 _lily_move_boolean($16,$ok_0$0,$ok_0$1);
 return;
}


function _lily_string_strip($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$copy_to_0=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$47=0,$48=0,$49=0,$50=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((HEAP16[(($code)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($7+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+4)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==0;
 do {
  if (!($17)) {
   $19=(($code+4)|0);
   $20=((HEAP16[(($19)>>1)])|0);
   $21=($20&65535);
   $22=(($2+($21<<2))|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=(($23+8)|0);
   $25=$24;
   $26=((HEAP32[(($25)>>2)])|0);
   $27=(($26+4)|0);
   $28=((HEAP32[(($27)>>2)])|0);
   $29=($28|0)==0;
   if ($29) {
    break;
   }
   $32=((_lstrip_ascii_start($7,$26))|0);
   $33=((HEAP32[(($13)>>2)])|0);
   $34=(($33+4)|0);
   $35=((HEAP32[(($34)>>2)])|0);
   $36=($32|0)==($35|0);
   if ($36) {
    $copy_to_0=$32;
   } else {
    $38=((_rstrip_utf8_stop($7,$26))|0);
    $copy_to_0=$38;
   }

   $40=((($copy_to_0)-($32))|0);
   $41=((($40)+(1))|0);
   $42=((_make_sv($41))|0);
   $43=(($42+8)|0);
   $44=((HEAP32[(($43)>>2)])|0);
   $45=((HEAP32[(($13)>>2)])|0);
   $46=(($45+8)|0);
   $47=((HEAP32[(($46)>>2)])|0);
   $48=(($47+$32)|0);
   $49=((_strncpy((($44)|0),(($48)|0),(($40)|0)))|0);
   $50=(($44+$40)|0);
   HEAP8[($50)]=0;
   _lily_move_string($11,$42);
   return;
  }
 } while(0);
 _lily_assign_value($11,$7);
 return;
}


function _lily_string_split($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $fake_sv=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $22=0,$23=0,$split_strval_0=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$34=0,$35=0,$36=0,$37=0,$38=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $fake_sv=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($argc<<16)>>16)==2;
 if ($11) {
  $13=(($code+4)|0);
  $14=((HEAP16[(($13)>>1)])|0);
  $15=($14&65535);
  $16=(($2+($15<<2))|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=(($17+8)|0);
  $19=$18;
  $20=((HEAP32[(($19)>>2)])|0);
  $split_strval_0=$20;
 } else {
  $22=(($fake_sv+8)|0);
  HEAP32[(($22)>>2)]=13960;
  $23=(($fake_sv+4)|0);
  HEAP32[(($23)>>2)]=1;
  $split_strval_0=$fake_sv;
 }

 $25=((HEAP16[(($code)>>1)])|0);
 $26=($25&65535);
 $27=(($2+($26<<2))|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($split_strval_0+4)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=($30|0)==0;
 if ($31) {
  _lily_vm_raise($vm,20,13888);
 }
 $34=((_lily_new_list_val())|0);
 $35=(($10+8)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=(($split_strval_0+8)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 _string_split_by_val($36,$38,$34);
 _lily_move_list_f(8192,$28,$34);
 STACKTOP=sp;return;
}


function _lily_string_trim($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $fake_buffer=0,$fake_sv=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$new_sv_0=0;
 var label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 $fake_buffer=((sp)|0);
 $fake_sv=(((sp)+(8))|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((HEAP16[(($code)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($fake_buffer)|0);
 HEAP8[($12)]=((HEAP8[(1688)])|0);HEAP8[((($12)+(1))|0)]=((HEAP8[(1689)])|0);HEAP8[((($12)+(2))|0)]=((HEAP8[(1690)])|0);HEAP8[((($12)+(3))|0)]=((HEAP8[(1691)])|0);HEAP8[((($12)+(4))|0)]=((HEAP8[(1692)])|0);
 $13=(($fake_sv+8)|0);
 HEAP32[(($13)>>2)]=$12;
 $14=((_strlen((($12)|0)))|0);
 $15=(($fake_sv+4)|0);
 HEAP32[(($15)>>2)]=$14;
 $16=((_lstrip_ascii_start($7,$fake_sv))|0);
 $17=(($7+8)|0);
 $18=$17;
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+4)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=($16|0)==($21|0);
 if ($22) {
  $37=((_make_sv(1))|0);
  $38=(($37+8)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  HEAP8[($39)]=0;
  $new_sv_0=$37;

  _lily_move_string($11,$new_sv_0);
  STACKTOP=sp;return;
 } else {
  $24=((_rstrip_ascii_stop($7,$fake_sv))|0);
  $25=((($24)-($16))|0);
  $26=((($25)+(1))|0);
  $27=((_make_sv($26))|0);
  $28=(($27+8)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  $30=((HEAP32[(($18)>>2)])|0);
  $31=(($30+8)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=(($32+$16)|0);
  $34=((_strncpy((($29)|0),(($33)|0),(($25)|0)))|0);
  $35=(($29+$25)|0);
  HEAP8[($35)]=0;
  $new_sv_0=$27;

  _lily_move_string($11,$new_sv_0);
  STACKTOP=sp;return;
 }
}


function _lily_string_upper($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$i_01=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$37=0,$39=0,$40=0,$41=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((HEAP16[(($code)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($7+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+4)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((($16)+(1))|0);
 $18=((_make_sv($17))|0);
 $19=(($18+8)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=((HEAP32[(($13)>>2)])|0);
 $22=(($21+8)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($21+4)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($25|0)>0;
 if ($26) {
  $i_01=0;
 } else {
  $41=(($20+$25)|0);
  HEAP8[($41)]=0;
  _lily_move_string($11,$18);
  return;
 }
 while(1) {

  $27=(($23+$i_01)|0);
  $28=((HEAP8[($27)])|0);
  $29=(($28<<24)>>24);
  $30=((_islower((($29)|0)))|0);
  $31=($30|0)==0;
  if ($31) {
   $37=(($20+$i_01)|0);
   HEAP8[($37)]=$28;
  } else {
   $33=((_toupper((($29)|0)))|0);
   $34=(($33)&255);
   $35=(($20+$i_01)|0);
   HEAP8[($35)]=$34;
  }
  $39=((($i_01)+(1))|0);
  $40=($39|0)<($25|0);
  if ($40) {
   $i_01=$39;
  } else {
   break;
  }
 }
 $41=(($20+$25)|0);
 HEAP8[($41)]=0;
 _lily_move_string($11,$18);
 return;
}


function _lily_string_subscript($vm,$input_reg,$index_reg,$result_reg){
 $vm=($vm)|0;
 $input_reg=($input_reg)|0;
 $index_reg=($index_reg)|0;
 $result_reg=($result_reg)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$ld$0$0=0,$7$0=0,$ld$1$1=0,$7$1=0,$8$0=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$index_03=0;
 var $ch_02=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$ch_0_lcssa=0,$30=0,$31=0,$ld$2$0=0,$33$0=0,$ld$3$1=0;
 var $33$1=0,$$etemp$4=0,$35=0,$36=0,$37=0,$38=0,$index_17=0,$ch_16=0,$39=0,$40=0,$41=0,$42=0,$43=0,$not_=0,$44=0,$index_1_=0,$45=0,$46=0,$or_cond=0,$_lcssa=0;
 var $ch_1_lcssa=0,$ld$5$0=0,$48$0=0,$ld$6$1=0,$48$1=0,$$etemp$7=0,$ch_2=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($input_reg+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($index_reg+8)|0);
 $ld$0$0=(($6)|0);
 $7$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($6+4)|0);
 $7$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $8$0=$7$0;
 $8=$8$0;
 $9=($8|0)>-1;
 do {
  if ($9) {
   $10=($8|0)==0;
   $11=((HEAP8[($5)])|0);
   $12=($11&255);
   $13=((1432+$12)|0);
   $14=((HEAP8[($13)])|0);
   L3: do {
    if ($10) {
     $30=$14;$ch_0_lcssa=$5;
    } else {
     $ch_02=$5;$index_03=$8;$15=$14;
     while(1) {



      $16=(($15<<24)>>24)==0;
      $17=((HEAP8[($ch_02)])|0);
      $18=($17&255);
      $19=((1432+$18)|0);
      $20=((HEAP8[($19)])|0);
      if ($16) {
       $30=$20;$ch_0_lcssa=$ch_02;
       break L3;
      }
      $22=(($20<<24)>>24);
      $23=(($ch_02+$22)|0);
      $24=((($index_03)-(1))|0);
      $25=($24|0)==0;
      $26=((HEAP8[($23)])|0);
      $27=($26&255);
      $28=((1432+$27)|0);
      $29=((HEAP8[($28)])|0);
      if ($25) {
       $30=$29;$ch_0_lcssa=$23;
       break;
      } else {
       $ch_02=$23;$index_03=$24;$15=$29;
      }
     }
    }
   } while(0);


   $31=(($30<<24)>>24)==0;
   if (!($31)) {
    $ch_2=$ch_0_lcssa;
    break;
   }
   $ld$2$0=(($6)|0);
   $33$0=((HEAP32[(($ld$2$0)>>2)])|0);
   $ld$3$1=(($6+4)|0);
   $33$1=((HEAP32[(($ld$3$1)>>2)])|0);
   $$etemp$4=13784;
   _lily_vm_raise_fmt($vm,21,$$etemp$4,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$33$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$33$1,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   $ch_2=$ch_0_lcssa;
  } else {
   $35=(($3+4)|0);
   $36=((HEAP32[(($35)>>2)])|0);
   $37=(($5+$36)|0);
   $38=($36|0)==0;
   if ($38) {
    $ch_1_lcssa=$37;$_lcssa=1;
   } else {
    $ch_16=$37;$index_17=$8;
    while(1) {


     $39=((($ch_16)-(1))|0);
     $40=((HEAP8[($39)])|0);
     $41=($40&255);
     $42=((1432+$41)|0);
     $43=((HEAP8[($42)])|0);
     $not_=(($43<<24)>>24)!=0;
     $44=($not_&1);
     $index_1_=((($44)+($index_17))|0);
     $45=($5|0)!=($39|0);
     $46=($index_1_|0)!=0;
     $or_cond=$45&$46;
     if ($or_cond) {
      $ch_16=$39;$index_17=$index_1_;
     } else {
      $ch_1_lcssa=$39;$_lcssa=$46;
      break;
     }
    }
   }


   if (!($_lcssa)) {
    $ch_2=$ch_1_lcssa;
    break;
   }
   $ld$5$0=(($6)|0);
   $48$0=((HEAP32[(($ld$5$0)>>2)])|0);
   $ld$6$1=(($6+4)|0);
   $48$1=((HEAP32[(($ld$6$1)>>2)])|0);
   $$etemp$7=13784;
   _lily_vm_raise_fmt($vm,21,$$etemp$7,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$48$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$48$1,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   $ch_2=$ch_1_lcssa;
  }
 } while(0);

 $50=((HEAP8[($ch_2)])|0);
 $51=($50&255);
 $52=((1432+$51)|0);
 $53=((HEAP8[($52)])|0);
 $54=(($53<<24)>>24);
 $55=((($54)+(1))|0);
 $56=((_make_sv($55))|0);
 $57=(($56+8)|0);
 $58=((HEAP32[(($57)>>2)])|0);
 $59=(($58+$54)|0);
 HEAP8[($59)]=0;
 $60=((_strncpy((($58)|0),(($ch_2)|0),(($54)|0)))|0);
 _lily_move_string($result_reg,$56);
 STACKTOP=sp;return;
}


function _lily_tainted_sanitize($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((HEAP16[(($code)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $20=(($10+16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((_lily_foreign_call($vm,$cached,1,$15,1,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$22,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 _lily_assign_value($19,$23);
 STACKTOP=sp;return;
}


function _lily_tuple_merge($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$j_0_lcssa=0,$37=0,$38=0,$39=0;
 var $j_04=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$j_12=0,$i_11=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0;
 var $59=0,$60=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15+8)|0);
 $17=$16;
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((HEAP16[(($code)>>1)])|0);
 $20=($19&65535);
 $21=(($2+($20<<2))|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((_lily_new_list_val())|0);
 $24=(($10+8)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($18+8)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=((($27)+($25))|0);
 $29=$28<<2;
 $30=((_lily_malloc($29))|0);
 $31=$30;
 $32=(($23+16)|0);
 HEAP32[(($32)>>2)]=$31;
 $33=(($23+8)|0);
 HEAP32[(($33)>>2)]=$28;
 $34=((HEAP32[(($24)>>2)])|0);
 $35=($34|0)==0;
 if ($35) {
  $j_0_lcssa=0;
 } else {
  $36=(($10+16)|0);
  $j_04=0;
  while(1) {

   $41=((HEAP32[(($36)>>2)])|0);
   $42=(($41+($j_04<<2))|0);
   $43=((HEAP32[(($42)>>2)])|0);
   $44=((_lily_copy_value($43))|0);
   $45=((HEAP32[(($32)>>2)])|0);
   $46=(($45+($j_04<<2))|0);
   HEAP32[(($46)>>2)]=$44;
   $47=((($j_04)+(1))|0);
   $48=((HEAP32[(($24)>>2)])|0);
   $49=($47>>>0)<($48>>>0);
   if ($49) {
    $j_04=$47;
   } else {
    $j_0_lcssa=$47;
    break;
   }
  }
 }

 $37=((HEAP32[(($26)>>2)])|0);
 $38=($37|0)==0;
 if ($38) {
  _lily_move_tuple_f(73728,$22,$23);
  return;
 }
 $39=(($18+16)|0);
 $i_11=0;$j_12=$j_0_lcssa;
 while(1) {


  $51=((HEAP32[(($39)>>2)])|0);
  $52=(($51+($i_11<<2))|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $54=((_lily_copy_value($53))|0);
  $55=((HEAP32[(($32)>>2)])|0);
  $56=(($55+($j_12<<2))|0);
  HEAP32[(($56)>>2)]=$54;
  $57=((($i_11)+(1))|0);
  $58=((($j_12)+(1))|0);
  $59=((HEAP32[(($26)>>2)])|0);
  $60=($57>>>0)<($59>>>0);
  if ($60) {
   $i_11=$57;$j_12=$58;
  } else {
   break;
  }
 }
 _lily_move_tuple_f(73728,$22,$23);
 return;
}


function _lily_tuple_push($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$j_02=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$j_0_lcssa=0,$42=0,$43=0,$44=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((HEAP16[(($code)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=((_lily_new_list_val())|0);
 $21=(($10+8)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((($22)+(1))|0);
 $24=$23<<2;
 $25=((_lily_malloc($24))|0);
 $26=$25;
 $27=(($20+16)|0);
 HEAP32[(($27)>>2)]=$26;
 $28=(($20+8)|0);
 HEAP32[(($28)>>2)]=$23;
 $29=((HEAP32[(($21)>>2)])|0);
 $30=($29|0)==0;
 if ($30) {
  $j_0_lcssa=0;

  $42=((_lily_copy_value($15))|0);
  $43=((HEAP32[(($27)>>2)])|0);
  $44=(($43+($j_0_lcssa<<2))|0);
  HEAP32[(($44)>>2)]=$42;
  _lily_move_tuple_f(73728,$19,$20);
  return;
 }
 $31=(($10+16)|0);
 $j_02=0;
 while(1) {

  $33=((HEAP32[(($31)>>2)])|0);
  $34=(($33+($j_02<<2))|0);
  $35=((HEAP32[(($34)>>2)])|0);
  $36=((_lily_copy_value($35))|0);
  $37=((HEAP32[(($27)>>2)])|0);
  $38=(($37+($j_02<<2))|0);
  HEAP32[(($38)>>2)]=$36;
  $39=((($j_02)+(1))|0);
  $40=((HEAP32[(($21)>>2)])|0);
  $41=($39>>>0)<($40>>>0);
  if ($41) {
   $j_02=$39;
  } else {
   $j_0_lcssa=$39;
   break;
  }
 }

 $42=((_lily_copy_value($15))|0);
 $43=((HEAP32[(($27)>>2)])|0);
 $44=(($43+($j_0_lcssa<<2))|0);
 HEAP32[(($44)>>2)]=$42;
 _lily_move_tuple_f(73728,$19,$20);
 return;
}


function _lily_builtin_loader($options,$cid_table,$id){
 $options=($options)|0;
 $cid_table=($cid_table)|0;
 $id=($id)|0;
 var $76=0,$77=0,$78=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$_0=0,label=0;

 switch (($id|0)) {
 case 14: {
  $_0=(92);
  break;
 }
 case 51: {
  $_0=(162);
  break;
 }
 case 52: {
  $_0=(134);
  break;
 }
 case 53: {
  $_0=(86);
  break;
 }
 case 54: {
  $_0=(12);
  break;
 }
 case 55: {
  $_0=(120);
  break;
 }
 case 56: {
  $_0=(160);
  break;
 }
 case 37: {
  $_0=(2);
  break;
 }
 case 38: {
  $_0=(152);
  break;
 }
 case 39: {
  $_0=(100);
  break;
 }
 case 40: {
  $_0=(58);
  break;
 }
 case 3: {
  $_0=(170);
  break;
 }
 case 66: {
  $_0=(66);
  break;
 }
 case 67: {
  $_0=(150);
  break;
 }
 case 68: {
  $_0=(82);
  break;
 }
 case 69: {
  $_0=(38);
  break;
 }
 case 73: {
  $_0=(108);
  break;
 }
 case 74: {
  $_0=(94);
  break;
 }
 case 75: {
  $_0=(44);
  break;
 }
 case 76: {
  $_0=(28);
  break;
 }
 case 33: {
  $_0=(110);
  break;
 }
 case 34: {
  $_0=(138);
  break;
 }
 case 35: {
  $_0=(124);
  break;
 }
 case 36: {
  $_0=(48);
  break;
 }
 case 12: {
  $_0=(142);
  break;
 }
 case 16: {
  $_0=(114);
  break;
 }
 case 7: {
  $_0=(116);
  break;
 }
 case 5: {
  $_0=(42);
  break;
 }
 case 10: {
  $_0=(146);
  break;
 }
 case 45: {
  $_0=(78);
  break;
 }
 case 46: {
  $_0=(8);
  break;
 }
 case 47: {
  $_0=(16);
  break;
 }
 case 48: {
  $_0=(122);
  break;
 }
 case 50: {
  $_0=(102);
  break;
 }
 case 19: {
  $_0=(18);
  break;
 }
 case 20: {
  $_0=(130);
  break;
 }
 case 89: {
  $_0=(88);
  break;
 }
 case 101: {
  $_0=(70);
  break;
 }
 case 102: {
  $_0=(128);
  break;
 }
 case 103: {
  $_0=(118);
  break;
 }
 case 104: {
  $76=((HEAP32[((_stdin)>>2)])|0);
  $77=((_new_builtin_file($76,13712))|0);
  $78=$77;
  $_0=$78;
  break;
 }
 case 105: {
  $80=((HEAP32[((_stdout)>>2)])|0);
  $81=((_new_builtin_file($80,13608))|0);
  $82=$81;
  $_0=$82;
  break;
 }
 case 106: {
  $84=((HEAP32[((_stderr)>>2)])|0);
  $85=((_new_builtin_file($84,13608))|0);
  $86=$85;
  $_0=$86;
  break;
 }
 case 2: {
  $_0=(168);
  break;
 }
 case 77: {
  $_0=(62);
  break;
 }
 case 78: {
  $_0=(112);
  break;
 }
 case 79: {
  $_0=(140);
  break;
 }
 case 80: {
  $_0=(166);
  break;
 }
 case 81: {
  $_0=(56);
  break;
 }
 case 82: {
  $_0=(126);
  break;
 }
 case 86: {
  $_0=(6);
  break;
 }
 case 87: {
  $_0=(98);
  break;
 }
 case 88: {
  $_0=(154);
  break;
 }
 case 9: {
  $_0=(84);
  break;
 }
 case 27: {
  $_0=(40);
  break;
 }
 case 30: {
  $_0=(34);
  break;
 }
 case 32: {
  $_0=(24);
  break;
 }
 case 15: {
  $_0=(106);
  break;
 }
 case 21: {
  $_0=(26);
  break;
 }
 case 22: {
  $_0=(158);
  break;
 }
 case 13: {
  $_0=(132);
  break;
 }
 case 41: {
  $_0=(144);
  break;
 }
 case 42: {
  $_0=(156);
  break;
 }
 case 43: {
  $_0=(14);
  break;
 }
 case 44: {
  $_0=(54);
  break;
 }
 case 11: {
  $_0=(148);
  break;
 }
 case 17: {
  $_0=(52);
  break;
 }
 case 18: {
  $_0=(76);
  break;
 }
 case 24: {
  $_0=(104);
  break;
 }
 case 26: {
  $_0=(36);
  break;
 }
 case 8: {
  $_0=(72);
  break;
 }
 case 57: {
  $_0=(22);
  break;
 }
 case 58: {
  $_0=(96);
  break;
 }
 case 59: {
  $_0=(50);
  break;
 }
 case 60: {
  $_0=(4);
  break;
 }
 case 62: {
  $_0=(90);
  break;
 }
 case 63: {
  $_0=(64);
  break;
 }
 case 65: {
  $_0=(32);
  break;
 }
 default: {
  $_0=0;
 }
 }

 return (($_0)|0);
}


function _lily_register_pkg_builtin($parser){
 $parser=($parser)|0;
 var label=0;

 _lily_register_package($parser,17920,3480,8);
 return;
}


function _lily_init_pkg_builtin($symtab){
 $symtab=($symtab)|0;
 var $i=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0;
 var $80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0;
 var $100=0,$101=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $i=((sp)|0);
 HEAP32[(($i)>>2)]=1;
 $1=((_build_class($symtab,15288,$i,0))|0);
 $2=(($symtab+48)|0);
 HEAP32[(($2)>>2)]=$1;
 $3=((_build_class($symtab,15224,$i,0))|0);
 $4=(($symtab+52)|0);
 HEAP32[(($4)>>2)]=$3;
 $5=((_build_class($symtab,15184,$i,0))|0);
 $6=(($symtab+56)|0);
 HEAP32[(($6)>>2)]=$5;
 $7=((_build_class($symtab,15144,$i,0))|0);
 $8=(($symtab+60)|0);
 HEAP32[(($8)>>2)]=$7;
 $9=((_build_class($symtab,15112,$i,0))|0);
 $10=(($symtab+64)|0);
 HEAP32[(($10)>>2)]=$9;
 $11=((_build_class($symtab,15080,$i,-1))|0);
 $12=(($symtab+72)|0);
 HEAP32[(($12)>>2)]=$11;
 $13=((_build_class($symtab,15032,$i,0))|0);
 $14=(($symtab+68)|0);
 HEAP32[(($14)>>2)]=$13;
 $15=((_build_class($symtab,15000,$i,1))|0);
 $16=(($symtab+76)|0);
 HEAP32[(($16)>>2)]=$15;
 $17=((_build_class($symtab,14936,$i,2))|0);
 $18=(($symtab+80)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=((_build_class($symtab,14888,$i,-1))|0);
 $20=(($symtab+84)|0);
 HEAP32[(($20)>>2)]=$19;
 $21=((_build_class($symtab,14816,$i,0))|0);
 $22=((_build_class($symtab,17920,$i,0))|0);
 $23=(($symtab+92)|0);
 HEAP32[(($23)>>2)]=$22;
 $24=((_build_class($symtab,14728,$i,0))|0);
 $25=(($symtab+96)|0);
 HEAP32[(($25)>>2)]=$24;
 $26=((_build_special($symtab,14704,1,65532))|0);
 $27=(($symtab+88)|0);
 HEAP32[(($27)>>2)]=$26;
 $28=((_build_special($symtab,14656,0,65534))|0);
 $29=((_build_special($symtab,14584,0,65533))|0);
 $30=(($28+24)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=(($31+6)|0);
 $33=((HEAP16[(($32)>>1)])|0);
 $34=$33|32;
 HEAP16[(($32)>>1)]=$34;
 $35=(($29+24)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=(($36+6)|0);
 $38=((HEAP16[(($37)>>1)])|0);
 $39=$38|32;
 HEAP16[(($37)>>1)]=$39;
 $40=((HEAP32[(($2)>>2)])|0);
 $41=(($40+6)|0);
 $42=((HEAP16[(($41)>>1)])|0);
 $43=$42|3;
 HEAP16[(($41)>>1)]=$43;
 $44=((HEAP32[(($4)>>2)])|0);
 $45=(($44+6)|0);
 $46=((HEAP16[(($45)>>1)])|0);
 $47=$46|2;
 HEAP16[(($45)>>1)]=$47;
 $48=((HEAP32[(($6)>>2)])|0);
 $49=(($48+6)|0);
 $50=((HEAP16[(($49)>>1)])|0);
 $51=$50|3;
 HEAP16[(($49)>>1)]=$51;
 $52=((HEAP32[(($8)>>2)])|0);
 $53=(($52+6)|0);
 $54=((HEAP16[(($53)>>1)])|0);
 $55=$54|2;
 HEAP16[(($53)>>1)]=$55;
 $56=((HEAP32[(($10)>>2)])|0);
 $57=(($56+6)|0);
 $58=((HEAP16[(($57)>>1)])|0);
 $59=$58|2;
 HEAP16[(($57)>>1)]=$59;
 $60=((HEAP32[(($2)>>2)])|0);
 $61=(($60+8)|0);
 HEAP32[(($61)>>2)]=2;
 $62=((HEAP32[(($4)>>2)])|0);
 $63=(($62+8)|0);
 HEAP32[(($63)>>2)]=4;
 $64=((HEAP32[(($6)>>2)])|0);
 $65=(($64+8)|0);
 HEAP32[(($65)>>2)]=8;
 $66=((HEAP32[(($8)>>2)])|0);
 $67=(($66+8)|0);
 HEAP32[(($67)>>2)]=16;
 $68=((HEAP32[(($10)>>2)])|0);
 $69=(($68+8)|0);
 HEAP32[(($69)>>2)]=1;
 $70=((HEAP32[(($12)>>2)])|0);
 $71=(($70+8)|0);
 HEAP32[(($71)>>2)]=32;
 $72=((HEAP32[(($14)>>2)])|0);
 $73=(($72+8)|0);
 HEAP32[(($73)>>2)]=64;
 $74=((HEAP32[(($16)>>2)])|0);
 $75=(($74+8)|0);
 HEAP32[(($75)>>2)]=128;
 $76=((HEAP32[(($18)>>2)])|0);
 $77=(($76+8)|0);
 HEAP32[(($77)>>2)]=256;
 $78=((HEAP32[(($20)>>2)])|0);
 $79=(($78+8)|0);
 HEAP32[(($79)>>2)]=512;
 $80=(($21+8)|0);
 HEAP32[(($80)>>2)]=4096;
 $81=((HEAP32[(($23)>>2)])|0);
 $82=(($81+24)|0);
 $83=((HEAP32[(($82)>>2)])|0);
 $84=(($83+6)|0);
 $85=((HEAP16[(($84)>>1)])|0);
 $86=$85|4;
 HEAP16[(($84)>>1)]=$86;
 $87=((HEAP32[(($25)>>2)])|0);
 $88=(($87+24)|0);
 $89=((HEAP32[(($88)>>2)])|0);
 $90=(($89+6)|0);
 $91=((HEAP16[(($90)>>1)])|0);
 $92=$91|16;
 HEAP16[(($90)>>1)]=$92;
 $93=((HEAP32[(($12)>>2)])|0);
 $94=(($93+6)|0);
 $95=((HEAP16[(($94)>>1)])|0);
 $96=$95|64;
 HEAP16[(($94)>>1)]=$96;
 $97=((HEAP32[(($14)>>2)])|0);
 $98=(($97+6)|0);
 $99=((HEAP16[(($98)>>1)])|0);
 $100=$99|128;
 HEAP16[(($98)>>1)]=$100;
 $101=(($symtab+40)|0);
 HEAP32[(($101)>>2)]=24;
 STACKTOP=sp;return;
}


function _either_is_left_right($vm,$code,$expect){
 $vm=($vm)|0;
 $code=($code)|0;
 $expect=($expect)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19$0=0,$19$1=0;
 var label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP16[(($code)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($10+6)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=($16&65535);
 $18=($17|0)==($expect|0);
 $19$0=($18&1);
 $19$1=0;
 _lily_move_boolean($14,$19$0,$19$1);
 return;
}


function _either_optionize_left_right($vm,$code,$expect){
 $vm=($vm)|0;
 $code=($code)|0;
 $expect=($expect)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$26=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP16[(($code)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($10+6)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=($16&65535);
 $18=($17|0)==($expect|0);
 if ($18) {
  $20=(($10+16)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=((_lily_copy_value($22))|0);
  $24=((_lily_new_some($23))|0);
  _lily_move_enum_f(73728,$14,$24);
  return;
 } else {
  $26=((_lily_get_none($vm))|0);
  _lily_move_enum_f(0,$14,$26);
  return;
 }
}


function _write_check($vm,$filev){
 $vm=($vm)|0;
 $filev=($filev)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;

 $1=(($filev+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  _lily_vm_raise($vm,16,14336);
 }
 $6=(($filev+5)|0);
 $7=((HEAP8[($6)])|0);
 $8=(($7<<24)>>24)==0;
 if (!($8)) {
  return;
 }
 _lily_vm_raise($vm,16,14272);
 return;
}


function _read_check($vm,$filev){
 $vm=($vm)|0;
 $filev=($filev)|0;
 var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;

 $1=(($filev+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  _lily_vm_raise($vm,16,14336);
 }
 $6=(($filev+4)|0);
 $7=((HEAP8[($6)])|0);
 $8=(($7<<24)>>24)==0;
 if (!($8)) {
  return;
 }
 _lily_vm_raise($vm,16,14208);
 return;
}


function _remove_key_check($vm,$hash_val){
 $vm=($vm)|0;
 $hash_val=($hash_val)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=(($hash_val+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  return;
 }
 _lily_vm_raise($vm,19,9080);
 return;
}


function _hash_add_unique_nocopy($vm,$hash_val,$pair_key,$pair_value){
 $vm=($vm)|0;
 $hash_val=($hash_val)|0;
 $pair_key=($pair_key)|0;
 $pair_value=($pair_value)|0;
 var $1=0,$2=0,$3$0=0,$3$1=0,$4=0,$st$0$0=0,$st$1$1=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,label=0;

 $1=((_lily_malloc(24))|0);
 $2=$1;
 $3$0=((_lily_siphash($vm,$pair_key))|0);
 $3$1=tempRet0;
 $4=$1;
 $st$0$0=(($4)|0);
 HEAP32[(($st$0$0)>>2)]=$3$0;
 $st$1$1=(($4+4)|0);
 HEAP32[(($st$1$1)>>2)]=$3$1;
 $5=(($1+8)|0);
 $6=$5;
 HEAP32[(($6)>>2)]=$pair_key;
 $7=(($1+12)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$pair_value;
 $9=(($hash_val+16)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)==0;
 if (!($11)) {
  $13=(($10+20)|0);
  HEAP32[(($13)>>2)]=$2;
 }
 $15=(($1+20)|0);
 $16=$15;
 HEAP32[(($16)>>2)]=0;
 $17=((HEAP32[(($9)>>2)])|0);
 $18=(($1+16)|0);
 $19=$18;
 HEAP32[(($19)>>2)]=$17;
 HEAP32[(($9)>>2)]=$2;
 $20=(($hash_val+8)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=((($21)+(1))|0);
 HEAP32[(($20)>>2)]=$22;
 return;
}


function _destroy_hash_elems($hash_val){
 $hash_val=($hash_val)|0;
 var $1=0,$2=0,$3=0,$elem_iter_01=0,$4=0,$5=0,$6=0,label=0;

 $1=(($hash_val+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  return;
 } else {
  $elem_iter_01=$2;
 }
 while(1) {

  $4=(($elem_iter_01+16)|0);
  $5=((HEAP32[(($4)>>2)])|0);
  _destroy_elem($elem_iter_01);
  $6=($5|0)==0;
  if ($6) {
   break;
  } else {
   $elem_iter_01=$5;
  }
 }
 return;
}


function _destroy_elem($elem){
 $elem=($elem)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=(($elem+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_deref($2);
 $3=((HEAP32[(($1)>>2)])|0);
 $4=$3;
 _lily_free($4);
 $5=(($elem+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 _lily_deref($6);
 $7=((HEAP32[(($5)>>2)])|0);
 $8=$7;
 _lily_free($8);
 $9=$elem;
 _lily_free($9);
 return;
}


function _build_hash_from_vm_list($vm,$start,$result_reg){
 $vm=($vm)|0;
 $start=($start)|0;
 $result_reg=($result_reg)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$i_01=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;

 $1=(($vm+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((_lily_new_hash_val())|0);
 $6=((HEAP32[(($1)>>2)])|0);
 $7=(($6)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($4|0)>($start|0);
 if ($9) {
  $i_01=$start;
  while(1) {

   $10=(($8+($i_01<<2))|0);
   $11=((HEAP32[(($10)>>2)])|0);
   $12=((($i_01)+(1))|0);
   $13=(($8+($12<<2))|0);
   $14=((HEAP32[(($13)>>2)])|0);
   _hash_add_unique_nocopy($vm,$5,$11,$14);
   $15=((($i_01)+(2))|0);
   $16=($15|0)<($4|0);
   if ($16) {
    $i_01=$15;
   } else {
    break;
   }
  }
 }
 $17=((HEAP32[(($1)>>2)])|0);
 $18=(($17+4)|0);
 HEAP32[(($18)>>2)]=$start;
 _lily_move_hash_f(73728,$result_reg,$5);
 return;
}


function _hash_select_reject_common($vm,$code,$expect){
 $vm=($vm)|0;
 $code=($code)|0;
 $expect=($expect)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40$0=0,$40$1=0,$41=0,$42=0,$elem_iter_01=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$ld$0$0=0,$50$0=0,$ld$1$1=0,$50$1=0,$51=0,$53=0,$54=0,$55=0,$56=0;
 var $57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$72=0,$73=0,$74=0,label=0,setjmpLabel=0,setjmpTable=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 label = 1; 
setjmpLabel=0;
setjmpTable=STACKTOP;STACKTOP = (STACKTOP + 168)|0;
HEAP32[((setjmpTable)>>2)]=0; while(1)switch(((label)|0)){
 case 1: 
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+4)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((HEAP16[(($code)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($10+16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($vm+84)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $24=((HEAP32[(($22)>>2)])|0);
 $25=(($24+4)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($10+8)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=$28<<1;
 invoke_vii(56,(($vm)|0),(($29)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $30=(($10+4)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=((($31)+(1))|0);
 HEAP32[(($30)>>2)]=$32;
 $33=(($vm+96)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=((invoke_ii(2,(($34)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $36=(($35+8)|0);
 $37=_saveSetjmp((($36)|0), label, setjmpTable)|0;
 label=10;break;
 case 10: 
 $38=($37|0)==0;
 if($38){label=2;break;}else{label=8;break;}
 case 2: 
 $39=($21|0)==0;
 if($39){label=7;break;}else{label=3;break;}
 case 3: 
 $40$0=$expect;
 $40$1=((((($expect|0)<0))|0)?-1:0);
 $41=(($23+4)|0);
 $42=(($23)|0);
 $elem_iter_01=$21;label=4;break;
 case 4: 

 $44=(($elem_iter_01+8)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=(($elem_iter_01+12)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=((invoke_iiiiiii(2,(($vm)|0),(($cached)|0),((1)|0),(($15)|0),((2)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$45,HEAP32[(((tempVarArgs)+(8))>>2)]=$47,tempVarArgs))|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;; STACKTOP=tempVarArgs;
 $49=(($48+8)|0);
 $ld$0$0=(($49)|0);
 $50$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($49+4)|0);
 $50$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $51=(($50$0|0) == ($40$0|0)) & (($50$1|0) == ($40$1|0));
 if($51){label=5;break;}else{label=6;break;}
 case 5: 
 $53=((invoke_ii(6,(($45)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $54=((HEAP32[(($41)>>2)])|0);
 $55=((HEAP32[(($42)>>2)])|0);
 $56=(($55+($54<<2))|0);
 HEAP32[(($56)>>2)]=$53;
 $57=((invoke_ii(6,(($47)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $58=((HEAP32[(($41)>>2)])|0);
 $59=((($58)+(1))|0);
 $60=((HEAP32[(($42)>>2)])|0);
 $61=(($60+($59<<2))|0);
 HEAP32[(($61)>>2)]=$57;
 $62=((HEAP32[(($41)>>2)])|0);
 $63=((($62)+(2))|0);
 HEAP32[(($41)>>2)]=$63;
 label=6;break;
 case 6: 
 $65=(($elem_iter_01+16)|0);
 $66=((HEAP32[(($65)>>2)])|0);
 $67=($66|0)==0;
 if($67){label=7;break;}else{$elem_iter_01=$66;label=4;break;}
 case 7: 
 invoke_viii(46,(($vm)|0),(($26)|0),(($19)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $68=((HEAP32[(($30)>>2)])|0);
 $69=((($68)-(1))|0);
 HEAP32[(($30)>>2)]=$69;
 $70=((HEAP32[(($33)>>2)])|0);
 invoke_vi(10,(($70)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=9;break;
 case 8: 
 $72=((HEAP32[(($30)>>2)])|0);
 $73=((($72)-(1))|0);
 HEAP32[(($30)>>2)]=$73;
 $74=((HEAP32[(($33)>>2)])|0);
 invoke_vi(12,(($74)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=9;break;
 case 9: 
 STACKTOP=sp;return;
 case -1: if ((setjmpLabel|0) == 1) { $37 = threwValue; label = 10 }
__THREW__ = threwValue = 0;
break;
 }

}


function _make_extra_space_in_list($lv){
 $lv=($lv)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;

 $1=(($lv+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(8))|0);
 $4=$3>>>2;
 $5=(($lv+16)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$6;
 $8=((($4)+($2))|0);
 $9=$8<<2;
 $10=((_lily_realloc($7,$9))|0);
 $11=$10;
 HEAP32[(($5)>>2)]=$11;
 $12=(($lv+4)|0);
 HEAP32[(($12)>>2)]=$4;
 return;
}


function _get_relative_index($vm,$list_val,$pos$0,$pos$1){
 $vm=($vm)|0;
 $list_val=($list_val)|0;
 $pos$0=($pos$0)|0;
 $pos$1=($pos$1)|0;
 var $$etemp$0$0=0,$$etemp$0$1=0,$1=0,$$etemp$1$0=0,$$etemp$1$1=0,$4=0,$5=0,$6$0=0,$6$1=0,$7=0,$$etemp$2$0=0,$$etemp$2$1=0,$$etemp$3=0,$11=0,$12$0=0,$12$1=0,$15=0,$16=0,$17$0=0,$17$1=0;
 var $18=0,$$etemp$4=0,$_0$0=0,$_0$1=0,$3$0=0,$3$1=0,$9$0=0,$9$1=0,$13$0=0,$13$1=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $$etemp$0$0=0;
 $$etemp$0$1=0;
 $1=(($pos$1|0) < ($$etemp$0$1|0)) | (((($pos$1|0) == ($$etemp$0$1|0) & ($pos$0>>>0) <  ($$etemp$0$0>>>0))));
 if ($1) {
  $$etemp$1$0=0;
  $$etemp$1$1=0;
  $3$0=((_i64Subtract($$etemp$1$0,$$etemp$1$1,$pos$0,$pos$1))|0);$3$1=tempRet0;
  $4=(($list_val+8)|0);
  $5=((HEAP32[(($4)>>2)])|0);
  $6$0=$5;
  $6$1=0;
  $7=(($6$1>>>0) < ($3$1>>>0)) | (((($6$1>>>0) == ($3$1>>>0) & ($6$0>>>0) <  ($3$0>>>0))));
  if ($7) {
   $$etemp$2$0=0;
   $$etemp$2$1=0;
   $9$0=((_i64Subtract($$etemp$2$0,$$etemp$2$1,$6$0,$6$1))|0);$9$1=tempRet0;
   $$etemp$3=14504;
   _lily_vm_raise_fmt($vm,21,$$etemp$3,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,HEAP32[((tempVarArgs)>>2)]=$pos$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$pos$1,HEAP32[(((tempVarArgs)+(16))>>2)]=$9$0,HEAP32[(((tempVarArgs)+(24))>>2)]=$9$1,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $11=((HEAP32[(($4)>>2)])|0);
  $12$0=$11;
  $12$1=0;
  $13$0=((_i64Add($12$0,$12$1,$pos$0,$pos$1))|0);$13$1=tempRet0;
  $_0$1=$13$1;$_0$0=$13$0;


  STACKTOP=sp;return (((tempRet0=$_0$1,$_0$0))|0);
 } else {
  $15=(($list_val+8)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17$0=$16;
  $17$1=0;
  $18=(($17$1|0) < ($pos$1|0)) | (((($17$1|0) == ($pos$1|0) & ($17$0>>>0) <  ($pos$0>>>0))));
  if (!($18)) {
   $_0$1=$pos$1;$_0$0=$pos$0;


   STACKTOP=sp;return (((tempRet0=$_0$1,$_0$0))|0);
  }
  $$etemp$4=14416;
  _lily_vm_raise_fmt($vm,21,$$etemp$4,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$pos$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$pos$1,HEAP32[(((tempVarArgs)+(16))>>2)]=$16,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $_0$1=$pos$1;$_0$0=$pos$0;


  STACKTOP=sp;return (((tempRet0=$_0$1,$_0$0))|0);
 }
  return 0;
}


function _list_select_reject_common($vm,$code,$expect){
 $vm=($vm)|0;
 $code=($code)|0;
 $expect=($expect)|0;
 var $cached=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29$0=0,$29$1=0,$30=0,$i_01=0,$32=0,$33=0,$34=0,$35=0,$36=0,$ld$0$0=0,$37$0=0;
 var $ld$1$1=0,$37$1=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$50=0,$51=0,$52=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $cached=((sp)|0);
 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP16[(($code)>>1)])|0);
 $4=($3&65535);
 $5=(($2+($4<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+2)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=$12;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($code+4)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($vm+84)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($21+4)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 HEAP32[(($cached)>>2)]=0;
 $24=(($14+8)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 _lily_vm_list_ensure($vm,$25);
 $26=((HEAP32[(($24)>>2)])|0);
 $27=($26|0)==0;
 if ($27) {
  _slice_vm_list($vm,$23,$6);
  STACKTOP=sp;return;
 }
 $28=(($14+16)|0);
 $29$0=$expect;
 $29$1=((((($expect|0)<0))|0)?-1:0);
 $30=(($21)|0);
 $i_01=0;
 while(1) {

  $32=((HEAP32[(($28)>>2)])|0);
  $33=(($32+($i_01<<2))|0);
  $34=((HEAP32[(($33)>>2)])|0);
  $35=((_lily_foreign_call($vm,$cached,1,$19,1,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$34,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
  $36=(($35+8)|0);
  $ld$0$0=(($36)|0);
  $37$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($36+4)|0);
  $37$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $38=(($37$0|0) == ($29$0|0)) & (($37$1|0) == ($29$1|0));
  if ($38) {
   $40=((HEAP32[(($28)>>2)])|0);
   $41=(($40+($i_01<<2))|0);
   $42=((HEAP32[(($41)>>2)])|0);
   $43=((_lily_copy_value($42))|0);
   $44=((HEAP32[(($22)>>2)])|0);
   $45=((HEAP32[(($30)>>2)])|0);
   $46=(($45+($44<<2))|0);
   HEAP32[(($46)>>2)]=$43;
   $47=((HEAP32[(($22)>>2)])|0);
   $48=((($47)+(1))|0);
   HEAP32[(($22)>>2)]=$48;
  }
  $50=((($i_01)+(1))|0);
  $51=((HEAP32[(($24)>>2)])|0);
  $52=($50>>>0)<($51>>>0);
  if ($52) {
   $i_01=$50;
  } else {
   break;
  }
 }
 _slice_vm_list($vm,$23,$6);
 STACKTOP=sp;return;
}


function _slice_vm_list($vm,$vm_list_start,$result_reg){
 $vm=($vm)|0;
 $vm_list_start=($vm_list_start)|0;
 $result_reg=($result_reg)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$i_01=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,label=0;

 $1=(($vm+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_new_list_val())|0);
 $4=(($2+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((($5)-($vm_list_start))|0);
 $7=(($3+8)|0);
 HEAP32[(($7)>>2)]=$6;
 $8=$6<<2;
 $9=((_lily_malloc($8))|0);
 $10=$9;
 $11=(($3+16)|0);
 HEAP32[(($11)>>2)]=$10;
 $12=($6|0)>0;
 if (!($12)) {
  HEAP32[(($4)>>2)]=$vm_list_start;
  _lily_move_list_f(73728,$result_reg,$3);
  return;
 }
 $13=(($2)|0);
 $i_01=0;
 while(1) {

  $15=((($i_01)+($vm_list_start))|0);
  $16=((HEAP32[(($13)>>2)])|0);
  $17=(($16+($15<<2))|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=((HEAP32[(($11)>>2)])|0);
  $20=(($19+($i_01<<2))|0);
  HEAP32[(($20)>>2)]=$18;
  $21=((($i_01)+(1))|0);
  $22=($21|0)<($6|0);
  if ($22) {
   $i_01=$21;
  } else {
   break;
  }
 }
 HEAP32[(($4)>>2)]=$vm_list_start;
 _lily_move_list_f(73728,$result_reg,$3);
 return;
}


function _option_is_some_or_none($vm,$code,$num_expected){
 $vm=($vm)|0;
 $code=($code)|0;
 $num_expected=($num_expected)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18$0=0,$18$1=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+8)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP16[(($code)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($10+8)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==($num_expected|0);
 $18$0=($17&1);
 $18$1=0;
 _lily_move_boolean($14,$18$0,$18$1);
 return;
}


function _lstrip_ascii_start($input_arg,$strip_sv){
 $input_arg=($input_arg)|0;
 $strip_sv=($strip_sv)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$19=0,$i_01=0,$20=0,$21=0;
 var $22=0,$23=0,$i_19=0,$25=0,$26=0,$28=0,$j_03=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$i_2=0,label=0;

 $1=(($input_arg+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($3+4)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($strip_sv+4)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==1;
 $11=(($strip_sv+8)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 if ($10) {
  $16=((HEAP8[($12)])|0);
  $17=($7|0)>0;
  if ($17) {
   $i_01=0;
  } else {
   $i_2=0;

   return (($i_2)|0);
  }
  while(1) {

   $20=(($5+$i_01)|0);
   $21=((HEAP8[($20)])|0);
   $22=(($21<<24)>>24)==(($16<<24)>>24);
   $23=((($i_01)+(1))|0);
   if (!($22)) {
    $i_2=$i_01;
    label = 11;
    break;
   }
   $19=($23|0)<($7|0);
   if ($19) {
    $i_01=$23;
   } else {
    $i_2=$23;
    label = 11;
    break;
   }
  }
  if ((label|0) == 11) {

   return (($i_2)|0);
  }
 }
 $13=($7|0)>0;
 if (!($13)) {
  $i_2=0;

  return (($i_2)|0);
 }
 $14=($9|0)>0;
 $i_19=0;
 L15: while(1) {

  $25=(($5+$i_19)|0);
  $26=((HEAP8[($25)])|0);
  if ($14) {
   $j_03=0;
  } else {
   $i_2=$i_19;
   label = 11;
   break;
  }
  while(1) {

   $29=(($12+$j_03)|0);
   $30=((HEAP8[($29)])|0);
   $31=(($26<<24)>>24)==(($30<<24)>>24);
   $32=((($j_03)+(1))|0);
   if ($31) {
    break;
   }
   $28=($32|0)<($9|0);
   if ($28) {
    $j_03=$32;
   } else {
    $i_2=$i_19;
    label = 11;
    break L15;
   }
  }
  $34=((($i_19)+(1))|0);
  $35=($34|0)<($7|0);
  if ($35) {
   $i_19=$34;
  } else {
   $i_2=$34;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {

  return (($i_2)|0);
 }
  return 0;
}


function _lstrip_utf8_start($input_arg,$strip_sv){
 $input_arg=($input_arg)|0;
 $strip_sv=($strip_sv)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $i_05=0,$22=0,$23=0,$24=0,$26=0,$j_01=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$j_1=0,$37=0,$38=0,$39=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$46=0,$48=0,$k_08=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$i_1_ph=0,$59=0,$60=0;
 var $61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$i_2=0,label=0;

 $1=(($input_arg+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($3+4)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($strip_sv+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($strip_sv+4)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((HEAP8[($9)])|0);
 $13=($12&255);
 $14=((3224+$13)|0);
 $15=((HEAP8[($14)])|0);
 $16=(($15<<24)>>24);
 $17=($16|0)==($11|0);
 if (!($17)) {
  $i_1_ph=0;
  L2: while(1) {

   $59=(($5+$i_1_ph)|0);
   $60=((HEAP8[($59)])|0);
   $j_1=0;
   L4: while(1) {

    $37=(($9+$j_1)|0);
    $38=((HEAP8[($37)])|0);
    $39=(($60<<24)>>24)==(($38<<24)>>24);
    L6: do {
     if ($39) {
      $41=($38&255);
      $42=((3224+$41)|0);
      $43=((HEAP8[($42)])|0);
      $44=(($43<<24)>>24);
      $45=((($41)-(194))|0);
      $46=($45>>>0)<((51)>>>0);
      if ($46) {
       $k_08=1;
      } else {
       break L4;
      }
      while(1) {

       $49=((($k_08)+($i_1_ph))|0);
       $50=(($5+$49)|0);
       $51=((HEAP8[($50)])|0);
       $52=((($k_08)+($j_1))|0);
       $53=(($9+$52)|0);
       $54=((HEAP8[($53)])|0);
       $55=(($51<<24)>>24)==(($54<<24)>>24);
       $56=((($k_08)+(1))|0);
       if (!($55)) {
        break L6;
       }
       $48=($56|0)<($44|0);
       if ($48) {
        $k_08=$56;
       } else {
        break L4;
       }
      }
     }
    } while(0);
    $61=((HEAP8[($37)])|0);
    $62=($61&255);
    $63=((3224+$62)|0);
    $64=((HEAP8[($63)])|0);
    $65=(($64<<24)>>24);
    $66=((($65)+($j_1))|0);
    $67=($66|0)==($11|0);
    if ($67) {
     $i_2=$i_1_ph;
     label = 16;
     break L2;
    } else {
     $j_1=$66;
    }
   }
   $57=((($44)+($i_1_ph))|0);
   $58=($57|0)<($7|0);
   if ($58) {
    $i_1_ph=$57;
   } else {
    $i_2=$57;
    label = 16;
    break;
   }
  }
  if ((label|0) == 16) {

   return (($i_2)|0);
  }
 }
 $18=($7|0)>0;
 if (!($18)) {
  $i_2=0;

  return (($i_2)|0);
 }
 $19=((($13)-(194))|0);
 $20=($19>>>0)<((51)>>>0);
 $i_05=0;
 L20: while(1) {

  $22=(($5+$i_05)|0);
  $23=((HEAP8[($22)])|0);
  $24=(($23<<24)>>24)==(($12<<24)>>24);
  if (!($24)) {
   $i_2=$i_05;
   label = 16;
   break;
  }
  if ($20) {
   $j_01=1;
   while(1) {

    $27=((($j_01)+($i_05))|0);
    $28=(($5+$27)|0);
    $29=((HEAP8[($28)])|0);
    $30=(($9+$j_01)|0);
    $31=((HEAP8[($30)])|0);
    $32=(($29<<24)>>24)==(($31<<24)>>24);
    $33=((($j_01)+(1))|0);
    if (!($32)) {
     $i_2=$i_05;
     label = 16;
     break L20;
    }
    $26=($33|0)<($16|0);
    if ($26) {
     $j_01=$33;
    } else {
     break;
    }
   }
  }
  $34=((($i_05)+($16))|0);
  $35=($34|0)<($7|0);
  if ($35) {
   $i_05=$34;
  } else {
   $i_2=$34;
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {

  return (($i_2)|0);
 }
  return 0;
}


function _make_sv($size){
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=((_lily_malloc(12))|0);
 $2=$1;
 $3=((_lily_malloc($size))|0);
 $4=(($1+8)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=$3;
 $6=((($size)-(1))|0);
 $7=(($1+4)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=$6;
 $9=$1;
 HEAP32[(($9)>>2)]=1;
 return (($2)|0);
}


function _rstrip_ascii_stop($input_arg,$strip_sv){
 $input_arg=($input_arg)|0;
 $strip_sv=($strip_sv)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$i_17=0,$13=0,$14=0,$16=0,$i_0_in=0,$i_0=0,$18=0,$20=0;
 var $21=0,$22=0,$i_1=0,$23=0,$i_18=0,$25=0,$26=0,$28=0,$j_02=0,$29=0,$30=0,$31=0,$32=0,$i_2=0,$33=0,label=0;

 $1=(($input_arg+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($3+4)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($strip_sv+4)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==1;
 $11=(($strip_sv+8)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 L1: do {
  if ($10) {
   $16=((HEAP8[($12)])|0);
   $i_0_in=$7;
   while(1) {

    $i_0=((($i_0_in)-(1))|0);
    $18=($i_0_in|0)>0;
    if (!($18)) {
     $i_2=$i_0;
     break L1;
    }
    $20=(($5+$i_0)|0);
    $21=((HEAP8[($20)])|0);
    $22=(($21<<24)>>24)==(($16<<24)>>24);
    if ($22) {
     $i_0_in=$i_0;
    } else {
     $i_2=$i_0;
     break;
    }
   }
  } else {
   $i_17=((($7)-(1))|0);
   $13=($7|0)>0;
   if (!($13)) {
    $i_2=$i_17;
    break;
   }
   $14=($9|0)>0;
   $i_18=$i_17;
   while(1) {

    $25=(($5+$i_18)|0);
    $26=((HEAP8[($25)])|0);
    if ($14) {
     $j_02=0;
    } else {
     $i_2=$i_18;
     break L1;
    }
    while(1) {

     $29=(($12+$j_02)|0);
     $30=((HEAP8[($29)])|0);
     $31=(($26<<24)>>24)==(($30<<24)>>24);
     $32=((($j_02)+(1))|0);
     if ($31) {
      break;
     }
     $28=($32|0)<($9|0);
     if ($28) {
      $j_02=$32;
     } else {
      $i_2=$i_18;
      break L1;
     }
    }
    $i_1=((($i_18)-(1))|0);
    $23=($i_18|0)>0;
    if ($23) {
     $i_18=$i_1;
    } else {
     $i_2=$i_1;
     break;
    }
   }
  }
 } while(0);

 $33=((($i_2)+(1))|0);
 return (($33)|0);
}


function _rstrip_utf8_stop($input_arg,$strip_sv){
 $input_arg=($input_arg)|0;
 $strip_sv=($strip_sv)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_old114=0,$i_015=0,$13=0,$14=0,$15=0,$j_1=0,$17=0,$18=0;
 var $19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$or_cond3=0,$30=0,$31=0,$32=0,$33=0,$input_i_07_in=0,$k_06=0,$strip_i_05=0,$input_i_07=0,$35=0;
 var $36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$_old1=0,$45=0,$46=0,$i_013=0,$47=0,label=0;

 $1=(($input_arg+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($3+4)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($strip_sv+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($strip_sv+4)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((($7)-(1))|0);
 $_old114=($7|0)>0;
 if ($_old114) {
  $i_015=$12;
 } else {
  $i_013=$12;

  $47=((($i_013)+(1))|0);
  return (($47)|0);
 }
 L3: while(1) {

  $13=(($5+$i_015)|0);
  $14=((HEAP8[($13)])|0);
  $15=((($i_015)+(1))|0);
  $j_1=0;
  L5: while(1) {

   $17=(($9+$j_1)|0);
   $18=((HEAP8[($17)])|0);
   $19=($18&255);
   $20=((3224+$19)|0);
   $21=((HEAP8[($20)])|0);
   $22=(($21<<24)>>24);
   $23=((($j_1)-(1))|0);
   $24=((($23)+($22))|0);
   $25=(($9+$24)|0);
   $26=((HEAP8[($25)])|0);
   $27=(($14<<24)>>24)!=(($26<<24)>>24);
   $28=($15|0)<($22|0);
   $or_cond3=$27|$28;
   L7: do {
    if (!($or_cond3)) {
     $30=((($19)-(194))|0);
     $31=($30>>>0)<((51)>>>0);
     if (!($31)) {
      break L5;
     }
     $32=((($j_1)-(2))|0);
     $33=((($32)+($22))|0);
     $strip_i_05=$33;$k_06=1;$input_i_07_in=$i_015;
     while(1) {



      $input_i_07=((($input_i_07_in)-(1))|0);
      $35=(($5+$input_i_07)|0);
      $36=((HEAP8[($35)])|0);
      $37=(($9+$strip_i_05)|0);
      $38=((HEAP8[($37)])|0);
      $39=(($36<<24)>>24)==(($38<<24)>>24);
      if (!($39)) {
       break L7;
      }
      $41=((($strip_i_05)-(1))|0);
      $42=((($k_06)+(1))|0);
      $43=($42|0)<($22|0);
      if ($43) {
       $strip_i_05=$41;$k_06=$42;$input_i_07_in=$input_i_07;
      } else {
       break L5;
      }
     }
    }
   } while(0);
   $45=((($22)+($j_1))|0);
   $46=($45|0)==($11|0);
   if ($46) {
    $i_013=$i_015;
    label = 10;
    break L3;
   } else {
    $j_1=$45;
   }
  }
  $44=((($i_015)-($22))|0);
  $_old1=($44|0)>-1;
  if ($_old1) {
   $i_015=$44;
  } else {
   $i_013=$44;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {

  $47=((($i_013)+(1))|0);
  return (($47)|0);
 }
  return 0;
}


function _string_split_by_val($input,$splitby,$dest){
 $input=($input)|0;
 $splitby=($splitby)|0;
 $dest=($dest)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$_in=0,$7=0,$input_ch_0_ph13=0,$values_needed_0_ph12=0,$_in14=0,$9=0,$input_ch_09=0,$10=0,$splitby_ch_1=0,$input_ch_1=0,$11=0,$12=0,$13=0,$15=0;
 var $16=0,$17=0,$18=0,$20=0,$21=0,$is_match_0=0,$input_ch_2=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0;
 var $values_needed_0_ph11=0,$36=0,$37=0,$38=0,$39=0,$i_0=0,$last_start_0=0,$input_ch_3=0,$41=0,$42=0,$43=0,$splitby_ch_3=0,$input_ch_4=0,$44=0,$45=0,$46=0,$48=0,$49=0,$50=0,$52=0;
 var $53=0,$54=0,$_pr=0,$56=0,$57=0,$input_ch_61=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$66=0,$67=0,$input_ch_63=0,$i_1=0,$last_start_1=0,$69=0,$71=0;
 var $72=0,label=0;

 $1=((HEAP8[($input)])|0);
 $2=($1&255);
 $3=((1432+$2)|0);
 $4=((HEAP8[($3)])|0);
 $5=(($4<<24)>>24)==0;
 L1: do {
  if ($5) {
   $values_needed_0_ph11=0;
  } else {
   $6=((HEAP8[($splitby)])|0);
   $values_needed_0_ph12=0;$input_ch_0_ph13=$input;$7=$1;$_in=$4;
   while(1) {




    $input_ch_09=$input_ch_0_ph13;$9=$7;$_in14=$_in;
    while(1) {



     $10=(($9<<24)>>24)==(($6<<24)>>24);
     if ($10) {
      $input_ch_1=$input_ch_09;$splitby_ch_1=$splitby;
      break;
     }
     $29=(($_in14<<24)>>24);
     $30=(($input_ch_09+$29)|0);
     $31=((HEAP8[($30)])|0);
     $32=($31&255);
     $33=((1432+$32)|0);
     $34=((HEAP8[($33)])|0);
     $35=(($34<<24)>>24)==0;
     if ($35) {
      $values_needed_0_ph11=$values_needed_0_ph12;
      break L1;
     } else {
      $input_ch_09=$30;$9=$31;$_in14=$34;
     }
    }
    while(1) {


     $11=((HEAP8[($input_ch_1)])|0);
     $12=((HEAP8[($splitby_ch_1)])|0);
     $13=(($11<<24)>>24)==(($12<<24)>>24);
     if (!($13)) {
      $input_ch_2=$input_ch_1;$is_match_0=1;
      break;
     }
     $15=(($splitby_ch_1+1)|0);
     $16=(($input_ch_1+1)|0);
     $17=((HEAP8[($15)])|0);
     $18=(($17<<24)>>24)==0;
     if ($18) {
      $input_ch_2=$16;$is_match_0=1;
      break;
     }
     $20=((HEAP8[($16)])|0);
     $21=(($20<<24)>>24)==(($17<<24)>>24);
     if ($21) {
      $input_ch_1=$16;$splitby_ch_1=$15;
     } else {
      $input_ch_2=$input_ch_09;$is_match_0=0;
      break;
     }
    }


    $22=((($is_match_0)+($values_needed_0_ph12))|0);
    $23=((HEAP8[($input_ch_2)])|0);
    $24=($23&255);
    $25=((1432+$24)|0);
    $26=((HEAP8[($25)])|0);
    $27=(($26<<24)>>24)==0;
    if ($27) {
     $values_needed_0_ph11=$22;
     break;
    } else {
     $values_needed_0_ph12=$22;$input_ch_0_ph13=$input_ch_2;$7=$23;$_in=$26;
    }
   }
  }
 } while(0);

 $36=((($values_needed_0_ph11)+(1))|0);
 $37=$36<<2;
 $38=((_lily_malloc($37))|0);
 $39=$38;
 $input_ch_3=$input;$last_start_0=$input;$i_0=0;
 while(1) {



  $41=((HEAP8[($input_ch_3)])|0);
  $42=((HEAP8[($splitby)])|0);
  $43=(($41<<24)>>24)==(($42<<24)>>24);
  L16: do {
   if ($43) {
    $input_ch_4=$input_ch_3;$splitby_ch_3=$splitby;
    while(1) {


     $44=((HEAP8[($input_ch_4)])|0);
     $45=((HEAP8[($splitby_ch_3)])|0);
     $46=(($44<<24)>>24)==(($45<<24)>>24);
     if (!($46)) {
      $input_ch_61=$input_ch_4;
      label = 17;
      break L16;
     }
     $48=(($splitby_ch_3+1)|0);
     $49=((HEAP8[($48)])|0);
     $50=(($49<<24)>>24)==0;
     if ($50) {
      $input_ch_61=$input_ch_4;
      label = 17;
      break L16;
     }
     $52=(($input_ch_4+1)|0);
     $53=((HEAP8[($52)])|0);
     $54=(($53<<24)>>24)==(($49<<24)>>24);
     if ($54) {
      $input_ch_4=$52;$splitby_ch_3=$48;
     } else {
      break;
     }
    }
    $_pr=((HEAP8[($input_ch_3)])|0);
    $56=$_pr;
    label = 16;
   } else {
    $56=$41;
    label = 16;
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;

   $57=(($56<<24)>>24)==0;
   if ($57) {
    $input_ch_61=$input_ch_3;
    label = 17;
   } else {
    $last_start_1=$last_start_0;$i_1=$i_0;$input_ch_63=$input_ch_3;
   }
  }
  if ((label|0) == 17) {
   label = 0;

   $58=$input_ch_3;
   $59=$last_start_0;
   $60=((($58)-($59))|0);
   $61=((_lily_new_string_ncpy($last_start_0,$60))|0);
   $62=(($39+($i_0<<2))|0);
   HEAP32[(($62)>>2)]=$61;
   $63=((HEAP8[($input_ch_61)])|0);
   $64=(($63<<24)>>24)==0;
   if ($64) {
    break;
   }
   $66=((($i_0)+(1))|0);
   $67=(($input_ch_61+1)|0);
   $last_start_1=$67;$i_1=$66;$input_ch_63=$input_ch_61;
  }



  $69=(($input_ch_63+1)|0);
  $input_ch_3=$69;$last_start_0=$last_start_1;$i_0=$i_1;
 }
 $71=(($dest+16)|0);
 HEAP32[(($71)>>2)]=$39;
 $72=(($dest+8)|0);
 HEAP32[(($72)>>2)]=$36;
 return;
}


function _new_builtin_file($source,$mode){
 $source=($source)|0;
 $mode=($mode)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=((_lily_new_empty_value())|0);
 $2=((_lily_new_file_val($source,$mode))|0);
 $3=(($2+6)|0);
 HEAP8[($3)]=1;
 _lily_move_file($1,$2);
 return (($1)|0);
}


function _build_class($symtab,$name,$dyna_start,$generic_count){
 $symtab=($symtab)|0;
 $name=($name)|0;
 $dyna_start=($dyna_start)|0;
 $generic_count=($generic_count)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,label=0;

 $1=((_lily_new_class($symtab,$name))|0);
 $2=((HEAP32[(($dyna_start)>>2)])|0);
 $3=((($2)+(1))|0);
 $4=(($3)&65535);
 $5=(($1+46)|0);
 HEAP16[(($5)>>1)]=$4;
 $6=(($generic_count)&65535);
 $7=(($1+42)|0);
 HEAP16[(($7)>>1)]=$6;
 $8=(($1+6)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=$9|256;
 HEAP16[(($8)>>1)]=$10;
 $11=($generic_count|0)==0;
 if ($11) {
  _make_default_type_for($1);
 }
 $14=((HEAP32[(($dyna_start)>>2)])|0);
 $15=((3480+($14<<2))|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+1)|0);
 $18=((HEAP8[($17)])|0);
 $19=($18&255);
 $20=((($14)+(1))|0);
 $21=((($20)+($19))|0);
 HEAP32[(($dyna_start)>>2)]=$21;
 return (($1)|0);
}


function _build_special($symtab,$name,$generic_count,$id){
 $symtab=($symtab)|0;
 $name=($name)|0;
 $generic_count=($generic_count)|0;
 $id=($id)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;

 $1=((_lily_new_class($symtab,$name))|0);
 $2=(($id)&65535);
 $3=(($1+40)|0);
 HEAP16[(($3)>>1)]=$2;
 $4=(($generic_count)&65535);
 $5=(($1+42)|0);
 HEAP16[(($5)>>1)]=$4;
 $6=(($1+6)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=$7|256;
 HEAP16[(($6)>>1)]=$8;
 $9=(($1)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($symtab+24)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12+28)|0);
 HEAP32[(($13)>>2)]=$10;
 $14=(($symtab+40)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((($15)-(1))|0);
 HEAP32[(($14)>>2)]=$16;
 $17=(($symtab+32)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 HEAP32[(($9)>>2)]=$18;
 HEAP32[(($17)>>2)]=$1;
 $19=($generic_count|0)==0;
 if (!($19)) {
  return (($1)|0);
 }
 _make_default_type_for($1);
 return (($1)|0);
}


function _make_default_type_for($cls){
 $cls=($cls)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;

 $1=((_lily_malloc(20))|0);
 $2=$1;
 $3=$1;
 HEAP32[(($3)>>2)]=$cls;
 $4=(($1+6)|0);
 $5=(($cls+24)|0);
 _memset((((($4)|0))|0), ((((0)|0))|0), ((((14)|0))|0))|0;
 HEAP32[(($5)>>2)]=$2;
 $6=(($cls+52)|0);
 HEAP32[(($6)>>2)]=$2;
 return;
}


function _lily_new_buffer_u16($start){
 $start=($start)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;

 $1=((_lily_malloc(12))|0);
 $2=$1;
 $3=$start<<1;
 $4=((_lily_malloc($3))|0);
 $5=$4;
 $6=$1;
 HEAP32[(($6)>>2)]=$5;
 $7=(($1+4)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=0;
 $9=(($1+8)|0);
 $10=$9;
 HEAP32[(($10)>>2)]=$start;
 return (($2)|0);
}


function _lily_u16_write_1($b,$one){
 $b=($b)|0;
 $one=($one)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,label=0;

 $1=(($b+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(1))|0);
 $4=(($b+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3>>>0)>($5>>>0);
 if ($6) {
  $8=$5<<1;
  HEAP32[(($4)>>2)]=$8;
  $9=(($b)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=$10;
  $12=$5<<2;
  $13=((_lily_realloc($11,$12))|0);
  $14=$13;
  HEAP32[(($9)>>2)]=$14;
 }
 $16=((HEAP32[(($1)>>2)])|0);
 $17=(($b)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+($16<<1))|0);
 HEAP16[(($19)>>1)]=$one;
 $20=((HEAP32[(($1)>>2)])|0);
 $21=((($20)+(1))|0);
 HEAP32[(($1)>>2)]=$21;
 return;
}


function _lily_u16_write_2($b,$one,$two){
 $b=($b)|0;
 $one=($one)|0;
 $two=($two)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,label=0;

 $1=(($b+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(2))|0);
 $4=(($b+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3>>>0)>($5>>>0);
 if ($6) {
  $8=$5<<1;
  HEAP32[(($4)>>2)]=$8;
  $9=(($b)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=$10;
  $12=$5<<2;
  $13=((_lily_realloc($11,$12))|0);
  $14=$13;
  HEAP32[(($9)>>2)]=$14;
 }
 $16=((HEAP32[(($1)>>2)])|0);
 $17=(($b)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+($16<<1))|0);
 HEAP16[(($19)>>1)]=$one;
 $20=((HEAP32[(($1)>>2)])|0);
 $21=((($20)+(1))|0);
 $22=((HEAP32[(($17)>>2)])|0);
 $23=(($22+($21<<1))|0);
 HEAP16[(($23)>>1)]=$two;
 $24=((HEAP32[(($1)>>2)])|0);
 $25=((($24)+(2))|0);
 HEAP32[(($1)>>2)]=$25;
 return;
}


function _lily_u16_write_3($b,$one,$two,$three){
 $b=($b)|0;
 $one=($one)|0;
 $two=($two)|0;
 $three=($three)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,label=0;

 $1=(($b+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(3))|0);
 $4=(($b+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3>>>0)>($5>>>0);
 if ($6) {
  $8=$5<<1;
  HEAP32[(($4)>>2)]=$8;
  $9=(($b)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=$10;
  $12=$5<<2;
  $13=((_lily_realloc($11,$12))|0);
  $14=$13;
  HEAP32[(($9)>>2)]=$14;
 }
 $16=((HEAP32[(($1)>>2)])|0);
 $17=(($b)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+($16<<1))|0);
 HEAP16[(($19)>>1)]=$one;
 $20=((HEAP32[(($1)>>2)])|0);
 $21=((($20)+(1))|0);
 $22=((HEAP32[(($17)>>2)])|0);
 $23=(($22+($21<<1))|0);
 HEAP16[(($23)>>1)]=$two;
 $24=((HEAP32[(($1)>>2)])|0);
 $25=((($24)+(2))|0);
 $26=((HEAP32[(($17)>>2)])|0);
 $27=(($26+($25<<1))|0);
 HEAP16[(($27)>>1)]=$three;
 $28=((HEAP32[(($1)>>2)])|0);
 $29=((($28)+(3))|0);
 HEAP32[(($1)>>2)]=$29;
 return;
}


function _lily_u16_write_4($b,$one,$two,$three,$four){
 $b=($b)|0;
 $one=($one)|0;
 $two=($two)|0;
 $three=($three)|0;
 $four=($four)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,label=0;

 $1=(($b+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(4))|0);
 $4=(($b+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3>>>0)>($5>>>0);
 if ($6) {
  $8=$5<<1;
  HEAP32[(($4)>>2)]=$8;
  $9=(($b)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=$10;
  $12=$5<<2;
  $13=((_lily_realloc($11,$12))|0);
  $14=$13;
  HEAP32[(($9)>>2)]=$14;
 }
 $16=((HEAP32[(($1)>>2)])|0);
 $17=(($b)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+($16<<1))|0);
 HEAP16[(($19)>>1)]=$one;
 $20=((HEAP32[(($1)>>2)])|0);
 $21=((($20)+(1))|0);
 $22=((HEAP32[(($17)>>2)])|0);
 $23=(($22+($21<<1))|0);
 HEAP16[(($23)>>1)]=$two;
 $24=((HEAP32[(($1)>>2)])|0);
 $25=((($24)+(2))|0);
 $26=((HEAP32[(($17)>>2)])|0);
 $27=(($26+($25<<1))|0);
 HEAP16[(($27)>>1)]=$three;
 $28=((HEAP32[(($1)>>2)])|0);
 $29=((($28)+(3))|0);
 $30=((HEAP32[(($17)>>2)])|0);
 $31=(($30+($29<<1))|0);
 HEAP16[(($31)>>1)]=$four;
 $32=((HEAP32[(($1)>>2)])|0);
 $33=((($32)+(4))|0);
 HEAP32[(($1)>>2)]=$33;
 return;
}


function _lily_u16_write_5($b,$one,$two,$three,$four,$five){
 $b=($b)|0;
 $one=($one)|0;
 $two=($two)|0;
 $three=($three)|0;
 $four=($four)|0;
 $five=($five)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,label=0;

 $1=(($b+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(5))|0);
 $4=(($b+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3>>>0)>($5>>>0);
 if ($6) {
  $8=$5<<1;
  HEAP32[(($4)>>2)]=$8;
  $9=(($b)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=$10;
  $12=$5<<2;
  $13=((_lily_realloc($11,$12))|0);
  $14=$13;
  HEAP32[(($9)>>2)]=$14;
 }
 $16=((HEAP32[(($1)>>2)])|0);
 $17=(($b)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+($16<<1))|0);
 HEAP16[(($19)>>1)]=$one;
 $20=((HEAP32[(($1)>>2)])|0);
 $21=((($20)+(1))|0);
 $22=((HEAP32[(($17)>>2)])|0);
 $23=(($22+($21<<1))|0);
 HEAP16[(($23)>>1)]=$two;
 $24=((HEAP32[(($1)>>2)])|0);
 $25=((($24)+(2))|0);
 $26=((HEAP32[(($17)>>2)])|0);
 $27=(($26+($25<<1))|0);
 HEAP16[(($27)>>1)]=$three;
 $28=((HEAP32[(($1)>>2)])|0);
 $29=((($28)+(3))|0);
 $30=((HEAP32[(($17)>>2)])|0);
 $31=(($30+($29<<1))|0);
 HEAP16[(($31)>>1)]=$four;
 $32=((HEAP32[(($1)>>2)])|0);
 $33=((($32)+(4))|0);
 $34=((HEAP32[(($17)>>2)])|0);
 $35=(($34+($33<<1))|0);
 HEAP16[(($35)>>1)]=$five;
 $36=((HEAP32[(($1)>>2)])|0);
 $37=((($36)+(5))|0);
 HEAP32[(($1)>>2)]=$37;
 return;
}


function _lily_u16_write_6($b,$one,$two,$three,$four,$five,$six){
 $b=($b)|0;
 $one=($one)|0;
 $two=($two)|0;
 $three=($three)|0;
 $four=($four)|0;
 $five=($five)|0;
 $six=($six)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,label=0;

 $1=(($b+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(6))|0);
 $4=(($b+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3>>>0)>($5>>>0);
 if ($6) {
  $8=$5<<1;
  HEAP32[(($4)>>2)]=$8;
  $9=(($b)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=$10;
  $12=$5<<2;
  $13=((_lily_realloc($11,$12))|0);
  $14=$13;
  HEAP32[(($9)>>2)]=$14;
 }
 $16=((HEAP32[(($1)>>2)])|0);
 $17=(($b)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+($16<<1))|0);
 HEAP16[(($19)>>1)]=$one;
 $20=((HEAP32[(($1)>>2)])|0);
 $21=((($20)+(1))|0);
 $22=((HEAP32[(($17)>>2)])|0);
 $23=(($22+($21<<1))|0);
 HEAP16[(($23)>>1)]=$two;
 $24=((HEAP32[(($1)>>2)])|0);
 $25=((($24)+(2))|0);
 $26=((HEAP32[(($17)>>2)])|0);
 $27=(($26+($25<<1))|0);
 HEAP16[(($27)>>1)]=$three;
 $28=((HEAP32[(($1)>>2)])|0);
 $29=((($28)+(3))|0);
 $30=((HEAP32[(($17)>>2)])|0);
 $31=(($30+($29<<1))|0);
 HEAP16[(($31)>>1)]=$four;
 $32=((HEAP32[(($1)>>2)])|0);
 $33=((($32)+(4))|0);
 $34=((HEAP32[(($17)>>2)])|0);
 $35=(($34+($33<<1))|0);
 HEAP16[(($35)>>1)]=$five;
 $36=((HEAP32[(($1)>>2)])|0);
 $37=((($36)+(5))|0);
 $38=((HEAP32[(($17)>>2)])|0);
 $39=(($38+($37<<1))|0);
 HEAP16[(($39)>>1)]=$six;
 $40=((HEAP32[(($1)>>2)])|0);
 $41=((($40)+(6))|0);
 HEAP32[(($1)>>2)]=$41;
 return;
}


function _lily_u16_write_prep($b,$needed){
 $b=($b)|0;
 $needed=($needed)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$_lcssa=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,label=0;

 $1=(($b+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+($needed))|0);
 $4=(($b+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3>>>0)>($5>>>0);
 if (!($6)) {
  return;
 }
 $7=((HEAP32[(($1)>>2)])|0);
 $8=((($7)+($needed))|0);
 $9=((HEAP32[(($4)>>2)])|0);
 $10=($8>>>0)>($9>>>0);
 if ($10) {
  $11=((HEAP32[(($1)>>2)])|0);
  $12=((($11)+($needed))|0);
  $14=$9;
  while(1) {

   $15=$14<<1;
   $16=($12>>>0)>($15>>>0);
   if ($16) {
    $14=$15;
   } else {
    break;
   }
  }
  HEAP32[(($4)>>2)]=$15;
  $_lcssa=$15;
 } else {
  $_lcssa=$9;
 }

 $18=(($b)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=$19;
 $21=$_lcssa<<1;
 $22=((_lily_realloc($20,$21))|0);
 $23=$22;
 HEAP32[(($18)>>2)]=$23;
 return;
}


function _lily_u16_pop($b){
 $b=($b)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=(($b+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)-(1))|0);
 $4=(($b)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+($3<<1))|0);
 $7=((HEAP16[(($6)>>1)])|0);
 HEAP32[(($1)>>2)]=$3;
 return (($7)|0);
}


function _lily_u16_inject($b,$where,$value){
 $b=($b)|0;
 $where=($where)|0;
 $value=($value)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$_sum=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,label=0;

 $1=(($b+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(1))|0);
 $4=(($b+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3|0)==($5|0);
 if ($6) {
  $8=$5<<1;
  HEAP32[(($4)>>2)]=$8;
  $9=(($b)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=$10;
  $12=$5<<2;
  $13=((_lily_realloc($11,$12))|0);
  $14=$13;
  HEAP32[(($9)>>2)]=$14;
 }
 $16=((HEAP32[(($1)>>2)])|0);
 $17=((($16)-($where))|0);
 $18=(($b)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+($where<<1))|0);
 $_sum=((($where)+(1))|0);
 $21=(($19+($_sum<<1))|0);
 $22=$21;
 $23=$20;
 $24=$17<<1;
 ((_memmove((($22)|0),(($23)|0),(($24)|0)))|0);
 $25=((HEAP32[(($1)>>2)])|0);
 $26=((($25)+(1))|0);
 HEAP32[(($1)>>2)]=$26;
 $27=((HEAP32[(($18)>>2)])|0);
 $28=(($27+($where<<1))|0);
 HEAP16[(($28)>>1)]=$value;
 return;
}


function _lily_free_buffer_u16($b){
 $b=($b)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=(($b)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 _lily_free($3);
 $4=$b;
 _lily_free($4);
 return;
}


function _lily_new_expr_state(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,label=0;

 $1=((_lily_malloc(36))|0);
 $2=((_lily_malloc(40))|0);
 $3=$2;
 $4=(($2+36)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=0;
 $6=((_lily_malloc(40))|0);
 $7=$6;
 $8=(($6+36)|0);
 $9=$8;
 HEAP32[(($9)>>2)]=$3;
 $10=((_lily_malloc(40))|0);
 $11=$10;
 $12=(($10+36)|0);
 $13=$12;
 HEAP32[(($13)>>2)]=$7;
 $14=((_lily_malloc(40))|0);
 $15=$14;
 $16=(($14+36)|0);
 $17=$16;
 HEAP32[(($17)>>2)]=$11;
 $18=$1;
 $19=(($1+12)|0);
 $20=$19;
 HEAP32[(($20)>>2)]=$15;
 $21=(($1+8)|0);
 $22=$21;
 HEAP32[(($22)>>2)]=$15;
 $23=(($1+16)|0);
 $24=(($1+32)|0);
 $25=$24;
 HEAP32[(($25)>>2)]=0;
 $26=$1;
 HEAP32[(($26)>>2)]=0;
 $27=(($1+4)|0);
 $28=$27;
 HEAP32[(($28)>>2)]=0;
 _memset((((($23)|0))|0), ((((0)|0))|0), ((((10)|0))|0))|0;
 _add_save_entry($18);
 return (($18)|0);
}


function _lily_free_expr_state($es){
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$ast_iter_02=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$save_iter_01=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;

 $1=(($es+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if (!($3)) {
  $ast_iter_02=$2;
  while(1) {

   $4=(($ast_iter_02+36)|0);
   $5=((HEAP32[(($4)>>2)])|0);
   $6=$ast_iter_02;
   _lily_free($6);
   $7=($5|0)==0;
   if ($7) {
    break;
   } else {
    $ast_iter_02=$5;
   }
  }
 }
 $8=(($es+16)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==0;
 if ($10) {
  $15=$es;
  _lily_free($15);
  return;
 } else {
  $save_iter_01=$9;
 }
 while(1) {

  $11=(($save_iter_01+12)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=$save_iter_01;
  _lily_free($13);
  $14=($12|0)==0;
  if ($14) {
   break;
  } else {
   $save_iter_01=$12;
  }
 }
 $15=$es;
 _lily_free($15);
 return;
}


function _lily_es_collect_arg($es){
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=(($es+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($es)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 _push_tree_arg($4,$6);
 HEAP32[(($5)>>2)]=0;
 $7=(($es+4)|0);
 HEAP32[(($7)>>2)]=0;
 return;
}


function _lily_es_enter_tree($es,$tree_type){
 $es=($es)|0;
 $tree_type=($tree_type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$37=0,$38=0,$39=0,$save_entry_0=0,$41=0,$42=0,$43=0,$44=0,$45=0;
 var $46=0,$47=0,$48=0,$49=0,$50=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=(($tree_type)&65535);
 $12=((HEAP16[(($10)>>1)])|0);
 $13=$11&255;
 $14=$12&-256;
 $15=$14|$13;
 HEAP16[(($10)>>1)]=$15;
 $16=(($2+32)|0);
 HEAP32[(($16)>>2)]=0;
 $17=(($es+28)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($2+8)|0);
 HEAP32[(($20)>>2)]=$19;
 $21=(($2+12)|0);
 HEAP16[(($21)>>1)]=0;
 $22=(($2+28)|0);
 HEAP32[(($22)>>2)]=0;
 $23=(($2+14)|0);
 HEAP16[(($23)>>1)]=0;
 $24=(($2+24)|0);
 HEAP32[(($24)>>2)]=0;
 $25=(($2)|0);
 HEAP32[(($25)>>2)]=0;
 _merge_value($es,$2);
 $26=(($es+16)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=(($27+8)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=($29|0)==0;
 if ($30) {
  $save_entry_0=$27;
 } else {
  $32=(($27+12)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=($33|0)==0;
  if ($34) {
   _add_save_entry($es);
  }
  $37=((HEAP32[(($26)>>2)])|0);
  $38=(($37+12)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  HEAP32[(($26)>>2)]=$39;
  $save_entry_0=$39;
 }

 $41=(($es)|0);
 $42=((HEAP32[(($41)>>2)])|0);
 $43=(($save_entry_0+4)|0);
 HEAP32[(($43)>>2)]=$42;
 $44=(($es+4)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=(($save_entry_0)|0);
 HEAP32[(($46)>>2)]=$45;
 $47=(($save_entry_0+8)|0);
 HEAP32[(($47)>>2)]=$2;
 $48=(($es+20)|0);
 $49=((HEAP16[(($48)>>1)])|0);
 $50=((($49)+(1))&65535);
 HEAP16[(($48)>>1)]=$50;
 HEAP32[(($41)>>2)]=0;
 HEAP32[(($44)>>2)]=0;
 return;
}


function _lily_es_leave_tree($es){
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$20=0,$21=0,$22=0,label=0;

 $1=(($es+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($es)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 _push_tree_arg($4,$6);
 $7=(($2+4)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 HEAP32[(($5)>>2)]=$8;
 $9=(($2)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($es+4)|0);
 HEAP32[(($11)>>2)]=$10;
 $12=((HEAP32[(($1)>>2)])|0);
 $13=(($12+16)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=($14|0)==0;
 if ($15) {
  $17=(($12+8)|0);
  HEAP32[(($17)>>2)]=0;
  $20=(($es+20)|0);
  $21=((HEAP16[(($20)>>1)])|0);
  $22=((($21)-(1))&65535);
  HEAP16[(($20)>>1)]=$22;
  return;
 } else {
  HEAP32[(($1)>>2)]=$14;
  $20=(($es+20)|0);
  $21=((HEAP16[(($20)>>1)])|0);
  $22=((($21)-(1))&65535);
  HEAP16[(($20)>>1)]=$22;
  return;
 }
}


function _lily_es_get_saved_tree($es){
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=(($es+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 return (($4)|0);
}


function _lily_es_push_binary_op($es,$op){
 $es=($es)|0;
 $op=($op)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$43=0,$_c3=0,$45=0;
 var $47=0,$48=0,$49=0,$50=0,$51=0,$53=0,$54=0,$_c2=0,$tree_0=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=0,$_pr=0,$63=0,$65=0,$66=0,$67=0;
 var $68=0,$70=0,$_c=0,$72=0,$74=0,$75=0,$76=0,$tree_0_c=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|26;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=((_priority_for_op($op))|0);
 $22=(($2+6)|0);
 HEAP8[($22)]=$21;
 $23=(($op)&65535);
 $24=((HEAP16[(($10)>>1)])|0);
 $25=$23<<8;
 $26=$24&255;
 $27=$26|$25;
 HEAP16[(($10)>>1)]=$27;
 $28=(($2+20)|0);
 HEAP32[(($28)>>2)]=0;
 $29=(($2+24)|0);
 HEAP32[(($29)>>2)]=0;
 $30=(($es+4)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=(($31+4)|0);
 $33=$32;
 $34=((HEAP16[(($33)>>1)])|0);
 $35=$34&255;
 $36=((($35&65535))>>>0)<((26)>>>0);
 if ($36) {
  $38=(($es)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  $40=($39|0)==($31|0);
  if ($40) {
   HEAP32[(($38)>>2)]=$2;
  }
  $43=(($31+28)|0);
  HEAP32[(($43)>>2)]=$2;
  $_c3=$31;
  HEAP32[(($28)>>2)]=$_c3;
  HEAP32[(($30)>>2)]=$2;
  return;
 }
 $45=(($35<<16)>>16)==26;
 if (!($45)) {
  return;
 }
 $47=((HEAP8[($22)])|0);
 $48=(($31+6)|0);
 $49=((HEAP8[($48)])|0);
 $50=((($47)-(1))&255);
 $51=((($50&255))>>>0)<((($49&255))>>>0);
 if ($51) {
  $tree_0=$31;
 } else {
  $53=(($31+24)|0);
  $54=((HEAP32[(($53)>>2)])|0);
  $_c2=$54;
  HEAP32[(($28)>>2)]=$_c2;
  HEAP32[(($53)>>2)]=$2;
  HEAP32[(($20)>>2)]=$31;
  HEAP32[(($30)>>2)]=$2;
  return;
 }
 while(1) {

  $55=(($tree_0+28)|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $57=($56|0)==0;
  if ($57) {
   label = 17;
   break;
  }
  $59=(($56+6)|0);
  $60=((HEAP8[($59)])|0);
  $61=((($47&255))>>>0)>((($60&255))>>>0);
  if ($61) {
   label = 12;
   break;
  } else {
   $tree_0=$56;
  }
 }
 do {
  if ((label|0) == 12) {
   $_pr=((HEAP32[(($55)>>2)])|0);
   $63=($_pr|0)==0;
   if ($63) {
    label = 17;
    break;
   }
   $65=(($_pr+20)|0);
   $66=$65;
   $67=((HEAP32[(($66)>>2)])|0);
   $68=($67|0)==($tree_0|0);
   if ($68) {
    $70=(($65)|0);
    $_c=$2;
    HEAP32[(($70)>>2)]=$_c;
   } else {
    $72=(($_pr+24)|0);
    HEAP32[(($72)>>2)]=$2;
   }
   $74=(($31+28)|0);
   $75=((HEAP32[(($74)>>2)])|0);
   HEAP32[(($20)>>2)]=$75;
  }
 } while(0);
 if ((label|0) == 17) {
  HEAP32[(($55)>>2)]=$2;
  $76=(($es)|0);
  HEAP32[(($76)>>2)]=$2;
 }
 $tree_0_c=$tree_0;
 HEAP32[(($28)>>2)]=$tree_0_c;
 HEAP32[(($30)>>2)]=$2;
 return;
}


function _lily_es_enter_typecast($es,$type){
 $es=($es)|0;
 $type=($type)|0;
 var label=0;

 _lily_es_enter_tree($es,11);
 _push_type($es,$type);
 _lily_es_collect_arg($es);
 return;
}


function _lily_es_push_unary_op($es,$op){
 $es=($es)|0;
 $op=($op)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|9;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=(($2+20)|0);
 HEAP32[(($21)>>2)]=0;
 $22=(($op)&65535);
 $23=((HEAP16[(($10)>>1)])|0);
 $24=$22<<8;
 $25=$23&255;
 $26=$25|$24;
 HEAP16[(($10)>>1)]=$26;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_local_var($es,$var){
 $es=($es)|0;
 $var=($var)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$_c=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|5;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=$var;
 $22=(($2)|0);
 HEAP32[(($22)>>2)]=$21;
 $23=(($2+20)|0);
 $_c=$var;
 HEAP32[(($23)>>2)]=$_c;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_global_var($es,$var){
 $es=($es)|0;
 $var=($var)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$_c=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|7;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=$var;
 $22=(($2)|0);
 HEAP32[(($22)>>2)]=$21;
 $23=(($2+20)|0);
 $_c=$var;
 HEAP32[(($23)>>2)]=$_c;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_upvalue($es,$var){
 $es=($es)|0;
 $var=($var)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$_c=0;
 var label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|21;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=(($2+20)|0);
 $_c=$var;
 HEAP32[(($21)>>2)]=$_c;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_defined_func($es,$func){
 $es=($es)|0;
 $func=($func)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$_c=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|6;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=$func;
 $22=(($2)|0);
 HEAP32[(($22)>>2)]=$21;
 $23=(($2+20)|0);
 $_c=$func;
 HEAP32[(($23)>>2)]=$_c;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_method($es,$func){
 $es=($es)|0;
 $func=($func)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$_c=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|18;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=$func;
 $22=(($2)|0);
 HEAP32[(($22)>>2)]=$21;
 $23=(($2+20)|0);
 $_c=$func;
 HEAP32[(($23)>>2)]=$_c;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_static_func($es,$func){
 $es=($es)|0;
 $func=($func)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$_c=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|19;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=$func;
 $22=(($2)|0);
 HEAP32[(($22)>>2)]=$21;
 $23=(($2+20)|0);
 $_c=$func;
 HEAP32[(($23)>>2)]=$_c;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_inherited_new($es,$func){
 $es=($es)|0;
 $func=($func)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$_c=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|17;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=$func;
 $22=(($2)|0);
 HEAP32[(($22)>>2)]=$21;
 $23=(($2+20)|0);
 $_c=$func;
 HEAP32[(($23)>>2)]=$_c;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_literal($es,$t,$reg_spot){
 $es=($es)|0;
 $t=($t)|0;
 $reg_spot=($reg_spot)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$t_c=0;
 var $22=0,$23=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|16;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=(($2+20)|0);
 $t_c=$t;
 HEAP32[(($21)>>2)]=$t_c;
 $22=(($2+16)|0);
 $23=$22;
 HEAP16[(($23)>>1)]=$reg_spot;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_boolean($es,$value){
 $es=($es)|0;
 $value=($value)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|24;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=(($2+16)|0);
 $22=$21;
 HEAP16[(($22)>>1)]=$value;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_integer($es,$value){
 $es=($es)|0;
 $value=($value)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|25;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=(($2+16)|0);
 $22=$21;
 HEAP16[(($22)>>1)]=$value;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_property($es,$prop){
 $es=($es)|0;
 $prop=($prop)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$prop_c=0;
 var label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|13;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=(($2+20)|0);
 $prop_c=$prop;
 HEAP32[(($21)>>2)]=$prop_c;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_variant($es,$variant){
 $es=($es)|0;
 $variant=($variant)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$variant_c=0;
 var label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|14;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=(($2+20)|0);
 $variant_c=$variant;
 HEAP32[(($21)>>2)]=$variant_c;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_self($es){
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|20;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 _merge_value($es,$2);
 return;
}


function _lily_es_push_text($es,$tt,$start,$pos){
 $es=($es)|0;
 $tt=($tt)|0;
 $start=($start)|0;
 $pos=($pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=(($tt)&65535);
 $12=((HEAP16[(($10)>>1)])|0);
 $13=$11&255;
 $14=$12&-256;
 $15=$14|$13;
 HEAP16[(($10)>>1)]=$15;
 $16=(($2+32)|0);
 HEAP32[(($16)>>2)]=0;
 $17=(($2+8)|0);
 $18=(($2+12)|0);
 HEAP16[(($18)>>1)]=0;
 $19=(($2+28)|0);
 HEAP32[(($19)>>2)]=0;
 $20=(($2+16)|0);
 HEAP32[(($20)>>2)]=$pos;
 HEAP32[(($17)>>2)]=$start;
 _merge_value($es,$2);
 return;
}


function _add_save_entry($es){
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,label=0;

 $1=((_lily_malloc(20))|0);
 $2=$1;
 $3=(($es+16)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  HEAP32[(($3)>>2)]=$2;
  $7=(($1+16)|0);
  $8=$7;
  HEAP32[(($8)>>2)]=0;
  _memset((((($1)|0))|0), ((((0)|0))|0), ((((16)|0))|0))|0;
  return;
 } else {
  $10=(($4+12)|0);
  HEAP32[(($10)>>2)]=$2;
  $11=((HEAP32[(($3)>>2)])|0);
  $12=(($1+16)|0);
  $13=$12;
  HEAP32[(($13)>>2)]=$11;
  _memset((((($1)|0))|0), ((((0)|0))|0), ((((16)|0))|0))|0;
  return;
 }
}


function _push_tree_arg($entered_tree,$arg){
 $entered_tree=($entered_tree)|0;
 $arg=($arg)|0;
 var $1=0,$3=0,$4=0,$5=0,$tree_iter_0=0,$7=0,$8=0,$9=0,$12=0,$13=0,$14=0,$15=0,$16=0,label=0;

 $1=($arg|0)==0;
 if ($1) {
  return;
 }
 $3=(($entered_tree+24)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  HEAP32[(($3)>>2)]=$arg;
 } else {
  $tree_iter_0=$4;
  while(1) {

   $7=(($tree_iter_0+32)|0);
   $8=((HEAP32[(($7)>>2)])|0);
   $9=($8|0)==0;
   if ($9) {
    break;
   } else {
    $tree_iter_0=$8;
   }
  }
  HEAP32[(($7)>>2)]=$arg;
 }
 $12=(($arg+28)|0);
 HEAP32[(($12)>>2)]=$entered_tree;
 $13=(($arg+32)|0);
 HEAP32[(($13)>>2)]=0;
 $14=(($entered_tree+14)|0);
 $15=((HEAP16[(($14)>>1)])|0);
 $16=((($15)+(1))&65535);
 HEAP16[(($14)>>1)]=$16;
 return;
}


function _add_new_tree($es){
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=((_lily_malloc(40))|0);
 $2=$1;
 $3=(($1+36)|0);
 $4=$3;
 HEAP32[(($4)>>2)]=0;
 $5=(($es+8)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+36)|0);
 HEAP32[(($7)>>2)]=$2;
 return;
}


function _merge_value($es,$new_tree){
 $es=($es)|0;
 $new_tree=($new_tree)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$23=0,$27=0,label=0;

 $1=(($es+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  $27=(($es)|0);
  HEAP32[(($27)>>2)]=$new_tree;
  HEAP32[(($1)>>2)]=$new_tree;
  return;
 }
 $5=(($2+4)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 $8=$7&255;
 if ((((($8<<16)>>16))|0)==((9)|0)) {
  _merge_unary($es,$2,$new_tree);
  return;
 } else if ((((($8<<16)>>16))|0)==((26)|0)) {
  $10=(($2+24)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=($11|0)==0;
  if ($12) {
   HEAP32[(($10)>>2)]=$new_tree;
   $14=(($new_tree+28)|0);
   HEAP32[(($14)>>2)]=$2;
   return;
  }
  $16=(($11+4)|0);
  $17=$16;
  $18=((HEAP16[(($17)>>1)])|0);
  $19=$18&255;
  $20=(($19<<16)>>16)==9;
  if ($20) {
   _merge_unary($es,$11,$new_tree);
   return;
  } else {
   _merge_absorb($es,$11,$new_tree);
   HEAP32[(($10)>>2)]=$new_tree;
   $23=(($new_tree+28)|0);
   HEAP32[(($23)>>2)]=$2;
   return;
  }
 } else {
  _merge_absorb($es,$2,$new_tree);
  return;
 }
}


function _priority_for_op($o){
 $o=($o)|0;
 var $prio_0_off0=0,label=0;

 switch (($o|0)) {
 case 15: {
  $prio_0_off0=7;
  break;
 }
 case 20: {
  $prio_0_off0=5;
  break;
 }
 case 19: {
  $prio_0_off0=1;
  break;
 }
 case 3:case 5:case 4:case 6: {
  $prio_0_off0=4;
  break;
 }
 case 13: {
  $prio_0_off0=8;
  break;
 }
 case 11:case 12: {
  $prio_0_off0=9;
  break;
 }
 case 0:case 1: {
  $prio_0_off0=10;
  break;
 }
 case 9:case 10:case 8: {
  $prio_0_off0=11;
  break;
 }
 case 21:case 26:case 25:case 22:case 23:case 27:case 28: {
  $prio_0_off0=0;
  break;
 }
 case 2:case 7: {
  $prio_0_off0=3;
  break;
 }
 case 14: {
  $prio_0_off0=6;
  break;
 }
 case 18: {
  $prio_0_off0=2;
  break;
 }
 default: {
  $prio_0_off0=-1;
 }
 }

 return (($prio_0_off0)|0);
}


function _push_type($es,$type){
 $es=($es)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$type_c=0;
 var label=0;

 $1=(($es+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+36)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  _add_new_tree($es);
 }
 $8=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$8;
 $9=(($2+4)|0);
 $10=$9;
 $11=((HEAP16[(($10)>>1)])|0);
 $12=$11&-256;
 $13=$12|10;
 HEAP16[(($10)>>1)]=$13;
 $14=(($2+32)|0);
 HEAP32[(($14)>>2)]=0;
 $15=(($es+28)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($2+8)|0);
 HEAP32[(($18)>>2)]=$17;
 $19=(($2+12)|0);
 HEAP16[(($19)>>1)]=0;
 $20=(($2+28)|0);
 HEAP32[(($20)>>2)]=0;
 $21=(($2+20)|0);
 $type_c=$type;
 HEAP32[(($21)>>2)]=$type_c;
 _merge_value($es,$2);
 return;
}


function _merge_unary($es,$given,$new_tree){
 $es=($es)|0;
 $given=($given)|0;
 $new_tree=($new_tree)|0;
 var $_0=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$28=0,$new_tree_c1=0,$30=0,$new_tree_c=0,$32=0,label=0;

 $_0=$given;
 while(1) {

  $2=(($_0+4)|0);
  $3=$2;
  $4=((HEAP16[(($3)>>1)])|0);
  $5=$4&255;
  $6=(($5<<16)>>16)==9;
  if (!($6)) {
   label = 4;
   break;
  }
  $8=(($_0+20)|0);
  $9=$8;
  $10=((HEAP32[(($9)>>2)])|0);
  $11=($10|0)==0;
  if ($11) {
   label = 4;
   break;
  }
  $16=(($10+4)|0);
  $17=$16;
  $18=((HEAP16[(($17)>>1)])|0);
  $19=$18&255;
  $20=(($19<<16)>>16)==9;
  $21=(($_0+20)|0);
  $22=$21;
  $23=((HEAP32[(($22)>>2)])|0);
  if ($20) {
   $_0=$23;
  } else {
   $25=$21;$24=$23;
   break;
  }
 }
 if ((label|0) == 4) {
  $12=(($_0+20)|0);
  $13=$12;
  $14=((HEAP32[(($13)>>2)])|0);
  $25=$12;$24=$14;
 }


 $26=($24|0)==0;
 if ($26) {
  $28=(($25)|0);
  $new_tree_c1=$new_tree;
  HEAP32[(($28)>>2)]=$new_tree_c1;
  $32=(($new_tree+28)|0);
  HEAP32[(($32)>>2)]=$_0;
  return;
 } else {
  _merge_absorb($es,$24,$new_tree);
  $30=(($25)|0);
  $new_tree_c=$new_tree;
  HEAP32[(($30)>>2)]=$new_tree_c;
  $32=(($new_tree+28)|0);
  HEAP32[(($32)>>2)]=$_0;
  return;
 }
}


function _merge_absorb($es,$given,$new_tree){
 $es=($es)|0;
 $given=($given)|0;
 $new_tree=($new_tree)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$10=0,$11=0,$12=0,$13=0,label=0;

 $1=(($es+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==($given|0);
 do {
  if ($3) {
   HEAP32[(($1)>>2)]=$new_tree;
   $5=(($es)|0);
   $6=((HEAP32[(($5)>>2)])|0);
   $7=($6|0)==($given|0);
   if (!($7)) {
    break;
   }
   HEAP32[(($5)>>2)]=$new_tree;
  }
 } while(0);
 $10=(($given+28)|0);
 HEAP32[(($10)>>2)]=$new_tree;
 $11=(($new_tree+24)|0);
 HEAP32[(($11)>>2)]=$given;
 $12=(($new_tree+14)|0);
 HEAP16[(($12)>>1)]=1;
 $13=(($new_tree+32)|0);
 HEAP32[(($13)>>2)]=0;
 return;
}


function _lily_library_load($path){
 $path=($path)|0;
 var $1=0,$2=0,$4=0,$5=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$_0=0,label=0;

 $1=((_dlopen((($path)|0),((1)|0)))|0);
 $2=($1|0)==0;
 if ($2) {
  $_0=0;

  return (($_0)|0);
 }
 $4=((_dlsym((($1)|0),((13560)|0)))|0);
 $5=($4|0)==0;
 if ($5) {
  $7=((_dlclose((($1)|0)))|0);
  $_0=0;

  return (($_0)|0);
 } else {
  $9=((_lily_malloc(8))|0);
  $10=$9;
  $11=$9;
  HEAP32[(($11)>>2)]=$1;
  $12=$4;
  $13=(($9+4)|0);
  $14=$13;
  HEAP32[(($14)>>2)]=$12;
  $_0=$10;

  return (($_0)|0);
 }
  return 0;
}


function _lily_library_get($source,$name){
 $source=($source)|0;
 $name=($name)|0;
 var $1=0,label=0;

 $1=((_dlsym((($source)|0),(($name)|0)))|0);
 return (($1)|0);
}


function _lily_library_free($source){
 $source=($source)|0;
 var $1=0,label=0;

 $1=((_dlclose((($source)|0)))|0);
 return;
}


function _lily_new_string_pile(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;

 $1=((_lily_malloc(12))|0);
 $2=$1;
 $3=((_lily_malloc(64))|0);
 $4=$1;
 HEAP32[(($4)>>2)]=$3;
 $5=(($1+4)|0);
 $6=$5;
 HEAP32[(($6)>>2)]=63;
 return (($2)|0);
}


function _lily_free_string_pile($sp){
 $sp=($sp)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=(($sp)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_free($2);
 $3=$sp;
 _lily_free($3);
 return;
}


function _lily_sp_insert($sp,$new_str,$pos){
 $sp=($sp)|0;
 $new_str=($new_str)|0;
 $pos=($pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$_lcssa=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,label=0;

 $1=((HEAP16[(($pos)>>1)])|0);
 $2=($1&65535);
 $3=((($2)+(1))|0);
 $4=((_strlen((($new_str)|0)))|0);
 $5=((($3)+($4))|0);
 $6=(($sp+4)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7>>>0)<($5>>>0);
 if ($8) {
  $9=((HEAP32[(($6)>>2)])|0);
  $10=($9>>>0)<($5>>>0);
  if ($10) {
   $11=$9;
   while(1) {

    $12=$11<<1;
    $13=($12>>>0)<($5>>>0);
    if ($13) {
     $11=$12;
    } else {
     break;
    }
   }
   HEAP32[(($6)>>2)]=$12;
   $_lcssa=$12;
  } else {
   $_lcssa=$9;
  }

  $15=(($sp)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=((_lily_realloc($16,$_lcssa))|0);
  HEAP32[(($15)>>2)]=$17;
 }
 $19=(($sp)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=((HEAP16[(($pos)>>1)])|0);
 $22=($21&65535);
 $23=(($20+$22)|0);
 $24=((_strcpy((($23)|0),(($new_str)|0)))|0);
 $25=(($5)&65535);
 HEAP16[(($pos)>>1)]=$25;
 return;
}


function _lily_sp_get($sp,$pos){
 $sp=($sp)|0;
 $pos=($pos)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=(($sp)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+$pos)|0);
 return (($3)|0);
}


function _lily_sys_loader($o,$c,$id){
 $o=($o)|0;
 $c=($c)|0;
 $id=($id)|0;
 var $cond=0,$2=0,$_0=0,label=0;

 $cond=($id|0)==1;
 if ($cond) {
  $2=((_load_var_argv($o))|0);
  $_0=$2;
 } else {
  $_0=0;
 }

 return (($_0)|0);
}


function _lily_pkg_sys_init($parser,$options){
 $parser=($parser)|0;
 $options=($options)|0;
 var label=0;

 _lily_register_package($parser,12320,624,6);
 return;
}


function _load_var_argv($options){
 $options=($options)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$i_01=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,label=0;

 $1=((_lily_new_empty_value())|0);
 $2=((_lily_new_list_val())|0);
 $3=(($options+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=$5<<2;
 $7=((_lily_malloc($6))|0);
 $8=$7;
 $9=(($2+16)|0);
 HEAP32[(($9)>>2)]=$8;
 $10=((HEAP16[(($3)>>1)])|0);
 $11=($10&65535);
 $12=(($2+8)|0);
 HEAP32[(($12)>>2)]=$11;
 $13=((HEAP16[(($3)>>1)])|0);
 $14=(($13<<16)>>16)==0;
 if ($14) {
  _lily_move_list_f(8192,$1,$2);
  $26=$1;
  return (($26)|0);
 }
 $15=(($options+12)|0);
 $i_01=0;
 while(1) {

  $17=((HEAP32[(($15)>>2)])|0);
  $18=(($17+($i_01<<2))|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=((_lily_new_string($19))|0);
  $21=(($8+($i_01<<2))|0);
  HEAP32[(($21)>>2)]=$20;
  $22=((($i_01)+(1))|0);
  $23=((HEAP16[(($3)>>1)])|0);
  $24=($23&65535);
  $25=($22|0)<($24|0);
  if ($25) {
   $i_01=$22;
  } else {
   break;
  }
 }
 _lily_move_list_f(8192,$1,$2);
 $26=$1;
 return (($26)|0);
}


function _lily_new_vm_state($options,$raiser){
 $options=($options)|0;
 $raiser=($raiser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$_=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0;
 var $60=0,$61=0,label=0;

 $1=((_lily_malloc(108))|0);
 $2=$1;
 $3=(($options+16)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($1+100)|0);
 $6=$5;
 HEAP32[(($6)>>2)]=$4;
 $7=(($options+4)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($1+56)|0);
 $10=$9;
 HEAP32[(($10)>>2)]=$8;
 $11=(($options+1)|0);
 $12=((HEAP8[($11)])|0);
 $13=($12&255);
 $14=(($1+64)|0);
 $15=$14;
 $16=((($12&255))>>>0)>((16)>>>0);
 $_=($16?16:$13);
 HEAP32[(($15)>>2)]=$_;
 $17=(($options+8)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($1+68)|0);
 $20=$19;
 HEAP32[(($20)>>2)]=$18;
 $21=(($1+20)|0);
 $22=$21;
 HEAP32[(($22)>>2)]=0;
 $23=(($1+96)|0);
 $24=$23;
 HEAP32[(($24)>>2)]=$raiser;
 $25=(($1+60)|0);
 $26=$25;
 HEAP32[(($26)>>2)]=0;
 $27=(($1+72)|0);
 $28=$27;
 HEAP32[(($28)>>2)]=0;
 $29=(($1+92)|0);
 $30=$29;
 HEAP32[(($30)>>2)]=0;
 $31=(($1+28)|0);
 $32=$31;
 HEAP32[(($32)>>2)]=0;
 $33=(($1+40)|0);
 $34=(($1+24)|0);
 $35=$34;
 HEAP32[(($35)>>2)]=0;
 _memset((((($1)|0))|0), ((((0)|0))|0), ((((20)|0))|0))|0;
 _memset((((($33)|0))|0), ((((0)|0))|0), ((((16)|0))|0))|0;
 $36=((_lily_malloc(12))|0);
 $37=$36;
 $38=(($1+84)|0);
 $39=$38;
 HEAP32[(($39)>>2)]=$37;
 $40=((_lily_malloc(16))|0);
 $41=$40;
 $42=((HEAP32[(($39)>>2)])|0);
 $43=(($42)|0);
 HEAP32[(($43)>>2)]=$41;
 $44=((HEAP32[(($39)>>2)])|0);
 $45=(($44+4)|0);
 HEAP32[(($45)>>2)]=0;
 $46=((HEAP32[(($39)>>2)])|0);
 $47=(($46+8)|0);
 HEAP32[(($47)>>2)]=4;
 $48=(($1+36)|0);
 $49=$48;
 HEAP32[(($49)>>2)]=0;
 $50=(($1+32)|0);
 $51=$50;
 HEAP32[(($51)>>2)]=0;
 $52=(($1+104)|0);
 $53=$52;
 HEAP32[(($53)>>2)]=0;
 $54=(($1+76)|0);
 $55=$54;
 HEAP32[(($55)>>2)]=0;
 _add_call_frame($2);
 $56=((_lily_malloc(32))|0);
 $57=$56;
 $58=(($56+28)|0);
 $59=$58;
 HEAP32[(($59)>>2)]=0;
 $60=(($56+24)|0);
 $61=$60;
 HEAP32[(($61)>>2)]=0;
 HEAP32[(($28)>>2)]=$57;
 return (($2)|0);
}


function _lily_free_vm($vm){
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$catch_iter_08=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$i_02=0,$21=0,$i_03=0,$22=0,$23=0,$24=0,$i_0=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$frame_iter_0=0,$32=0,$33=0,$34=0,$35=0,$frame_iter_11=0;
 var $36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0;
 var $58=0,label=0;

 $1=(($vm+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($vm+72)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 do {
  if (!($5)) {
   $6=((HEAP32[(($3)>>2)])|0);
   $7=(($6+28)|0);
   $8=((HEAP32[(($7)>>2)])|0);
   $9=($8|0)==0;
   if ($9) {
    $10=($6|0)==0;
    if ($10) {
     break;
    } else {
     $catch_iter_08=$6;
    }
   } else {
    $11=$8;
    while(1) {

     HEAP32[(($3)>>2)]=$11;
     $12=(($11+28)|0);
     $13=((HEAP32[(($12)>>2)])|0);
     $14=($13|0)==0;
     if ($14) {
      $catch_iter_08=$11;
      break;
     } else {
      $11=$13;
     }
    }
   }
   while(1) {

    $15=(($catch_iter_08+24)|0);
    $16=((HEAP32[(($15)>>2)])|0);
    $17=$catch_iter_08;
    _lily_free($17);
    $18=($16|0)==0;
    if ($18) {
     break;
    } else {
     $catch_iter_08=$16;
    }
   }
  }
 } while(0);
 $19=(($vm+16)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $i_02=((($20)-(1))|0);
 $21=($i_02|0)>-1;
 if ($21) {
  $i_03=$i_02;
  while(1) {

   $22=(($2+($i_03<<2))|0);
   $23=((HEAP32[(($22)>>2)])|0);
   _lily_deref($23);
   $24=$23;
   _lily_free($24);
   $i_0=((($i_03)-(1))|0);
   $25=($i_0|0)>-1;
   if ($25) {
    $i_03=$i_0;
   } else {
    break;
   }
  }
 }
 $26=(($vm+12)|0);
 HEAP32[(($26)>>2)]=0;
 $27=(($vm+8)|0);
 HEAP32[(($27)>>2)]=0;
 HEAP32[(($19)>>2)]=0;
 $28=$2;
 _lily_free($28);
 $29=(($vm+24)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $frame_iter_0=$30;
 while(1) {

  $32=(($frame_iter_0+36)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=($33|0)==0;
  if ($34) {
   break;
  } else {
   $frame_iter_0=$33;
  }
 }
 $35=($frame_iter_0|0)==0;
 if (!($35)) {
  $frame_iter_11=$frame_iter_0;
  while(1) {

   $36=(($frame_iter_11+40)|0);
   $37=((HEAP32[(($36)>>2)])|0);
   $38=$frame_iter_11;
   _lily_free($38);
   $39=($37|0)==0;
   if ($39) {
    break;
   } else {
    $frame_iter_11=$37;
   }
  }
 }
 $40=(($vm+52)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=($41|0)==0;
 if (!($42)) {
  _invoke_gc($vm);
 }
 _destroy_gc_entries($vm);
 $45=(($vm+32)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 $47=$46;
 _lily_free($47);
 $48=(($vm+84)|0);
 $49=((HEAP32[(($48)>>2)])|0);
 $50=(($49)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=$51;
 _lily_free($52);
 $53=((HEAP32[(($48)>>2)])|0);
 $54=$53;
 _lily_free($54);
 $55=(($vm+28)|0);
 $56=((HEAP32[(($55)>>2)])|0);
 $57=$56;
 _lily_free($57);
 $58=$vm;
 _lily_free($58);
 return;
}


function _dynamic_marker($pass,$v){
 $pass=($pass)|0;
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+16)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=$7&98304;
 $9=($8|0)==0;
 if ($9) {
  return;
 }
 _gc_mark($pass,$5);
 return;
}


function _list_marker($pass,$v){
 $pass=($pass)|0;
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$i_01=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$18=0,$19=0,$20=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 if ($6) {
  return;
 }
 $7=(($3+16)|0);
 $i_01=0;
 while(1) {

  $9=((HEAP32[(($7)>>2)])|0);
  $10=(($9+($i_01<<2))|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=(($11)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=$13&98304;
  $15=($14|0)==0;
  if (!($15)) {
   _gc_mark($pass,$11);
  }
  $18=((($i_01)+(1))|0);
  $19=((HEAP32[(($4)>>2)])|0);
  $20=($18>>>0)<($19>>>0);
  if ($20) {
   $i_01=$18;
  } else {
   break;
  }
 }
 return;
}


function _hash_marker($pass,$v){
 $pass=($pass)|0;
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$elem_iter_01=0,$5=0,$elem_iter_02=0,$6=0,$7=0,$8=0,$elem_iter_0=0,$9=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+16)|0);
 $elem_iter_01=((HEAP32[(($4)>>2)])|0);
 $5=($elem_iter_01|0)==0;
 if ($5) {
  return;
 } else {
  $elem_iter_02=$elem_iter_01;
 }
 while(1) {

  $6=(($elem_iter_02+12)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  _gc_mark($pass,$7);
  $8=(($elem_iter_02+16)|0);
  $elem_iter_0=((HEAP32[(($8)>>2)])|0);
  $9=($elem_iter_0|0)==0;
  if ($9) {
   break;
  } else {
   $elem_iter_02=$elem_iter_0;
  }
 }
 return;
}


function _lily_tag_value($vm,$v){
 $vm=($vm)|0;
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,$12=0,$13=0,$15=0,$16=0,$new_entry_0=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,label=0;

 $1=(($vm+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($vm+56)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($2>>>0)<($4>>>0);
 if (!($5)) {
  _invoke_gc($vm);
 }
 $8=(($vm+48)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==0;
 if ($10) {
  $15=((_lily_malloc(24))|0);
  $16=$15;
  $new_entry_0=$16;
 } else {
  $12=(($9+16)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  HEAP32[(($8)>>2)]=$13;
  $new_entry_0=$9;
 }

 $18=(($v+8)|0);
 $19=$18;
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($new_entry_0+8)|0);
 $22=$21;
 HEAP32[(($22)>>2)]=$20;
 $23=(($new_entry_0+4)|0);
 HEAP32[(($23)>>2)]=0;
 $24=(($v)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($new_entry_0)|0);
 HEAP32[(($26)>>2)]=$25;
 $27=(($vm+44)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($new_entry_0+16)|0);
 HEAP32[(($29)>>2)]=$28;
 HEAP32[(($27)>>2)]=$new_entry_0;
 $30=((HEAP32[(($19)>>2)])|0);
 $31=(($30+24)|0);
 HEAP32[(($31)>>2)]=$new_entry_0;
 $32=((HEAP32[(($1)>>2)])|0);
 $33=((($32)+(1))|0);
 HEAP32[(($1)>>2)]=$33;
 $34=((HEAP32[(($24)>>2)])|0);
 $35=$34|32768;
 HEAP32[(($24)>>2)]=$35;
 return;
}


function _lily_vm_raise($vm,$id,$message){
 $vm=($vm)|0;
 $id=($id)|0;
 $message=($message)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$c_0=0,$17=0,$18=0,label=0;

 $1=($id&255);
 $2=(($vm+32)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+($1<<2))|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 if ($6) {
  $8=(($vm+88)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=((($1)-(15))|0);
  $11=((1400+($10<<2))|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=((_lily_dynaload_exception($9,$12))|0);
  $14=((HEAP32[(($2)>>2)])|0);
  $15=(($14+($1<<2))|0);
  HEAP32[(($15)>>2)]=$13;
  $c_0=$13;
 } else {
  $c_0=$5;
 }

 $17=(($vm+96)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 _lily_raise_class($18,$c_0,$message);
 return;
}


function _lily_vm_raise_fmt($vm,$id,$fmt,varrp){
 $vm=($vm)|0;
 $id=($id)|0;
 $fmt=($fmt)|0;
 varrp=(varrp)|0;
 var $var_args=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $var_args=((sp)|0);
 $1=(($vm+96)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_msgbuf_flush($4);
 $5=(($var_args)|0);
 $6=$var_args;
 HEAP32[(($6)>>2)]=varrp;HEAP32[((($6)+(4))>>2)]=0;
 _lily_msgbuf_add_fmt_va($4,$fmt,$5);

 $7=(($4)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 _lily_vm_raise($vm,$id,$8);
 STACKTOP=sp;return;
}


function _lily_builtin_calltrace($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;

 $1=((HEAP16[(($code)>>1)])|0);
 $2=($1&65535);
 $3=(($vm)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+($2<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($vm+24)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+36)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 HEAP32[(($7)>>2)]=$10;
 $11=(($vm+20)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((($12)-(1))|0);
 HEAP32[(($11)>>2)]=$13;
 $14=((_build_traceback_raw($vm))|0);
 $15=((HEAP32[(($7)>>2)])|0);
 $16=(($15+40)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 HEAP32[(($7)>>2)]=$17;
 $18=((HEAP32[(($11)>>2)])|0);
 $19=((($18)+(1))|0);
 HEAP32[(($11)>>2)]=$19;
 _lily_move_list_f(8192,$6,$14);
 return;
}


function _lily_builtin_print($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;

 $1=((HEAP32[((_stdout)>>2)])|0);
 $2=(($code+2)|0);
 $3=((HEAP16[(($2)>>1)])|0);
 $4=($3&65535);
 $5=(($vm)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+($4<<2))|0);
 $8=((HEAP32[(($7)>>2)])|0);
 _do_print($vm,$1,$8);
 return;
}


function _do_o_interpolation($vm,$code){
 $vm=($vm)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$i_01=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$_lcssa=0,$23=0,$24=0,$25=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+4)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($vm+80)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 _lily_msgbuf_flush($7);
 $8=(($4<<16)>>16)==0;
 $9=(($code+6)|0);
 $10=((HEAP16[(($9)>>1)])|0);
 $11=($10&65535);
 $12=(($2+($11<<2))|0);
 $13=((HEAP32[(($12)>>2)])|0);
 if ($8) {
  $_lcssa=$13;

  $23=(($7)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=((_lily_new_raw_string($24))|0);
  _lily_move_string($_lcssa,$25);
  return;
 } else {
  $i_01=0;$14=$13;
 }
 while(1) {


  _lily_vm_add_value_to_msgbuf($vm,$7,$14);
  $15=((($i_01)+(1))|0);
  $16=($15|0)<($5|0);
  $17=((($i_01)+(4))|0);
  $18=(($code+($17<<1))|0);
  $19=((HEAP16[(($18)>>1)])|0);
  $20=($19&65535);
  $21=(($2+($20<<2))|0);
  $22=((HEAP32[(($21)>>2)])|0);
  if ($16) {
   $i_01=$15;$14=$22;
  } else {
   $_lcssa=$22;
   break;
  }
 }

 $23=(($7)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=((_lily_new_raw_string($24))|0);
 _lily_move_string($_lcssa,$25);
 return;
}


function _lily_vm_add_value_to_msgbuf($vm,$msgbuf,$value){
 $vm=($vm)|0;
 $msgbuf=($msgbuf)|0;
 $value=($value)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;

 $1=(($value)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8;
 $4=($3|0)==0;
 if ($4) {
  _add_value_to_msgbuf($vm,$msgbuf,0,$value);
  return;
 } else {
  $6=(($value+8)|0);
  $7=$6;
  $8=((HEAP32[(($7)>>2)])|0);
  $9=(($8+8)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  _lily_msgbuf_add($msgbuf,$10);
  return;
 }
}


function _do_o_dynamic_cast($vm,$code){
 $vm=($vm)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0;
 var $ok_0=0,$44=0,$46=0,$47=0,$49=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+4)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($vm+32)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+($5<<2))|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($code+6)|0);
 $11=((HEAP16[(($10)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($code+8)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=($16&65535);
 $18=(($2+($17<<2))|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($14+8)|0);
 $21=$20;
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22+16)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($24)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=$26&3072;
 $28=($27|0)==0;
 if ($28) {
  $40=(($9+8)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=$41&$26;
  $ok_0=$42;
 } else {
  $30=(($24+8)|0);
  $31=$30;
  $32=((HEAP32[(($31)>>2)])|0);
  $33=(($32+4)|0);
  $34=((HEAP16[(($33)>>1)])|0);
  $35=(($9+40)|0);
  $36=((HEAP16[(($35)>>1)])|0);
  $37=(($34<<16)>>16)==(($36<<16)>>16);
  $38=($37&1);
  $ok_0=$38;
 }

 $44=($ok_0|0)==0;
 if ($44) {
  $49=((_lily_get_none($vm))|0);
  _lily_move_enum_f(65536,$19,$49);
  return;
 } else {
  $46=((_lily_copy_value($24))|0);
  $47=((_lily_new_some($46))|0);
  _lily_move_enum_f(73728,$19,$47);
  return;
 }
}


function _lily_foreign_call($vm,$cached,$need_result,$call_val,$num_values,varrp){
 $vm=($vm)|0;
 $cached=($cached)|0;
 $need_result=($need_result)|0;
 $call_val=($call_val)|0;
 $num_values=($num_values)|0;
 varrp=(varrp)|0;
 var $values=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$target_need_0=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$return_reg_0=0,$41=0,$42=0,$44=0,$45=0,$46=0;
 var $47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$_sum=0,$66=0,$67=0,$68=0;
 var $69=0,$i_02=0,$70=0,$_sum1=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0;
 var $91=0,$92=0,$93=0,$94=0,$95=0,$i_0_lcssa=0,$97=0,$98=0,$99=0,$100=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$112=0,$113=0;
 var $114=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $values=((sp)|0);
 $1=(($call_val+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($vm+24)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($3+24)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==0;
 if ($8) {
  $10=(($3+38)|0);
  $11=((HEAP16[(($10)>>1)])|0);
  $12=($11&65535);
  $target_need_0=$12;
 } else {
  $target_need_0=$num_values;
 }

 $14=(($vm+12)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((($target_need_0)+($need_result))|0);
 $17=((($16)+($15))|0);
 $18=((($17)+($15))|0);
 $19=(($vm+8)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=($18>>>0)>($20>>>0);
 if ($21) {
  _grow_vm_registers($vm,$17);
 }
 $24=(($vm)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($5+36)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=(($27+8)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=(($25+($29<<2))|0);
 $31=($need_result|0)==0;
 if ($31) {
  $return_reg_0=0;
 } else {
  $33=((HEAP32[(($30)>>2)])|0);
  $34=(($33)|0);
  $35=((HEAP32[(($34)>>2)])|0);
  $36=$35&8192;
  $37=($36|0)==0;
  if (!($37)) {
   _lily_deref($33);
  }
  HEAP32[(($34)>>2)]=0;
  $return_reg_0=$33;
 }

 $41=((HEAP32[(($cached)>>2)])|0);
 $42=($41|0)==0;
 if ($42) {
  $44=((HEAP32[(($4)>>2)])|0);
  $45=(($44+12)|0);
  HEAP32[(($45)>>2)]=3080;
  $46=(($44+16)|0);
  HEAP32[(($46)>>2)]=0;
  $47=((HEAP32[(($30)>>2)])|0);
  $48=(($44+4)|0);
  HEAP32[(($48)>>2)]=$47;
  $49=(($44+32)|0);
  HEAP32[(($49)>>2)]=0;
  $50=(($44+20)|0);
  HEAP32[(($50)>>2)]=0;
  $51=(($44+40)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=($52|0)==0;
  if ($53) {
   _add_call_frame($vm);
   HEAP32[(($4)>>2)]=$44;
  }
  $56=((HEAP32[(($51)>>2)])|0);
  $57=(($3+28)|0);
  $58=((HEAP32[(($57)>>2)])|0);
  $59=(($56+12)|0);
  HEAP32[(($59)>>2)]=$58;
  $60=(($56+16)|0);
  HEAP32[(($60)>>2)]=0;
  $61=(($56+8)|0);
  HEAP32[(($61)>>2)]=$target_need_0;
  $62=(($56)|0);
  HEAP32[(($62)>>2)]=$3;
  $63=(($56+20)|0);
  HEAP32[(($63)>>2)]=0;
  $64=(($56+32)|0);
  HEAP32[(($64)>>2)]=0;
 }
 $_sum=((($29)+(1))|0);
 $66=(($25+($_sum<<2))|0);
 $67=(($values)|0);
 $68=$values;
 HEAP32[(($68)>>2)]=varrp;HEAP32[((($68)+(4))>>2)]=0;
 $69=($num_values|0)>0;
 if ($69) {
  $i_02=0;
  while(1) {

   $70=(tempInt=((HEAP32[((($67)+(4))>>2)])|0),HEAP32[((($67)+(4))>>2)]=tempInt + 8,((HEAP32[(((((HEAP32[(($67)>>2)])|0))+(tempInt))>>2)])|0));
   $_sum1=((($i_02)+($_sum))|0);
   $71=(($25+($_sum1<<2))|0);
   $72=((HEAP32[(($71)>>2)])|0);
   $73=(($72)|0);
   $74=((HEAP32[(($73)>>2)])|0);
   $75=$74&8192;
   $76=($75|0)==0;
   if (!($76)) {
    _lily_deref($72);
   }
   $79=(($70)|0);
   $80=((HEAP32[(($79)>>2)])|0);
   $81=$80&8192;
   $82=($81|0)==0;
   if (!($82)) {
    $84=(($70+8)|0);
    $85=$84;
    $86=((HEAP32[(($85)>>2)])|0);
    $87=(($86)|0);
    $88=((HEAP32[(($87)>>2)])|0);
    $89=((($88)+(1))|0);
    HEAP32[(($87)>>2)]=$89;
   }
   $91=((HEAP32[(($71)>>2)])|0);
   $92=$91;
   $93=$70;
   HEAP32[(($92)>>2)]=((HEAP32[(($93)>>2)])|0);HEAP32[((($92)+(4))>>2)]=((HEAP32[((($93)+(4))>>2)])|0);HEAP32[((($92)+(8))>>2)]=((HEAP32[((($93)+(8))>>2)])|0);HEAP32[((($92)+(12))>>2)]=((HEAP32[((($93)+(12))>>2)])|0);
   $94=((($i_02)+(1))|0);
   $95=($94|0)<($num_values|0);
   if ($95) {
    $i_02=$94;
   } else {
    $i_0_lcssa=$num_values;
    break;
   }
  }
 } else {
  $i_0_lcssa=0;
 }


 do {
  if ($8) {
   $97=(($3+38)|0);
   $98=((HEAP16[(($97)>>1)])|0);
   $99=($98&65535);
   $100=($i_0_lcssa|0)==($99|0);
   if ($100) {
    break;
   }
   _scrub_registers($vm,$3,$i_0_lcssa);
  }
 } while(0);
 HEAP32[(($24)>>2)]=$66;
 $103=((HEAP32[(($4)>>2)])|0);
 $104=(($103+40)|0);
 $105=((HEAP32[(($104)>>2)])|0);
 HEAP32[(($4)>>2)]=$105;
 $106=((HEAP32[(($14)>>2)])|0);
 $107=((($106)+($target_need_0))|0);
 HEAP32[(($14)>>2)]=$107;
 HEAP32[(($cached)>>2)]=1;
 $108=(($3+28)|0);
 $109=((HEAP32[(($108)>>2)])|0);
 $110=($109|0)==0;
 if ($110) {
  $116=((HEAP32[(($24)>>2)])|0);
  $117=((($116)-(4))|0);
  HEAP32[(($24)>>2)]=$117;
  $118=((HEAP32[(($6)>>2)])|0);
  $119=((($num_values)+(1))|0);
  $120=(($119)&65535);
  FUNCTION_TABLE_viii[($118)&255]($vm,$120,3088);
  $121=((HEAP32[(($4)>>2)])|0);
  $122=(($121+36)|0);
  $123=((HEAP32[(($122)>>2)])|0);
  HEAP32[(($4)>>2)]=$123;
  $124=((HEAP32[(($14)>>2)])|0);
  $125=((($124)-($target_need_0))|0);
  HEAP32[(($14)>>2)]=$125;
  $127=((HEAP32[(($4)>>2)])|0);
  $128=(($127+36)|0);
  $129=((HEAP32[(($128)>>2)])|0);
  $130=(($129+8)|0);
  $131=((HEAP32[(($130)>>2)])|0);
  $132=((HEAP32[(($24)>>2)])|0);
  $133=(((-$131))|0);
  $134=(($132+($133<<2))|0);
  HEAP32[(($24)>>2)]=$134;
  STACKTOP=sp;return (($return_reg_0)|0);
 } else {
  $112=(($vm+20)|0);
  $113=((HEAP32[(($112)>>2)])|0);
  $114=((($113)+(1))|0);
  HEAP32[(($112)>>2)]=$114;
  _lily_vm_execute($vm);
  $127=((HEAP32[(($4)>>2)])|0);
  $128=(($127+36)|0);
  $129=((HEAP32[(($128)>>2)])|0);
  $130=(($129+8)|0);
  $131=((HEAP32[(($130)>>2)])|0);
  $132=((HEAP32[(($24)>>2)])|0);
  $133=(((-$131))|0);
  $134=(($132+($133<<2))|0);
  HEAP32[(($24)>>2)]=$134;
  STACKTOP=sp;return (($return_reg_0)|0);
 }
  return 0;
}


function _lily_vm_execute($vm){
 $vm=($vm)|0;
 var $code_pos=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0;
 var $21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$37=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$upvalues_0=0,$current_frame_0=0,$vm_regs_0=0,$regs_from_main_0=0,$code_0=0,$57=0,$58=0,$59=0,$60=0;
 var $61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$upvalues_1=0,$current_frame_1=0,$offset_max_registers_0=0,$num_registers_0=0,$vm_regs_1=0,$regs_from_main_1=0,$code_1=0,$71=0,$72=0,$73=0;
 var $74=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$ld$0$0=0;
 var $94$0=0,$ld$1$1=0,$94$1=0,$95=0,$st$2$0=0,$st$3$1=0,$96=0,$97=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0;
 var $111=0,$112=0,$113=0,$114=0,$ld$4$0=0,$115$0=0,$ld$5$1=0,$115$1=0,$116=0,$st$6$0=0,$st$7$1=0,$117=0,$118=0,$119=0,$120=0,$121=0,$123=0,$124=0,$125=0,$126=0;
 var $127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134$0=0,$134$1=0,$135=0,$st$8$0=0,$st$9$1=0,$136=0,$137=0,$138=0,$140=0,$141=0,$142=0,$143=0,$144=0;
 var $145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151$0=0,$151$1=0,$152=0,$st$10$0=0,$st$11$1=0,$153=0,$154=0,$155=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0;
 var $163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$ld$12$0=0,$172$0=0,$ld$13$1=0,$172$1=0,$173=0,$ld$14$0=0,$174$0=0,$ld$15$1=0,$174$1=0,$176=0,$177=0;
 var $178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$st$16$0=0,$st$17$1=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$195=0,$196=0;
 var $197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$ld$18$0=0,$210$0=0,$ld$19$1=0,$210$1=0,$211=0,$ld$20$0=0,$212$0=0;
 var $ld$21$1=0,$212$1=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$st$22$0=0,$st$23$1=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0;
 var $230=0,$231=0,$233=0,$234=0,$235=0,$236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=0,$245=0,$246=0,$247=0,$248=0,$249=0,$250=0;
 var $252=0,$253=0,$254=0,$255=0,$256=0,$257=0,$258=.0,$259=0,$261=0,$262=.0,$263=.0,$264=0,$265=0,$266=0,$267=0,$268=0,$269=0,$270=0,$271=0,$272=0;
 var $274=0,$ld$24$0=0,$275$0=0,$ld$25$1=0,$275$1=0,$276=.0,$277=.0,$278=0,$279=0,$280=0,$281=0,$282=0,$283=0,$284=0,$285=0,$286=0,$288=0,$ld$26$0=0,$289$0=0,$ld$27$1=0;
 var $289$1=0,$290=.0,$291=0,$292=0,$293=.0,$294=.0,$295=0,$296=0,$297=0,$298=0,$299=0,$300=0,$301=0,$302=0,$303=0,$305=0,$306=0,$307=0,$308=0,$309=0;
 var $310=0,$311=0,$312=0,$313=0,$314=0,$316=0,$317=0,$318=0,$319=0,$320=0,$321=0,$322=0,$323=0,$324=0,$325=0,$326=0,$327=0,$328=0,$329=0,$330=0;
 var $331=0,$332=0,$333=0,$335=0,$336=0,$337=0,$338=0,$339=0,$340=0,$341=.0,$342=0,$344=0,$345=.0,$346=.0,$347=0,$348=0,$349=0,$350=0,$351=0,$352=0;
 var $353=0,$354=0,$355=0,$357=0,$ld$28$0=0,$358$0=0,$ld$29$1=0,$358$1=0,$359=.0,$360=.0,$361=0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=0,$368=0,$369=0,$371=0;
 var $ld$30$0=0,$372$0=0,$ld$31$1=0,$372$1=0,$373=.0,$374=0,$375=0,$376=.0,$377=.0,$378=0,$379=0,$380=0,$381=0,$382=0,$383=0,$384=0,$385=0,$386=0,$388=0,$389=0;
 var $390=0,$391=0,$392=0,$393=0,$394=0,$395=0,$396=0,$397=0,$399=0,$400=0,$401=0,$402=0,$403=0,$404=0,$405=0,$406=0,$407=0,$408=0,$409=0,$410=0;
 var $411=0,$412=0,$413=0,$414=0,$415=0,$416=0,$418=0,$419=0,$420=0,$421=0,$422=0,$423=0,$424=.0,$425=0,$427=0,$428=.0,$429=0,$430$0=0,$430$1=0,$431=0;
 var $432=0,$433=0,$434=0,$435=0,$436=0,$437=0,$438=0,$st$32$0=0,$st$33$1=0,$440=0,$ld$34$0=0,$441$0=0,$ld$35$1=0,$441$1=0,$442=.0,$443=0,$444$0=0,$444$1=0,$445=0,$446=0;
 var $447=0,$448=0,$449=0,$450=0,$451=0,$452=0,$st$36$0=0,$st$37$1=0,$454=0,$455=0,$457=0,$458=0,$459=0,$460=0,$461=0,$ld$38$0=0,$462$0=0,$ld$39$1=0,$462$1=0,$464=0;
 var $ld$40$0=0,$465$0=0,$ld$41$1=0,$465$1=0,$466=0,$467$0=0,$467$1=0,$468=0,$469=0,$470=0,$471=0,$472=0,$473=0,$474=0,$475=0,$st$42$0=0,$st$43$1=0,$477=.0,$478=0,$479=0;
 var $480=.0,$481=0,$482$0=0,$482$1=0,$483=0,$484=0,$485=0,$486=0,$487=0,$488=0,$489=0,$490=0,$st$44$0=0,$st$45$1=0,$492=0,$493=0,$495=0,$496=0,$497=0,$498=0;
 var $499=0,$500=0,$501=0,$502=0,$503=0,$504=0,$505=0,$506=0,$507$0=0,$507$1=0,$508=0,$509=0,$510=0,$511=0,$512=0,$513=0,$514=0,$515=0,$st$46$0=0,$st$47$1=0;
 var $517=0,$518=0,$519=0,$520=0,$521=0,$522=0,$523=0,$524=0,$525=0,$526=0,$528=0,$529=0,$530=0,$531=0,$532=0,$533=0,$534=0,$535=0,$536=0,$537=0;
 var $538=0,$539=0,$540=0,$541=0,$542=0,$543=0,$544=0,$545=0,$547=0,$548=0,$549=0,$550=0,$551=0,$552=0,$553=.0,$554=0,$556=0,$557=.0,$558=0,$559$0=0;
 var $559$1=0,$560=0,$561=0,$562=0,$563=0,$564=0,$565=0,$566=0,$567=0,$st$48$0=0,$st$49$1=0,$569=0,$ld$50$0=0,$570$0=0,$ld$51$1=0,$570$1=0,$571=.0,$572=0,$573$0=0,$573$1=0;
 var $574=0,$575=0,$576=0,$577=0,$578=0,$579=0,$580=0,$581=0,$st$52$0=0,$st$53$1=0,$583=0,$584=0,$586=0,$587=0,$588=0,$589=0,$590=0,$ld$54$0=0,$591$0=0,$ld$55$1=0;
 var $591$1=0,$593=0,$ld$56$0=0,$594$0=0,$ld$57$1=0,$594$1=0,$595=0,$596$0=0,$596$1=0,$597=0,$598=0,$599=0,$600=0,$601=0,$602=0,$603=0,$604=0,$st$58$0=0,$st$59$1=0,$606=.0;
 var $607=0,$608=0,$609=.0,$610=0,$611$0=0,$611$1=0,$612=0,$613=0,$614=0,$615=0,$616=0,$617=0,$618=0,$619=0,$st$60$0=0,$st$61$1=0,$621=0,$622=0,$624=0,$625=0;
 var $626=0,$627=0,$628=0,$629=0,$630=0,$631=0,$632=0,$633=0,$634=0,$635=0,$636$0=0,$636$1=0,$637=0,$638=0,$639=0,$640=0,$641=0,$642=0,$643=0,$644=0;
 var $st$62$0=0,$st$63$1=0,$646=0,$647=0,$648=0,$649=0,$650=0,$651=0,$652=0,$653=0,$654=0,$655=0,$657=0,$658=0,$659=0,$660=0,$661=0,$662=0,$663=0,$664=0;
 var $665=0,$666=0,$667=0,$668=0,$669=0,$670=0,$671=0,$672=0,$673=0,$674=0,$676=0,$677=0,$678=0,$679=0,$680=0,$681=0,$682=.0,$683=0,$685=0,$686=.0;
 var $687=0,$688$0=0,$688$1=0,$689=0,$690=0,$691=0,$692=0,$693=0,$694=0,$695=0,$696=0,$st$64$0=0,$st$65$1=0,$698=0,$ld$66$0=0,$699$0=0,$ld$67$1=0,$699$1=0,$700=.0,$701=0;
 var $702$0=0,$702$1=0,$703=0,$704=0,$705=0,$706=0,$707=0,$708=0,$709=0,$710=0,$st$68$0=0,$st$69$1=0,$712=0,$713=0,$715=0,$716=0,$717=0,$718=0,$719=0,$ld$70$0=0;
 var $720$0=0,$ld$71$1=0,$720$1=0,$722=0,$ld$72$0=0,$723$0=0,$ld$73$1=0,$723$1=0,$724=0,$725$0=0,$725$1=0,$726=0,$727=0,$728=0,$729=0,$730=0,$731=0,$732=0,$733=0,$st$74$0=0;
 var $st$75$1=0,$735=.0,$736=0,$737=0,$738=.0,$739=0,$740$0=0,$740$1=0,$741=0,$742=0,$743=0,$744=0,$745=0,$746=0,$747=0,$748=0,$st$76$0=0,$st$77$1=0,$750=0,$751=0;
 var $753=0,$754=0,$755=0,$756=0,$757=0,$758=0,$759=0,$760=0,$761=0,$762=0,$763=0,$764=0,$765$0=0,$765$1=0,$766=0,$767=0,$768=0,$769=0,$770=0,$771=0;
 var $772=0,$773=0,$st$78$0=0,$st$79$1=0,$775=0,$776=0,$777$0=0,$777$1=0,$778=0,$779=0,$780=0,$781=0,$782=0,$783=0,$784=0,$785=0,$st$80$0=0,$st$81$1=0,$787=0,$788=0;
 var $789=0,$790=0,$791=0,$792=0,$793=0,$794=0,$795=0,$796=0,$798=0,$799=0,$800=0,$801=0,$802=0,$803=0,$804=0,$805=0,$806=0,$807=0,$808=0,$809=0;
 var $810=0,$811=0,$812=0,$813=0,$814=0,$815=0,$817=0,$818=0,$819=0,$820=0,$821=0,$822=0,$823=.0,$824=0,$826=0,$827=.0,$828=0,$829$0=0,$829$1=0,$830=0;
 var $831=0,$832=0,$833=0,$834=0,$835=0,$836=0,$837=0,$st$82$0=0,$st$83$1=0,$839=0,$ld$84$0=0,$840$0=0,$ld$85$1=0,$840$1=0,$841=.0,$842=0,$843$0=0,$843$1=0,$844=0,$845=0;
 var $846=0,$847=0,$848=0,$849=0,$850=0,$851=0,$st$86$0=0,$st$87$1=0,$853=0,$854=0,$856=0,$857=0,$858=0,$859=0,$860=0,$ld$88$0=0,$861$0=0,$ld$89$1=0,$861$1=0,$863=0;
 var $ld$90$0=0,$864$0=0,$ld$91$1=0,$864$1=0,$865=0,$866$0=0,$866$1=0,$867=0,$868=0,$869=0,$870=0,$871=0,$872=0,$873=0,$874=0,$st$92$0=0,$st$93$1=0,$876=.0,$877=0,$878=0;
 var $879=.0,$880=0,$881$0=0,$881$1=0,$882=0,$883=0,$884=0,$885=0,$886=0,$887=0,$888=0,$889=0,$st$94$0=0,$st$95$1=0,$891=0,$892=0,$894=0,$895=0,$896=0,$897=0;
 var $898=0,$899=0,$900=0,$901=0,$902=0,$903=0,$904=0,$905=0,$906$0=0,$906$1=0,$907=0,$908=0,$909=0,$910=0,$911=0,$912=0,$913=0,$914=0,$st$96$0=0,$st$97$1=0;
 var $916=0,$917=0,$918=0,$919=0,$920=0,$921=0,$922=0,$923=0,$924=0,$925=0,$927=0,$928=0,$929=0,$930=0,$931=0,$932=0,$933=0,$934=0,$935=0,$936=0;
 var $937=0,$938=0,$939=0,$940=0,$941=0,$942=0,$943=0,$944=0,$946=0,$947=0,$948=0,$949=0,$950=0,$951=0,$952=.0,$953=0,$955=0,$956=.0,$957=0,$958$0=0;
 var $958$1=0,$959=0,$960=0,$961=0,$962=0,$963=0,$964=0,$965=0,$966=0,$st$98$0=0,$st$99$1=0,$968=0,$ld$100$0=0,$969$0=0,$ld$101$1=0,$969$1=0,$970=.0,$971=0,$972$0=0,$972$1=0;
 var $973=0,$974=0,$975=0,$976=0,$977=0,$978=0,$979=0,$980=0,$st$102$0=0,$st$103$1=0,$982=0,$983=0,$985=0,$986=0,$987=0,$988=0,$989=0,$ld$104$0=0,$990$0=0,$ld$105$1=0;
 var $990$1=0,$992=0,$ld$106$0=0,$993$0=0,$ld$107$1=0,$993$1=0,$994=0,$995$0=0,$995$1=0,$996=0,$997=0,$998=0,$999=0,$1000=0,$1001=0,$1002=0,$1003=0,$st$108$0=0,$st$109$1=0,$1005=.0;
 var $1006=0,$1007=0,$1008=.0,$1009=0,$1010$0=0,$1010$1=0,$1011=0,$1012=0,$1013=0,$1014=0,$1015=0,$1016=0,$1017=0,$1018=0,$st$110$0=0,$st$111$1=0,$1020=0,$1021=0,$1023=0,$1024=0;
 var $1025=0,$1026=0,$1027=0,$1028=0,$1029=0,$1030=0,$1031=0,$1032=0,$1033=0,$_lobit=0,$_lobit_not=0,$1034$0=0,$1034$1=0,$1035=0,$1036=0,$1037=0,$1038=0,$1039=0,$1040=0,$1041=0;
 var $1042=0,$st$112$0=0,$st$113$1=0,$1044=0,$1045=0,$1046=0,$1047=0,$1048=0,$1049=0,$1050=0,$1051=0,$1052=0,$1053=0,$1055=0,$1056=0,$1057=0,$1058=0,$1059=0,$1060=0,$1061=0;
 var $1062=0,$1063=0,$1064=0,$1065=0,$1066=0,$1067=0,$1068=0,$1069=0,$1070=0,$1071=0,$1072=0,$1074=0,$1075=0,$1076=0,$1077=0,$1078=0,$1079=0,$1080=.0,$1081=0,$1083=0;
 var $1084=.0,$1085=0,$1086$0=0,$1086$1=0,$1087=0,$1088=0,$1089=0,$1090=0,$1091=0,$1092=0,$1093=0,$1094=0,$st$114$0=0,$st$115$1=0,$1096=0,$ld$116$0=0,$1097$0=0,$ld$117$1=0,$1097$1=0,$1098=.0;
 var $1099=0,$1100$0=0,$1100$1=0,$1101=0,$1102=0,$1103=0,$1104=0,$1105=0,$1106=0,$1107=0,$1108=0,$st$118$0=0,$st$119$1=0,$1110=0,$1111=0,$1113=0,$1114=0,$1115=0,$1116=0,$1117=0;
 var $ld$120$0=0,$1118$0=0,$ld$121$1=0,$1118$1=0,$1120=0,$ld$122$0=0,$1121$0=0,$ld$123$1=0,$1121$1=0,$1122=0,$1123$0=0,$1123$1=0,$1124=0,$1125=0,$1126=0,$1127=0,$1128=0,$1129=0,$1130=0,$1131=0;
 var $st$124$0=0,$st$125$1=0,$1133=.0,$1134=0,$1135=0,$1136=.0,$1137=0,$1138$0=0,$1138$1=0,$1139=0,$1140=0,$1141=0,$1142=0,$1143=0,$1144=0,$1145=0,$1146=0,$st$126$0=0,$st$127$1=0,$1148=0;
 var $1149=0,$1151=0,$1152=0,$1153=0,$1154=0,$1155=0,$1156=0,$1157=0,$1158=0,$1159=0,$1160=0,$1161=0,$1162=0,$1163$0=0,$1163$1=0,$1164=0,$1165=0,$1166=0,$1167=0,$1168=0;
 var $1169=0,$1170=0,$1171=0,$st$128$0=0,$st$129$1=0,$1173=0,$1174=0,$1175$0=0,$1175$1=0,$1176=0,$1177=0,$1178=0,$1179=0,$1180=0,$1181=0,$1182=0,$1183=0,$st$130$0=0,$st$131$1=0,$1185=0;
 var $1186=0,$1187=0,$1188=0,$1189=0,$1190=0,$1191=0,$1192=0,$1193=0,$1194=0,$1196=0,$1197=0,$1198=0,$1199=0,$1200=0,$1202=0,$1203=0,$1204=0,$1205=0,$1206=0,$1207=0;
 var $1208=0,$1209=0,$1210=0,$1211=0,$1212=0,$1213=0,$1214=0,$1215=0,$1216=0,$ld$132$0=0,$1217$0=0,$ld$133$1=0,$1217$1=0,$1218=0,$ld$134$0=0,$1219$0=0,$ld$135$1=0,$1219$1=0,$1221=0,$1222=0;
 var $1223=0,$1224=0,$1225=0,$1226=0,$1227=0,$1228=0,$st$136$0=0,$st$137$1=0,$1229=0,$1230=0,$1231=0,$1232=0,$1233=0,$1234=0,$1235=0,$1236=0,$1237=0,$1238=0,$1240=0,$1241=0;
 var $1242=0,$1243=0,$1244=0,$1245=0,$1246=0,$1247=0,$1248=0,$1249=0,$1250=0,$1251=0,$1252=0,$1253=0,$1254=0,$1255=0,$1256=0,$1257=0,$1259=0,$1260=0,$1261=0,$1262=0;
 var $1263=0,$1264=0,$1265=.0,$1266=0,$1268=0,$1269=.0,$1270=.0,$1271=0,$1272=0,$1273=0,$1274=0,$1275=0,$1276=0,$1277=0,$1278=0,$1279=0,$1281=0,$ld$138$0=0,$1282$0=0,$ld$139$1=0;
 var $1282$1=0,$1283=.0,$1284=.0,$1285=0,$1286=0,$1287=0,$1288=0,$1289=0,$1290=0,$1291=0,$1292=0,$1293=0,$1295=0,$ld$140$0=0,$1296$0=0,$ld$141$1=0,$1296$1=0,$1297=.0,$1298=0,$1299=0;
 var $1300=.0,$1301=.0,$1302=0,$1303=0,$1304=0,$1305=0,$1306=0,$1307=0,$1308=0,$1309=0,$1310=0,$1312=0,$1313=0,$1314=0,$1315=0,$1316=0,$1317=0,$1318=0,$1319=0,$1320=0;
 var $1321=0,$1323=0,$1324=0,$1325=0,$1326=0,$1327=0,$1328=0,$1329=0,$1330=0,$ld$142$0=0,$1331$0=0,$ld$143$1=0,$1331$1=0,$$etemp$144$0=0,$$etemp$144$1=0,$1332=0,$1335=0,$1336=0,$1337=0,$1338=0;
 var $1339=0,$1340=0,$1341=0,$1342=0,$1343=0,$1344=0,$1345=0,$1346=0,$1347=0,$1348=0,$1349=0,$ld$145$0=0,$1350$0=0,$ld$146$1=0,$1350$1=0,$1351=0,$ld$147$0=0,$1352$0=0,$ld$148$1=0,$1352$1=0;
 var $1354=0,$1355=0,$1356=0,$1357=0,$1358=0,$1359=0,$1360=0,$1361=0,$st$149$0=0,$st$150$1=0,$1362=0,$1363=0,$1364=0,$1365=0,$1366=0,$1367=0,$1368=0,$1369=0,$1370=0,$1371=0;
 var $1373=0,$1374=0,$1375=0,$1376=0,$1377=0,$1378=0,$1379=0,$1380=0,$ld$151$0=0,$1381$0=0,$ld$152$1=0,$1381$1=0,$$etemp$153$0=0,$$etemp$153$1=0,$1382=0,$1385=0,$1386=0,$1387=0,$1388=0,$1389=0;
 var $1390=0,$1391=0,$1392=0,$1393=0,$1394=0,$1395=0,$1396=0,$1397=0,$1398=0,$1399=0,$ld$154$0=0,$1400$0=0,$ld$155$1=0,$1400$1=0,$1401=0,$ld$156$0=0,$1402$0=0,$ld$157$1=0,$1402$1=0,$1404=0;
 var $1405=0,$1406=0,$1407=0,$1408=0,$1409=0,$1410=0,$1411=0,$st$158$0=0,$st$159$1=0,$1412=0,$1413=0,$1414=0,$1415=0,$1416=0,$1417=0,$1418=0,$1419=0,$1420=0,$1421=0,$1423=0;
 var $1424=0,$1425=0,$1426=0,$1427=0,$1428=0,$1429=0,$1430=0,$1431=0,$1432=0,$1433=0,$1434=0,$1435=0,$1436=0,$1437=0,$ld$160$0=0,$1438$0=0,$ld$161$1=0,$1438$1=0,$1439=0,$ld$162$0=0;
 var $1440$0=0,$ld$163$1=0,$1440$1=0,$1442=0,$1443=0,$1444=0,$1445=0,$1446=0,$1447=0,$1448=0,$1449=0,$st$164$0=0,$st$165$1=0,$1450=0,$1451=0,$1452=0,$1453=0,$1454=0,$1455=0,$1456=0;
 var $1457=0,$1458=0,$1459=0,$1461=0,$1462=0,$1463=0,$1464=0,$1465=0,$1466=0,$1467=0,$1468=0,$1469=0,$1470=0,$1471=0,$1472=0,$1473=0,$1474=0,$1475=0,$ld$166$0=0,$1476$0=0;
 var $ld$167$1=0,$1476$1=0,$1477=0,$ld$168$0=0,$1478$0=0,$ld$169$1=0,$1478$1=0,$1480=0,$1481=0,$1482=0,$1483=0,$1484=0,$1485=0,$1486=0,$1487=0,$st$170$0=0,$st$171$1=0,$1488=0,$1489=0,$1490=0;
 var $1491=0,$1492=0,$1493=0,$1494=0,$1495=0,$1496=0,$1497=0,$1499=0,$1500=0,$1501=0,$1502=0,$1503=0,$1504=0,$1505=0,$1506=0,$1507=0,$1508=0,$1509=0,$1510=0,$1511=0;
 var $1512=0,$1513=0,$ld$172$0=0,$1514$0=0,$ld$173$1=0,$1514$1=0,$1515=0,$ld$174$0=0,$1516$0=0,$ld$175$1=0,$1516$1=0,$1517$0=0,$1517$1=0,$1518=0,$1519=0,$1520=0,$1521=0,$1522=0,$1523=0,$1524=0;
 var $1525=0,$st$176$0=0,$st$177$1=0,$1526=0,$1527=0,$1528=0,$1529=0,$1530=0,$1531=0,$1532=0,$1533=0,$1534=0,$1535=0,$1537=0,$1538=0,$1539=0,$1540=0,$1541=0,$1542=0,$1543=0;
 var $1544=0,$1545=0,$1546=0,$1547=0,$1548=0,$1549=0,$1550=0,$1551=0,$ld$178$0=0,$1552$0=0,$ld$179$1=0,$1552$1=0,$1553=0,$ld$180$0=0,$1554$0=0,$ld$181$1=0,$1554$1=0,$1555$0=0,$1555$1=0,$1556=0;
 var $1557=0,$1558=0,$1559=0,$1560=0,$1561=0,$1562=0,$1563=0,$st$182$0=0,$st$183$1=0,$1564=0,$1565=0,$1566=0,$1567=0,$1568=0,$1569=0,$1570=0,$1571=0,$1572=0,$1573=0,$1575=0;
 var $1576=0,$1577=0,$1578=0,$1579=0,$1580=0,$1581=0,$1582=0,$1583=0,$1584=0,$1585=0,$1586=0,$1587=0,$1588=0,$1589=0,$ld$184$0=0,$1590$0=0,$ld$185$1=0,$1590$1=0,$1591=0,$ld$186$0=0;
 var $1592$0=0,$ld$187$1=0,$1592$1=0,$1593$0=0,$1593$1=0,$1594=0,$1595=0,$1596=0,$1597=0,$1598=0,$1599=0,$1600=0,$1601=0,$st$188$0=0,$st$189$1=0,$1602=0,$1603=0,$1604=0,$1605=0,$1606=0;
 var $1607=0,$1608=0,$1609=0,$1610=0,$1611=0,$1613=0,$1614=0,$1615=0,$1616=0,$1617=0,$1618=0,$1619=0,$1620=0,$1621=0,$1622=0,$1623=0,$1625=0,$ld$190$0=0,$1626$0=0,$ld$191$1=0;
 var $1626$1=0,$$etemp$192$0=0,$$etemp$192$1=0,$1627=0,$1630=0,$1631=0,$1632=0,$1634=0,$1635=0,$1636=.0,$1637=0,$1640=0,$1641=0,$1642=0,$1643=0,$1644=0,$1645=0,$1646=0,$1647=0,$1648=0;
 var $1649=0,$1650=0,$1651=0,$1652=0,$1653=0,$1654=0,$1655=0,$1656=0,$1657=0,$1659=0,$1660=0,$1661=0,$1662=0,$1663=0,$1664=0,$1665=.0,$1666=0,$1668=0,$1669=.0,$1670=.0;
 var $1671=0,$1672=0,$1673=0,$1674=0,$1675=0,$1676=0,$1677=0,$1678=0,$1679=0,$1681=0,$ld$193$0=0,$1682$0=0,$ld$194$1=0,$1682$1=0,$1683=.0,$1684=.0,$1685=0,$1686=0,$1687=0,$1688=0;
 var $1689=0,$1690=0,$1691=0,$1692=0,$1693=0,$1695=0,$ld$195$0=0,$1696$0=0,$ld$196$1=0,$1696$1=0,$1697=.0,$1698=0,$1699=0,$1700=.0,$1701=.0,$1702=0,$1703=0,$1704=0,$1705=0,$1706=0;
 var $1707=0,$1708=0,$1709=0,$1710=0,$1712=0,$1713=0,$1714=0,$1715=0,$1716=0,$1717=0,$1718=0,$1719=0,$1720=0,$1721=0,$1723=0,$1724=0,$1725=0,$1726=0,$1727=0,$1728=0;
 var $1729=0,$1730=0,$1731=0,$1732=0,$1733=0,$1735=0,$ld$197$0=0,$1736$0=0,$ld$198$1=0,$1736$1=0,$$etemp$199$0=0,$$etemp$199$1=0,$1737=0,$1738=0,$1740=0,$1741=0,$1743=0,$1744=0,$1745=0,$1746=0;
 var $1747=0,$1748=0,$1749=0,$1751=0,$1752=0,$1754=0,$1755=0,$1756=0,$1757=0,$1758=0,$1759=0,$1760=0,$result_0=0,$1762=0,$1763=0,$1764=0,$1765=0,$1766=0,$1767=0,$1768=0;
 var $1770=0,$1771=0,$1772=0,$1773=0,$1775=0,$1777=0,$1778=0,$1779=0,$1780=0,$1781=0,$1782=0,$1783=0,$1784=0,$1785=0,$1786=0,$1787=0,$fval_0=0,$1789=0,$1790=0,$1791=0;
 var $1793=0,$1794=0,$1798=0,$1799=0,$1800=0,$1801=0,$1802=0,$1803=0,$1804=0,$1805=0,$1806=0,$1807=0,$1808=0,$1809=0,$1810=0,$1811=0,$1812=0,$1813=0,$1814=0,$1815=0;
 var $1816=0,$1817=0,$1818=0,$1819=0,$1820=0,$1821=0,$1822=0,$1823=0,$1824=0,$1825=0,$1826=0,$1827=0,$_sum=0,$1828=0,$1829=0,$1830=0,$1832=0,$1833=0,$offset_max_registers_1=0,$vm_regs_2=0;
 var $regs_from_main_2=0,$1835=0,$1836=0,$1837=0,$1838=0,$1839=0,$1840=0,$1841=0,$1842=0,$1843=0,$1845=0,$1846=0,$1847=0,$1848=0,$1849=0,$1850=0,$1851=0,$1852=0,$1853=0,$1854=0;
 var $1855=0,$fval_1=0,$1857=0,$1858=0,$1859=0,$1861=0,$1862=0,$1866=0,$1867=0,$1868=0,$1869=0,$1870=0,$1871=0,$1872=0,$1873=0,$1874=0,$1875=0,$1876=0,$1877=0,$1878=0;
 var $1879=0,$1880=0,$1881=0,$1882=0,$1883=0,$1884=0,$1885=0,$1886=0,$1888=0,$1889=0,$1890=0,$offset_max_registers_2=0,$vm_regs_3=0,$regs_from_main_3=0,$1892=0,$1893=0,$1894=0,$1895=0,$1896=0,$1897=0;
 var $1898=0,$1899=0,$1900=0,$1901=0,$1902=0,$1903=0,$1904=0,$1905=0,$1906=0,$1907=0,$1908=0,$1909=0,$1910=0,$1911=0,$1912=0,$1913=0,$1914=0,$1915=0,$1916=0,$1917=0;
 var $1919=0,$1920=0,$1921=0,$1922=0,$1923=0,$1924=0,$1925=0,$1926=0,$1927=0,$1928=0,$1929=0,$1930=0,$1931=0,$1933=0,$1934=0,$1935=0,$1936=0,$1937=0,$1938=0,$1939=0;
 var $1940=0,$1941=0,$1942=0,$1944=0,$1945=0,$1946=0,$1947=0,$1948=0,$1949=0,$1950=0,$1951=0,$1952=0,$1953=0,$1954=0,$1955=0,$1956=0,$1957=0,$1958=0,$1959=0,$1960=0;
 var $1961=0,$ld$200$0=0,$1962$0=0,$ld$201$1=0,$1962$1=0,$$etemp$202$0=0,$$etemp$202$1=0,$1963=0,$1964$0=0,$1964$1=0,$1965=0,$st$203$0=0,$st$204$1=0,$1966=0,$1967=0,$1969=0,$1970=0,$1971=0,$1972=0,$1973=0;
 var $1974=0,$1975=0,$1976=0,$1977=0,$1978=0,$1979=0,$1980=0,$1981=0,$1982=0,$1983=0,$1984=0,$ld$205$0=0,$1985$0=0,$ld$206$1=0,$1985$1=0,$$etemp$207$0=0,$$etemp$207$1=0,$1987=0,$st$208$0=0,$st$209$1=0;
 var $1988=0,$1989=0,$1991=0,$1992=0,$1993=0,$1994=0,$1995=0,$1996=0,$1997=0,$1998=0,$1999=0,$2000=0,$2001=0,$2003=0,$2004=0,$2005=0,$2006=0,$2007=0,$2008=0,$2009=0;
 var $2010=0,$2011=0,$2012=0,$2013=0,$2014=0,$2015=0,$2016=0,$2017=0,$2018=0,$2019=0,$2020=0,$2021=0,$2022=0,$2024=0,$2025=0,$2026=0,$2027=0,$2028=0,$2029=0,$2030=0;
 var $2031=0,$2032=0,$2033=0,$2034=0,$2035=0,$2036=0,$2037=0,$2038=0,$2039=0,$2041=0,$2042=0,$2043=0,$2044=0,$2045=0,$2046=0,$2047=0,$2048=0,$2049=0,$2050=0,$2051=0;
 var $2052=0,$2053=0,$2054=0,$2055=0,$2056=0,$2058=0,$2059=0,$2060=0,$2061=0,$2062=0,$2063=0,$2064=0,$2065=0,$2066=0,$2067=0,$2068=0,$2069=0,$2070=0,$2071=0,$2072=0;
 var $2073=0,$2075=0,$2076=0,$2077=0,$2079=0,$2080=0,$2081=0,$2083=0,$2084=0,$2085=0,$2087=0,$2088=0,$2089=0,$2091=0,$2092=0,$2093=0,$2094=0,$2095=0,$2096=0,$2097=0;
 var $2098=0,$2099=0,$2101=0,$2102=0,$2103=0,$2104=0,$2105=0,$2106=0,$2107=0,$2108=0,$2109=0,$2110=0,$2112=0,$2113=0,$2114=0,$2115=0,$2116=0,$2117=0,$2118=0,$2119=0;
 var $2120=0,$2121=0,$2123=0,$2124=0,$2125=0,$2126=0,$2128=0,$2129=0,$2130=0,$2131=0,$2133=0,$2134=0,$2135=0,$2136=0,$2137=0,$2138=0,$2139=0,$2140=0,$2141=0,$2142=0;
 var $2143=0,$2144=0,$2145=0,$2146=0,$2147=0,$2149=0,$2150=0,$2151=0,$2152=0,$2153=0,$2154=0,$2155=0,$2158=0,$2159=0,$2161=0,$2162=0,$2163=0,$2164=0,$2165=0,$2166=0;
 var $2167=0,$2168=0,$2169=0,$2170=0,$2171=0,$2172=0,$2173=0,$2174=0,$2175=0,$2176=0,$2178=0,$2179=0,$2180=0,$2182=0,$2183=0,$2184=0,$2185=0,$2186=0,$2187=0,$2188=0;
 var $2189=0,$2190=0,$2191=0,$2192=0,$2193=0,$2194=0,$2195=0,$2196=0,$2197=0,$2198=0,$2199=0,$2200=0,$2201=0,$2202=0,$2203=0,$ld$210$0=0,$2204$0=0,$ld$211$1=0,$2204$1=0,$2205=0;
 var $ld$212$0=0,$2206$0=0,$ld$213$1=0,$2206$1=0,$$etemp$214$0=0,$$etemp$214$1=0,$2208=0,$2209=0,$ld$215$0=0,$2210$0=0,$ld$216$1=0,$2210$1=0,$2212=0,$2214=0,$2216=0,$2217=0,$2218=0,$2219=0,$2220=0,$2221=0;
 var $2222=0,$2223=0,$st$217$0=0,$st$218$1=0,$st$219$0=0,$st$220$1=0,$2224=0,$2225=0,$2227=0,$2228=0,$2229=0,$2230=0,$2231=0,$2233=0,$2234=0,$2235=0,$2236=0,$2239=0,$2240=0,$2241=0;
 var $2242=0,$2243=0,$2244=0,$2245=0,$2246=0,$2247=0,$2248=0,$2249=0,$2250=0,$2251=0,$2252=0,$2253=0,$2254=0,$2255=0,$2256=0,$2257=0,$2258=0,$2259=0,$2260=0,$2261=0;
 var $2262=0,$2263=0,$2265=0,$2266=0,$2267=0,$2268=0,$2269=0,$2271=0,$2272=0,$2273=0,$2274=0,$2275=0,$2276=0,$2277=0,$2278=0,$2279=0,$2281=0,$2282=0,$2283=0,$2284=0;
 var $2286=0,$2287=0,$2288=0,$2289=0,$2290=0,$2291=0,$2292=0,$2293=0,$2294=0,$2295=0,$2296=0,$2297=0,$2298=0,$2299=0,$2300=0,$2301=0,$2302=0,$2303=0,$2304=0,$2306=0;
 var $2307=0,$2308=0,$2309=0,$2310=0,$2311=0,$2312=0,$2313=0,$2314=0,$2315=0,$2316=0,$2317=0,$2318=0,$2319=0,$2320=0,$2321=0,$2322=0,$i_01=0,$2323=0,$2324=0,$2325=0;
 var $2326=0,$2327=0,$2328=0,$2329=0,$2330=0,$2331=0,$2332=0,$2333=0,$2334=0,$2335=0,$2336=0,$2337=0,$2338=0,$2339=0,$phitmp=0,$i_0_lcssa=0,$2341=0,$2342=0,$2344=0,$2345=0;
 var $2346=0,$2347=0,$2348=0,$2350=0,$2351=0,$2352=0,$2353=0,$2355=0,$2356=0,$2357=0,$2358=0,$2359=0,$2360=0,$2361=0,$2362=0,$2363=0,$2365=0,$2366=0,$2367=0,$2368=0;
 var $2369=0,$2370=0,$2371=0,$2372=0,$2373=0,$2374=0,$2375=0,$2376=0,$2377=0,$2378=0,$2379=0,$2380=0,$2381=0,$2382=0,$2383=0,$2384=0,$2385=0,$2386=0,$2387=0,$ld$221$0=0;
 var $2388$0=0,$ld$222$1=0,$2388$1=0,$$etemp$223$0=0,$$etemp$223$1=0,$2389=0,$2392=0,$ld$224$0=0,$2393$0=0,$ld$225$1=0,$2393$1=0,$ld$226$0=0,$2394$0=0,$ld$227$1=0,$2394$1=0,$2396=0,$st$228$0=0,$st$229$1=0,$2397=0,$2398=0;
 var $2399=0,$2401=0,$175$0=0,$175$1=0,$213$0=0,$213$1=0,$1220$0=0,$1220$1=0,$1353$0=0,$1353$1=0,$1403$0=0,$1403$1=0,$1441$0=0,$1441$1=0,$1479$0=0,$1479$1=0,$1986$0=0,$1986$1=0,$2207$0=0,$2207$1=0;
 var $2395$0=0,$2395$1=0,label=0,setjmpLabel=0,setjmpTable=0;
 var sp=0;sp=STACKTOP;
 label = 1; 
setjmpLabel=0;
setjmpTable=STACKTOP;STACKTOP = (STACKTOP + 168)|0;
HEAP32[((setjmpTable)>>2)]=0; while(1)switch(((label)|0)){
 case 1: 

 $1=(($vm+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+28)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($vm)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($vm+4)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($vm+8)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $code_pos=0;
 $13=(($vm+96)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((invoke_ii(2,(($14)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $16=(($15+8)|0);
 $17=_saveSetjmp((($16)|0), label, setjmpTable)|0;
 label=198;break;
 case 198: 
 $18=($17|0)==0;
 if($18){$code_0=$6;$regs_from_main_0=$10;$vm_regs_0=$8;$current_frame_0=$2;$upvalues_0=0;label=7;break;}else{label=2;break;}
 case 2: 
 $20=((HEAP32[(($3)>>2)])|0);
 $21=(($20+28)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($22|0)==0;
 if($23){label=4;break;}else{label=3;break;}
 case 3: 
 $25=$code_pos;
 $26=((($25)+(1))|0);
 $27=(($2+12)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($28+($26<<1))|0);
 $30=((HEAP16[(($29)>>1)])|0);
 $31=($30&65535);
 $32=(($2+20)|0);
 HEAP32[(($32)>>2)]=$31;
 label=4;break;
 case 4: 
 $34=((invoke_ii(4,(($vm)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $35=($34|0)==0;
 if($35){label=5;break;}else{label=6;break;}
 case 5: 
 $37=((HEAP32[(($13)>>2)])|0);
 invoke_vi(12,(($37)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $code_0=$6;$regs_from_main_0=$10;$vm_regs_0=$8;$current_frame_0=$2;$upvalues_0=0;label=7;break;
 case 6: 
 $39=((HEAP32[(($1)>>2)])|0);
 $40=(($39+12)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=(($39+16)|0);
 $43=((HEAP32[(($42)>>2)])|0);
 $code_pos=$43;
 $44=(($39+28)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=((HEAP32[(($9)>>2)])|0);
 $47=((HEAP32[(($7)>>2)])|0);
 $48=$47;
 $49=$46;
 $50=((($48)-($49))|0);
 $51=$50>>2;
 $52=(($39+8)|0);
 $53=((HEAP32[(($52)>>2)])|0);
 $54=((($51)+($53))|0);
 $55=(($vm+12)|0);
 HEAP32[(($55)>>2)]=$54;
 $code_0=$41;$regs_from_main_0=$46;$vm_regs_0=$47;$current_frame_0=$39;$upvalues_0=$45;label=7;break;
 case 7: 





 $57=(($vm+12)|0);
 $58=((HEAP32[(($57)>>2)])|0);
 $59=(($vm+28)|0);
 $60=(($vm+28)|0);
 $61=(($vm+20)|0);
 $62=(($vm+20)|0);
 $63=(($vm+28)|0);
 $64=(($vm+20)|0);
 $65=(($vm+20)|0);
 $66=(($vm+20)|0);
 $67=(($vm+72)|0);
 $68=(($vm+20)|0);
 $69=(($vm+84)|0);
 $70=(($vm+72)|0);
 $code_1=$code_0;$regs_from_main_1=$regs_from_main_0;$vm_regs_1=$vm_regs_0;$num_registers_0=$58;$offset_max_registers_0=$12;$current_frame_1=$current_frame_0;$upvalues_1=$upvalues_0;label=8;break;
 case 8: 







 $71=$code_pos;
 $72=(($code_1+($71<<1))|0);
 $73=((HEAP16[(($72)>>1)])|0);
 $74=($73&65535);
 switch(($74|0)){case 42:{ label=10;break;}case 6:{ label=103;break;}case 4:{ label=106;break;}case 7:{ label=109;break;}case 43:{ label=11;break;}case 8:{ label=110;break;}case 9:{ label=111;break;}case 10:{ label=112;break;}case 11:{ label=113;break;}case 15:{ label=114;break;}case 44:{ label=12;break;}case 23:{ label=126;break;}case 2:{ label=13;break;}case 24:{ label=135;break;}case 3:{ label=14;break;}case 25:{ label=143;break;}case 12:{ label=15;break;}case 26:{ label=151;break;}case 64:{ label=152;break;}case 29:{ label=153;break;}case 30:{ label=154;break;}case 27:{ label=155;break;}case 28:{ label=156;break;}case 40:{ label=157;break;}case 41:{ label=158;break;}case 1:{ label=159;break;}case 38:{ label=160;break;}case 45:{ label=161;break;}case 39:{ label=162;break;}case 46:{ label=163;break;}case 33:{ label=164;break;}case 31:case 32:{ label=165;break;}case 34:{ label=166;break;}case 35:{ label=167;break;}case 61:{ label=168;break;}case 59:{ label=169;break;}case 58:{ label=173;break;}case 55:{ label=174;break;}case 36:{ label=175;break;}case 47:{ label=180;break;}case 48:{ label=183;break;}case 51:{ label=184;break;}case 52:case 53:case 54:{ label=185;break;}case 56:{ label=186;break;}case 57:{ label=187;break;}case 60:{ label=191;break;}case 62:{ label=192;break;}case 63:{ label=193;break;}case 37:{ label=194;break;}case 65:{ label=197;break;}case 13:{ label=21;break;}case 18:{ label=27;break;}case 19:{ label=38;break;}case 16:{ label=49;break;}case 20:{ label=61;break;}case 21:{ label=72;break;}case 17:{ label=83;break;}case 0:{ label=9;break;}case 22:{ label=95;break;}case 5:{ label=96;break;}case 14:{ label=97;break;}default:{$code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;}}break;
 case 9: 
 $76=$code_pos;
 $77=((($76)+(2))|0);
 $78=(($code_1+($77<<1))|0);
 $79=((HEAP16[(($78)>>1)])|0);
 $80=($79&65535);
 $81=(($vm_regs_1+($80<<2))|0);
 $82=((HEAP32[(($81)>>2)])|0);
 $83=$code_pos;
 $84=((($83)+(3))|0);
 $85=(($code_1+($84<<1))|0);
 $86=((HEAP16[(($85)>>1)])|0);
 $87=($86&65535);
 $88=(($vm_regs_1+($87<<2))|0);
 $89=((HEAP32[(($88)>>2)])|0);
 $90=(($82)|0);
 $91=((HEAP32[(($90)>>2)])|0);
 $92=(($89)|0);
 HEAP32[(($92)>>2)]=$91;
 $93=(($82+8)|0);
 $ld$0$0=(($93)|0);
 $94$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($93+4)|0);
 $94$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $95=(($89+8)|0);
 $st$2$0=(($95)|0);
 HEAP32[(($st$2$0)>>2)]=$94$0;
 $st$3$1=(($95+4)|0);
 HEAP32[(($st$3$1)>>2)]=$94$1;
 $96=$code_pos;
 $97=((($96)+(4))|0);
 $code_pos=$97;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 10: 
 $99=$code_pos;
 $100=((($99)+(2))|0);
 $101=(($code_1+($100<<1))|0);
 $102=((HEAP16[(($101)>>1)])|0);
 $103=($102&65535);
 $104=((HEAP32[(($59)>>2)])|0);
 $105=(($104+($103<<2))|0);
 $106=((HEAP32[(($105)>>2)])|0);
 $107=$code_pos;
 $108=((($107)+(3))|0);
 $109=(($code_1+($108<<1))|0);
 $110=((HEAP16[(($109)>>1)])|0);
 $111=($110&65535);
 $112=(($vm_regs_1+($111<<2))|0);
 $113=((HEAP32[(($112)>>2)])|0);
 invoke_vi(6,(($113)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $114=(($106+24)|0);
 $ld$4$0=(($114)|0);
 $115$0=((HEAP32[(($ld$4$0)>>2)])|0);
 $ld$5$1=(($114+4)|0);
 $115$1=((HEAP32[(($ld$5$1)>>2)])|0);
 $116=(($113+8)|0);
 $st$6$0=(($116)|0);
 HEAP32[(($st$6$0)>>2)]=$115$0;
 $st$7$1=(($116+4)|0);
 HEAP32[(($st$7$1)>>2)]=$115$1;
 $117=(($106+20)|0);
 $118=((HEAP32[(($117)>>2)])|0);
 $119=(($113)|0);
 HEAP32[(($119)>>2)]=$118;
 $120=$code_pos;
 $121=((($120)+(4))|0);
 $code_pos=$121;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 11: 
 $123=$code_pos;
 $124=((($123)+(3))|0);
 $125=(($code_1+($124<<1))|0);
 $126=((HEAP16[(($125)>>1)])|0);
 $127=($126&65535);
 $128=(($vm_regs_1+($127<<2))|0);
 $129=((HEAP32[(($128)>>2)])|0);
 $130=$code_pos;
 $131=((($130)+(2))|0);
 $132=(($code_1+($131<<1))|0);
 $133=((HEAP16[(($132)>>1)])|0);
 $134$0=(($133<<16)>>16);
 $134$1=(((((($133<<16)>>16)<0))|0)?-1:0);
 $135=(($129+8)|0);
 $st$8$0=(($135)|0);
 HEAP32[(($st$8$0)>>2)]=$134$0;
 $st$9$1=(($135+4)|0);
 HEAP32[(($st$9$1)>>2)]=$134$1;
 $136=(($129)|0);
 HEAP32[(($136)>>2)]=2;
 $137=$code_pos;
 $138=((($137)+(4))|0);
 $code_pos=$138;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 12: 
 $140=$code_pos;
 $141=((($140)+(3))|0);
 $142=(($code_1+($141<<1))|0);
 $143=((HEAP16[(($142)>>1)])|0);
 $144=($143&65535);
 $145=(($vm_regs_1+($144<<2))|0);
 $146=((HEAP32[(($145)>>2)])|0);
 $147=$code_pos;
 $148=((($147)+(2))|0);
 $149=(($code_1+($148<<1))|0);
 $150=((HEAP16[(($149)>>1)])|0);
 $151$0=($150&65535);
 $151$1=0;
 $152=(($146+8)|0);
 $st$10$0=(($152)|0);
 HEAP32[(($st$10$0)>>2)]=$151$0;
 $st$11$1=(($152+4)|0);
 HEAP32[(($st$11$1)>>2)]=$151$1;
 $153=(($146)|0);
 HEAP32[(($153)>>2)]=1;
 $154=$code_pos;
 $155=((($154)+(4))|0);
 $code_pos=$155;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 13: 
 $157=$code_pos;
 $158=((($157)+(2))|0);
 $159=(($code_1+($158<<1))|0);
 $160=((HEAP16[(($159)>>1)])|0);
 $161=($160&65535);
 $162=(($vm_regs_1+($161<<2))|0);
 $163=((HEAP32[(($162)>>2)])|0);
 $164=$code_pos;
 $165=((($164)+(3))|0);
 $166=(($code_1+($165<<1))|0);
 $167=((HEAP16[(($166)>>1)])|0);
 $168=($167&65535);
 $169=(($vm_regs_1+($168<<2))|0);
 $170=((HEAP32[(($169)>>2)])|0);
 $171=(($163+8)|0);
 $ld$12$0=(($171)|0);
 $172$0=((HEAP32[(($ld$12$0)>>2)])|0);
 $ld$13$1=(($171+4)|0);
 $172$1=((HEAP32[(($ld$13$1)>>2)])|0);
 $173=(($170+8)|0);
 $ld$14$0=(($173)|0);
 $174$0=((HEAP32[(($ld$14$0)>>2)])|0);
 $ld$15$1=(($173+4)|0);
 $174$1=((HEAP32[(($ld$15$1)>>2)])|0);
 $175$0=((_i64Add($174$0,$174$1,$172$0,$172$1))|0);$175$1=tempRet0;
 $176=$code_pos;
 $177=((($176)+(4))|0);
 $178=(($code_1+($177<<1))|0);
 $179=((HEAP16[(($178)>>1)])|0);
 $180=($179&65535);
 $181=(($vm_regs_1+($180<<2))|0);
 $182=((HEAP32[(($181)>>2)])|0);
 $183=(($182+8)|0);
 $st$16$0=(($183)|0);
 HEAP32[(($st$16$0)>>2)]=$175$0;
 $st$17$1=(($183+4)|0);
 HEAP32[(($st$17$1)>>2)]=$175$1;
 $184=$code_pos;
 $185=((($184)+(4))|0);
 $186=(($code_1+($185<<1))|0);
 $187=((HEAP16[(($186)>>1)])|0);
 $188=($187&65535);
 $189=(($vm_regs_1+($188<<2))|0);
 $190=((HEAP32[(($189)>>2)])|0);
 $191=(($190)|0);
 HEAP32[(($191)>>2)]=2;
 $192=$code_pos;
 $193=((($192)+(5))|0);
 $code_pos=$193;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 14: 
 $195=$code_pos;
 $196=((($195)+(2))|0);
 $197=(($code_1+($196<<1))|0);
 $198=((HEAP16[(($197)>>1)])|0);
 $199=($198&65535);
 $200=(($vm_regs_1+($199<<2))|0);
 $201=((HEAP32[(($200)>>2)])|0);
 $202=$code_pos;
 $203=((($202)+(3))|0);
 $204=(($code_1+($203<<1))|0);
 $205=((HEAP16[(($204)>>1)])|0);
 $206=($205&65535);
 $207=(($vm_regs_1+($206<<2))|0);
 $208=((HEAP32[(($207)>>2)])|0);
 $209=(($201+8)|0);
 $ld$18$0=(($209)|0);
 $210$0=((HEAP32[(($ld$18$0)>>2)])|0);
 $ld$19$1=(($209+4)|0);
 $210$1=((HEAP32[(($ld$19$1)>>2)])|0);
 $211=(($208+8)|0);
 $ld$20$0=(($211)|0);
 $212$0=((HEAP32[(($ld$20$0)>>2)])|0);
 $ld$21$1=(($211+4)|0);
 $212$1=((HEAP32[(($ld$21$1)>>2)])|0);
 $213$0=((_i64Subtract($210$0,$210$1,$212$0,$212$1))|0);$213$1=tempRet0;
 $214=$code_pos;
 $215=((($214)+(4))|0);
 $216=(($code_1+($215<<1))|0);
 $217=((HEAP16[(($216)>>1)])|0);
 $218=($217&65535);
 $219=(($vm_regs_1+($218<<2))|0);
 $220=((HEAP32[(($219)>>2)])|0);
 $221=(($220+8)|0);
 $st$22$0=(($221)|0);
 HEAP32[(($st$22$0)>>2)]=$213$0;
 $st$23$1=(($221+4)|0);
 HEAP32[(($st$23$1)>>2)]=$213$1;
 $222=$code_pos;
 $223=((($222)+(4))|0);
 $224=(($code_1+($223<<1))|0);
 $225=((HEAP16[(($224)>>1)])|0);
 $226=($225&65535);
 $227=(($vm_regs_1+($226<<2))|0);
 $228=((HEAP32[(($227)>>2)])|0);
 $229=(($228)|0);
 HEAP32[(($229)>>2)]=2;
 $230=$code_pos;
 $231=((($230)+(5))|0);
 $code_pos=$231;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 15: 
 $233=$code_pos;
 $234=((($233)+(2))|0);
 $235=(($code_1+($234<<1))|0);
 $236=((HEAP16[(($235)>>1)])|0);
 $237=($236&65535);
 $238=(($vm_regs_1+($237<<2))|0);
 $239=((HEAP32[(($238)>>2)])|0);
 $240=$code_pos;
 $241=((($240)+(3))|0);
 $242=(($code_1+($241<<1))|0);
 $243=((HEAP16[(($242)>>1)])|0);
 $244=($243&65535);
 $245=(($vm_regs_1+($244<<2))|0);
 $246=((HEAP32[(($245)>>2)])|0);
 $247=(($239)|0);
 $248=((HEAP32[(($247)>>2)])|0);
 $249=$248&4;
 $250=($249|0)==0;
 if($250){label=19;break;}else{label=16;break;}
 case 16: 
 $252=(($246)|0);
 $253=((HEAP32[(($252)>>2)])|0);
 $254=$253&4;
 $255=($254|0)==0;
 $256=(($239+8)|0);
 $257=$256;
 $258=(+(HEAPF64[(($257)>>3)]));
 $259=(($246+8)|0);
 if($255){label=18;break;}else{label=17;break;}
 case 17: 
 $261=$259;
 $262=(+(HEAPF64[(($261)>>3)]));
 $263=($258)+($262);
 $264=$code_pos;
 $265=((($264)+(4))|0);
 $266=(($code_1+($265<<1))|0);
 $267=((HEAP16[(($266)>>1)])|0);
 $268=($267&65535);
 $269=(($vm_regs_1+($268<<2))|0);
 $270=((HEAP32[(($269)>>2)])|0);
 $271=(($270+8)|0);
 $272=$271;
 HEAPF64[(($272)>>3)]=$263;
 label=20;break;
 case 18: 
 $274=(($259)|0);
 $ld$24$0=(($274)|0);
 $275$0=((HEAP32[(($ld$24$0)>>2)])|0);
 $ld$25$1=(($274+4)|0);
 $275$1=((HEAP32[(($ld$25$1)>>2)])|0);
 $276=((+(($275$0>>>0)))+((+(($275$1|0)))*4294967296.0));
 $277=($258)+($276);
 $278=$code_pos;
 $279=((($278)+(4))|0);
 $280=(($code_1+($279<<1))|0);
 $281=((HEAP16[(($280)>>1)])|0);
 $282=($281&65535);
 $283=(($vm_regs_1+($282<<2))|0);
 $284=((HEAP32[(($283)>>2)])|0);
 $285=(($284+8)|0);
 $286=$285;
 HEAPF64[(($286)>>3)]=$277;
 label=20;break;
 case 19: 
 $288=(($239+8)|0);
 $ld$26$0=(($288)|0);
 $289$0=((HEAP32[(($ld$26$0)>>2)])|0);
 $ld$27$1=(($288+4)|0);
 $289$1=((HEAP32[(($ld$27$1)>>2)])|0);
 $290=((+(($289$0>>>0)))+((+(($289$1|0)))*4294967296.0));
 $291=(($246+8)|0);
 $292=$291;
 $293=(+(HEAPF64[(($292)>>3)]));
 $294=($290)+($293);
 $295=$code_pos;
 $296=((($295)+(4))|0);
 $297=(($code_1+($296<<1))|0);
 $298=((HEAP16[(($297)>>1)])|0);
 $299=($298&65535);
 $300=(($vm_regs_1+($299<<2))|0);
 $301=((HEAP32[(($300)>>2)])|0);
 $302=(($301+8)|0);
 $303=$302;
 HEAPF64[(($303)>>3)]=$294;
 label=20;break;
 case 20: 
 $305=$code_pos;
 $306=((($305)+(4))|0);
 $307=(($code_1+($306<<1))|0);
 $308=((HEAP16[(($307)>>1)])|0);
 $309=($308&65535);
 $310=(($vm_regs_1+($309<<2))|0);
 $311=((HEAP32[(($310)>>2)])|0);
 $312=(($311)|0);
 HEAP32[(($312)>>2)]=4;
 $313=$code_pos;
 $314=((($313)+(5))|0);
 $code_pos=$314;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 21: 
 $316=$code_pos;
 $317=((($316)+(2))|0);
 $318=(($code_1+($317<<1))|0);
 $319=((HEAP16[(($318)>>1)])|0);
 $320=($319&65535);
 $321=(($vm_regs_1+($320<<2))|0);
 $322=((HEAP32[(($321)>>2)])|0);
 $323=$code_pos;
 $324=((($323)+(3))|0);
 $325=(($code_1+($324<<1))|0);
 $326=((HEAP16[(($325)>>1)])|0);
 $327=($326&65535);
 $328=(($vm_regs_1+($327<<2))|0);
 $329=((HEAP32[(($328)>>2)])|0);
 $330=(($322)|0);
 $331=((HEAP32[(($330)>>2)])|0);
 $332=$331&4;
 $333=($332|0)==0;
 if($333){label=25;break;}else{label=22;break;}
 case 22: 
 $335=(($329)|0);
 $336=((HEAP32[(($335)>>2)])|0);
 $337=$336&4;
 $338=($337|0)==0;
 $339=(($322+8)|0);
 $340=$339;
 $341=(+(HEAPF64[(($340)>>3)]));
 $342=(($329+8)|0);
 if($338){label=24;break;}else{label=23;break;}
 case 23: 
 $344=$342;
 $345=(+(HEAPF64[(($344)>>3)]));
 $346=($341)-($345);
 $347=$code_pos;
 $348=((($347)+(4))|0);
 $349=(($code_1+($348<<1))|0);
 $350=((HEAP16[(($349)>>1)])|0);
 $351=($350&65535);
 $352=(($vm_regs_1+($351<<2))|0);
 $353=((HEAP32[(($352)>>2)])|0);
 $354=(($353+8)|0);
 $355=$354;
 HEAPF64[(($355)>>3)]=$346;
 label=26;break;
 case 24: 
 $357=(($342)|0);
 $ld$28$0=(($357)|0);
 $358$0=((HEAP32[(($ld$28$0)>>2)])|0);
 $ld$29$1=(($357+4)|0);
 $358$1=((HEAP32[(($ld$29$1)>>2)])|0);
 $359=((+(($358$0>>>0)))+((+(($358$1|0)))*4294967296.0));
 $360=($341)-($359);
 $361=$code_pos;
 $362=((($361)+(4))|0);
 $363=(($code_1+($362<<1))|0);
 $364=((HEAP16[(($363)>>1)])|0);
 $365=($364&65535);
 $366=(($vm_regs_1+($365<<2))|0);
 $367=((HEAP32[(($366)>>2)])|0);
 $368=(($367+8)|0);
 $369=$368;
 HEAPF64[(($369)>>3)]=$360;
 label=26;break;
 case 25: 
 $371=(($322+8)|0);
 $ld$30$0=(($371)|0);
 $372$0=((HEAP32[(($ld$30$0)>>2)])|0);
 $ld$31$1=(($371+4)|0);
 $372$1=((HEAP32[(($ld$31$1)>>2)])|0);
 $373=((+(($372$0>>>0)))+((+(($372$1|0)))*4294967296.0));
 $374=(($329+8)|0);
 $375=$374;
 $376=(+(HEAPF64[(($375)>>3)]));
 $377=($373)-($376);
 $378=$code_pos;
 $379=((($378)+(4))|0);
 $380=(($code_1+($379<<1))|0);
 $381=((HEAP16[(($380)>>1)])|0);
 $382=($381&65535);
 $383=(($vm_regs_1+($382<<2))|0);
 $384=((HEAP32[(($383)>>2)])|0);
 $385=(($384+8)|0);
 $386=$385;
 HEAPF64[(($386)>>3)]=$377;
 label=26;break;
 case 26: 
 $388=$code_pos;
 $389=((($388)+(4))|0);
 $390=(($code_1+($389<<1))|0);
 $391=((HEAP16[(($390)>>1)])|0);
 $392=($391&65535);
 $393=(($vm_regs_1+($392<<2))|0);
 $394=((HEAP32[(($393)>>2)])|0);
 $395=(($394)|0);
 HEAP32[(($395)>>2)]=4;
 $396=$code_pos;
 $397=((($396)+(5))|0);
 $code_pos=$397;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 27: 
 $399=$code_pos;
 $400=((($399)+(2))|0);
 $401=(($code_1+($400<<1))|0);
 $402=((HEAP16[(($401)>>1)])|0);
 $403=($402&65535);
 $404=(($vm_regs_1+($403<<2))|0);
 $405=((HEAP32[(($404)>>2)])|0);
 $406=$code_pos;
 $407=((($406)+(3))|0);
 $408=(($code_1+($407<<1))|0);
 $409=((HEAP16[(($408)>>1)])|0);
 $410=($409&65535);
 $411=(($vm_regs_1+($410<<2))|0);
 $412=((HEAP32[(($411)>>2)])|0);
 $413=(($405)|0);
 $414=((HEAP32[(($413)>>2)])|0);
 $415=$414&4;
 $416=($415|0)==0;
 if($416){label=31;break;}else{label=28;break;}
 case 28: 
 $418=(($412)|0);
 $419=((HEAP32[(($418)>>2)])|0);
 $420=$419&4;
 $421=($420|0)==0;
 $422=(($405+8)|0);
 $423=$422;
 $424=(+(HEAPF64[(($423)>>3)]));
 $425=(($412+8)|0);
 if($421){label=30;break;}else{label=29;break;}
 case 29: 
 $427=$425;
 $428=(+(HEAPF64[(($427)>>3)]));
 $429=$424<$428;
 $430$0=($429&1);
 $430$1=0;
 $431=$code_pos;
 $432=((($431)+(4))|0);
 $433=(($code_1+($432<<1))|0);
 $434=((HEAP16[(($433)>>1)])|0);
 $435=($434&65535);
 $436=(($vm_regs_1+($435<<2))|0);
 $437=((HEAP32[(($436)>>2)])|0);
 $438=(($437+8)|0);
 $st$32$0=(($438)|0);
 HEAP32[(($st$32$0)>>2)]=$430$0;
 $st$33$1=(($438+4)|0);
 HEAP32[(($st$33$1)>>2)]=$430$1;
 label=37;break;
 case 30: 
 $440=(($425)|0);
 $ld$34$0=(($440)|0);
 $441$0=((HEAP32[(($ld$34$0)>>2)])|0);
 $ld$35$1=(($440+4)|0);
 $441$1=((HEAP32[(($ld$35$1)>>2)])|0);
 $442=((+(($441$0>>>0)))+((+(($441$1|0)))*4294967296.0));
 $443=$424<$442;
 $444$0=($443&1);
 $444$1=0;
 $445=$code_pos;
 $446=((($445)+(4))|0);
 $447=(($code_1+($446<<1))|0);
 $448=((HEAP16[(($447)>>1)])|0);
 $449=($448&65535);
 $450=(($vm_regs_1+($449<<2))|0);
 $451=((HEAP32[(($450)>>2)])|0);
 $452=(($451+8)|0);
 $st$36$0=(($452)|0);
 HEAP32[(($st$36$0)>>2)]=$444$0;
 $st$37$1=(($452+4)|0);
 HEAP32[(($st$37$1)>>2)]=$444$1;
 label=37;break;
 case 31: 
 $454=$414&2;
 $455=($454|0)==0;
 if($455){label=35;break;}else{label=32;break;}
 case 32: 
 $457=(($412)|0);
 $458=((HEAP32[(($457)>>2)])|0);
 $459=$458&2;
 $460=($459|0)==0;
 $461=(($405+8)|0);
 $ld$38$0=(($461)|0);
 $462$0=((HEAP32[(($ld$38$0)>>2)])|0);
 $ld$39$1=(($461+4)|0);
 $462$1=((HEAP32[(($ld$39$1)>>2)])|0);
 if($460){label=34;break;}else{label=33;break;}
 case 33: 
 $464=(($412+8)|0);
 $ld$40$0=(($464)|0);
 $465$0=((HEAP32[(($ld$40$0)>>2)])|0);
 $ld$41$1=(($464+4)|0);
 $465$1=((HEAP32[(($ld$41$1)>>2)])|0);
 $466=(($462$1|0) < ($465$1|0)) | (((($462$1|0) == ($465$1|0) & ($462$0>>>0) <  ($465$0>>>0))));
 $467$0=($466&1);
 $467$1=0;
 $468=$code_pos;
 $469=((($468)+(4))|0);
 $470=(($code_1+($469<<1))|0);
 $471=((HEAP16[(($470)>>1)])|0);
 $472=($471&65535);
 $473=(($vm_regs_1+($472<<2))|0);
 $474=((HEAP32[(($473)>>2)])|0);
 $475=(($474+8)|0);
 $st$42$0=(($475)|0);
 HEAP32[(($st$42$0)>>2)]=$467$0;
 $st$43$1=(($475+4)|0);
 HEAP32[(($st$43$1)>>2)]=$467$1;
 label=37;break;
 case 34: 
 $477=((+(($462$0>>>0)))+((+(($462$1|0)))*4294967296.0));
 $478=(($412+8)|0);
 $479=$478;
 $480=(+(HEAPF64[(($479)>>3)]));
 $481=$477<$480;
 $482$0=($481&1);
 $482$1=0;
 $483=$code_pos;
 $484=((($483)+(4))|0);
 $485=(($code_1+($484<<1))|0);
 $486=((HEAP16[(($485)>>1)])|0);
 $487=($486&65535);
 $488=(($vm_regs_1+($487<<2))|0);
 $489=((HEAP32[(($488)>>2)])|0);
 $490=(($489+8)|0);
 $st$44$0=(($490)|0);
 HEAP32[(($st$44$0)>>2)]=$482$0;
 $st$45$1=(($490+4)|0);
 HEAP32[(($st$45$1)>>2)]=$482$1;
 label=37;break;
 case 35: 
 $492=$414&8;
 $493=($492|0)==0;
 if($493){label=37;break;}else{label=36;break;}
 case 36: 
 $495=(($405+8)|0);
 $496=$495;
 $497=((HEAP32[(($496)>>2)])|0);
 $498=(($497+8)|0);
 $499=((HEAP32[(($498)>>2)])|0);
 $500=(($412+8)|0);
 $501=$500;
 $502=((HEAP32[(($501)>>2)])|0);
 $503=(($502+8)|0);
 $504=((HEAP32[(($503)>>2)])|0);
 $505=((invoke_iii(12,(($499)|0),(($504)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $506=($505|0)==-1;
 $507$0=($506&1);
 $507$1=0;
 $508=$code_pos;
 $509=((($508)+(4))|0);
 $510=(($code_1+($509<<1))|0);
 $511=((HEAP16[(($510)>>1)])|0);
 $512=($511&65535);
 $513=(($vm_regs_1+($512<<2))|0);
 $514=((HEAP32[(($513)>>2)])|0);
 $515=(($514+8)|0);
 $st$46$0=(($515)|0);
 HEAP32[(($st$46$0)>>2)]=$507$0;
 $st$47$1=(($515+4)|0);
 HEAP32[(($st$47$1)>>2)]=$507$1;
 label=37;break;
 case 37: 
 $517=$code_pos;
 $518=((($517)+(4))|0);
 $519=(($code_1+($518<<1))|0);
 $520=((HEAP16[(($519)>>1)])|0);
 $521=($520&65535);
 $522=(($vm_regs_1+($521<<2))|0);
 $523=((HEAP32[(($522)>>2)])|0);
 $524=(($523)|0);
 HEAP32[(($524)>>2)]=1;
 $525=$code_pos;
 $526=((($525)+(5))|0);
 $code_pos=$526;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 38: 
 $528=$code_pos;
 $529=((($528)+(2))|0);
 $530=(($code_1+($529<<1))|0);
 $531=((HEAP16[(($530)>>1)])|0);
 $532=($531&65535);
 $533=(($vm_regs_1+($532<<2))|0);
 $534=((HEAP32[(($533)>>2)])|0);
 $535=$code_pos;
 $536=((($535)+(3))|0);
 $537=(($code_1+($536<<1))|0);
 $538=((HEAP16[(($537)>>1)])|0);
 $539=($538&65535);
 $540=(($vm_regs_1+($539<<2))|0);
 $541=((HEAP32[(($540)>>2)])|0);
 $542=(($534)|0);
 $543=((HEAP32[(($542)>>2)])|0);
 $544=$543&4;
 $545=($544|0)==0;
 if($545){label=42;break;}else{label=39;break;}
 case 39: 
 $547=(($541)|0);
 $548=((HEAP32[(($547)>>2)])|0);
 $549=$548&4;
 $550=($549|0)==0;
 $551=(($534+8)|0);
 $552=$551;
 $553=(+(HEAPF64[(($552)>>3)]));
 $554=(($541+8)|0);
 if($550){label=41;break;}else{label=40;break;}
 case 40: 
 $556=$554;
 $557=(+(HEAPF64[(($556)>>3)]));
 $558=$553<=$557;
 $559$0=($558&1);
 $559$1=0;
 $560=$code_pos;
 $561=((($560)+(4))|0);
 $562=(($code_1+($561<<1))|0);
 $563=((HEAP16[(($562)>>1)])|0);
 $564=($563&65535);
 $565=(($vm_regs_1+($564<<2))|0);
 $566=((HEAP32[(($565)>>2)])|0);
 $567=(($566+8)|0);
 $st$48$0=(($567)|0);
 HEAP32[(($st$48$0)>>2)]=$559$0;
 $st$49$1=(($567+4)|0);
 HEAP32[(($st$49$1)>>2)]=$559$1;
 label=48;break;
 case 41: 
 $569=(($554)|0);
 $ld$50$0=(($569)|0);
 $570$0=((HEAP32[(($ld$50$0)>>2)])|0);
 $ld$51$1=(($569+4)|0);
 $570$1=((HEAP32[(($ld$51$1)>>2)])|0);
 $571=((+(($570$0>>>0)))+((+(($570$1|0)))*4294967296.0));
 $572=$553<=$571;
 $573$0=($572&1);
 $573$1=0;
 $574=$code_pos;
 $575=((($574)+(4))|0);
 $576=(($code_1+($575<<1))|0);
 $577=((HEAP16[(($576)>>1)])|0);
 $578=($577&65535);
 $579=(($vm_regs_1+($578<<2))|0);
 $580=((HEAP32[(($579)>>2)])|0);
 $581=(($580+8)|0);
 $st$52$0=(($581)|0);
 HEAP32[(($st$52$0)>>2)]=$573$0;
 $st$53$1=(($581+4)|0);
 HEAP32[(($st$53$1)>>2)]=$573$1;
 label=48;break;
 case 42: 
 $583=$543&2;
 $584=($583|0)==0;
 if($584){label=46;break;}else{label=43;break;}
 case 43: 
 $586=(($541)|0);
 $587=((HEAP32[(($586)>>2)])|0);
 $588=$587&2;
 $589=($588|0)==0;
 $590=(($534+8)|0);
 $ld$54$0=(($590)|0);
 $591$0=((HEAP32[(($ld$54$0)>>2)])|0);
 $ld$55$1=(($590+4)|0);
 $591$1=((HEAP32[(($ld$55$1)>>2)])|0);
 if($589){label=45;break;}else{label=44;break;}
 case 44: 
 $593=(($541+8)|0);
 $ld$56$0=(($593)|0);
 $594$0=((HEAP32[(($ld$56$0)>>2)])|0);
 $ld$57$1=(($593+4)|0);
 $594$1=((HEAP32[(($ld$57$1)>>2)])|0);
 $595=(($591$1|0) <= ($594$1|0)) & (((($591$1|0) <  ($594$1|0)) | ($591$0>>>0) <= ($594$0>>>0)));
 $596$0=($595&1);
 $596$1=0;
 $597=$code_pos;
 $598=((($597)+(4))|0);
 $599=(($code_1+($598<<1))|0);
 $600=((HEAP16[(($599)>>1)])|0);
 $601=($600&65535);
 $602=(($vm_regs_1+($601<<2))|0);
 $603=((HEAP32[(($602)>>2)])|0);
 $604=(($603+8)|0);
 $st$58$0=(($604)|0);
 HEAP32[(($st$58$0)>>2)]=$596$0;
 $st$59$1=(($604+4)|0);
 HEAP32[(($st$59$1)>>2)]=$596$1;
 label=48;break;
 case 45: 
 $606=((+(($591$0>>>0)))+((+(($591$1|0)))*4294967296.0));
 $607=(($541+8)|0);
 $608=$607;
 $609=(+(HEAPF64[(($608)>>3)]));
 $610=$606<=$609;
 $611$0=($610&1);
 $611$1=0;
 $612=$code_pos;
 $613=((($612)+(4))|0);
 $614=(($code_1+($613<<1))|0);
 $615=((HEAP16[(($614)>>1)])|0);
 $616=($615&65535);
 $617=(($vm_regs_1+($616<<2))|0);
 $618=((HEAP32[(($617)>>2)])|0);
 $619=(($618+8)|0);
 $st$60$0=(($619)|0);
 HEAP32[(($st$60$0)>>2)]=$611$0;
 $st$61$1=(($619+4)|0);
 HEAP32[(($st$61$1)>>2)]=$611$1;
 label=48;break;
 case 46: 
 $621=$543&8;
 $622=($621|0)==0;
 if($622){label=48;break;}else{label=47;break;}
 case 47: 
 $624=(($534+8)|0);
 $625=$624;
 $626=((HEAP32[(($625)>>2)])|0);
 $627=(($626+8)|0);
 $628=((HEAP32[(($627)>>2)])|0);
 $629=(($541+8)|0);
 $630=$629;
 $631=((HEAP32[(($630)>>2)])|0);
 $632=(($631+8)|0);
 $633=((HEAP32[(($632)>>2)])|0);
 $634=((invoke_iii(12,(($628)|0),(($633)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $635=($634|0)<1;
 $636$0=($635&1);
 $636$1=0;
 $637=$code_pos;
 $638=((($637)+(4))|0);
 $639=(($code_1+($638<<1))|0);
 $640=((HEAP16[(($639)>>1)])|0);
 $641=($640&65535);
 $642=(($vm_regs_1+($641<<2))|0);
 $643=((HEAP32[(($642)>>2)])|0);
 $644=(($643+8)|0);
 $st$62$0=(($644)|0);
 HEAP32[(($st$62$0)>>2)]=$636$0;
 $st$63$1=(($644+4)|0);
 HEAP32[(($st$63$1)>>2)]=$636$1;
 label=48;break;
 case 48: 
 $646=$code_pos;
 $647=((($646)+(4))|0);
 $648=(($code_1+($647<<1))|0);
 $649=((HEAP16[(($648)>>1)])|0);
 $650=($649&65535);
 $651=(($vm_regs_1+($650<<2))|0);
 $652=((HEAP32[(($651)>>2)])|0);
 $653=(($652)|0);
 HEAP32[(($653)>>2)]=1;
 $654=$code_pos;
 $655=((($654)+(5))|0);
 $code_pos=$655;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 49: 
 $657=$code_pos;
 $658=((($657)+(2))|0);
 $659=(($code_1+($658<<1))|0);
 $660=((HEAP16[(($659)>>1)])|0);
 $661=($660&65535);
 $662=(($vm_regs_1+($661<<2))|0);
 $663=((HEAP32[(($662)>>2)])|0);
 $664=$code_pos;
 $665=((($664)+(3))|0);
 $666=(($code_1+($665<<1))|0);
 $667=((HEAP16[(($666)>>1)])|0);
 $668=($667&65535);
 $669=(($vm_regs_1+($668<<2))|0);
 $670=((HEAP32[(($669)>>2)])|0);
 $671=(($663)|0);
 $672=((HEAP32[(($671)>>2)])|0);
 $673=$672&4;
 $674=($673|0)==0;
 if($674){label=53;break;}else{label=50;break;}
 case 50: 
 $676=(($670)|0);
 $677=((HEAP32[(($676)>>2)])|0);
 $678=$677&4;
 $679=($678|0)==0;
 $680=(($663+8)|0);
 $681=$680;
 $682=(+(HEAPF64[(($681)>>3)]));
 $683=(($670+8)|0);
 if($679){label=52;break;}else{label=51;break;}
 case 51: 
 $685=$683;
 $686=(+(HEAPF64[(($685)>>3)]));
 $687=$682==$686;
 $688$0=($687&1);
 $688$1=0;
 $689=$code_pos;
 $690=((($689)+(4))|0);
 $691=(($code_1+($690<<1))|0);
 $692=((HEAP16[(($691)>>1)])|0);
 $693=($692&65535);
 $694=(($vm_regs_1+($693<<2))|0);
 $695=((HEAP32[(($694)>>2)])|0);
 $696=(($695+8)|0);
 $st$64$0=(($696)|0);
 HEAP32[(($st$64$0)>>2)]=$688$0;
 $st$65$1=(($696+4)|0);
 HEAP32[(($st$65$1)>>2)]=$688$1;
 label=60;break;
 case 52: 
 $698=(($683)|0);
 $ld$66$0=(($698)|0);
 $699$0=((HEAP32[(($ld$66$0)>>2)])|0);
 $ld$67$1=(($698+4)|0);
 $699$1=((HEAP32[(($ld$67$1)>>2)])|0);
 $700=((+(($699$0>>>0)))+((+(($699$1|0)))*4294967296.0));
 $701=$682==$700;
 $702$0=($701&1);
 $702$1=0;
 $703=$code_pos;
 $704=((($703)+(4))|0);
 $705=(($code_1+($704<<1))|0);
 $706=((HEAP16[(($705)>>1)])|0);
 $707=($706&65535);
 $708=(($vm_regs_1+($707<<2))|0);
 $709=((HEAP32[(($708)>>2)])|0);
 $710=(($709+8)|0);
 $st$68$0=(($710)|0);
 HEAP32[(($st$68$0)>>2)]=$702$0;
 $st$69$1=(($710+4)|0);
 HEAP32[(($st$69$1)>>2)]=$702$1;
 label=60;break;
 case 53: 
 $712=$672&2;
 $713=($712|0)==0;
 if($713){label=57;break;}else{label=54;break;}
 case 54: 
 $715=(($670)|0);
 $716=((HEAP32[(($715)>>2)])|0);
 $717=$716&2;
 $718=($717|0)==0;
 $719=(($663+8)|0);
 $ld$70$0=(($719)|0);
 $720$0=((HEAP32[(($ld$70$0)>>2)])|0);
 $ld$71$1=(($719+4)|0);
 $720$1=((HEAP32[(($ld$71$1)>>2)])|0);
 if($718){label=56;break;}else{label=55;break;}
 case 55: 
 $722=(($670+8)|0);
 $ld$72$0=(($722)|0);
 $723$0=((HEAP32[(($ld$72$0)>>2)])|0);
 $ld$73$1=(($722+4)|0);
 $723$1=((HEAP32[(($ld$73$1)>>2)])|0);
 $724=(($720$0|0) == ($723$0|0)) & (($720$1|0) == ($723$1|0));
 $725$0=($724&1);
 $725$1=0;
 $726=$code_pos;
 $727=((($726)+(4))|0);
 $728=(($code_1+($727<<1))|0);
 $729=((HEAP16[(($728)>>1)])|0);
 $730=($729&65535);
 $731=(($vm_regs_1+($730<<2))|0);
 $732=((HEAP32[(($731)>>2)])|0);
 $733=(($732+8)|0);
 $st$74$0=(($733)|0);
 HEAP32[(($st$74$0)>>2)]=$725$0;
 $st$75$1=(($733+4)|0);
 HEAP32[(($st$75$1)>>2)]=$725$1;
 label=60;break;
 case 56: 
 $735=((+(($720$0>>>0)))+((+(($720$1|0)))*4294967296.0));
 $736=(($670+8)|0);
 $737=$736;
 $738=(+(HEAPF64[(($737)>>3)]));
 $739=$735==$738;
 $740$0=($739&1);
 $740$1=0;
 $741=$code_pos;
 $742=((($741)+(4))|0);
 $743=(($code_1+($742<<1))|0);
 $744=((HEAP16[(($743)>>1)])|0);
 $745=($744&65535);
 $746=(($vm_regs_1+($745<<2))|0);
 $747=((HEAP32[(($746)>>2)])|0);
 $748=(($747+8)|0);
 $st$76$0=(($748)|0);
 HEAP32[(($st$76$0)>>2)]=$740$0;
 $st$77$1=(($748+4)|0);
 HEAP32[(($st$77$1)>>2)]=$740$1;
 label=60;break;
 case 57: 
 $750=$672&8;
 $751=($750|0)==0;
 if($751){label=59;break;}else{label=58;break;}
 case 58: 
 $753=(($663+8)|0);
 $754=$753;
 $755=((HEAP32[(($754)>>2)])|0);
 $756=(($755+8)|0);
 $757=((HEAP32[(($756)>>2)])|0);
 $758=(($670+8)|0);
 $759=$758;
 $760=((HEAP32[(($759)>>2)])|0);
 $761=(($760+8)|0);
 $762=((HEAP32[(($761)>>2)])|0);
 $763=((invoke_iii(12,(($757)|0),(($762)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $764=($763|0)==0;
 $765$0=($764&1);
 $765$1=0;
 $766=$code_pos;
 $767=((($766)+(4))|0);
 $768=(($code_1+($767<<1))|0);
 $769=((HEAP16[(($768)>>1)])|0);
 $770=($769&65535);
 $771=(($vm_regs_1+($770<<2))|0);
 $772=((HEAP32[(($771)>>2)])|0);
 $773=(($772+8)|0);
 $st$78$0=(($773)|0);
 HEAP32[(($st$78$0)>>2)]=$765$0;
 $st$79$1=(($773+4)|0);
 HEAP32[(($st$79$1)>>2)]=$765$1;
 label=60;break;
 case 59: 
 $775=((invoke_iiii(2,(($vm)|0),(($663)|0),(($670)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $776=($775|0)==1;
 $777$0=($776&1);
 $777$1=0;
 $778=$code_pos;
 $779=((($778)+(4))|0);
 $780=(($code_1+($779<<1))|0);
 $781=((HEAP16[(($780)>>1)])|0);
 $782=($781&65535);
 $783=(($vm_regs_1+($782<<2))|0);
 $784=((HEAP32[(($783)>>2)])|0);
 $785=(($784+8)|0);
 $st$80$0=(($785)|0);
 HEAP32[(($st$80$0)>>2)]=$777$0;
 $st$81$1=(($785+4)|0);
 HEAP32[(($st$81$1)>>2)]=$777$1;
 label=60;break;
 case 60: 
 $787=$code_pos;
 $788=((($787)+(4))|0);
 $789=(($code_1+($788<<1))|0);
 $790=((HEAP16[(($789)>>1)])|0);
 $791=($790&65535);
 $792=(($vm_regs_1+($791<<2))|0);
 $793=((HEAP32[(($792)>>2)])|0);
 $794=(($793)|0);
 HEAP32[(($794)>>2)]=1;
 $795=$code_pos;
 $796=((($795)+(5))|0);
 $code_pos=$796;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 61: 
 $798=$code_pos;
 $799=((($798)+(2))|0);
 $800=(($code_1+($799<<1))|0);
 $801=((HEAP16[(($800)>>1)])|0);
 $802=($801&65535);
 $803=(($vm_regs_1+($802<<2))|0);
 $804=((HEAP32[(($803)>>2)])|0);
 $805=$code_pos;
 $806=((($805)+(3))|0);
 $807=(($code_1+($806<<1))|0);
 $808=((HEAP16[(($807)>>1)])|0);
 $809=($808&65535);
 $810=(($vm_regs_1+($809<<2))|0);
 $811=((HEAP32[(($810)>>2)])|0);
 $812=(($804)|0);
 $813=((HEAP32[(($812)>>2)])|0);
 $814=$813&4;
 $815=($814|0)==0;
 if($815){label=65;break;}else{label=62;break;}
 case 62: 
 $817=(($811)|0);
 $818=((HEAP32[(($817)>>2)])|0);
 $819=$818&4;
 $820=($819|0)==0;
 $821=(($804+8)|0);
 $822=$821;
 $823=(+(HEAPF64[(($822)>>3)]));
 $824=(($811+8)|0);
 if($820){label=64;break;}else{label=63;break;}
 case 63: 
 $826=$824;
 $827=(+(HEAPF64[(($826)>>3)]));
 $828=$823>$827;
 $829$0=($828&1);
 $829$1=0;
 $830=$code_pos;
 $831=((($830)+(4))|0);
 $832=(($code_1+($831<<1))|0);
 $833=((HEAP16[(($832)>>1)])|0);
 $834=($833&65535);
 $835=(($vm_regs_1+($834<<2))|0);
 $836=((HEAP32[(($835)>>2)])|0);
 $837=(($836+8)|0);
 $st$82$0=(($837)|0);
 HEAP32[(($st$82$0)>>2)]=$829$0;
 $st$83$1=(($837+4)|0);
 HEAP32[(($st$83$1)>>2)]=$829$1;
 label=71;break;
 case 64: 
 $839=(($824)|0);
 $ld$84$0=(($839)|0);
 $840$0=((HEAP32[(($ld$84$0)>>2)])|0);
 $ld$85$1=(($839+4)|0);
 $840$1=((HEAP32[(($ld$85$1)>>2)])|0);
 $841=((+(($840$0>>>0)))+((+(($840$1|0)))*4294967296.0));
 $842=$823>$841;
 $843$0=($842&1);
 $843$1=0;
 $844=$code_pos;
 $845=((($844)+(4))|0);
 $846=(($code_1+($845<<1))|0);
 $847=((HEAP16[(($846)>>1)])|0);
 $848=($847&65535);
 $849=(($vm_regs_1+($848<<2))|0);
 $850=((HEAP32[(($849)>>2)])|0);
 $851=(($850+8)|0);
 $st$86$0=(($851)|0);
 HEAP32[(($st$86$0)>>2)]=$843$0;
 $st$87$1=(($851+4)|0);
 HEAP32[(($st$87$1)>>2)]=$843$1;
 label=71;break;
 case 65: 
 $853=$813&2;
 $854=($853|0)==0;
 if($854){label=69;break;}else{label=66;break;}
 case 66: 
 $856=(($811)|0);
 $857=((HEAP32[(($856)>>2)])|0);
 $858=$857&2;
 $859=($858|0)==0;
 $860=(($804+8)|0);
 $ld$88$0=(($860)|0);
 $861$0=((HEAP32[(($ld$88$0)>>2)])|0);
 $ld$89$1=(($860+4)|0);
 $861$1=((HEAP32[(($ld$89$1)>>2)])|0);
 if($859){label=68;break;}else{label=67;break;}
 case 67: 
 $863=(($811+8)|0);
 $ld$90$0=(($863)|0);
 $864$0=((HEAP32[(($ld$90$0)>>2)])|0);
 $ld$91$1=(($863+4)|0);
 $864$1=((HEAP32[(($ld$91$1)>>2)])|0);
 $865=(($861$1|0) > ($864$1|0)) | (((($861$1|0) == ($864$1|0) & ($861$0>>>0) >  ($864$0>>>0))));
 $866$0=($865&1);
 $866$1=0;
 $867=$code_pos;
 $868=((($867)+(4))|0);
 $869=(($code_1+($868<<1))|0);
 $870=((HEAP16[(($869)>>1)])|0);
 $871=($870&65535);
 $872=(($vm_regs_1+($871<<2))|0);
 $873=((HEAP32[(($872)>>2)])|0);
 $874=(($873+8)|0);
 $st$92$0=(($874)|0);
 HEAP32[(($st$92$0)>>2)]=$866$0;
 $st$93$1=(($874+4)|0);
 HEAP32[(($st$93$1)>>2)]=$866$1;
 label=71;break;
 case 68: 
 $876=((+(($861$0>>>0)))+((+(($861$1|0)))*4294967296.0));
 $877=(($811+8)|0);
 $878=$877;
 $879=(+(HEAPF64[(($878)>>3)]));
 $880=$876>$879;
 $881$0=($880&1);
 $881$1=0;
 $882=$code_pos;
 $883=((($882)+(4))|0);
 $884=(($code_1+($883<<1))|0);
 $885=((HEAP16[(($884)>>1)])|0);
 $886=($885&65535);
 $887=(($vm_regs_1+($886<<2))|0);
 $888=((HEAP32[(($887)>>2)])|0);
 $889=(($888+8)|0);
 $st$94$0=(($889)|0);
 HEAP32[(($st$94$0)>>2)]=$881$0;
 $st$95$1=(($889+4)|0);
 HEAP32[(($st$95$1)>>2)]=$881$1;
 label=71;break;
 case 69: 
 $891=$813&8;
 $892=($891|0)==0;
 if($892){label=71;break;}else{label=70;break;}
 case 70: 
 $894=(($804+8)|0);
 $895=$894;
 $896=((HEAP32[(($895)>>2)])|0);
 $897=(($896+8)|0);
 $898=((HEAP32[(($897)>>2)])|0);
 $899=(($811+8)|0);
 $900=$899;
 $901=((HEAP32[(($900)>>2)])|0);
 $902=(($901+8)|0);
 $903=((HEAP32[(($902)>>2)])|0);
 $904=((invoke_iii(12,(($898)|0),(($903)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $905=($904|0)==1;
 $906$0=($905&1);
 $906$1=0;
 $907=$code_pos;
 $908=((($907)+(4))|0);
 $909=(($code_1+($908<<1))|0);
 $910=((HEAP16[(($909)>>1)])|0);
 $911=($910&65535);
 $912=(($vm_regs_1+($911<<2))|0);
 $913=((HEAP32[(($912)>>2)])|0);
 $914=(($913+8)|0);
 $st$96$0=(($914)|0);
 HEAP32[(($st$96$0)>>2)]=$906$0;
 $st$97$1=(($914+4)|0);
 HEAP32[(($st$97$1)>>2)]=$906$1;
 label=71;break;
 case 71: 
 $916=$code_pos;
 $917=((($916)+(4))|0);
 $918=(($code_1+($917<<1))|0);
 $919=((HEAP16[(($918)>>1)])|0);
 $920=($919&65535);
 $921=(($vm_regs_1+($920<<2))|0);
 $922=((HEAP32[(($921)>>2)])|0);
 $923=(($922)|0);
 HEAP32[(($923)>>2)]=1;
 $924=$code_pos;
 $925=((($924)+(5))|0);
 $code_pos=$925;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 72: 
 $927=$code_pos;
 $928=((($927)+(2))|0);
 $929=(($code_1+($928<<1))|0);
 $930=((HEAP16[(($929)>>1)])|0);
 $931=($930&65535);
 $932=(($vm_regs_1+($931<<2))|0);
 $933=((HEAP32[(($932)>>2)])|0);
 $934=$code_pos;
 $935=((($934)+(3))|0);
 $936=(($code_1+($935<<1))|0);
 $937=((HEAP16[(($936)>>1)])|0);
 $938=($937&65535);
 $939=(($vm_regs_1+($938<<2))|0);
 $940=((HEAP32[(($939)>>2)])|0);
 $941=(($933)|0);
 $942=((HEAP32[(($941)>>2)])|0);
 $943=$942&4;
 $944=($943|0)==0;
 if($944){label=76;break;}else{label=73;break;}
 case 73: 
 $946=(($940)|0);
 $947=((HEAP32[(($946)>>2)])|0);
 $948=$947&4;
 $949=($948|0)==0;
 $950=(($933+8)|0);
 $951=$950;
 $952=(+(HEAPF64[(($951)>>3)]));
 $953=(($940+8)|0);
 if($949){label=75;break;}else{label=74;break;}
 case 74: 
 $955=$953;
 $956=(+(HEAPF64[(($955)>>3)]));
 $957=$952>$956;
 $958$0=($957&1);
 $958$1=0;
 $959=$code_pos;
 $960=((($959)+(4))|0);
 $961=(($code_1+($960<<1))|0);
 $962=((HEAP16[(($961)>>1)])|0);
 $963=($962&65535);
 $964=(($vm_regs_1+($963<<2))|0);
 $965=((HEAP32[(($964)>>2)])|0);
 $966=(($965+8)|0);
 $st$98$0=(($966)|0);
 HEAP32[(($st$98$0)>>2)]=$958$0;
 $st$99$1=(($966+4)|0);
 HEAP32[(($st$99$1)>>2)]=$958$1;
 label=82;break;
 case 75: 
 $968=(($953)|0);
 $ld$100$0=(($968)|0);
 $969$0=((HEAP32[(($ld$100$0)>>2)])|0);
 $ld$101$1=(($968+4)|0);
 $969$1=((HEAP32[(($ld$101$1)>>2)])|0);
 $970=((+(($969$0>>>0)))+((+(($969$1|0)))*4294967296.0));
 $971=$952>$970;
 $972$0=($971&1);
 $972$1=0;
 $973=$code_pos;
 $974=((($973)+(4))|0);
 $975=(($code_1+($974<<1))|0);
 $976=((HEAP16[(($975)>>1)])|0);
 $977=($976&65535);
 $978=(($vm_regs_1+($977<<2))|0);
 $979=((HEAP32[(($978)>>2)])|0);
 $980=(($979+8)|0);
 $st$102$0=(($980)|0);
 HEAP32[(($st$102$0)>>2)]=$972$0;
 $st$103$1=(($980+4)|0);
 HEAP32[(($st$103$1)>>2)]=$972$1;
 label=82;break;
 case 76: 
 $982=$942&2;
 $983=($982|0)==0;
 if($983){label=80;break;}else{label=77;break;}
 case 77: 
 $985=(($940)|0);
 $986=((HEAP32[(($985)>>2)])|0);
 $987=$986&2;
 $988=($987|0)==0;
 $989=(($933+8)|0);
 $ld$104$0=(($989)|0);
 $990$0=((HEAP32[(($ld$104$0)>>2)])|0);
 $ld$105$1=(($989+4)|0);
 $990$1=((HEAP32[(($ld$105$1)>>2)])|0);
 if($988){label=79;break;}else{label=78;break;}
 case 78: 
 $992=(($940+8)|0);
 $ld$106$0=(($992)|0);
 $993$0=((HEAP32[(($ld$106$0)>>2)])|0);
 $ld$107$1=(($992+4)|0);
 $993$1=((HEAP32[(($ld$107$1)>>2)])|0);
 $994=(($990$1|0) > ($993$1|0)) | (((($990$1|0) == ($993$1|0) & ($990$0>>>0) >  ($993$0>>>0))));
 $995$0=($994&1);
 $995$1=0;
 $996=$code_pos;
 $997=((($996)+(4))|0);
 $998=(($code_1+($997<<1))|0);
 $999=((HEAP16[(($998)>>1)])|0);
 $1000=($999&65535);
 $1001=(($vm_regs_1+($1000<<2))|0);
 $1002=((HEAP32[(($1001)>>2)])|0);
 $1003=(($1002+8)|0);
 $st$108$0=(($1003)|0);
 HEAP32[(($st$108$0)>>2)]=$995$0;
 $st$109$1=(($1003+4)|0);
 HEAP32[(($st$109$1)>>2)]=$995$1;
 label=82;break;
 case 79: 
 $1005=((+(($990$0>>>0)))+((+(($990$1|0)))*4294967296.0));
 $1006=(($940+8)|0);
 $1007=$1006;
 $1008=(+(HEAPF64[(($1007)>>3)]));
 $1009=$1005>$1008;
 $1010$0=($1009&1);
 $1010$1=0;
 $1011=$code_pos;
 $1012=((($1011)+(4))|0);
 $1013=(($code_1+($1012<<1))|0);
 $1014=((HEAP16[(($1013)>>1)])|0);
 $1015=($1014&65535);
 $1016=(($vm_regs_1+($1015<<2))|0);
 $1017=((HEAP32[(($1016)>>2)])|0);
 $1018=(($1017+8)|0);
 $st$110$0=(($1018)|0);
 HEAP32[(($st$110$0)>>2)]=$1010$0;
 $st$111$1=(($1018+4)|0);
 HEAP32[(($st$111$1)>>2)]=$1010$1;
 label=82;break;
 case 80: 
 $1020=$942&8;
 $1021=($1020|0)==0;
 if($1021){label=82;break;}else{label=81;break;}
 case 81: 
 $1023=(($933+8)|0);
 $1024=$1023;
 $1025=((HEAP32[(($1024)>>2)])|0);
 $1026=(($1025+8)|0);
 $1027=((HEAP32[(($1026)>>2)])|0);
 $1028=(($940+8)|0);
 $1029=$1028;
 $1030=((HEAP32[(($1029)>>2)])|0);
 $1031=(($1030+8)|0);
 $1032=((HEAP32[(($1031)>>2)])|0);
 $1033=((invoke_iii(12,(($1027)|0),(($1032)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $_lobit=$1033>>>31;
 $_lobit_not=$_lobit^1;
 $1034$0=$_lobit_not;
 $1034$1=0;
 $1035=$code_pos;
 $1036=((($1035)+(4))|0);
 $1037=(($code_1+($1036<<1))|0);
 $1038=((HEAP16[(($1037)>>1)])|0);
 $1039=($1038&65535);
 $1040=(($vm_regs_1+($1039<<2))|0);
 $1041=((HEAP32[(($1040)>>2)])|0);
 $1042=(($1041+8)|0);
 $st$112$0=(($1042)|0);
 HEAP32[(($st$112$0)>>2)]=$1034$0;
 $st$113$1=(($1042+4)|0);
 HEAP32[(($st$113$1)>>2)]=$1034$1;
 label=82;break;
 case 82: 
 $1044=$code_pos;
 $1045=((($1044)+(4))|0);
 $1046=(($code_1+($1045<<1))|0);
 $1047=((HEAP16[(($1046)>>1)])|0);
 $1048=($1047&65535);
 $1049=(($vm_regs_1+($1048<<2))|0);
 $1050=((HEAP32[(($1049)>>2)])|0);
 $1051=(($1050)|0);
 HEAP32[(($1051)>>2)]=1;
 $1052=$code_pos;
 $1053=((($1052)+(5))|0);
 $code_pos=$1053;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 83: 
 $1055=$code_pos;
 $1056=((($1055)+(2))|0);
 $1057=(($code_1+($1056<<1))|0);
 $1058=((HEAP16[(($1057)>>1)])|0);
 $1059=($1058&65535);
 $1060=(($vm_regs_1+($1059<<2))|0);
 $1061=((HEAP32[(($1060)>>2)])|0);
 $1062=$code_pos;
 $1063=((($1062)+(3))|0);
 $1064=(($code_1+($1063<<1))|0);
 $1065=((HEAP16[(($1064)>>1)])|0);
 $1066=($1065&65535);
 $1067=(($vm_regs_1+($1066<<2))|0);
 $1068=((HEAP32[(($1067)>>2)])|0);
 $1069=(($1061)|0);
 $1070=((HEAP32[(($1069)>>2)])|0);
 $1071=$1070&4;
 $1072=($1071|0)==0;
 if($1072){label=87;break;}else{label=84;break;}
 case 84: 
 $1074=(($1068)|0);
 $1075=((HEAP32[(($1074)>>2)])|0);
 $1076=$1075&4;
 $1077=($1076|0)==0;
 $1078=(($1061+8)|0);
 $1079=$1078;
 $1080=(+(HEAPF64[(($1079)>>3)]));
 $1081=(($1068+8)|0);
 if($1077){label=86;break;}else{label=85;break;}
 case 85: 
 $1083=$1081;
 $1084=(+(HEAPF64[(($1083)>>3)]));
 $1085=$1080!=$1084;
 $1086$0=($1085&1);
 $1086$1=0;
 $1087=$code_pos;
 $1088=((($1087)+(4))|0);
 $1089=(($code_1+($1088<<1))|0);
 $1090=((HEAP16[(($1089)>>1)])|0);
 $1091=($1090&65535);
 $1092=(($vm_regs_1+($1091<<2))|0);
 $1093=((HEAP32[(($1092)>>2)])|0);
 $1094=(($1093+8)|0);
 $st$114$0=(($1094)|0);
 HEAP32[(($st$114$0)>>2)]=$1086$0;
 $st$115$1=(($1094+4)|0);
 HEAP32[(($st$115$1)>>2)]=$1086$1;
 label=94;break;
 case 86: 
 $1096=(($1081)|0);
 $ld$116$0=(($1096)|0);
 $1097$0=((HEAP32[(($ld$116$0)>>2)])|0);
 $ld$117$1=(($1096+4)|0);
 $1097$1=((HEAP32[(($ld$117$1)>>2)])|0);
 $1098=((+(($1097$0>>>0)))+((+(($1097$1|0)))*4294967296.0));
 $1099=$1080!=$1098;
 $1100$0=($1099&1);
 $1100$1=0;
 $1101=$code_pos;
 $1102=((($1101)+(4))|0);
 $1103=(($code_1+($1102<<1))|0);
 $1104=((HEAP16[(($1103)>>1)])|0);
 $1105=($1104&65535);
 $1106=(($vm_regs_1+($1105<<2))|0);
 $1107=((HEAP32[(($1106)>>2)])|0);
 $1108=(($1107+8)|0);
 $st$118$0=(($1108)|0);
 HEAP32[(($st$118$0)>>2)]=$1100$0;
 $st$119$1=(($1108+4)|0);
 HEAP32[(($st$119$1)>>2)]=$1100$1;
 label=94;break;
 case 87: 
 $1110=$1070&2;
 $1111=($1110|0)==0;
 if($1111){label=91;break;}else{label=88;break;}
 case 88: 
 $1113=(($1068)|0);
 $1114=((HEAP32[(($1113)>>2)])|0);
 $1115=$1114&2;
 $1116=($1115|0)==0;
 $1117=(($1061+8)|0);
 $ld$120$0=(($1117)|0);
 $1118$0=((HEAP32[(($ld$120$0)>>2)])|0);
 $ld$121$1=(($1117+4)|0);
 $1118$1=((HEAP32[(($ld$121$1)>>2)])|0);
 if($1116){label=90;break;}else{label=89;break;}
 case 89: 
 $1120=(($1068+8)|0);
 $ld$122$0=(($1120)|0);
 $1121$0=((HEAP32[(($ld$122$0)>>2)])|0);
 $ld$123$1=(($1120+4)|0);
 $1121$1=((HEAP32[(($ld$123$1)>>2)])|0);
 $1122=(($1118$0|0) != ($1121$0|0)) | (($1118$1|0) != ($1121$1|0));
 $1123$0=($1122&1);
 $1123$1=0;
 $1124=$code_pos;
 $1125=((($1124)+(4))|0);
 $1126=(($code_1+($1125<<1))|0);
 $1127=((HEAP16[(($1126)>>1)])|0);
 $1128=($1127&65535);
 $1129=(($vm_regs_1+($1128<<2))|0);
 $1130=((HEAP32[(($1129)>>2)])|0);
 $1131=(($1130+8)|0);
 $st$124$0=(($1131)|0);
 HEAP32[(($st$124$0)>>2)]=$1123$0;
 $st$125$1=(($1131+4)|0);
 HEAP32[(($st$125$1)>>2)]=$1123$1;
 label=94;break;
 case 90: 
 $1133=((+(($1118$0>>>0)))+((+(($1118$1|0)))*4294967296.0));
 $1134=(($1068+8)|0);
 $1135=$1134;
 $1136=(+(HEAPF64[(($1135)>>3)]));
 $1137=$1133!=$1136;
 $1138$0=($1137&1);
 $1138$1=0;
 $1139=$code_pos;
 $1140=((($1139)+(4))|0);
 $1141=(($code_1+($1140<<1))|0);
 $1142=((HEAP16[(($1141)>>1)])|0);
 $1143=($1142&65535);
 $1144=(($vm_regs_1+($1143<<2))|0);
 $1145=((HEAP32[(($1144)>>2)])|0);
 $1146=(($1145+8)|0);
 $st$126$0=(($1146)|0);
 HEAP32[(($st$126$0)>>2)]=$1138$0;
 $st$127$1=(($1146+4)|0);
 HEAP32[(($st$127$1)>>2)]=$1138$1;
 label=94;break;
 case 91: 
 $1148=$1070&8;
 $1149=($1148|0)==0;
 if($1149){label=93;break;}else{label=92;break;}
 case 92: 
 $1151=(($1061+8)|0);
 $1152=$1151;
 $1153=((HEAP32[(($1152)>>2)])|0);
 $1154=(($1153+8)|0);
 $1155=((HEAP32[(($1154)>>2)])|0);
 $1156=(($1068+8)|0);
 $1157=$1156;
 $1158=((HEAP32[(($1157)>>2)])|0);
 $1159=(($1158+8)|0);
 $1160=((HEAP32[(($1159)>>2)])|0);
 $1161=((invoke_iii(12,(($1155)|0),(($1160)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $1162=($1161|0)!=0;
 $1163$0=($1162&1);
 $1163$1=0;
 $1164=$code_pos;
 $1165=((($1164)+(4))|0);
 $1166=(($code_1+($1165<<1))|0);
 $1167=((HEAP16[(($1166)>>1)])|0);
 $1168=($1167&65535);
 $1169=(($vm_regs_1+($1168<<2))|0);
 $1170=((HEAP32[(($1169)>>2)])|0);
 $1171=(($1170+8)|0);
 $st$128$0=(($1171)|0);
 HEAP32[(($st$128$0)>>2)]=$1163$0;
 $st$129$1=(($1171+4)|0);
 HEAP32[(($st$129$1)>>2)]=$1163$1;
 label=94;break;
 case 93: 
 $1173=((invoke_iiii(2,(($vm)|0),(($1061)|0),(($1068)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $1174=($1173|0)!=1;
 $1175$0=($1174&1);
 $1175$1=0;
 $1176=$code_pos;
 $1177=((($1176)+(4))|0);
 $1178=(($code_1+($1177<<1))|0);
 $1179=((HEAP16[(($1178)>>1)])|0);
 $1180=($1179&65535);
 $1181=(($vm_regs_1+($1180<<2))|0);
 $1182=((HEAP32[(($1181)>>2)])|0);
 $1183=(($1182+8)|0);
 $st$130$0=(($1183)|0);
 HEAP32[(($st$130$0)>>2)]=$1175$0;
 $st$131$1=(($1183+4)|0);
 HEAP32[(($st$131$1)>>2)]=$1175$1;
 label=94;break;
 case 94: 
 $1185=$code_pos;
 $1186=((($1185)+(4))|0);
 $1187=(($code_1+($1186<<1))|0);
 $1188=((HEAP16[(($1187)>>1)])|0);
 $1189=($1188&65535);
 $1190=(($vm_regs_1+($1189<<2))|0);
 $1191=((HEAP32[(($1190)>>2)])|0);
 $1192=(($1191)|0);
 HEAP32[(($1192)>>2)]=1;
 $1193=$code_pos;
 $1194=((($1193)+(5))|0);
 $code_pos=$1194;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 95: 
 $1196=$code_pos;
 $1197=((($1196)+(1))|0);
 $1198=(($code_1+($1197<<1))|0);
 $1199=((HEAP16[(($1198)>>1)])|0);
 $1200=($1199&65535);
 $code_pos=$1200;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 96: 
 $1202=$code_pos;
 $1203=((($1202)+(2))|0);
 $1204=(($code_1+($1203<<1))|0);
 $1205=((HEAP16[(($1204)>>1)])|0);
 $1206=($1205&65535);
 $1207=(($vm_regs_1+($1206<<2))|0);
 $1208=((HEAP32[(($1207)>>2)])|0);
 $1209=$code_pos;
 $1210=((($1209)+(3))|0);
 $1211=(($code_1+($1210<<1))|0);
 $1212=((HEAP16[(($1211)>>1)])|0);
 $1213=($1212&65535);
 $1214=(($vm_regs_1+($1213<<2))|0);
 $1215=((HEAP32[(($1214)>>2)])|0);
 $1216=(($1208+8)|0);
 $ld$132$0=(($1216)|0);
 $1217$0=((HEAP32[(($ld$132$0)>>2)])|0);
 $ld$133$1=(($1216+4)|0);
 $1217$1=((HEAP32[(($ld$133$1)>>2)])|0);
 $1218=(($1215+8)|0);
 $ld$134$0=(($1218)|0);
 $1219$0=((HEAP32[(($ld$134$0)>>2)])|0);
 $ld$135$1=(($1218+4)|0);
 $1219$1=((HEAP32[(($ld$135$1)>>2)])|0);
 $1220$0=((___muldi3($1219$0,$1219$1,$1217$0,$1217$1))|0);$1220$1=tempRet0;
 $1221=$code_pos;
 $1222=((($1221)+(4))|0);
 $1223=(($code_1+($1222<<1))|0);
 $1224=((HEAP16[(($1223)>>1)])|0);
 $1225=($1224&65535);
 $1226=(($vm_regs_1+($1225<<2))|0);
 $1227=((HEAP32[(($1226)>>2)])|0);
 $1228=(($1227+8)|0);
 $st$136$0=(($1228)|0);
 HEAP32[(($st$136$0)>>2)]=$1220$0;
 $st$137$1=(($1228+4)|0);
 HEAP32[(($st$137$1)>>2)]=$1220$1;
 $1229=$code_pos;
 $1230=((($1229)+(4))|0);
 $1231=(($code_1+($1230<<1))|0);
 $1232=((HEAP16[(($1231)>>1)])|0);
 $1233=($1232&65535);
 $1234=(($vm_regs_1+($1233<<2))|0);
 $1235=((HEAP32[(($1234)>>2)])|0);
 $1236=(($1235)|0);
 HEAP32[(($1236)>>2)]=2;
 $1237=$code_pos;
 $1238=((($1237)+(5))|0);
 $code_pos=$1238;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 97: 
 $1240=$code_pos;
 $1241=((($1240)+(2))|0);
 $1242=(($code_1+($1241<<1))|0);
 $1243=((HEAP16[(($1242)>>1)])|0);
 $1244=($1243&65535);
 $1245=(($vm_regs_1+($1244<<2))|0);
 $1246=((HEAP32[(($1245)>>2)])|0);
 $1247=$code_pos;
 $1248=((($1247)+(3))|0);
 $1249=(($code_1+($1248<<1))|0);
 $1250=((HEAP16[(($1249)>>1)])|0);
 $1251=($1250&65535);
 $1252=(($vm_regs_1+($1251<<2))|0);
 $1253=((HEAP32[(($1252)>>2)])|0);
 $1254=(($1246)|0);
 $1255=((HEAP32[(($1254)>>2)])|0);
 $1256=$1255&4;
 $1257=($1256|0)==0;
 if($1257){label=101;break;}else{label=98;break;}
 case 98: 
 $1259=(($1253)|0);
 $1260=((HEAP32[(($1259)>>2)])|0);
 $1261=$1260&4;
 $1262=($1261|0)==0;
 $1263=(($1246+8)|0);
 $1264=$1263;
 $1265=(+(HEAPF64[(($1264)>>3)]));
 $1266=(($1253+8)|0);
 if($1262){label=100;break;}else{label=99;break;}
 case 99: 
 $1268=$1266;
 $1269=(+(HEAPF64[(($1268)>>3)]));
 $1270=($1265)*($1269);
 $1271=$code_pos;
 $1272=((($1271)+(4))|0);
 $1273=(($code_1+($1272<<1))|0);
 $1274=((HEAP16[(($1273)>>1)])|0);
 $1275=($1274&65535);
 $1276=(($vm_regs_1+($1275<<2))|0);
 $1277=((HEAP32[(($1276)>>2)])|0);
 $1278=(($1277+8)|0);
 $1279=$1278;
 HEAPF64[(($1279)>>3)]=$1270;
 label=102;break;
 case 100: 
 $1281=(($1266)|0);
 $ld$138$0=(($1281)|0);
 $1282$0=((HEAP32[(($ld$138$0)>>2)])|0);
 $ld$139$1=(($1281+4)|0);
 $1282$1=((HEAP32[(($ld$139$1)>>2)])|0);
 $1283=((+(($1282$0>>>0)))+((+(($1282$1|0)))*4294967296.0));
 $1284=($1265)*($1283);
 $1285=$code_pos;
 $1286=((($1285)+(4))|0);
 $1287=(($code_1+($1286<<1))|0);
 $1288=((HEAP16[(($1287)>>1)])|0);
 $1289=($1288&65535);
 $1290=(($vm_regs_1+($1289<<2))|0);
 $1291=((HEAP32[(($1290)>>2)])|0);
 $1292=(($1291+8)|0);
 $1293=$1292;
 HEAPF64[(($1293)>>3)]=$1284;
 label=102;break;
 case 101: 
 $1295=(($1246+8)|0);
 $ld$140$0=(($1295)|0);
 $1296$0=((HEAP32[(($ld$140$0)>>2)])|0);
 $ld$141$1=(($1295+4)|0);
 $1296$1=((HEAP32[(($ld$141$1)>>2)])|0);
 $1297=((+(($1296$0>>>0)))+((+(($1296$1|0)))*4294967296.0));
 $1298=(($1253+8)|0);
 $1299=$1298;
 $1300=(+(HEAPF64[(($1299)>>3)]));
 $1301=($1297)*($1300);
 $1302=$code_pos;
 $1303=((($1302)+(4))|0);
 $1304=(($code_1+($1303<<1))|0);
 $1305=((HEAP16[(($1304)>>1)])|0);
 $1306=($1305&65535);
 $1307=(($vm_regs_1+($1306<<2))|0);
 $1308=((HEAP32[(($1307)>>2)])|0);
 $1309=(($1308+8)|0);
 $1310=$1309;
 HEAPF64[(($1310)>>3)]=$1301;
 label=102;break;
 case 102: 
 $1312=$code_pos;
 $1313=((($1312)+(4))|0);
 $1314=(($code_1+($1313<<1))|0);
 $1315=((HEAP16[(($1314)>>1)])|0);
 $1316=($1315&65535);
 $1317=(($vm_regs_1+($1316<<2))|0);
 $1318=((HEAP32[(($1317)>>2)])|0);
 $1319=(($1318)|0);
 HEAP32[(($1319)>>2)]=4;
 $1320=$code_pos;
 $1321=((($1320)+(5))|0);
 $code_pos=$1321;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 103: 
 $1323=$code_pos;
 $1324=((($1323)+(3))|0);
 $1325=(($code_1+($1324<<1))|0);
 $1326=((HEAP16[(($1325)>>1)])|0);
 $1327=($1326&65535);
 $1328=(($vm_regs_1+($1327<<2))|0);
 $1329=((HEAP32[(($1328)>>2)])|0);
 $1330=(($1329+8)|0);
 $ld$142$0=(($1330)|0);
 $1331$0=((HEAP32[(($ld$142$0)>>2)])|0);
 $ld$143$1=(($1330+4)|0);
 $1331$1=((HEAP32[(($ld$143$1)>>2)])|0);
 $$etemp$144$0=0;
 $$etemp$144$1=0;
 $1332=(($1331$0|0) == ($$etemp$144$0|0)) & (($1331$1|0) == ($$etemp$144$1|0));
 if($1332){label=104;break;}else{label=105;break;}
 case 104: 
 invoke_viii(164,(($vm)|0),((22)|0),((13488)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=105;break;
 case 105: 
 $1335=$code_pos;
 $1336=((($1335)+(2))|0);
 $1337=(($code_1+($1336<<1))|0);
 $1338=((HEAP16[(($1337)>>1)])|0);
 $1339=($1338&65535);
 $1340=(($vm_regs_1+($1339<<2))|0);
 $1341=((HEAP32[(($1340)>>2)])|0);
 $1342=$code_pos;
 $1343=((($1342)+(3))|0);
 $1344=(($code_1+($1343<<1))|0);
 $1345=((HEAP16[(($1344)>>1)])|0);
 $1346=($1345&65535);
 $1347=(($vm_regs_1+($1346<<2))|0);
 $1348=((HEAP32[(($1347)>>2)])|0);
 $1349=(($1341+8)|0);
 $ld$145$0=(($1349)|0);
 $1350$0=((HEAP32[(($ld$145$0)>>2)])|0);
 $ld$146$1=(($1349+4)|0);
 $1350$1=((HEAP32[(($ld$146$1)>>2)])|0);
 $1351=(($1348+8)|0);
 $ld$147$0=(($1351)|0);
 $1352$0=((HEAP32[(($ld$147$0)>>2)])|0);
 $ld$148$1=(($1351+4)|0);
 $1352$1=((HEAP32[(($ld$148$1)>>2)])|0);
 $1353$0=((___divdi3($1350$0,$1350$1,$1352$0,$1352$1))|0);$1353$1=tempRet0;
 $1354=$code_pos;
 $1355=((($1354)+(4))|0);
 $1356=(($code_1+($1355<<1))|0);
 $1357=((HEAP16[(($1356)>>1)])|0);
 $1358=($1357&65535);
 $1359=(($vm_regs_1+($1358<<2))|0);
 $1360=((HEAP32[(($1359)>>2)])|0);
 $1361=(($1360+8)|0);
 $st$149$0=(($1361)|0);
 HEAP32[(($st$149$0)>>2)]=$1353$0;
 $st$150$1=(($1361+4)|0);
 HEAP32[(($st$150$1)>>2)]=$1353$1;
 $1362=$code_pos;
 $1363=((($1362)+(4))|0);
 $1364=(($code_1+($1363<<1))|0);
 $1365=((HEAP16[(($1364)>>1)])|0);
 $1366=($1365&65535);
 $1367=(($vm_regs_1+($1366<<2))|0);
 $1368=((HEAP32[(($1367)>>2)])|0);
 $1369=(($1368)|0);
 HEAP32[(($1369)>>2)]=2;
 $1370=$code_pos;
 $1371=((($1370)+(5))|0);
 $code_pos=$1371;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 106: 
 $1373=$code_pos;
 $1374=((($1373)+(3))|0);
 $1375=(($code_1+($1374<<1))|0);
 $1376=((HEAP16[(($1375)>>1)])|0);
 $1377=($1376&65535);
 $1378=(($vm_regs_1+($1377<<2))|0);
 $1379=((HEAP32[(($1378)>>2)])|0);
 $1380=(($1379+8)|0);
 $ld$151$0=(($1380)|0);
 $1381$0=((HEAP32[(($ld$151$0)>>2)])|0);
 $ld$152$1=(($1380+4)|0);
 $1381$1=((HEAP32[(($ld$152$1)>>2)])|0);
 $$etemp$153$0=0;
 $$etemp$153$1=0;
 $1382=(($1381$0|0) == ($$etemp$153$0|0)) & (($1381$1|0) == ($$etemp$153$1|0));
 if($1382){label=107;break;}else{label=108;break;}
 case 107: 
 invoke_viii(164,(($vm)|0),((22)|0),((13488)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=108;break;
 case 108: 
 $1385=$code_pos;
 $1386=((($1385)+(2))|0);
 $1387=(($code_1+($1386<<1))|0);
 $1388=((HEAP16[(($1387)>>1)])|0);
 $1389=($1388&65535);
 $1390=(($vm_regs_1+($1389<<2))|0);
 $1391=((HEAP32[(($1390)>>2)])|0);
 $1392=$code_pos;
 $1393=((($1392)+(3))|0);
 $1394=(($code_1+($1393<<1))|0);
 $1395=((HEAP16[(($1394)>>1)])|0);
 $1396=($1395&65535);
 $1397=(($vm_regs_1+($1396<<2))|0);
 $1398=((HEAP32[(($1397)>>2)])|0);
 $1399=(($1391+8)|0);
 $ld$154$0=(($1399)|0);
 $1400$0=((HEAP32[(($ld$154$0)>>2)])|0);
 $ld$155$1=(($1399+4)|0);
 $1400$1=((HEAP32[(($ld$155$1)>>2)])|0);
 $1401=(($1398+8)|0);
 $ld$156$0=(($1401)|0);
 $1402$0=((HEAP32[(($ld$156$0)>>2)])|0);
 $ld$157$1=(($1401+4)|0);
 $1402$1=((HEAP32[(($ld$157$1)>>2)])|0);
 $1403$0=((___remdi3($1400$0,$1400$1,$1402$0,$1402$1))|0);$1403$1=tempRet0;
 $1404=$code_pos;
 $1405=((($1404)+(4))|0);
 $1406=(($code_1+($1405<<1))|0);
 $1407=((HEAP16[(($1406)>>1)])|0);
 $1408=($1407&65535);
 $1409=(($vm_regs_1+($1408<<2))|0);
 $1410=((HEAP32[(($1409)>>2)])|0);
 $1411=(($1410+8)|0);
 $st$158$0=(($1411)|0);
 HEAP32[(($st$158$0)>>2)]=$1403$0;
 $st$159$1=(($1411+4)|0);
 HEAP32[(($st$159$1)>>2)]=$1403$1;
 $1412=$code_pos;
 $1413=((($1412)+(4))|0);
 $1414=(($code_1+($1413<<1))|0);
 $1415=((HEAP16[(($1414)>>1)])|0);
 $1416=($1415&65535);
 $1417=(($vm_regs_1+($1416<<2))|0);
 $1418=((HEAP32[(($1417)>>2)])|0);
 $1419=(($1418)|0);
 HEAP32[(($1419)>>2)]=2;
 $1420=$code_pos;
 $1421=((($1420)+(5))|0);
 $code_pos=$1421;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 109: 
 $1423=$code_pos;
 $1424=((($1423)+(2))|0);
 $1425=(($code_1+($1424<<1))|0);
 $1426=((HEAP16[(($1425)>>1)])|0);
 $1427=($1426&65535);
 $1428=(($vm_regs_1+($1427<<2))|0);
 $1429=((HEAP32[(($1428)>>2)])|0);
 $1430=$code_pos;
 $1431=((($1430)+(3))|0);
 $1432=(($code_1+($1431<<1))|0);
 $1433=((HEAP16[(($1432)>>1)])|0);
 $1434=($1433&65535);
 $1435=(($vm_regs_1+($1434<<2))|0);
 $1436=((HEAP32[(($1435)>>2)])|0);
 $1437=(($1429+8)|0);
 $ld$160$0=(($1437)|0);
 $1438$0=((HEAP32[(($ld$160$0)>>2)])|0);
 $ld$161$1=(($1437+4)|0);
 $1438$1=((HEAP32[(($ld$161$1)>>2)])|0);
 $1439=(($1436+8)|0);
 $ld$162$0=(($1439)|0);
 $1440$0=((HEAP32[(($ld$162$0)>>2)])|0);
 $ld$163$1=(($1439+4)|0);
 $1440$1=((HEAP32[(($ld$163$1)>>2)])|0);
 $1441$0=((_bitshift64Shl((($1438$0)|0),(($1438$1)|0),(($1440$0)|0)))|0);$1441$1=tempRet0;
 $1442=$code_pos;
 $1443=((($1442)+(4))|0);
 $1444=(($code_1+($1443<<1))|0);
 $1445=((HEAP16[(($1444)>>1)])|0);
 $1446=($1445&65535);
 $1447=(($vm_regs_1+($1446<<2))|0);
 $1448=((HEAP32[(($1447)>>2)])|0);
 $1449=(($1448+8)|0);
 $st$164$0=(($1449)|0);
 HEAP32[(($st$164$0)>>2)]=$1441$0;
 $st$165$1=(($1449+4)|0);
 HEAP32[(($st$165$1)>>2)]=$1441$1;
 $1450=$code_pos;
 $1451=((($1450)+(4))|0);
 $1452=(($code_1+($1451<<1))|0);
 $1453=((HEAP16[(($1452)>>1)])|0);
 $1454=($1453&65535);
 $1455=(($vm_regs_1+($1454<<2))|0);
 $1456=((HEAP32[(($1455)>>2)])|0);
 $1457=(($1456)|0);
 HEAP32[(($1457)>>2)]=2;
 $1458=$code_pos;
 $1459=((($1458)+(5))|0);
 $code_pos=$1459;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 110: 
 $1461=$code_pos;
 $1462=((($1461)+(2))|0);
 $1463=(($code_1+($1462<<1))|0);
 $1464=((HEAP16[(($1463)>>1)])|0);
 $1465=($1464&65535);
 $1466=(($vm_regs_1+($1465<<2))|0);
 $1467=((HEAP32[(($1466)>>2)])|0);
 $1468=$code_pos;
 $1469=((($1468)+(3))|0);
 $1470=(($code_1+($1469<<1))|0);
 $1471=((HEAP16[(($1470)>>1)])|0);
 $1472=($1471&65535);
 $1473=(($vm_regs_1+($1472<<2))|0);
 $1474=((HEAP32[(($1473)>>2)])|0);
 $1475=(($1467+8)|0);
 $ld$166$0=(($1475)|0);
 $1476$0=((HEAP32[(($ld$166$0)>>2)])|0);
 $ld$167$1=(($1475+4)|0);
 $1476$1=((HEAP32[(($ld$167$1)>>2)])|0);
 $1477=(($1474+8)|0);
 $ld$168$0=(($1477)|0);
 $1478$0=((HEAP32[(($ld$168$0)>>2)])|0);
 $ld$169$1=(($1477+4)|0);
 $1478$1=((HEAP32[(($ld$169$1)>>2)])|0);
 $1479$0=((_bitshift64Ashr((($1476$0)|0),(($1476$1)|0),(($1478$0)|0)))|0);$1479$1=tempRet0;
 $1480=$code_pos;
 $1481=((($1480)+(4))|0);
 $1482=(($code_1+($1481<<1))|0);
 $1483=((HEAP16[(($1482)>>1)])|0);
 $1484=($1483&65535);
 $1485=(($vm_regs_1+($1484<<2))|0);
 $1486=((HEAP32[(($1485)>>2)])|0);
 $1487=(($1486+8)|0);
 $st$170$0=(($1487)|0);
 HEAP32[(($st$170$0)>>2)]=$1479$0;
 $st$171$1=(($1487+4)|0);
 HEAP32[(($st$171$1)>>2)]=$1479$1;
 $1488=$code_pos;
 $1489=((($1488)+(4))|0);
 $1490=(($code_1+($1489<<1))|0);
 $1491=((HEAP16[(($1490)>>1)])|0);
 $1492=($1491&65535);
 $1493=(($vm_regs_1+($1492<<2))|0);
 $1494=((HEAP32[(($1493)>>2)])|0);
 $1495=(($1494)|0);
 HEAP32[(($1495)>>2)]=2;
 $1496=$code_pos;
 $1497=((($1496)+(5))|0);
 $code_pos=$1497;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 111: 
 $1499=$code_pos;
 $1500=((($1499)+(2))|0);
 $1501=(($code_1+($1500<<1))|0);
 $1502=((HEAP16[(($1501)>>1)])|0);
 $1503=($1502&65535);
 $1504=(($vm_regs_1+($1503<<2))|0);
 $1505=((HEAP32[(($1504)>>2)])|0);
 $1506=$code_pos;
 $1507=((($1506)+(3))|0);
 $1508=(($code_1+($1507<<1))|0);
 $1509=((HEAP16[(($1508)>>1)])|0);
 $1510=($1509&65535);
 $1511=(($vm_regs_1+($1510<<2))|0);
 $1512=((HEAP32[(($1511)>>2)])|0);
 $1513=(($1505+8)|0);
 $ld$172$0=(($1513)|0);
 $1514$0=((HEAP32[(($ld$172$0)>>2)])|0);
 $ld$173$1=(($1513+4)|0);
 $1514$1=((HEAP32[(($ld$173$1)>>2)])|0);
 $1515=(($1512+8)|0);
 $ld$174$0=(($1515)|0);
 $1516$0=((HEAP32[(($ld$174$0)>>2)])|0);
 $ld$175$1=(($1515+4)|0);
 $1516$1=((HEAP32[(($ld$175$1)>>2)])|0);
 $1517$0=$1516$0&$1514$0;
 $1517$1=$1516$1&$1514$1;
 $1518=$code_pos;
 $1519=((($1518)+(4))|0);
 $1520=(($code_1+($1519<<1))|0);
 $1521=((HEAP16[(($1520)>>1)])|0);
 $1522=($1521&65535);
 $1523=(($vm_regs_1+($1522<<2))|0);
 $1524=((HEAP32[(($1523)>>2)])|0);
 $1525=(($1524+8)|0);
 $st$176$0=(($1525)|0);
 HEAP32[(($st$176$0)>>2)]=$1517$0;
 $st$177$1=(($1525+4)|0);
 HEAP32[(($st$177$1)>>2)]=$1517$1;
 $1526=$code_pos;
 $1527=((($1526)+(4))|0);
 $1528=(($code_1+($1527<<1))|0);
 $1529=((HEAP16[(($1528)>>1)])|0);
 $1530=($1529&65535);
 $1531=(($vm_regs_1+($1530<<2))|0);
 $1532=((HEAP32[(($1531)>>2)])|0);
 $1533=(($1532)|0);
 HEAP32[(($1533)>>2)]=2;
 $1534=$code_pos;
 $1535=((($1534)+(5))|0);
 $code_pos=$1535;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 112: 
 $1537=$code_pos;
 $1538=((($1537)+(2))|0);
 $1539=(($code_1+($1538<<1))|0);
 $1540=((HEAP16[(($1539)>>1)])|0);
 $1541=($1540&65535);
 $1542=(($vm_regs_1+($1541<<2))|0);
 $1543=((HEAP32[(($1542)>>2)])|0);
 $1544=$code_pos;
 $1545=((($1544)+(3))|0);
 $1546=(($code_1+($1545<<1))|0);
 $1547=((HEAP16[(($1546)>>1)])|0);
 $1548=($1547&65535);
 $1549=(($vm_regs_1+($1548<<2))|0);
 $1550=((HEAP32[(($1549)>>2)])|0);
 $1551=(($1543+8)|0);
 $ld$178$0=(($1551)|0);
 $1552$0=((HEAP32[(($ld$178$0)>>2)])|0);
 $ld$179$1=(($1551+4)|0);
 $1552$1=((HEAP32[(($ld$179$1)>>2)])|0);
 $1553=(($1550+8)|0);
 $ld$180$0=(($1553)|0);
 $1554$0=((HEAP32[(($ld$180$0)>>2)])|0);
 $ld$181$1=(($1553+4)|0);
 $1554$1=((HEAP32[(($ld$181$1)>>2)])|0);
 $1555$0=$1554$0|$1552$0;
 $1555$1=$1554$1|$1552$1;
 $1556=$code_pos;
 $1557=((($1556)+(4))|0);
 $1558=(($code_1+($1557<<1))|0);
 $1559=((HEAP16[(($1558)>>1)])|0);
 $1560=($1559&65535);
 $1561=(($vm_regs_1+($1560<<2))|0);
 $1562=((HEAP32[(($1561)>>2)])|0);
 $1563=(($1562+8)|0);
 $st$182$0=(($1563)|0);
 HEAP32[(($st$182$0)>>2)]=$1555$0;
 $st$183$1=(($1563+4)|0);
 HEAP32[(($st$183$1)>>2)]=$1555$1;
 $1564=$code_pos;
 $1565=((($1564)+(4))|0);
 $1566=(($code_1+($1565<<1))|0);
 $1567=((HEAP16[(($1566)>>1)])|0);
 $1568=($1567&65535);
 $1569=(($vm_regs_1+($1568<<2))|0);
 $1570=((HEAP32[(($1569)>>2)])|0);
 $1571=(($1570)|0);
 HEAP32[(($1571)>>2)]=2;
 $1572=$code_pos;
 $1573=((($1572)+(5))|0);
 $code_pos=$1573;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 113: 
 $1575=$code_pos;
 $1576=((($1575)+(2))|0);
 $1577=(($code_1+($1576<<1))|0);
 $1578=((HEAP16[(($1577)>>1)])|0);
 $1579=($1578&65535);
 $1580=(($vm_regs_1+($1579<<2))|0);
 $1581=((HEAP32[(($1580)>>2)])|0);
 $1582=$code_pos;
 $1583=((($1582)+(3))|0);
 $1584=(($code_1+($1583<<1))|0);
 $1585=((HEAP16[(($1584)>>1)])|0);
 $1586=($1585&65535);
 $1587=(($vm_regs_1+($1586<<2))|0);
 $1588=((HEAP32[(($1587)>>2)])|0);
 $1589=(($1581+8)|0);
 $ld$184$0=(($1589)|0);
 $1590$0=((HEAP32[(($ld$184$0)>>2)])|0);
 $ld$185$1=(($1589+4)|0);
 $1590$1=((HEAP32[(($ld$185$1)>>2)])|0);
 $1591=(($1588+8)|0);
 $ld$186$0=(($1591)|0);
 $1592$0=((HEAP32[(($ld$186$0)>>2)])|0);
 $ld$187$1=(($1591+4)|0);
 $1592$1=((HEAP32[(($ld$187$1)>>2)])|0);
 $1593$0=$1592$0^$1590$0;
 $1593$1=$1592$1^$1590$1;
 $1594=$code_pos;
 $1595=((($1594)+(4))|0);
 $1596=(($code_1+($1595<<1))|0);
 $1597=((HEAP16[(($1596)>>1)])|0);
 $1598=($1597&65535);
 $1599=(($vm_regs_1+($1598<<2))|0);
 $1600=((HEAP32[(($1599)>>2)])|0);
 $1601=(($1600+8)|0);
 $st$188$0=(($1601)|0);
 HEAP32[(($st$188$0)>>2)]=$1593$0;
 $st$189$1=(($1601+4)|0);
 HEAP32[(($st$189$1)>>2)]=$1593$1;
 $1602=$code_pos;
 $1603=((($1602)+(4))|0);
 $1604=(($code_1+($1603<<1))|0);
 $1605=((HEAP16[(($1604)>>1)])|0);
 $1606=($1605&65535);
 $1607=(($vm_regs_1+($1606<<2))|0);
 $1608=((HEAP32[(($1607)>>2)])|0);
 $1609=(($1608)|0);
 HEAP32[(($1609)>>2)]=2;
 $1610=$code_pos;
 $1611=((($1610)+(5))|0);
 $code_pos=$1611;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 114: 
 $1613=$code_pos;
 $1614=((($1613)+(3))|0);
 $1615=(($code_1+($1614<<1))|0);
 $1616=((HEAP16[(($1615)>>1)])|0);
 $1617=($1616&65535);
 $1618=(($vm_regs_1+($1617<<2))|0);
 $1619=((HEAP32[(($1618)>>2)])|0);
 $1620=(($1619)|0);
 $1621=((HEAP32[(($1620)>>2)])|0);
 $1622=$1621&2;
 $1623=($1622|0)==0;
 if($1623){label=117;break;}else{label=115;break;}
 case 115: 
 $1625=(($1619+8)|0);
 $ld$190$0=(($1625)|0);
 $1626$0=((HEAP32[(($ld$190$0)>>2)])|0);
 $ld$191$1=(($1625+4)|0);
 $1626$1=((HEAP32[(($ld$191$1)>>2)])|0);
 $$etemp$192$0=0;
 $$etemp$192$1=0;
 $1627=(($1626$0|0) == ($$etemp$192$0|0)) & (($1626$1|0) == ($$etemp$192$1|0));
 if($1627){label=116;break;}else{label=117;break;}
 case 116: 
 invoke_viii(164,(($vm)|0),((22)|0),((13488)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=120;break;
 case 117: 
 $1630=((HEAP32[(($1620)>>2)])|0);
 $1631=$1630&4;
 $1632=($1631|0)==0;
 if($1632){label=120;break;}else{label=118;break;}
 case 118: 
 $1634=(($1619+8)|0);
 $1635=$1634;
 $1636=(+(HEAPF64[(($1635)>>3)]));
 $1637=$1636==(0.0);
 if($1637){label=119;break;}else{label=120;break;}
 case 119: 
 invoke_viii(164,(($vm)|0),((22)|0),((13488)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=120;break;
 case 120: 
 $1640=$code_pos;
 $1641=((($1640)+(2))|0);
 $1642=(($code_1+($1641<<1))|0);
 $1643=((HEAP16[(($1642)>>1)])|0);
 $1644=($1643&65535);
 $1645=(($vm_regs_1+($1644<<2))|0);
 $1646=((HEAP32[(($1645)>>2)])|0);
 $1647=$code_pos;
 $1648=((($1647)+(3))|0);
 $1649=(($code_1+($1648<<1))|0);
 $1650=((HEAP16[(($1649)>>1)])|0);
 $1651=($1650&65535);
 $1652=(($vm_regs_1+($1651<<2))|0);
 $1653=((HEAP32[(($1652)>>2)])|0);
 $1654=(($1646)|0);
 $1655=((HEAP32[(($1654)>>2)])|0);
 $1656=$1655&4;
 $1657=($1656|0)==0;
 if($1657){label=124;break;}else{label=121;break;}
 case 121: 
 $1659=(($1653)|0);
 $1660=((HEAP32[(($1659)>>2)])|0);
 $1661=$1660&4;
 $1662=($1661|0)==0;
 $1663=(($1646+8)|0);
 $1664=$1663;
 $1665=(+(HEAPF64[(($1664)>>3)]));
 $1666=(($1653+8)|0);
 if($1662){label=123;break;}else{label=122;break;}
 case 122: 
 $1668=$1666;
 $1669=(+(HEAPF64[(($1668)>>3)]));
 $1670=($1665)/($1669);
 $1671=$code_pos;
 $1672=((($1671)+(4))|0);
 $1673=(($code_1+($1672<<1))|0);
 $1674=((HEAP16[(($1673)>>1)])|0);
 $1675=($1674&65535);
 $1676=(($vm_regs_1+($1675<<2))|0);
 $1677=((HEAP32[(($1676)>>2)])|0);
 $1678=(($1677+8)|0);
 $1679=$1678;
 HEAPF64[(($1679)>>3)]=$1670;
 label=125;break;
 case 123: 
 $1681=(($1666)|0);
 $ld$193$0=(($1681)|0);
 $1682$0=((HEAP32[(($ld$193$0)>>2)])|0);
 $ld$194$1=(($1681+4)|0);
 $1682$1=((HEAP32[(($ld$194$1)>>2)])|0);
 $1683=((+(($1682$0>>>0)))+((+(($1682$1|0)))*4294967296.0));
 $1684=($1665)/($1683);
 $1685=$code_pos;
 $1686=((($1685)+(4))|0);
 $1687=(($code_1+($1686<<1))|0);
 $1688=((HEAP16[(($1687)>>1)])|0);
 $1689=($1688&65535);
 $1690=(($vm_regs_1+($1689<<2))|0);
 $1691=((HEAP32[(($1690)>>2)])|0);
 $1692=(($1691+8)|0);
 $1693=$1692;
 HEAPF64[(($1693)>>3)]=$1684;
 label=125;break;
 case 124: 
 $1695=(($1646+8)|0);
 $ld$195$0=(($1695)|0);
 $1696$0=((HEAP32[(($ld$195$0)>>2)])|0);
 $ld$196$1=(($1695+4)|0);
 $1696$1=((HEAP32[(($ld$196$1)>>2)])|0);
 $1697=((+(($1696$0>>>0)))+((+(($1696$1|0)))*4294967296.0));
 $1698=(($1653+8)|0);
 $1699=$1698;
 $1700=(+(HEAPF64[(($1699)>>3)]));
 $1701=($1697)/($1700);
 $1702=$code_pos;
 $1703=((($1702)+(4))|0);
 $1704=(($code_1+($1703<<1))|0);
 $1705=((HEAP16[(($1704)>>1)])|0);
 $1706=($1705&65535);
 $1707=(($vm_regs_1+($1706<<2))|0);
 $1708=((HEAP32[(($1707)>>2)])|0);
 $1709=(($1708+8)|0);
 $1710=$1709;
 HEAPF64[(($1710)>>3)]=$1701;
 label=125;break;
 case 125: 
 $1712=$code_pos;
 $1713=((($1712)+(4))|0);
 $1714=(($code_1+($1713<<1))|0);
 $1715=((HEAP16[(($1714)>>1)])|0);
 $1716=($1715&65535);
 $1717=(($vm_regs_1+($1716<<2))|0);
 $1718=((HEAP32[(($1717)>>2)])|0);
 $1719=(($1718)|0);
 HEAP32[(($1719)>>2)]=4;
 $1720=$code_pos;
 $1721=((($1720)+(5))|0);
 $code_pos=$1721;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 126: 
 $1723=$code_pos;
 $1724=((($1723)+(2))|0);
 $1725=(($code_1+($1724<<1))|0);
 $1726=((HEAP16[(($1725)>>1)])|0);
 $1727=($1726&65535);
 $1728=(($vm_regs_1+($1727<<2))|0);
 $1729=((HEAP32[(($1728)>>2)])|0);
 $1730=(($1729)|0);
 $1731=((HEAP32[(($1730)>>2)])|0);
 $1732=$1731&3;
 $1733=($1732|0)==0;
 if($1733){label=128;break;}else{label=127;break;}
 case 127: 
 $1735=(($1729+8)|0);
 $ld$197$0=(($1735)|0);
 $1736$0=((HEAP32[(($ld$197$0)>>2)])|0);
 $ld$198$1=(($1735+4)|0);
 $1736$1=((HEAP32[(($ld$198$1)>>2)])|0);
 $$etemp$199$0=0;
 $$etemp$199$1=0;
 $1737=(($1736$0|0) == ($$etemp$199$0|0)) & (($1736$1|0) == ($$etemp$199$1|0));
 $1738=($1737&1);
 $result_0=$1738;label=132;break;
 case 128: 
 $1740=$1731&8;
 $1741=($1740|0)==0;
 if($1741){label=130;break;}else{label=129;break;}
 case 129: 
 $1743=(($1729+8)|0);
 $1744=$1743;
 $1745=((HEAP32[(($1744)>>2)])|0);
 $1746=(($1745+4)|0);
 $1747=((HEAP32[(($1746)>>2)])|0);
 $1748=($1747|0)==0;
 $1749=($1748&1);
 $result_0=$1749;label=132;break;
 case 130: 
 $1751=$1731&128;
 $1752=($1751|0)==0;
 if($1752){$result_0=1;label=132;break;}else{label=131;break;}
 case 131: 
 $1754=(($1729+8)|0);
 $1755=$1754;
 $1756=((HEAP32[(($1755)>>2)])|0);
 $1757=(($1756+8)|0);
 $1758=((HEAP32[(($1757)>>2)])|0);
 $1759=($1758|0)==0;
 $1760=($1759&1);
 $result_0=$1760;label=132;break;
 case 132: 

 $1762=$code_pos;
 $1763=((($1762)+(1))|0);
 $1764=(($code_1+($1763<<1))|0);
 $1765=((HEAP16[(($1764)>>1)])|0);
 $1766=($1765&65535);
 $1767=($result_0|0)==($1766|0);
 $1768=$code_pos;
 if($1767){label=134;break;}else{label=133;break;}
 case 133: 
 $1770=((($1768)+(3))|0);
 $1771=(($code_1+($1770<<1))|0);
 $1772=((HEAP16[(($1771)>>1)])|0);
 $1773=($1772&65535);
 $code_pos=$1773;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 134: 
 $1775=((($1768)+(4))|0);
 $code_pos=$1775;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 135: 
 $1777=$code_pos;
 $1778=((($1777)+(2))|0);
 $1779=(($code_1+($1778<<1))|0);
 $1780=((HEAP16[(($1779)>>1)])|0);
 $1781=($1780&65535);
 $1782=((HEAP32[(($60)>>2)])|0);
 $1783=(($1782+($1781<<2))|0);
 $1784=((HEAP32[(($1783)>>2)])|0);
 $1785=(($1784+24)|0);
 $1786=$1785;
 $1787=((HEAP32[(($1786)>>2)])|0);
 $fval_0=$1787;label=136;break;
 case 136: 

 $1789=(($current_frame_1+40)|0);
 $1790=((HEAP32[(($1789)>>2)])|0);
 $1791=($1790|0)==0;
 if($1791){label=137;break;}else{label=140;break;}
 case 137: 
 $1793=((HEAP32[(($61)>>2)])|0);
 $1794=($1793>>>0)>((100)>>>0);
 if($1794){label=138;break;}else{label=139;break;}
 case 138: 
 invoke_viii(164,(($vm)|0),((19)|0),((15664)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=139;break;
 case 139: 
 invoke_vi(2,(($vm)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=140;break;
 case 140: 
 $1798=$code_pos;
 $1799=((($1798)+(3))|0);
 $1800=(($code_1+($1799<<1))|0);
 $1801=((HEAP16[(($1800)>>1)])|0);
 $1802=($1801&65535);
 $1803=$code_pos;
 $1804=((($1803)+(1))|0);
 $1805=(($code_1+($1804<<1))|0);
 $1806=((HEAP16[(($1805)>>1)])|0);
 $1807=($1806&65535);
 $1808=(($current_frame_1+20)|0);
 HEAP32[(($1808)>>2)]=$1807;
 $1809=$code_pos;
 $1810=((($1802)+(5))|0);
 $1811=((($1810)+($1809))|0);
 $1812=(($current_frame_1+16)|0);
 HEAP32[(($1812)>>2)]=$1811;
 $1813=(($current_frame_1+28)|0);
 HEAP32[(($1813)>>2)]=$upvalues_1;
 $1814=(($fval_0+24)|0);
 $1815=((HEAP32[(($1814)>>2)])|0);
 $1816=((HEAP32[(($1789)>>2)])|0);
 HEAP32[(($1)>>2)]=$1816;
 $1817=(($1816)|0);
 HEAP32[(($1817)>>2)]=$fval_0;
 $1818=(($1816+20)|0);
 HEAP32[(($1818)>>2)]=-1;
 $1819=(($1816+12)|0);
 HEAP32[(($1819)>>2)]=0;
 $1820=(($1816+32)|0);
 HEAP32[(($1820)>>2)]=0;
 $1821=(($1816+28)|0);
 HEAP32[(($1821)>>2)]=0;
 $1822=(($1816+8)|0);
 HEAP32[(($1822)>>2)]=1;
 $1823=((HEAP32[(($62)>>2)])|0);
 $1824=((($1823)+(1))|0);
 HEAP32[(($62)>>2)]=$1824;
 $1825=((HEAP32[(($57)>>2)])|0);
 $1826=((($1825)+(1))|0);
 HEAP32[(($57)>>2)]=$1826;
 $1827=$code_pos;
 $_sum=((($1827)+(4))|0);
 $1828=(($code_1+($_sum<<1))|0);
 invoke_viii((($1815)|0),(($vm)|0),(($1801)|0),(($1828)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $1829=((HEAP32[(($11)>>2)])|0);
 $1830=($1829|0)==($offset_max_registers_0|0);
 if($1830){$regs_from_main_2=$regs_from_main_1;$vm_regs_2=$vm_regs_1;$offset_max_registers_1=$offset_max_registers_0;label=142;break;}else{label=141;break;}
 case 141: 
 $1832=((HEAP32[(($9)>>2)])|0);
 $1833=((HEAP32[(($7)>>2)])|0);
 $regs_from_main_2=$1832;$vm_regs_2=$1833;$offset_max_registers_1=$1829;label=142;break;
 case 142: 



 $1835=((HEAP32[(($57)>>2)])|0);
 $1836=((($1835)-(1))|0);
 HEAP32[(($57)>>2)]=$1836;
 $1837=(($1816+36)|0);
 $1838=((HEAP32[(($1837)>>2)])|0);
 HEAP32[(($1)>>2)]=$1838;
 $1839=((($1802)+(5))|0);
 $1840=$code_pos;
 $1841=((($1839)+($1840))|0);
 $code_pos=$1841;
 $1842=((HEAP32[(($62)>>2)])|0);
 $1843=((($1842)-(1))|0);
 HEAP32[(($62)>>2)]=$1843;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_2;$vm_regs_1=$vm_regs_2;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_1;$current_frame_1=$1838;$upvalues_1=$upvalues_1;label=8;break;
 case 143: 
 $1845=$code_pos;
 $1846=((($1845)+(2))|0);
 $1847=(($code_1+($1846<<1))|0);
 $1848=((HEAP16[(($1847)>>1)])|0);
 $1849=($1848&65535);
 $1850=((HEAP32[(($63)>>2)])|0);
 $1851=(($1850+($1849<<2))|0);
 $1852=((HEAP32[(($1851)>>2)])|0);
 $1853=(($1852+24)|0);
 $1854=$1853;
 $1855=((HEAP32[(($1854)>>2)])|0);
 $fval_1=$1855;label=144;break;
 case 144: 

 $1857=(($current_frame_1+40)|0);
 $1858=((HEAP32[(($1857)>>2)])|0);
 $1859=($1858|0)==0;
 if($1859){label=145;break;}else{label=148;break;}
 case 145: 
 $1861=((HEAP32[(($64)>>2)])|0);
 $1862=($1861>>>0)>((100)>>>0);
 if($1862){label=146;break;}else{label=147;break;}
 case 146: 
 invoke_viii(164,(($vm)|0),((19)|0),((15664)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=147;break;
 case 147: 
 invoke_vi(2,(($vm)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=148;break;
 case 148: 
 $1866=$code_pos;
 $1867=((($1866)+(3))|0);
 $1868=(($code_1+($1867<<1))|0);
 $1869=((HEAP16[(($1868)>>1)])|0);
 $1870=($1869&65535);
 $1871=$code_pos;
 $1872=((($1871)+(1))|0);
 $1873=(($code_1+($1872<<1))|0);
 $1874=((HEAP16[(($1873)>>1)])|0);
 $1875=($1874&65535);
 $1876=(($current_frame_1+20)|0);
 HEAP32[(($1876)>>2)]=$1875;
 $1877=$code_pos;
 $1878=((($1870)+(5))|0);
 $1879=((($1878)+($1877))|0);
 $1880=(($current_frame_1+16)|0);
 HEAP32[(($1880)>>2)]=$1879;
 $1881=(($current_frame_1+28)|0);
 HEAP32[(($1881)>>2)]=$upvalues_1;
 $1882=(($fval_1+38)|0);
 $1883=((HEAP16[(($1882)>>1)])|0);
 $1884=($1883&65535);
 $1885=((($1884)+($num_registers_0))|0);
 $1886=($1885|0)>($offset_max_registers_0|0);
 if($1886){label=149;break;}else{$regs_from_main_3=$regs_from_main_1;$vm_regs_3=$vm_regs_1;$offset_max_registers_2=$offset_max_registers_0;label=150;break;}
 case 149: 
 invoke_vii(32,(($vm)|0),(($1885)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $1888=((HEAP32[(($9)>>2)])|0);
 $1889=((HEAP32[(($7)>>2)])|0);
 $1890=((HEAP32[(($11)>>2)])|0);
 $regs_from_main_3=$1888;$vm_regs_3=$1889;$offset_max_registers_2=$1890;label=150;break;
 case 150: 



 $1892=$code_pos;
 $1893=(($code_1+($1892<<1))|0);
 invoke_viii(136,(($vm)|0),(($fval_1)|0),(($1893)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $1894=((HEAP32[(($57)>>2)])|0);
 $1895=$code_pos;
 $1896=((($1895)+(4))|0);
 $1897=(($code_1+($1896<<1))|0);
 $1898=((HEAP16[(($1897)>>1)])|0);
 $1899=($1898&65535);
 $1900=(($vm_regs_3+($1899<<2))|0);
 $1901=((HEAP32[(($1900)>>2)])|0);
 $1902=(($current_frame_1+4)|0);
 HEAP32[(($1902)>>2)]=$1901;
 $1903=(($current_frame_1+8)|0);
 $1904=((HEAP32[(($1903)>>2)])|0);
 $1905=(($vm_regs_3+($1904<<2))|0);
 HEAP32[(($7)>>2)]=$1905;
 $1906=((HEAP32[(($1857)>>2)])|0);
 HEAP32[(($1)>>2)]=$1906;
 $1907=(($1906)|0);
 HEAP32[(($1907)>>2)]=$fval_1;
 $1908=((HEAP16[(($1882)>>1)])|0);
 $1909=($1908&65535);
 $1910=(($1906+8)|0);
 HEAP32[(($1910)>>2)]=$1909;
 $1911=(($fval_1+28)|0);
 $1912=((HEAP32[(($1911)>>2)])|0);
 $1913=(($1906+12)|0);
 HEAP32[(($1913)>>2)]=$1912;
 $1914=(($1906+28)|0);
 HEAP32[(($1914)>>2)]=0;
 $1915=((HEAP32[(($65)>>2)])|0);
 $1916=((($1915)+(1))|0);
 HEAP32[(($65)>>2)]=$1916;
 $1917=((HEAP32[(($1911)>>2)])|0);
 $code_pos=0;
 $code_1=$1917;$regs_from_main_1=$regs_from_main_3;$vm_regs_1=$1905;$num_registers_0=$1894;$offset_max_registers_0=$offset_max_registers_2;$current_frame_1=$1906;$upvalues_1=0;label=8;break;
 case 151: 
 $1919=$code_pos;
 $1920=((($1919)+(2))|0);
 $1921=(($code_1+($1920<<1))|0);
 $1922=((HEAP16[(($1921)>>1)])|0);
 $1923=($1922&65535);
 $1924=(($vm_regs_1+($1923<<2))|0);
 $1925=((HEAP32[(($1924)>>2)])|0);
 $1926=(($1925+8)|0);
 $1927=$1926;
 $1928=((HEAP32[(($1927)>>2)])|0);
 $1929=(($1928+28)|0);
 $1930=((HEAP32[(($1929)>>2)])|0);
 $1931=($1930|0)==0;
 if($1931){$fval_0=$1928;label=136;break;}else{$fval_1=$1928;label=144;break;}
 case 152: 
 $1933=$code_pos;
 $1934=(($code_1+($1933<<1))|0);
 invoke_vii(4,(($vm)|0),(($1934)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $1935=$code_pos;
 $1936=((($1935)+(2))|0);
 $1937=(($code_1+($1936<<1))|0);
 $1938=((HEAP16[(($1937)>>1)])|0);
 $1939=($1938&65535);
 $1940=((($1939)+(4))|0);
 $1941=$code_pos;
 $1942=((($1940)+($1941))|0);
 $code_pos=$1942;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 153: 
 $1944=$code_pos;
 $1945=((($1944)+(2))|0);
 $1946=(($code_1+($1945<<1))|0);
 $1947=((HEAP16[(($1946)>>1)])|0);
 $1948=($1947&65535);
 $1949=(($vm_regs_1+($1948<<2))|0);
 $1950=((HEAP32[(($1949)>>2)])|0);
 $1951=$code_pos;
 $1952=((($1951)+(3))|0);
 $1953=(($code_1+($1952<<1))|0);
 $1954=((HEAP16[(($1953)>>1)])|0);
 $1955=($1954&65535);
 $1956=(($vm_regs_1+($1955<<2))|0);
 $1957=((HEAP32[(($1956)>>2)])|0);
 $1958=(($1950)|0);
 $1959=((HEAP32[(($1958)>>2)])|0);
 $1960=(($1957)|0);
 HEAP32[(($1960)>>2)]=$1959;
 $1961=(($1950+8)|0);
 $ld$200$0=(($1961)|0);
 $1962$0=((HEAP32[(($ld$200$0)>>2)])|0);
 $ld$201$1=(($1961+4)|0);
 $1962$1=((HEAP32[(($ld$201$1)>>2)])|0);
 $$etemp$202$0=0;
 $$etemp$202$1=0;
 $1963=(($1962$0|0) == ($$etemp$202$0|0)) & (($1962$1|0) == ($$etemp$202$1|0));
 $1964$0=($1963&1);
 $1964$1=0;
 $1965=(($1957+8)|0);
 $st$203$0=(($1965)|0);
 HEAP32[(($st$203$0)>>2)]=$1964$0;
 $st$204$1=(($1965+4)|0);
 HEAP32[(($st$204$1)>>2)]=$1964$1;
 $1966=$code_pos;
 $1967=((($1966)+(4))|0);
 $code_pos=$1967;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 154: 
 $1969=$code_pos;
 $1970=((($1969)+(2))|0);
 $1971=(($code_1+($1970<<1))|0);
 $1972=((HEAP16[(($1971)>>1)])|0);
 $1973=($1972&65535);
 $1974=(($vm_regs_1+($1973<<2))|0);
 $1975=((HEAP32[(($1974)>>2)])|0);
 $1976=$code_pos;
 $1977=((($1976)+(3))|0);
 $1978=(($code_1+($1977<<1))|0);
 $1979=((HEAP16[(($1978)>>1)])|0);
 $1980=($1979&65535);
 $1981=(($vm_regs_1+($1980<<2))|0);
 $1982=((HEAP32[(($1981)>>2)])|0);
 $1983=(($1982)|0);
 HEAP32[(($1983)>>2)]=2;
 $1984=(($1975+8)|0);
 $ld$205$0=(($1984)|0);
 $1985$0=((HEAP32[(($ld$205$0)>>2)])|0);
 $ld$206$1=(($1984+4)|0);
 $1985$1=((HEAP32[(($ld$206$1)>>2)])|0);
 $$etemp$207$0=0;
 $$etemp$207$1=0;
 $1986$0=((_i64Subtract($$etemp$207$0,$$etemp$207$1,$1985$0,$1985$1))|0);$1986$1=tempRet0;
 $1987=(($1982+8)|0);
 $st$208$0=(($1987)|0);
 HEAP32[(($st$208$0)>>2)]=$1986$0;
 $st$209$1=(($1987+4)|0);
 HEAP32[(($st$209$1)>>2)]=$1986$1;
 $1988=$code_pos;
 $1989=((($1988)+(4))|0);
 $code_pos=$1989;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 155: 
 $1991=(($current_frame_1+36)|0);
 $1992=((HEAP32[(($1991)>>2)])|0);
 $1993=(($1992+4)|0);
 $1994=((HEAP32[(($1993)>>2)])|0);
 $1995=$code_pos;
 $1996=((($1995)+(2))|0);
 $1997=(($code_1+($1996<<1))|0);
 $1998=((HEAP16[(($1997)>>1)])|0);
 $1999=($1998&65535);
 $2000=(($vm_regs_1+($1999<<2))|0);
 $2001=((HEAP32[(($2000)>>2)])|0);
 invoke_vii(64,(($1994)|0),(($2001)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=156;break;
 case 156: 
 $2003=(($current_frame_1+32)|0);
 HEAP32[(($2003)>>2)]=0;
 $2004=(($current_frame_1+36)|0);
 $2005=((HEAP32[(($2004)>>2)])|0);
 HEAP32[(($1)>>2)]=$2005;
 $2006=((HEAP32[(($66)>>2)])|0);
 $2007=((($2006)-(1))|0);
 HEAP32[(($66)>>2)]=$2007;
 $2008=(($2005+40)|0);
 $2009=((HEAP32[(($2008)>>2)])|0);
 $2010=(($2009+8)|0);
 $2011=((HEAP32[(($2010)>>2)])|0);
 $2012=((($num_registers_0)-($2011))|0);
 HEAP32[(($57)>>2)]=$2012;
 $2013=(($2005+8)|0);
 $2014=((HEAP32[(($2013)>>2)])|0);
 $2015=(((-$2014))|0);
 $2016=(($vm_regs_1+($2015<<2))|0);
 HEAP32[(($7)>>2)]=$2016;
 $2017=(($2005+28)|0);
 $2018=((HEAP32[(($2017)>>2)])|0);
 $2019=(($2005+12)|0);
 $2020=((HEAP32[(($2019)>>2)])|0);
 $2021=(($2005+16)|0);
 $2022=((HEAP32[(($2021)>>2)])|0);
 $code_pos=$2022;
 $code_1=$2020;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$2016;$num_registers_0=$2012;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$2005;$upvalues_1=$2018;label=8;break;
 case 157: 
 $2024=$code_pos;
 $2025=((($2024)+(2))|0);
 $2026=(($code_1+($2025<<1))|0);
 $2027=((HEAP16[(($2026)>>1)])|0);
 $2028=($2027&65535);
 $2029=(($regs_from_main_1+($2028<<2))|0);
 $2030=((HEAP32[(($2029)>>2)])|0);
 $2031=$code_pos;
 $2032=((($2031)+(3))|0);
 $2033=(($code_1+($2032<<1))|0);
 $2034=((HEAP16[(($2033)>>1)])|0);
 $2035=($2034&65535);
 $2036=(($vm_regs_1+($2035<<2))|0);
 $2037=((HEAP32[(($2036)>>2)])|0);
 invoke_vii(64,(($2037)|0),(($2030)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2038=$code_pos;
 $2039=((($2038)+(4))|0);
 $code_pos=$2039;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 158: 
 $2041=$code_pos;
 $2042=((($2041)+(2))|0);
 $2043=(($code_1+($2042<<1))|0);
 $2044=((HEAP16[(($2043)>>1)])|0);
 $2045=($2044&65535);
 $2046=(($vm_regs_1+($2045<<2))|0);
 $2047=((HEAP32[(($2046)>>2)])|0);
 $2048=$code_pos;
 $2049=((($2048)+(3))|0);
 $2050=(($code_1+($2049<<1))|0);
 $2051=((HEAP16[(($2050)>>1)])|0);
 $2052=($2051&65535);
 $2053=(($regs_from_main_1+($2052<<2))|0);
 $2054=((HEAP32[(($2053)>>2)])|0);
 invoke_vii(64,(($2054)|0),(($2047)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2055=$code_pos;
 $2056=((($2055)+(4))|0);
 $code_pos=$2056;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 159: 
 $2058=$code_pos;
 $2059=((($2058)+(2))|0);
 $2060=(($code_1+($2059<<1))|0);
 $2061=((HEAP16[(($2060)>>1)])|0);
 $2062=($2061&65535);
 $2063=(($vm_regs_1+($2062<<2))|0);
 $2064=((HEAP32[(($2063)>>2)])|0);
 $2065=$code_pos;
 $2066=((($2065)+(3))|0);
 $2067=(($code_1+($2066<<1))|0);
 $2068=((HEAP16[(($2067)>>1)])|0);
 $2069=($2068&65535);
 $2070=(($vm_regs_1+($2069<<2))|0);
 $2071=((HEAP32[(($2070)>>2)])|0);
 invoke_vii(64,(($2071)|0),(($2064)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2072=$code_pos;
 $2073=((($2072)+(4))|0);
 $code_pos=$2073;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 160: 
 $2075=$code_pos;
 invoke_viii(30,(($vm)|0),(($code_1)|0),(($2075)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2076=$code_pos;
 $2077=((($2076)+(5))|0);
 $code_pos=$2077;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 161: 
 $2079=$code_pos;
 invoke_viii(68,(($vm)|0),(($code_1)|0),(($2079)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2080=$code_pos;
 $2081=((($2080)+(5))|0);
 $code_pos=$2081;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 162: 
 $2083=$code_pos;
 invoke_viii(80,(($vm)|0),(($code_1)|0),(($2083)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2084=$code_pos;
 $2085=((($2084)+(5))|0);
 $code_pos=$2085;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 163: 
 $2087=$code_pos;
 invoke_viii(60,(($vm)|0),(($code_1)|0),(($2087)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2088=$code_pos;
 $2089=((($2088)+(5))|0);
 $code_pos=$2089;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 164: 
 $2091=$code_pos;
 invoke_viii(20,(($vm)|0),(($code_1)|0),(($2091)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2092=$code_pos;
 $2093=((($2092)+(2))|0);
 $2094=(($code_1+($2093<<1))|0);
 $2095=((HEAP16[(($2094)>>1)])|0);
 $2096=($2095&65535);
 $2097=((($2096)+(4))|0);
 $2098=$code_pos;
 $2099=((($2097)+($2098))|0);
 $code_pos=$2099;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 165: 
 $2101=$code_pos;
 $2102=(($code_1+($2101<<1))|0);
 invoke_vii(18,(($vm)|0),(($2102)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2103=$code_pos;
 $2104=((($2103)+(2))|0);
 $2105=(($code_1+($2104<<1))|0);
 $2106=((HEAP16[(($2105)>>1)])|0);
 $2107=($2106&65535);
 $2108=((($2107)+(4))|0);
 $2109=$code_pos;
 $2110=((($2108)+($2109))|0);
 $code_pos=$2110;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 166: 
 $2112=$code_pos;
 $2113=(($code_1+($2112<<1))|0);
 invoke_vii(12,(($vm)|0),(($2113)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2114=$code_pos;
 $2115=((($2114)+(4))|0);
 $2116=(($code_1+($2115<<1))|0);
 $2117=((HEAP16[(($2116)>>1)])|0);
 $2118=($2117&65535);
 $2119=((($2118)+(6))|0);
 $2120=$code_pos;
 $2121=((($2119)+($2120))|0);
 $code_pos=$2121;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 167: 
 $2123=$code_pos;
 $2124=(($code_1+($2123<<1))|0);
 invoke_vii(44,(($vm)|0),(($2124)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2125=$code_pos;
 $2126=((($2125)+(5))|0);
 $code_pos=$2126;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 168: 
 $2128=$code_pos;
 $2129=(($code_1+($2128<<1))|0);
 invoke_vii(16,(($vm)|0),(($2129)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2130=$code_pos;
 $2131=((($2130)+(4))|0);
 $code_pos=$2131;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 169: 
 $2133=$code_pos;
 $2134=((($2133)+(2))|0);
 $2135=(($code_1+($2134<<1))|0);
 $2136=((HEAP16[(($2135)>>1)])|0);
 $2137=($2136&65535);
 $2138=(($upvalues_1+($2137<<2))|0);
 $2139=((HEAP32[(($2138)>>2)])|0);
 $2140=$code_pos;
 $2141=((($2140)+(3))|0);
 $2142=(($code_1+($2141<<1))|0);
 $2143=((HEAP16[(($2142)>>1)])|0);
 $2144=($2143&65535);
 $2145=(($vm_regs_1+($2144<<2))|0);
 $2146=((HEAP32[(($2145)>>2)])|0);
 $2147=($2139|0)==0;
 if($2147){label=170;break;}else{label=171;break;}
 case 170: 
 $2149=((invoke_ii(8,(($2146)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2150=$code_pos;
 $2151=((($2150)+(2))|0);
 $2152=(($code_1+($2151<<1))|0);
 $2153=((HEAP16[(($2152)>>1)])|0);
 $2154=($2153&65535);
 $2155=(($upvalues_1+($2154<<2))|0);
 HEAP32[(($2155)>>2)]=$2149;
 label=172;break;
 case 171: 
 invoke_vii(64,(($2139)|0),(($2146)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=172;break;
 case 172: 
 $2158=$code_pos;
 $2159=((($2158)+(4))|0);
 $code_pos=$2159;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 173: 
 $2161=$code_pos;
 $2162=((($2161)+(3))|0);
 $2163=(($code_1+($2162<<1))|0);
 $2164=((HEAP16[(($2163)>>1)])|0);
 $2165=($2164&65535);
 $2166=(($vm_regs_1+($2165<<2))|0);
 $2167=((HEAP32[(($2166)>>2)])|0);
 $2168=$code_pos;
 $2169=((($2168)+(2))|0);
 $2170=(($code_1+($2169<<1))|0);
 $2171=((HEAP16[(($2170)>>1)])|0);
 $2172=($2171&65535);
 $2173=(($upvalues_1+($2172<<2))|0);
 $2174=((HEAP32[(($2173)>>2)])|0);
 invoke_vii(64,(($2167)|0),(($2174)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2175=$code_pos;
 $2176=((($2175)+(4))|0);
 $code_pos=$2176;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 174: 
 $2178=$code_pos;
 $2179=(($code_1+($2178<<1))|0);
 $2180=((invoke_iii(14,(($vm)|0),(($2179)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $code_pos=$2180;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 175: 
 $2182=$code_pos;
 $2183=((($2182)+(2))|0);
 $2184=(($code_1+($2183<<1))|0);
 $2185=((HEAP16[(($2184)>>1)])|0);
 $2186=($2185&65535);
 $2187=(($vm_regs_1+($2186<<2))|0);
 $2188=((HEAP32[(($2187)>>2)])|0);
 $2189=$code_pos;
 $2190=((($2189)+(3))|0);
 $2191=(($code_1+($2190<<1))|0);
 $2192=((HEAP16[(($2191)>>1)])|0);
 $2193=($2192&65535);
 $2194=(($vm_regs_1+($2193<<2))|0);
 $2195=((HEAP32[(($2194)>>2)])|0);
 $2196=$code_pos;
 $2197=((($2196)+(4))|0);
 $2198=(($code_1+($2197<<1))|0);
 $2199=((HEAP16[(($2198)>>1)])|0);
 $2200=($2199&65535);
 $2201=(($vm_regs_1+($2200<<2))|0);
 $2202=((HEAP32[(($2201)>>2)])|0);
 $2203=(($2188+8)|0);
 $ld$210$0=(($2203)|0);
 $2204$0=((HEAP32[(($ld$210$0)>>2)])|0);
 $ld$211$1=(($2203+4)|0);
 $2204$1=((HEAP32[(($ld$211$1)>>2)])|0);
 $2205=(($2202+8)|0);
 $ld$212$0=(($2205)|0);
 $2206$0=((HEAP32[(($ld$212$0)>>2)])|0);
 $ld$213$1=(($2205+4)|0);
 $2206$1=((HEAP32[(($ld$213$1)>>2)])|0);
 $2207$0=((_i64Add($2206$0,$2206$1,$2204$0,$2204$1))|0);$2207$1=tempRet0;
 $$etemp$214$0=0;
 $$etemp$214$1=0;
 $2208=(($2206$1|0) > ($$etemp$214$1|0)) | (((($2206$1|0) == ($$etemp$214$1|0) & ($2206$0>>>0) >  ($$etemp$214$0>>>0))));
 $2209=(($2195+8)|0);
 $ld$215$0=(($2209)|0);
 $2210$0=((HEAP32[(($ld$215$0)>>2)])|0);
 $ld$216$1=(($2209+4)|0);
 $2210$1=((HEAP32[(($ld$216$1)>>2)])|0);
 if($2208){label=176;break;}else{label=177;break;}
 case 176: 
 $2212=(($2207$1|0) > ($2210$1|0)) | (((($2207$1|0) == ($2210$1|0) & ($2207$0>>>0) >  ($2210$0>>>0))));
 if($2212){label=179;break;}else{label=178;break;}
 case 177: 
 $2214=(($2207$1|0) < ($2210$1|0)) | (((($2207$1|0) == ($2210$1|0) & ($2207$0>>>0) <  ($2210$0>>>0))));
 if($2214){label=179;break;}else{label=178;break;}
 case 178: 
 $2216=$code_pos;
 $2217=((($2216)+(5))|0);
 $2218=(($code_1+($2217<<1))|0);
 $2219=((HEAP16[(($2218)>>1)])|0);
 $2220=($2219&65535);
 $2221=(($vm_regs_1+($2220<<2))|0);
 $2222=((HEAP32[(($2221)>>2)])|0);
 $2223=(($2222+8)|0);
 $st$217$0=(($2223)|0);
 HEAP32[(($st$217$0)>>2)]=$2207$0;
 $st$218$1=(($2223+4)|0);
 HEAP32[(($st$218$1)>>2)]=$2207$1;
 $st$219$0=(($2203)|0);
 HEAP32[(($st$219$0)>>2)]=$2207$0;
 $st$220$1=(($2203+4)|0);
 HEAP32[(($st$220$1)>>2)]=$2207$1;
 $2224=$code_pos;
 $2225=((($2224)+(7))|0);
 $code_pos=$2225;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 179: 
 $2227=$code_pos;
 $2228=((($2227)+(6))|0);
 $2229=(($code_1+($2228<<1))|0);
 $2230=((HEAP16[(($2229)>>1)])|0);
 $2231=($2230&65535);
 $code_pos=$2231;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 180: 
 $2233=((HEAP32[(($67)>>2)])|0);
 $2234=(($2233+24)|0);
 $2235=((HEAP32[(($2234)>>2)])|0);
 $2236=($2235|0)==0;
 if($2236){label=181;break;}else{label=182;break;}
 case 181: 
 invoke_vi(4,(($vm)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=182;break;
 case 182: 
 $2239=((HEAP32[(($67)>>2)])|0);
 $2240=(($2239)|0);
 HEAP32[(($2240)>>2)]=$current_frame_1;
 $2241=((HEAP32[(($68)>>2)])|0);
 $2242=(($2239+12)|0);
 HEAP32[(($2242)>>2)]=$2241;
 $2243=$code_pos;
 $2244=((($2243)+(2))|0);
 $2245=(($2239+8)|0);
 HEAP32[(($2245)>>2)]=$2244;
 $2246=((HEAP32[(($13)>>2)])|0);
 $2247=(($2246)|0);
 $2248=((HEAP32[(($2247)>>2)])|0);
 $2249=(($2239+20)|0);
 HEAP32[(($2249)>>2)]=$2248;
 $2250=$vm_regs_1;
 $2251=$regs_from_main_1;
 $2252=((($2250)-($2251))|0);
 $2253=$2252>>2;
 $2254=(($2239+4)|0);
 HEAP32[(($2254)>>2)]=$2253;
 $2255=((HEAP32[(($69)>>2)])|0);
 $2256=(($2255+4)|0);
 $2257=((HEAP32[(($2256)>>2)])|0);
 $2258=(($2239+16)|0);
 HEAP32[(($2258)>>2)]=$2257;
 $2259=((HEAP32[(($67)>>2)])|0);
 $2260=(($2259+24)|0);
 $2261=((HEAP32[(($2260)>>2)])|0);
 HEAP32[(($67)>>2)]=$2261;
 $2262=$code_pos;
 $2263=((($2262)+(3))|0);
 $code_pos=$2263;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 183: 
 $2265=((HEAP32[(($70)>>2)])|0);
 $2266=(($2265+28)|0);
 $2267=((HEAP32[(($2266)>>2)])|0);
 HEAP32[(($70)>>2)]=$2267;
 $2268=$code_pos;
 $2269=((($2268)+(1))|0);
 $code_pos=$2269;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 184: 
 $2271=$code_pos;
 $2272=((($2271)+(2))|0);
 $2273=(($code_1+($2272<<1))|0);
 $2274=((HEAP16[(($2273)>>1)])|0);
 $2275=($2274&65535);
 $2276=(($vm_regs_1+($2275<<2))|0);
 $2277=((HEAP32[(($2276)>>2)])|0);
 invoke_vii(52,(($vm)|0),(($2277)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2278=$code_pos;
 $2279=((($2278)+(3))|0);
 $code_pos=$2279;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 185: 
 $2281=$code_pos;
 $2282=(($code_1+($2281<<1))|0);
 invoke_vii(28,(($vm)|0),(($2282)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2283=$code_pos;
 $2284=((($2283)+(4))|0);
 $code_pos=$2284;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 186: 
 $2286=$code_pos;
 $2287=((($2286)+(2))|0);
 $2288=(($code_1+($2287<<1))|0);
 $2289=((HEAP16[(($2288)>>1)])|0);
 $2290=($2289&65535);
 $2291=(($vm_regs_1+($2290<<2))|0);
 $2292=((HEAP32[(($2291)>>2)])|0);
 $2293=(($2292+8)|0);
 $2294=$2293;
 $2295=((HEAP32[(($2294)>>2)])|0);
 $2296=(($2295+6)|0);
 $2297=((HEAP16[(($2296)>>1)])|0);
 $2298=($2297&65535);
 $2299=$code_pos;
 $2300=((($2299)+(4))|0);
 $2301=((($2300)+($2298))|0);
 $2302=(($code_1+($2301<<1))|0);
 $2303=((HEAP16[(($2302)>>1)])|0);
 $2304=($2303&65535);
 $code_pos=$2304;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 187: 
 $2306=$code_pos;
 $2307=((($2306)+(2))|0);
 $2308=(($code_1+($2307<<1))|0);
 $2309=((HEAP16[(($2308)>>1)])|0);
 $2310=($2309&65535);
 $2311=(($vm_regs_1+($2310<<2))|0);
 $2312=((HEAP32[(($2311)>>2)])|0);
 $2313=(($2312+8)|0);
 $2314=$2313;
 $2315=((HEAP32[(($2314)>>2)])|0);
 $2316=(($2315+16)|0);
 $2317=((HEAP32[(($2316)>>2)])|0);
 $2318=$code_pos;
 $2319=((($2318)+(3))|0);
 $2320=(($code_1+($2319<<1))|0);
 $2321=((HEAP16[(($2320)>>1)])|0);
 $2322=(($2321<<16)>>16)==0;
 if($2322){$i_0_lcssa=4;label=190;break;}else{$i_01=0;label=188;break;}
 case 188: 

 $2323=$code_pos;
 $2324=((($i_01)+(4))|0);
 $2325=((($2324)+($2323))|0);
 $2326=(($code_1+($2325<<1))|0);
 $2327=((HEAP16[(($2326)>>1)])|0);
 $2328=($2327&65535);
 $2329=(($vm_regs_1+($2328<<2))|0);
 $2330=((HEAP32[(($2329)>>2)])|0);
 $2331=(($2317+($i_01<<2))|0);
 $2332=((HEAP32[(($2331)>>2)])|0);
 invoke_vii(64,(($2330)|0),(($2332)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2333=((($i_01)+(1))|0);
 $2334=$code_pos;
 $2335=((($2334)+(3))|0);
 $2336=(($code_1+($2335<<1))|0);
 $2337=((HEAP16[(($2336)>>1)])|0);
 $2338=($2337&65535);
 $2339=($2333|0)<($2338|0);
 if($2339){$i_01=$2333;label=188;break;}else{label=189;break;}
 case 189: 
 $phitmp=((($i_01)+(5))|0);
 $i_0_lcssa=$phitmp;label=190;break;
 case 190: 

 $2341=$code_pos;
 $2342=((($i_0_lcssa)+($2341))|0);
 $code_pos=$2342;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 191: 
 $2344=$code_pos;
 $2345=(($code_1+($2344<<1))|0);
 $2346=((invoke_iii(4,(($vm)|0),(($2345)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2347=$code_pos;
 $2348=((($2347)+(4))|0);
 $code_pos=$2348;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$2346;label=8;break;
 case 192: 
 $2350=$code_pos;
 $2351=((invoke_iiii(4,(($vm)|0),(($code_1)|0),(($2350)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2352=$code_pos;
 $2353=((($2352)+(5))|0);
 $code_pos=$2353;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$2351;label=8;break;
 case 193: 
 $2355=$code_pos;
 $2356=(($code_1+($2355<<1))|0);
 $2357=((invoke_iii(6,(($vm)|0),(($2356)|0)))|0); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 $2358=$code_pos;
 $2359=((($2358)+(2))|0);
 $2360=(($code_1+($2359<<1))|0);
 $2361=((HEAP16[(($2360)>>1)])|0);
 $2362=($2361&65535);
 $2363=((($2362)+(4))|0);
 $code_pos=$2363;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$2357;label=8;break;
 case 194: 
 $2365=$code_pos;
 $2366=((($2365)+(2))|0);
 $2367=(($code_1+($2366<<1))|0);
 $2368=((HEAP16[(($2367)>>1)])|0);
 $2369=($2368&65535);
 $2370=(($vm_regs_1+($2369<<2))|0);
 $2371=((HEAP32[(($2370)>>2)])|0);
 $2372=$code_pos;
 $2373=((($2372)+(5))|0);
 $2374=(($code_1+($2373<<1))|0);
 $2375=((HEAP16[(($2374)>>1)])|0);
 $2376=($2375&65535);
 $2377=(($vm_regs_1+($2376<<2))|0);
 $2378=((HEAP32[(($2377)>>2)])|0);
 $2379=$code_pos;
 $2380=((($2379)+(3))|0);
 $2381=(($code_1+($2380<<1))|0);
 $2382=((HEAP16[(($2381)>>1)])|0);
 $2383=($2382&65535);
 $2384=(($vm_regs_1+($2383<<2))|0);
 $2385=((HEAP32[(($2384)>>2)])|0);
 $2386=$code_pos;
 $2387=(($2378+8)|0);
 $ld$221$0=(($2387)|0);
 $2388$0=((HEAP32[(($ld$221$0)>>2)])|0);
 $ld$222$1=(($2387+4)|0);
 $2388$1=((HEAP32[(($ld$222$1)>>2)])|0);
 $$etemp$223$0=0;
 $$etemp$223$1=0;
 $2389=(($2388$0|0) == ($$etemp$223$0|0)) & (($2388$1|0) == ($$etemp$223$1|0));
 if($2389){label=195;break;}else{label=196;break;}
 case 195: 
 invoke_viii(164,(($vm)|0),((20)|0),((13424)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 label=196;break;
 case 196: 
 $2392=(($2385+8)|0);
 $ld$224$0=(($2392)|0);
 $2393$0=((HEAP32[(($ld$224$0)>>2)])|0);
 $ld$225$1=(($2392+4)|0);
 $2393$1=((HEAP32[(($ld$225$1)>>2)])|0);
 $ld$226$0=(($2387)|0);
 $2394$0=((HEAP32[(($ld$226$0)>>2)])|0);
 $ld$227$1=(($2387+4)|0);
 $2394$1=((HEAP32[(($ld$227$1)>>2)])|0);
 $2395$0=((_i64Subtract($2393$0,$2393$1,$2394$0,$2394$1))|0);$2395$1=tempRet0;
 $2396=(($2371+8)|0);
 $st$228$0=(($2396)|0);
 HEAP32[(($st$228$0)>>2)]=$2395$0;
 $st$229$1=(($2396+4)|0);
 HEAP32[(($st$229$1)>>2)]=$2395$1;
 $2397=(($2371)|0);
 HEAP32[(($2397)>>2)]=2;
 $2398=$code_pos;
 $2399=((($2398)+(6))|0);
 $code_pos=$2399;
 $code_1=$code_1;$regs_from_main_1=$regs_from_main_1;$vm_regs_1=$vm_regs_1;$num_registers_0=$num_registers_0;$offset_max_registers_0=$offset_max_registers_0;$current_frame_1=$current_frame_1;$upvalues_1=$upvalues_1;label=8;break;
 case 197: 
 $2401=((HEAP32[(($13)>>2)])|0);
 invoke_vi(10,(($2401)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return  } __THREW__ = threwValue = 0;;
 STACKTOP=sp;return;
 case -1: if ((setjmpLabel|0) == 1) { $17 = threwValue; label = 198 }
__THREW__ = threwValue = 0;
break;
 }

}


function _lily_vm_list_ensure($vm,$need){
 $vm=($vm)|0;
 $need=($need)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$_lcssa=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,label=0;

 $1=(($vm+84)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((($4)+($need))|0);
 $6=(($2+8)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($5>>>0)>($7>>>0);
 if (!($8)) {
  return;
 }
 $9=((HEAP32[(($3)>>2)])|0);
 $10=((($9)+($need))|0);
 $11=((HEAP32[(($6)>>2)])|0);
 $12=($10>>>0)>($11>>>0);
 if ($12) {
  $13=((HEAP32[(($3)>>2)])|0);
  $14=((($13)+($need))|0);
  $16=$11;
  while(1) {

   $17=$16<<1;
   $18=($14>>>0)>($17>>>0);
   if ($18) {
    $16=$17;
   } else {
    break;
   }
  }
  HEAP32[(($6)>>2)]=$17;
  $_lcssa=$17;
 } else {
  $_lcssa=$11;
 }

 $20=(($2)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=$21;
 $23=$_lcssa<<2;
 $24=((_lily_realloc($22,$23))|0);
 $25=$24;
 HEAP32[(($20)>>2)]=$25;
 return;
}


function _lily_siphash($vm,$key){
 $vm=($vm)|0;
 $key=($key)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15$0=0,$15$1=0,$17=0,$18=0,$20=0,$ld$0$0=0,$21$0=0;
 var $ld$1$1=0,$21$1=0,$key_hash_0$0=0,$key_hash_0$1=0,label=0;

 $1=(($key)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8;
 $4=($3|0)==0;
 do {
  if ($4) {
   $17=$2&2;
   $18=($17|0)==0;
   if ($18) {
    $key_hash_0$1=0;$key_hash_0$0=0;
    break;
   }
   $20=(($key+8)|0);
   $ld$0$0=(($20)|0);
   $21$0=((HEAP32[(($ld$0$0)>>2)])|0);
   $ld$1$1=(($20+4)|0);
   $21$1=((HEAP32[(($ld$1$1)>>2)])|0);
   $key_hash_0$1=$21$1;$key_hash_0$0=$21$0;
  } else {
   $6=(($key+8)|0);
   $7=$6;
   $8=((HEAP32[(($7)>>2)])|0);
   $9=(($8+8)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=(($8+4)|0);
   $12=((HEAP32[(($11)>>2)])|0);
   $13=(($vm+68)|0);
   $14=((HEAP32[(($13)>>2)])|0);
   $15$0=((_siphash24($10,$12,$14))|0);
   $15$1=tempRet0;
   $key_hash_0$1=$15$1;$key_hash_0$0=$15$0;
  }
 } while(0);


 return (((tempRet0=$key_hash_0$1,$key_hash_0$0))|0);
}


function _lily_vm_ensure_class_table($vm,$size){
 $vm=($vm)|0;
 $size=($size)|0;
 var $1=0,$2=0,$3=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$_lcssa=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,label=0;

 $1=(($vm+36)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2>>>0)>($size>>>0);
 if (!($3)) {
  $5=($2|0)==0;
  if ($5) {
   HEAP32[(($1)>>2)]=1;
  }
  $7=((HEAP32[(($1)>>2)])|0);
  $8=($7>>>0)>($size>>>0);
  if ($8) {
   $_lcssa=$7;
  } else {
   $9=$7;
   while(1) {

    $10=$9<<1;
    $11=($10>>>0)>($size>>>0);
    if ($11) {
     break;
    } else {
     $9=$10;
    }
   }
   HEAP32[(($1)>>2)]=$10;
   $_lcssa=$10;
  }

  $13=(($vm+32)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=$14;
  $16=$_lcssa<<2;
  $17=((_lily_realloc($15,$16))|0);
  $18=$17;
  HEAP32[(($13)>>2)]=$18;
 }
 $20=($2|0)==0;
 if (!($20)) {
  return;
 }
 $21=(($vm+32)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22+60)|0);
 HEAP32[(($23)>>2)]=0;
 $24=((HEAP32[(($21)>>2)])|0);
 $25=(($24+64)|0);
 HEAP32[(($25)>>2)]=0;
 $26=((HEAP32[(($21)>>2)])|0);
 $27=(($26+68)|0);
 HEAP32[(($27)>>2)]=0;
 $28=((HEAP32[(($21)>>2)])|0);
 $29=(($28+72)|0);
 HEAP32[(($29)>>2)]=0;
 $30=((HEAP32[(($21)>>2)])|0);
 $31=(($30+76)|0);
 HEAP32[(($31)>>2)]=0;
 $32=((HEAP32[(($21)>>2)])|0);
 $33=(($32+80)|0);
 HEAP32[(($33)>>2)]=0;
 $34=((HEAP32[(($21)>>2)])|0);
 $35=(($34+84)|0);
 HEAP32[(($35)>>2)]=0;
 $36=((HEAP32[(($21)>>2)])|0);
 $37=(($36+88)|0);
 HEAP32[(($37)>>2)]=0;
 $38=((HEAP32[(($21)>>2)])|0);
 $39=(($38+92)|0);
 HEAP32[(($39)>>2)]=0;
 return;
}


function _lily_vm_add_class_unchecked($vm,$cls){
 $vm=($vm)|0;
 $cls=($cls)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;

 $1=(($cls+40)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=(($vm+32)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+($3<<2))|0);
 HEAP32[(($6)>>2)]=$cls;
 return;
}


function _lily_vm_prep($vm,$symtab){
 $vm=($vm)|0;
 $symtab=($symtab)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$28=0,$29=0,$30=0,$31=0,$32=0,$35=0,$36=0,$37=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0;
 var $51=0,$52=0,$53=0,$54=0,$55=0,label=0;

 $1=(($symtab+36)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+38)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($vm+8)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($5>>>0)>($7>>>0);
 do {
  if ($8) {
   _grow_vm_registers($vm,$5);
   $10=(($vm+4)|0);
   $11=((HEAP32[(($10)>>2)])|0);
   $12=(($vm)|0);
   HEAP32[(($12)>>2)]=$11;
  } else {
   $14=(($vm)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=($15|0)==0;
   if (!($16)) {
    break;
   }
   _grow_vm_registers($vm,1);
   $18=(($vm+4)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   HEAP32[(($14)>>2)]=$19;
  }
 } while(0);
 $21=(($vm+92)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22+12)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==0;
 if (!($25)) {
  _load_foreign_ties($vm);
 }
 $28=(($vm+40)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=(($symtab+44)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=($29|0)==($31|0);
 if (!($32)) {
  _setup_readonly_table($vm);
 }
 $35=(($vm+104)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=($36|0)==0;
 if ($37) {
  _maybe_fix_print($vm);
 }
 $40=((HEAP16[(($3)>>1)])|0);
 $41=($40&65535);
 $42=(($vm+12)|0);
 HEAP32[(($42)>>2)]=$41;
 $43=(($vm+24)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=(($44)|0);
 HEAP32[(($45)>>2)]=$2;
 $46=(($2+28)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=(($44+12)|0);
 HEAP32[(($48)>>2)]=$47;
 $49=((HEAP16[(($3)>>1)])|0);
 $50=($49&65535);
 $51=(($44+8)|0);
 HEAP32[(($51)>>2)]=$50;
 $52=(($44+4)|0);
 HEAP32[(($52)>>2)]=0;
 $53=(($44+16)|0);
 HEAP32[(($53)>>2)]=0;
 $54=(($44+32)|0);
 HEAP32[(($54)>>2)]=0;
 $55=(($vm+20)|0);
 HEAP32[(($55)>>2)]=1;
 return;
}


function _add_call_frame($vm){
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,label=0;

 $1=((_lily_malloc(44))|0);
 $2=$1;
 $3=(($vm+24)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($1+36)|0);
 $6=$5;
 HEAP32[(($6)>>2)]=$4;
 $7=(($1+40)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=0;
 $9=(($1+4)|0);
 $10=$9;
 HEAP32[(($10)>>2)]=0;
 $11=(($1+32)|0);
 $12=$11;
 HEAP32[(($12)>>2)]=0;
 $13=((HEAP32[(($3)>>2)])|0);
 $14=($13|0)==0;
 if ($14) {
  HEAP32[(($3)>>2)]=$2;
  return;
 }
 $16=(($13+40)|0);
 HEAP32[(($16)>>2)]=$2;
 HEAP32[(($3)>>2)]=$2;
 return;
}


function _invoke_gc($vm){
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$i_016=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$17=0,$18=0,$19=0,$20=0,$gc_iter_011=0;
 var $21=0,$gc_iter_012=0,$22=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$31=0,$33=0,$gc_iter_0=0,$34=0,$35=0,$36=0,$37=0,$38=0,$i_17=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$new_spare_entries_04=0,$new_live_entries_03=0;
 var $i_22=0,$gc_iter_11=0,$62=0,$63=0,$64=0,$65=0,$66=0,$68=0,$69=0,$70=0,$71=0,$73=0,$storemerge=0,$i_3=0,$new_live_entries_1=0,$new_spare_entries_1=0,$75=0,$new_spare_entries_0_lcssa=0,$new_live_entries_0_lcssa=0,$i_2_lcssa=0;
 var $76=0,$77=0,$78=0,$80=0,$81=0,$82=0,$84=0,label=0;

 $1=(($vm+60)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(1))|0);
 HEAP32[(($1)>>2)]=$3;
 $4=(($vm+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($vm+12)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==0;
 if (!($8)) {
  $i_016=0;
  while(1) {

   $9=(($5+($i_016<<2))|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=(($10)|0);
   $12=((HEAP32[(($11)>>2)])|0);
   $13=$12&98304;
   $14=($13|0)==0;
   if (!($14)) {
    _gc_mark($3,$10);
   }
   $17=((($i_016)+(1))|0);
   $18=((HEAP32[(($6)>>2)])|0);
   $19=($17>>>0)<($18>>>0);
   if ($19) {
    $i_016=$17;
   } else {
    break;
   }
  }
 }
 $20=(($vm+44)|0);
 $gc_iter_011=((HEAP32[(($20)>>2)])|0);
 $21=($gc_iter_011|0)==0;
 if (!($21)) {
  $gc_iter_012=$gc_iter_011;
  while(1) {

   $22=(($gc_iter_012+4)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=($23|0)==($3|0);
   do {
    if (!($24)) {
     $26=(($gc_iter_012+8)|0);
     $27=$26;
     $28=((HEAP32[(($27)>>2)])|0);
     $29=($28|0)==0;
     if ($29) {
      break;
     }
     HEAP32[(($22)>>2)]=-1;
     $31=$gc_iter_012;
     _lily_destroy_value($31);
    }
   } while(0);
   $33=(($gc_iter_012+16)|0);
   $gc_iter_0=((HEAP32[(($33)>>2)])|0);
   $34=($gc_iter_0|0)==0;
   if ($34) {
    break;
   } else {
    $gc_iter_012=$gc_iter_0;
   }
  }
 }
 $35=((HEAP32[(($6)>>2)])|0);
 $36=(($vm+16)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=($35>>>0)<($37>>>0);
 if ($38) {
  $i_17=$35;
  while(1) {

   $39=(($5+($i_17<<2))|0);
   $40=((HEAP32[(($39)>>2)])|0);
   $41=(($40)|0);
   $42=((HEAP32[(($41)>>2)])|0);
   $43=$42&32768;
   $44=($43|0)==0;
   do {
    if (!($44)) {
     $46=(($40+8)|0);
     $47=$46;
     $48=((HEAP32[(($47)>>2)])|0);
     $49=(($48+24)|0);
     $50=((HEAP32[(($49)>>2)])|0);
     $51=((HEAP32[((1712)>>2)])|0);
     $52=($50|0)==($51|0);
     if (!($52)) {
      break;
     }
     HEAP32[(($41)>>2)]=0;
    }
   } while(0);
   $55=((($i_17)+(1))|0);
   $56=((HEAP32[(($36)>>2)])|0);
   $57=($55>>>0)<($56>>>0);
   if ($57) {
    $i_17=$55;
   } else {
    break;
   }
  }
 }
 $58=(($vm+48)|0);
 $59=((HEAP32[(($58)>>2)])|0);
 $60=((HEAP32[(($20)>>2)])|0);
 $61=($60|0)==0;
 if ($61) {
  $i_2_lcssa=0;$new_live_entries_0_lcssa=0;$new_spare_entries_0_lcssa=$59;
 } else {
  $gc_iter_11=$60;$i_22=0;$new_live_entries_03=0;$new_spare_entries_04=$59;
  while(1) {




   $62=(($gc_iter_11+16)|0);
   $63=((HEAP32[(($62)>>2)])|0);
   $64=(($gc_iter_11+4)|0);
   $65=((HEAP32[(($64)>>2)])|0);
   $66=($65|0)==-1;
   if ($66) {
    $68=(($gc_iter_11+8)|0);
    $69=$68;
    $70=((HEAP32[(($69)>>2)])|0);
    $71=$70;
    _lily_free($71);
    $new_spare_entries_1=$gc_iter_11;$new_live_entries_1=$new_live_entries_03;$i_3=$i_22;$storemerge=$new_spare_entries_04;
   } else {
    $73=((($i_22)+(1))|0);
    $new_spare_entries_1=$new_spare_entries_04;$new_live_entries_1=$gc_iter_11;$i_3=$73;$storemerge=$new_live_entries_03;
   }




   HEAP32[(($62)>>2)]=$storemerge;
   $75=($63|0)==0;
   if ($75) {
    $i_2_lcssa=$i_3;$new_live_entries_0_lcssa=$new_live_entries_1;$new_spare_entries_0_lcssa=$new_spare_entries_1;
    break;
   } else {
    $gc_iter_11=$63;$i_22=$i_3;$new_live_entries_03=$new_live_entries_1;$new_spare_entries_04=$new_spare_entries_1;
   }
  }
 }



 $76=(($vm+56)|0);
 $77=((HEAP32[(($76)>>2)])|0);
 $78=($77>>>0)>($i_2_lcssa>>>0);
 if ($78) {
  $84=(($vm+52)|0);
  HEAP32[(($84)>>2)]=$i_2_lcssa;
  HEAP32[(($20)>>2)]=$new_live_entries_0_lcssa;
  HEAP32[(($58)>>2)]=$new_spare_entries_0_lcssa;
  return;
 }
 $80=(($vm+64)|0);
 $81=((HEAP32[(($80)>>2)])|0);
 $82=(Math_imul($81,$77)|0);
 HEAP32[(($76)>>2)]=$82;
 $84=(($vm+52)|0);
 HEAP32[(($84)>>2)]=$i_2_lcssa;
 HEAP32[(($20)>>2)]=$new_live_entries_0_lcssa;
 HEAP32[(($58)>>2)]=$new_spare_entries_0_lcssa;
 return;
}


function _destroy_gc_entries($vm){
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$gc_iter_02=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$gc_iter_11=0,$11=0,$12=0,$13=0,$14=0,label=0;

 $1=(($vm+44)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if (!($3)) {
  $gc_iter_02=$2;
  while(1) {

   $4=(($gc_iter_02+16)|0);
   $5=((HEAP32[(($4)>>2)])|0);
   $6=$gc_iter_02;
   _lily_free($6);
   $7=($5|0)==0;
   if ($7) {
    break;
   } else {
    $gc_iter_02=$5;
   }
  }
 }
 $8=(($vm+48)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==0;
 if ($10) {
  return;
 } else {
  $gc_iter_11=$9;
 }
 while(1) {

  $11=(($gc_iter_11+16)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=$gc_iter_11;
  _lily_free($13);
  $14=($12|0)==0;
  if ($14) {
   break;
  } else {
   $gc_iter_11=$12;
  }
 }
 return;
}


function _gc_mark($pass,$v){
 $pass=($pass)|0;
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$35=0,$36=0,$39=0,$40=0,$43=0,$44=0,label=0;

 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&32768;
 $4=($3|0)==0;
 if ($4) {
  label = 3;
 } else {
  $6=(($v+8)|0);
  $7=$6;
  $8=((HEAP32[(($7)>>2)])|0);
  $9=(($8+24)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=(($10+4)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=($12|0)==($pass|0);
  if ($13) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $15=((HEAP32[(($1)>>2)])|0);
   $16=$15&65536;
   $17=($16|0)==0;
   if (!($17)) {
    break;
   }
   return;
  }
 } while(0);
 $19=((HEAP32[(($1)>>2)])|0);
 $20=$19&32768;
 $21=($20|0)==0;
 if (!($21)) {
  $23=(($v+8)|0);
  $24=$23;
  $25=((HEAP32[(($24)>>2)])|0);
  $26=(($25+24)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=(($27+4)|0);
  HEAP32[(($28)>>2)]=$pass;
 }
 $30=((HEAP32[(($1)>>2)])|0);
 $31=$30&3712;
 $32=($31|0)==0;
 if (!($32)) {
  _list_marker($pass,$v);
  return;
 }
 $35=$30&256;
 $36=($35|0)==0;
 if (!($36)) {
  _hash_marker($pass,$v);
  return;
 }
 $39=$30&64;
 $40=($39|0)==0;
 if (!($40)) {
  _dynamic_marker($pass,$v);
  return;
 }
 $43=$30&32;
 $44=($43|0)==0;
 if ($44) {
  return;
 }
 _function_marker($pass,$v);
 return;
}


function _build_traceback_raw($vm){
 $vm=($vm)|0;
 var $line=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$frame_iter_04_in=0,$i_03=0,$frame_iter_04=0,$14=0,$15=0,$16=0,$17=0;
 var $18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$path_0=0,$30=0,$31=0,$32=0,$_=0,$_1=0,$33=0,$34=0,$35=0,$36=0;
 var $37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $line=((sp)|0);
 $1=((_lily_new_list_val())|0);
 $2=(($vm+20)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=$3<<2;
 $5=((_lily_malloc($4))|0);
 $6=$5;
 $7=(($1+16)|0);
 HEAP32[(($7)>>2)]=$6;
 $8=(($1+8)|0);
 HEAP32[(($8)>>2)]=-1;
 $9=((HEAP32[(($2)>>2)])|0);
 $10=($9|0)>0;
 if (!($10)) {
  $51=((HEAP32[(($2)>>2)])|0);
  HEAP32[(($8)>>2)]=$51;
  STACKTOP=sp;return (($1)|0);
 }
 $11=(($vm+24)|0);
 $12=(($line)|0);
 $i_03=$9;$frame_iter_04_in=$11;
 while(1) {


  $frame_iter_04=((HEAP32[(($frame_iter_04_in)>>2)])|0);
  $14=(($frame_iter_04)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  _memset((((($12)|0))|0), ((((0)|0))|0), ((((16)|0))|0))|0;
  $16=(($15+12)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=(($15+28)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=($19|0)==0;
  if ($20) {
   $path_0=12976;
  } else {
   $22=(($15+20)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=(($23+20)|0);
   $25=((HEAP32[(($24)>>2)])|0);
   $26=(($frame_iter_04+20)|0);
   $27=((HEAP32[(($26)>>2)])|0);
   $28=((_sprintf((($12)|0),((13064)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
   $path_0=$25;
  }

  $30=(($15+8)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=($31|0)==0;
  $_=($32?17912:$31);
  $_1=($32?17912:15136);
  $33=((_strlen((($path_0)|0)))|0);
  $34=((_strlen((($12)|0)))|0);
  $35=((_strlen((($_)|0)))|0);
  $36=((_strlen((($17)|0)))|0);
  $37=((_strlen((($_1)|0)))|0);
  $38=((($33)+(9))|0);
  $39=((($38)+($34))|0);
  $40=((($39)+($35))|0);
  $41=((($40)+($36))|0);
  $42=((($41)+($37))|0);
  $43=((_lily_malloc($42))|0);
  $44=((_sprintf((($43)|0),((12832)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,HEAP32[((tempVarArgs)>>2)]=$path_0,HEAP32[(((tempVarArgs)+(8))>>2)]=$12,HEAP32[(((tempVarArgs)+(16))>>2)]=$_,HEAP32[(((tempVarArgs)+(24))>>2)]=$_1,HEAP32[(((tempVarArgs)+(32))>>2)]=$17,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
  $45=((_lily_new_string_take($43))|0);
  $46=((($i_03)-(1))|0);
  $47=((HEAP32[(($7)>>2)])|0);
  $48=(($47+($46<<2))|0);
  HEAP32[(($48)>>2)]=$45;
  $49=(($frame_iter_04+36)|0);
  $50=($46|0)>0;
  if ($50) {
   $i_03=$46;$frame_iter_04_in=$49;
  } else {
   break;
  }
 }
 $51=((HEAP32[(($2)>>2)])|0);
 HEAP32[(($8)>>2)]=$51;
 STACKTOP=sp;return (($1)|0);
}



function _do_print($vm,$target,$source){
 $vm=($vm)|0;
 $target=($target)|0;
 $source=($source)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,label=0;

 $1=(($source)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&8;
 $4=($3|0)==0;
 if ($4) {
  $13=(($vm+80)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  _lily_msgbuf_flush($14);
  _lily_vm_add_value_to_msgbuf($vm,$14,$source);
  $15=(($14)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=((_fputs((($16)|0),(($target)|0)))|0);
  $19=((_fputc(((10)|0),(($target)|0)))|0);
  return;
 } else {
  $6=(($source+8)|0);
  $7=$6;
  $8=((HEAP32[(($7)>>2)])|0);
  $9=(($8+8)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=((_fputs((($10)|0),(($target)|0)))|0);
  $19=((_fputc(((10)|0),(($target)|0)))|0);
  return;
 }
}


function _add_value_to_msgbuf($vm,$msgbuf,$t,$v){
 $vm=($vm)|0;
 $msgbuf=($msgbuf)|0;
 $t=($t)|0;
 $v=($v)|0;
 var $new_tag=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$tag_iter_03=0,$9=0,$10=0,$11=0,$12=0,$15=0,$16=0,$17=0,$18=0,$19=0,$ld$0$0=0,$20$0=0;
 var $ld$1$1=0,$20$1=0,$21=0,$st$2$0=0,$st$3$1=0,$_0=0,$23=0,$24=0,$25=0,$27=0,$ld$4$0=0,$28$0=0,$ld$5$1=0,$28$1=0,$29$0=0,$29=0,$31=0,$32=0,$34=0,$ld$6$0=0;
 var $35$0=0,$ld$7$1=0,$35$1=0,$36$0=0,$36=0,$38=0,$39=0,$41=0,$42=0,$43=.0,$45=0,$46=0,$48=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$57=0;
 var $58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$_=0,$74=0,$75=0,$76=0,$separator_0=0,$class_name_0=0;
 var $77=0,$78=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$87=0,$89=0,$90=0,$93=0,$94=0,$97=0,$98=0,$100=0,$101=0,$102=0,$103=0,$elem_01=0;
 var $104=0,$elem_02=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$elem_0_pr=0,$112=0,$114=0,$115=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$123=0;
 var $125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0;
 var $146=0,$147=0,$148=0,$149=0,$150=0,$153=0,$154=0,$155=0,$156=0,$157=0,$159=0,$160=0,$162=0,$163=0,$164=0,$165=0,$package_name_0=0,$separator2_0=0,$167=0,$168=0;
 var $169=0,$170=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $new_tag=((sp)|0);
 $1=(($v)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&32768;
 $4=($3|0)==0;
 if ($4) {
  $_0=$t;
 } else {
  $5=($t|0)==0;
  L3: do {
   if (!($5)) {
    $6=(($v+8)|0);
    $7=$6;
    $tag_iter_03=$t;
    while(1) {

     $9=(($tag_iter_03+8)|0);
     $10=$9;
     $11=((_memcmp((($10)|0),(($7)|0),((8)|0)))|0);
     $12=($11|0)==0;
     if ($12) {
      break;
     }
     $15=(($tag_iter_03)|0);
     $16=((HEAP32[(($15)>>2)])|0);
     $17=($16|0)==0;
     if ($17) {
      break L3;
     } else {
      $tag_iter_03=$16;
     }
    }
    _lily_msgbuf_add($msgbuf,4728);
    STACKTOP=sp;return;
   }
  } while(0);
  $18=(($new_tag)|0);
  HEAP32[(($18)>>2)]=$t;
  $19=(($v+8)|0);
  $ld$0$0=(($19)|0);
  $20$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($19+4)|0);
  $20$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $21=(($new_tag+8)|0);
  $st$2$0=(($21)|0);
  HEAP32[(($st$2$0)>>2)]=$20$0;
  $st$3$1=(($21+4)|0);
  HEAP32[(($st$3$1)>>2)]=$20$1;
  $_0=$new_tag;
 }

 $23=((HEAP32[(($1)>>2)])|0);
 $24=$23&1;
 $25=($24|0)==0;
 if (!($25)) {
  $27=(($v+8)|0);
  $ld$4$0=(($27)|0);
  $28$0=((HEAP32[(($ld$4$0)>>2)])|0);
  $ld$5$1=(($27+4)|0);
  $28$1=((HEAP32[(($ld$5$1)>>2)])|0);
  $29$0=$28$0;
  $29=$29$0;
  _lily_msgbuf_add_boolean($msgbuf,$29);
  STACKTOP=sp;return;
 }
 $31=$23&2;
 $32=($31|0)==0;
 if (!($32)) {
  $34=(($v+8)|0);
  $ld$6$0=(($34)|0);
  $35$0=((HEAP32[(($ld$6$0)>>2)])|0);
  $ld$7$1=(($34+4)|0);
  $35$1=((HEAP32[(($ld$7$1)>>2)])|0);
  $36$0=$35$0;
  $36=$36$0;
  _lily_msgbuf_add_int($msgbuf,$36);
  STACKTOP=sp;return;
 }
 $38=$23&4;
 $39=($38|0)==0;
 if (!($39)) {
  $41=(($v+8)|0);
  $42=$41;
  $43=(+(HEAPF64[(($42)>>3)]));
  _lily_msgbuf_add_double($msgbuf,$43);
  STACKTOP=sp;return;
 }
 $45=$23&8;
 $46=($45|0)==0;
 if (!($46)) {
  $48=(($v+8)|0);
  $49=$48;
  $50=((HEAP32[(($49)>>2)])|0);
  $51=(($50+8)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  _lily_msgbuf_add_fmt($msgbuf,17568,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$52,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  STACKTOP=sp;return;
 }
 $54=$23&16;
 $55=($54|0)==0;
 if (!($55)) {
  $57=(($v+8)|0);
  $58=$57;
  $59=((HEAP32[(($58)>>2)])|0);
  $60=(($59+8)|0);
  $61=((HEAP32[(($60)>>2)])|0);
  $62=(($59+4)|0);
  $63=((HEAP32[(($62)>>2)])|0);
  _lily_msgbuf_add_bytestring($msgbuf,$61,$63);
  STACKTOP=sp;return;
 }
 $65=$23&32;
 $66=($65|0)==0;
 if (!($66)) {
  $68=(($v+8)|0);
  $69=$68;
  $70=((HEAP32[(($69)>>2)])|0);
  $71=(($70+28)|0);
  $72=((HEAP32[(($71)>>2)])|0);
  $73=($72|0)==0;
  $_=($73?15648:17912);
  $74=(($70+8)|0);
  $75=((HEAP32[(($74)>>2)])|0);
  $76=($75|0)==0;
  $separator_0=($76?17912:15136);
  $class_name_0=($76?17912:$75);
  $77=(($70+12)|0);
  $78=((HEAP32[(($77)>>2)])|0);
  _lily_msgbuf_add_fmt($msgbuf,14632,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,HEAP32[((tempVarArgs)>>2)]=$_,HEAP32[(((tempVarArgs)+(8))>>2)]=$class_name_0,HEAP32[(((tempVarArgs)+(16))>>2)]=$separator_0,HEAP32[(((tempVarArgs)+(24))>>2)]=$78,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  STACKTOP=sp;return;
 }
 $80=$23&64;
 $81=($80|0)==0;
 if (!($81)) {
  $83=(($v+8)|0);
  $84=$83;
  $85=((HEAP32[(($84)>>2)])|0);
  $86=(($85+16)|0);
  $87=((HEAP32[(($86)>>2)])|0);
  _add_value_to_msgbuf($vm,$msgbuf,$_0,$87);
  STACKTOP=sp;return;
 }
 $89=$23&128;
 $90=($89|0)==0;
 if (!($90)) {
  _add_list_like($vm,$msgbuf,$_0,$v,14040,13952);
  STACKTOP=sp;return;
 }
 $93=$23&512;
 $94=($93|0)==0;
 if (!($94)) {
  _add_list_like($vm,$msgbuf,$_0,$v,13880,13776);
  STACKTOP=sp;return;
 }
 $97=$23&256;
 $98=($97|0)==0;
 if (!($98)) {
  $100=(($v+8)|0);
  $101=$100;
  $102=((HEAP32[(($101)>>2)])|0);
  _lily_msgbuf_add_char($msgbuf,91);
  $103=(($102+16)|0);
  $elem_01=((HEAP32[(($103)>>2)])|0);
  $104=($elem_01|0)==0;
  L50: do {
   if (!($104)) {
    $elem_02=$elem_01;
    while(1) {

     $105=(($elem_02+8)|0);
     $106=((HEAP32[(($105)>>2)])|0);
     _add_value_to_msgbuf($vm,$msgbuf,$_0,$106);
     _lily_msgbuf_add($msgbuf,13696);
     $107=(($elem_02+12)|0);
     $108=((HEAP32[(($107)>>2)])|0);
     _add_value_to_msgbuf($vm,$msgbuf,$_0,$108);
     $109=(($elem_02+16)|0);
     $110=((HEAP32[(($109)>>2)])|0);
     $111=($110|0)==0;
     if ($111) {
      break L50;
     }
     _lily_msgbuf_add($msgbuf,13600);
     $elem_0_pr=((HEAP32[(($109)>>2)])|0);
     $112=($elem_0_pr|0)==0;
     if ($112) {
      break;
     } else {
      $elem_02=$elem_0_pr;
     }
    }
   }
  } while(0);
  _lily_msgbuf_add_char($msgbuf,93);
  STACKTOP=sp;return;
 }
 $114=$23&4096;
 $115=($114|0)==0;
 if (!($115)) {
  $117=(($v+8)|0);
  $118=$117;
  $119=((HEAP32[(($118)>>2)])|0);
  $120=(($119+12)|0);
  $121=((HEAP32[(($120)>>2)])|0);
  $122=($121|0)!=0;
  $123=($122?13536:13416);
  _lily_msgbuf_add_fmt($msgbuf,13344,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$123,HEAP32[(((tempVarArgs)+(8))>>2)]=$119,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  STACKTOP=sp;return;
 }
 $125=$23&2048;
 $126=($125|0)==0;
 $127=(($v+8)|0);
 $128=$127;
 $129=((HEAP32[(($128)>>2)])|0);
 $130=(($129+4)|0);
 $131=((HEAP16[(($130)>>1)])|0);
 $132=($131&65535);
 $133=(($vm+32)|0);
 $134=((HEAP32[(($133)>>2)])|0);
 $135=(($134+($132<<2))|0);
 $136=((HEAP32[(($135)>>2)])|0);
 if (!($126)) {
  $138=(($129+6)|0);
  $139=((HEAP16[(($138)>>1)])|0);
  $140=($139&65535);
  $141=(($136+36)|0);
  $142=((HEAP32[(($141)>>2)])|0);
  $143=(($142+($140<<2))|0);
  $144=((HEAP32[(($143)>>2)])|0);
  $145=(($144+12)|0);
  $146=((HEAP32[(($145)>>2)])|0);
  _lily_msgbuf_add($msgbuf,$146);
  $147=((HEAP32[(($128)>>2)])|0);
  $148=(($147+8)|0);
  $149=((HEAP32[(($148)>>2)])|0);
  $150=($149|0)==0;
  if ($150) {
   STACKTOP=sp;return;
  }
  _add_list_like($vm,$msgbuf,$_0,$v,13288,13232);
  STACKTOP=sp;return;
 }
 $153=(($136+48)|0);
 $154=((HEAP32[(($153)>>2)])|0);
 $155=(($154+12)|0);
 $156=((HEAP32[(($155)>>2)])|0);
 $157=($156|0)==0;
 do {
  if ($157) {
   $separator2_0=17912;$package_name_0=17912;
  } else {
   $159=((HEAP8[($156)])|0);
   $160=(($159<<24)>>24)==0;
   if ($160) {
    $separator2_0=17912;$package_name_0=17912;
    break;
   }
   $162=(($154+36)|0);
   $163=((HEAP32[(($162)>>2)])|0);
   $164=(($163+4)|0);
   $165=((HEAP32[(($164)>>2)])|0);
   $separator2_0=15136;$package_name_0=$165;
  }
 } while(0);


 $167=(($136+12)|0);
 $168=((HEAP32[(($167)>>2)])|0);
 $169=$127;
 $170=((HEAP32[(($169)>>2)])|0);
 _lily_msgbuf_add_fmt($msgbuf,13120,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,HEAP32[((tempVarArgs)>>2)]=$package_name_0,HEAP32[(((tempVarArgs)+(8))>>2)]=$separator2_0,HEAP32[(((tempVarArgs)+(16))>>2)]=$168,HEAP32[(((tempVarArgs)+(24))>>2)]=$170,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _grow_vm_registers($vm,$register_need){
 $vm=($vm)|0;
 $register_need=($register_need)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$_=0,$size_0=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$i_01=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,label=0;

 $1=((($register_need)+(2))|0);
 $2=(($vm+16)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($vm)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($vm+4)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=$5;
 $9=$7;
 $10=((($8)-($9))|0);
 $11=($3|0)==0;
 $_=($11?1:$3);
 $size_0=$_;
 while(1) {

  $13=$size_0<<1;
  $14=($13|0)<($1|0);
  if ($14) {
   $size_0=$13;
  } else {
   break;
  }
 }
 $16=$10>>2;
 $17=((HEAP32[(($6)>>2)])|0);
 $18=$17;
 $19=$size_0<<3;
 $20=((_lily_realloc($18,$19))|0);
 $21=$20;
 HEAP32[(($6)>>2)]=$21;
 $22=(($21+($16<<2))|0);
 HEAP32[(($4)>>2)]=$22;
 $23=($3|0)<($13|0);
 if ($23) {
  $i_01=$3;
 } else {
  HEAP32[(($2)>>2)]=$13;
  $28=((($13)-(2))|0);
  $29=(($vm+8)|0);
  HEAP32[(($29)>>2)]=$28;
  return;
 }
 while(1) {

  $24=((_lily_new_empty_value())|0);
  $25=(($21+($i_01<<2))|0);
  HEAP32[(($25)>>2)]=$24;
  $26=((($i_01)+(1))|0);
  $27=($26|0)<($13|0);
  if ($27) {
   $i_01=$26;
  } else {
   break;
  }
 }
 HEAP32[(($2)>>2)]=$13;
 $28=((($13)-(2))|0);
 $29=(($vm+8)|0);
 HEAP32[(($29)>>2)]=$28;
 return;
}


function _scrub_registers($vm,$fval,$args_collected){
 $vm=($vm)|0;
 $fval=($fval)|0;
 $args_collected=($args_collected)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$_01=0,$_sum=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;

 $1=(($vm+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($vm+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($fval+38)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=($6&65535);
 $8=($7|0)>($args_collected|0);
 if ($8) {
  $_01=$args_collected;
 } else {
  return;
 }
 while(1) {

  $_sum=((($_01)+($4))|0);
  $9=(($2+($_sum<<2))|0);
  $10=((HEAP32[(($9)>>2)])|0);
  _lily_deref($10);
  $11=(($10)|0);
  HEAP32[(($11)>>2)]=0;
  $12=((($_01)+(1))|0);
  $13=((HEAP16[(($5)>>1)])|0);
  $14=($13&65535);
  $15=($12|0)<($14|0);
  if ($15) {
   $_01=$12;
  } else {
   break;
  }
 }
 return;
}


function _maybe_catch_exception($vm){
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$catch_iter_017=0,$15=0,$16=0,$17=0,$19=0,$20=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$jump_location_1_in_in8=0,$jump_location_1_in9=0,$34=0,$36=0,$jump_location_1_in_in=0,$jump_location_1_in=0,$37=0,$jump_location_111_in=0,$jump_location_111=0;
 var $38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$_sum=0,$54=0,$55=0,$56=0;
 var $57=0,$58=0,$59=0,$61=0,$62=0,$63=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0;
 var $81=0,$_0=0,label=0;

 $1=(($vm+96)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($vm+72)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+28)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==0;
 if ($9) {
  $_0=0;

  return (($_0)|0);
 }
 $10=(($2)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($vm+4)|0);
 $13=(($vm+32)|0);
 $catch_iter_017=$8;
 L4: while(1) {

  $15=(($catch_iter_017+20)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=($16|0)==($11|0);
  if (!($17)) {
   label = 4;
   break;
  }
  $22=(($catch_iter_017)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=(($23)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $26=(($25+28)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=(($catch_iter_017+8)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  $30=((HEAP32[(($12)>>2)])|0);
  $31=(($catch_iter_017+4)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=(($30+($32<<2))|0);
  $jump_location_1_in_in8=(($27+($29<<1))|0);
  $jump_location_1_in9=((HEAP16[(($jump_location_1_in_in8)>>1)])|0);
  $34=(($jump_location_1_in9<<16)>>16)==0;
  if (!($34)) {
   $jump_location_111_in=$jump_location_1_in9;
   while(1) {

    $jump_location_111=($jump_location_111_in&65535);
    $38=((($jump_location_111)+(2))|0);
    $39=(($27+($38<<1))|0);
    $40=((HEAP16[(($39)>>1)])|0);
    $41=($40&65535);
    $42=((HEAP32[(($13)>>2)])|0);
    $43=(($42+($41<<2))|0);
    $44=((HEAP32[(($43)>>2)])|0);
    $45=((_lily_class_greater_eq($44,$4))|0);
    $46=($45|0)==0;
    if (!($46)) {
     label = 8;
     break L4;
    }
    $36=((($jump_location_111)+(4))|0);
    $jump_location_1_in_in=(($27+($36<<1))|0);
    $jump_location_1_in=((HEAP16[(($jump_location_1_in_in)>>1)])|0);
    $37=(($jump_location_1_in<<16)>>16)==0;
    if ($37) {
     break;
    } else {
     $jump_location_111_in=$jump_location_1_in;
    }
   }
  }
  $57=(($catch_iter_017+28)|0);
  $58=((HEAP32[(($57)>>2)])|0);
  $59=($58|0)==0;
  if ($59) {
   $_0=0;
   label = 14;
   break;
  } else {
   $catch_iter_017=$58;
  }
 }
 if ((label|0) == 4) {
  $19=(($catch_iter_017+24)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  HEAP32[(($5)>>2)]=$20;
  $_0=0;

  return (($_0)|0);
 }
 else if ((label|0) == 8) {
  $47=(($27+($jump_location_111<<1))|0);
  $48=((HEAP16[(($47)>>1)])|0);
  $49=(($48<<16)>>16)==50;
  $50=((($jump_location_111)+(3))|0);
  $51=(($27+($50<<1))|0);
  $52=((HEAP16[(($51)>>1)])|0);
  $53=($52&65535);
  $_sum=((($53)+($32))|0);
  $54=(($30+($_sum<<2))|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=((($jump_location_111)+(5))|0);
  do {
   if ($49) {
    $61=(($vm+76)|0);
    $62=((HEAP32[(($61)>>2)])|0);
    $63=($62|0)==0;
    if ($63) {
     _make_proper_exception_val($vm,$4,$55);
     break;
    } else {
     _fixup_exception_val($vm,$55);
     break;
    }
   }
  } while(0);
  $67=(($vm+76)|0);
  HEAP32[(($67)>>2)]=0;
  $68=(($catch_iter_017)|0);
  $69=((HEAP32[(($68)>>2)])|0);
  $70=(($vm+24)|0);
  HEAP32[(($70)>>2)]=$69;
  $71=(($catch_iter_017+12)|0);
  $72=((HEAP32[(($71)>>2)])|0);
  $73=(($vm+20)|0);
  HEAP32[(($73)>>2)]=$72;
  $74=(($catch_iter_017+16)|0);
  $75=((HEAP32[(($74)>>2)])|0);
  $76=(($vm+84)|0);
  $77=((HEAP32[(($76)>>2)])|0);
  $78=(($77+4)|0);
  HEAP32[(($78)>>2)]=$75;
  $79=(($vm)|0);
  HEAP32[(($79)>>2)]=$33;
  $80=((HEAP32[(($70)>>2)])|0);
  $81=(($80+16)|0);
  HEAP32[(($81)>>2)]=$56;
  HEAP32[(($5)>>2)]=$catch_iter_017;
  $_0=1;

  return (($_0)|0);
 }
 else if ((label|0) == 14) {

  return (($_0)|0);
 }
  return 0;
}


function _prep_registers($vm,$fval,$code){
 $vm=($vm)|0;
 $fval=($fval)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$i_01=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $_sum=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$45=0,$i_0_lcssa=0,$46=0,$47=0,$48=0,label=0;

 $1=(($vm+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($fval+38)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=((($5)+($2))|0);
 $7=(($vm)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($vm+4)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($code+6)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=(($12<<16)>>16)==0;
 if ($13) {
  $i_0_lcssa=0;
 } else {
  $i_01=0;
  while(1) {

   $14=((($i_01)+(5))|0);
   $15=(($code+($14<<1))|0);
   $16=((HEAP16[(($15)>>1)])|0);
   $17=($16&65535);
   $18=(($8+($17<<2))|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $_sum=((($i_01)+($2))|0);
   $20=(($10+($_sum<<2))|0);
   $21=((HEAP32[(($20)>>2)])|0);
   $22=(($19)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=$23&8192;
   $25=($24|0)==0;
   if (!($25)) {
    $27=(($19+8)|0);
    $28=$27;
    $29=((HEAP32[(($28)>>2)])|0);
    $30=(($29)|0);
    $31=((HEAP32[(($30)>>2)])|0);
    $32=((($31)+(1))|0);
    HEAP32[(($30)>>2)]=$32;
   }
   $34=(($21)|0);
   $35=((HEAP32[(($34)>>2)])|0);
   $36=$35&8192;
   $37=($36|0)==0;
   if (!($37)) {
    _lily_deref($21);
   }
   $40=$21;
   $41=$19;
   HEAP32[(($40)>>2)]=((HEAP32[(($41)>>2)])|0);HEAP32[((($40)+(4))>>2)]=((HEAP32[((($41)+(4))>>2)])|0);HEAP32[((($40)+(8))>>2)]=((HEAP32[((($41)+(8))>>2)])|0);HEAP32[((($40)+(12))>>2)]=((HEAP32[((($41)+(12))>>2)])|0);
   $42=((($i_01)+(1))|0);
   $43=((HEAP16[(($11)>>1)])|0);
   $44=($43&65535);
   $45=($42|0)<($44|0);
   if ($45) {
    $i_01=$42;
   } else {
    $i_0_lcssa=$42;
    break;
   }
  }
 }

 $46=((HEAP16[(($3)>>1)])|0);
 $47=($46&65535);
 $48=($i_0_lcssa|0)==($47|0);
 if ($48) {
  HEAP32[(($1)>>2)]=$6;
  return;
 }
 _scrub_registers($vm,$fval,$i_0_lcssa);
 HEAP32[(($1)>>2)]=$6;
 return;
}


function _do_o_get_item($vm,$code,$code_pos){
 $vm=($vm)|0;
 $code=($code)|0;
 $code_pos=($code_pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$ld$0$0=0,$34$0=0,$ld$1$1=0,$34$1=0,$35$0=0,$35=0,$36=0,$37=0,$38=0,$40=0;
 var $41=0,$44=0,$index_int_0=0,$47=0,$48=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$58=0,$59=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($code_pos)+(2))|0);
 $4=(($code+($3<<1))|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=($5&65535);
 $7=(($2+($6<<2))|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($code_pos)+(3))|0);
 $10=(($code+($9<<1))|0);
 $11=((HEAP16[(($10)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((($code_pos)+(4))|0);
 $16=(($code+($15<<1))|0);
 $17=((HEAP16[(($16)>>1)])|0);
 $18=($17&65535);
 $19=(($2+($18<<2))|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($8)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=$22&8;
 $24=($23|0)==0;
 if (!($24)) {
  _lily_string_subscript($vm,$8,$14,$20);
  return;
 }
 $27=$22&640;
 $28=($27|0)==0;
 $29=(($8+8)|0);
 if ($28) {
  $52=$29;
  $53=((HEAP32[(($52)>>2)])|0);
  $54=((_lily_hash_get_elem($vm,$53,$14))|0);
  $55=($54|0)==0;
  if ($55) {
   _key_error($vm,$code_pos,$14);
  }
  $58=(($54+12)|0);
  $59=((HEAP32[(($58)>>2)])|0);
  _lily_assign_value($20,$59);
  return;
 }
 $31=$29;
 $32=((HEAP32[(($31)>>2)])|0);
 $33=(($14+8)|0);
 $ld$0$0=(($33)|0);
 $34$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($33+4)|0);
 $34$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $35$0=$34$0;
 $35=$35$0;
 $36=($35|0)<0;
 $37=(($32+8)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 do {
  if ($36) {
   $40=((($38)+($35))|0);
   $41=($40|0)<0;
   if (!($41)) {
    $index_int_0=$40;
    break;
   }
   _boundary_error($vm,$35);
   $index_int_0=$40;
  } else {
   $44=($35>>>0)<($38>>>0);
   if ($44) {
    $index_int_0=$35;
    break;
   }
   _boundary_error($vm,$35);
   $index_int_0=$35;
  }
 } while(0);

 $47=(($32+16)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 $49=(($48+($index_int_0<<2))|0);
 $50=((HEAP32[(($49)>>2)])|0);
 _lily_assign_value($20,$50);
 return;
}


function _do_o_get_property($vm,$code,$code_pos){
 $vm=($vm)|0;
 $code=($code)|0;
 $code_pos=($code_pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($code_pos)+(2))|0);
 $4=(($code+($3<<1))|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=($5&65535);
 $7=((($code_pos)+(3))|0);
 $8=(($code+($7<<1))|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12+8)|0);
 $14=$13;
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((($code_pos)+(4))|0);
 $17=(($code+($16<<1))|0);
 $18=((HEAP16[(($17)>>1)])|0);
 $19=($18&65535);
 $20=(($2+($19<<2))|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($15+16)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($23+($6<<2))|0);
 $25=((HEAP32[(($24)>>2)])|0);
 _lily_assign_value($21,$25);
 return;
}


function _do_o_set_item($vm,$code,$code_pos){
 $vm=($vm)|0;
 $code=($code)|0;
 $code_pos=($code_pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$ld$0$0=0,$30$0=0,$ld$1$1=0,$30$1=0,$31$0=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$40=0;
 var $index_int_0=0,$43=0,$44=0,$45=0,$46=0,$48=0,$49=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($code_pos)+(2))|0);
 $4=(($code+($3<<1))|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=($5&65535);
 $7=(($2+($6<<2))|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((($code_pos)+(3))|0);
 $10=(($code+($9<<1))|0);
 $11=((HEAP16[(($10)>>1)])|0);
 $12=($11&65535);
 $13=(($2+($12<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((($code_pos)+(4))|0);
 $16=(($code+($15<<1))|0);
 $17=((HEAP16[(($16)>>1)])|0);
 $18=($17&65535);
 $19=(($2+($18<<2))|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($8)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=$22&256;
 $24=($23|0)==0;
 $25=(($8+8)|0);
 if (!($24)) {
  $48=$25;
  $49=((HEAP32[(($48)>>2)])|0);
  _lily_hash_set_elem($vm,$49,$14,$20);
  return;
 }
 $27=$25;
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($14+8)|0);
 $ld$0$0=(($29)|0);
 $30$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($29+4)|0);
 $30$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $31$0=$30$0;
 $31=$31$0;
 $32=($31|0)<0;
 $33=(($28+8)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 do {
  if ($32) {
   $36=((($34)+($31))|0);
   $37=($36|0)<0;
   if (!($37)) {
    $index_int_0=$36;
    break;
   }
   _boundary_error($vm,$31);
   $index_int_0=$36;
  } else {
   $40=($31>>>0)<($34>>>0);
   if ($40) {
    $index_int_0=$31;
    break;
   }
   _boundary_error($vm,$31);
   $index_int_0=$31;
  }
 } while(0);

 $43=(($28+16)|0);
 $44=((HEAP32[(($43)>>2)])|0);
 $45=(($44+($index_int_0<<2))|0);
 $46=((HEAP32[(($45)>>2)])|0);
 _lily_assign_value($46,$20);
 return;
}


function _do_o_set_property($vm,$code,$code_pos){
 $vm=($vm)|0;
 $code=($code)|0;
 $code_pos=($code_pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($code_pos)+(2))|0);
 $4=(($code+($3<<1))|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=($5&65535);
 $7=((($code_pos)+(3))|0);
 $8=(($code+($7<<1))|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($2+($10<<2))|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12+8)|0);
 $14=$13;
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((($code_pos)+(4))|0);
 $17=(($code+($16<<1))|0);
 $18=((HEAP16[(($17)>>1)])|0);
 $19=($18&65535);
 $20=(($2+($19<<2))|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($15+16)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($23+($6<<2))|0);
 $25=((HEAP32[(($24)>>2)])|0);
 _lily_assign_value($25,$21);
 return;
}


function _do_o_build_hash($vm,$code,$code_pos){
 $vm=($vm)|0;
 $code=($code)|0;
 $code_pos=($code_pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$i_01=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($code_pos)+(2))|0);
 $4=(($code+($3<<1))|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=($5&65535);
 $7=((($code_pos)+(3))|0);
 $8=((($6)+($7))|0);
 $9=(($code+($8<<1))|0);
 $10=((HEAP16[(($9)>>1)])|0);
 $11=($10&65535);
 $12=(($2+($11<<2))|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((_lily_new_hash_val())|0);
 _lily_move_hash_f(73728,$13,$14);
 $15=(($5<<16)>>16)==0;
 if ($15) {
  return;
 } else {
  $i_01=0;
 }
 while(1) {

  $16=((($i_01)+($7))|0);
  $17=(($code+($16<<1))|0);
  $18=((HEAP16[(($17)>>1)])|0);
  $19=($18&65535);
  $20=(($2+($19<<2))|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=((($16)+(1))|0);
  $23=(($code+($22<<1))|0);
  $24=((HEAP16[(($23)>>1)])|0);
  $25=($24&65535);
  $26=(($2+($25<<2))|0);
  $27=((HEAP32[(($26)>>2)])|0);
  _lily_hash_set_elem($vm,$14,$21,$27);
  $28=((($i_01)+(2))|0);
  $29=($28|0)<($6|0);
  if ($29) {
   $i_01=$28;
  } else {
   break;
  }
 }
 return;
}


function _do_o_build_list_tuple($vm,$code){
 $vm=($vm)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$22=0;
 var $i_01=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+4)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=((($5)+(3))|0);
 $7=(($code+($6<<1))|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($2+($9<<2))|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((_lily_new_list_val())|0);
 $13=$5<<2;
 $14=((_lily_malloc($13))|0);
 $15=$14;
 $16=(($12+8)|0);
 HEAP32[(($16)>>2)]=$5;
 $17=(($12+16)|0);
 HEAP32[(($17)>>2)]=$15;
 $18=((HEAP16[(($code)>>1)])|0);
 $19=(($18<<16)>>16)==31;
 if ($19) {
  _lily_move_list_f(73728,$11,$12);
 } else {
  _lily_move_tuple_f(73728,$11,$12);
 }
 $22=(($4<<16)>>16)==0;
 if ($22) {
  return;
 } else {
  $i_01=0;
 }
 while(1) {

  $23=((($i_01)+(3))|0);
  $24=(($code+($23<<1))|0);
  $25=((HEAP16[(($24)>>1)])|0);
  $26=($25&65535);
  $27=(($2+($26<<2))|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=((_lily_copy_value($28))|0);
  $30=(($15+($i_01<<2))|0);
  HEAP32[(($30)>>2)]=$29;
  $31=((($i_01)+(1))|0);
  $32=($31|0)<($5|0);
  if ($32) {
   $i_01=$31;
  } else {
   break;
  }
 }
 return;
}


function _do_o_build_enum($vm,$code){
 $vm=($vm)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$i_01=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+4)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($code+6)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=(($code+8)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=((($9)+(5))|0);
 $11=(($code+($10<<1))|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 $14=(($2+($13<<2))|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((_lily_new_instance_val())|0);
 $17=$9<<2;
 $18=((_lily_malloc($17))|0);
 $19=$18;
 $20=(($16+8)|0);
 HEAP32[(($20)>>2)]=$9;
 $21=(($16+16)|0);
 HEAP32[(($21)>>2)]=$19;
 $22=(($16+6)|0);
 HEAP16[(($22)>>1)]=$6;
 $23=(($16+4)|0);
 HEAP16[(($23)>>1)]=$4;
 _lily_move_enum_f(73728,$15,$16);
 $24=(($8<<16)>>16)==0;
 if ($24) {
  return;
 } else {
  $i_01=0;
 }
 while(1) {

  $25=((($i_01)+(5))|0);
  $26=(($code+($25<<1))|0);
  $27=((HEAP16[(($26)>>1)])|0);
  $28=($27&65535);
  $29=(($2+($28<<2))|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $31=((_lily_copy_value($30))|0);
  $32=(($19+($i_01<<2))|0);
  HEAP32[(($32)>>2)]=$31;
  $33=((($i_01)+(1))|0);
  $34=($33|0)<($9|0);
  if ($34) {
   $i_01=$33;
  } else {
   break;
  }
 }
 return;
}


function _do_o_create_function($vm,$code){
 $vm=($vm)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+($5<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($code+4)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=($9&65535);
 $11=(($vm+28)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12+($10<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+24)|0);
 $16=$15;
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($code+6)|0);
 $19=((HEAP16[(($18)>>1)])|0);
 $20=($19&65535);
 $21=(($2+($20<<2))|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((_lily_new_function_copy($17))|0);
 $24=(($23)|0);
 HEAP32[(($24)>>2)]=1;
 $25=(($7+8)|0);
 $26=$25;
 $27=((HEAP32[(($26)>>2)])|0);
 _copy_upvalues($23,$27);
 _lily_move_function_f(73728,$22,$23);
 _lily_tag_value($vm,$22);
 return;
}


function _make_cell_from($value){
 $value=($value)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,label=0;

 $1=((_lily_malloc(16))|0);
 $2=$1;
 $3=$value;
 HEAP32[(($1)>>2)]=((HEAP32[(($3)>>2)])|0);HEAP32[((($1)+(4))>>2)]=((HEAP32[((($3)+(4))>>2)])|0);HEAP32[((($1)+(8))>>2)]=((HEAP32[((($3)+(8))>>2)])|0);HEAP32[((($1)+(12))>>2)]=((HEAP32[((($3)+(12))>>2)])|0);
 $4=(($1+4)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=1;
 $6=(($value)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=$7&8192;
 $9=($8|0)==0;
 if ($9) {
  return (($2)|0);
 }
 $11=(($value+8)|0);
 $12=$11;
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($13)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((($15)+(1))|0);
 HEAP32[(($14)>>2)]=$16;
 return (($2)|0);
}


function _do_o_optarg_dispatch($vm,$code){
 $vm=($vm)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$i_01=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$i_0_lcssa=0;
 var $20=0,$21=0,$22=0,$23=0,label=0;

 $1=(($vm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($code+2)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($code+4)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=($6&65535);
 $8=((($7)-(1))|0);
 $9=($4&65535);
 $10=($8|0)==0;
 L1: do {
  if ($10) {
   $i_0_lcssa=0;
  } else {
   $i_01=0;
   while(1) {

    $13=((($9)-($i_01))|0);
    $14=(($2+($13<<2))|0);
    $15=((HEAP32[(($14)>>2)])|0);
    $16=(($15)|0);
    $17=((HEAP32[(($16)>>2)])|0);
    $18=($17|0)==0;
    $19=((($i_01)+(1))|0);
    if (!($18)) {
     $i_0_lcssa=$i_01;
     break L1;
    }
    $12=($19>>>0)<($8>>>0);
    if ($12) {
     $i_01=$19;
    } else {
     $i_0_lcssa=$19;
     break;
    }
   }
  }
 } while(0);

 $20=((($i_0_lcssa)+(3))|0);
 $21=(($code+($20<<1))|0);
 $22=((HEAP16[(($21)>>1)])|0);
 $23=($22&65535);
 return (($23)|0);
}


function _add_catch_entry($vm){
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;

 $1=((_lily_malloc(32))|0);
 $2=$1;
 $3=(($vm+72)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+24)|0);
 HEAP32[(($5)>>2)]=$2;
 $6=(($1+24)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=0;
 $8=((HEAP32[(($3)>>2)])|0);
 $9=(($1+28)|0);
 $10=$9;
 HEAP32[(($10)>>2)]=$8;
 return;
}


function _do_o_raise($vm,$exception_val){
 $vm=($vm)|0;
 $exception_val=($exception_val)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,label=0;

 $1=(($exception_val+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+16)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+8)|0);
 $8=$7;
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+8)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($3+4)|0);
 $13=((HEAP16[(($12)>>1)])|0);
 $14=($13&65535);
 $15=(($vm+32)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+($14<<2))|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($vm+76)|0);
 HEAP32[(($19)>>2)]=$exception_val;
 $20=(($vm+96)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 _lily_raise_class($21,$18,$11);
 return;
}


function _do_o_new_instance($vm,$code){
 $vm=($vm)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$56=0,$57=0,$59=0,$i_01=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0;
 var $66=0,label=0;

 $1=(($code+4)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=(($vm)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($code+6)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=($7&65535);
 $9=(($5+($8<<2))|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($vm+32)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12+($3<<2))|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+44)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=($16&65535);
 $18=(($vm+24)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+36)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($21+32)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=($23|0)==0;
 do {
  if (!($24)) {
   $26=(($23+8)|0);
   $27=$26;
   $28=((HEAP32[(($27)>>2)])|0);
   $29=(($28+4)|0);
   $30=((HEAP16[(($29)>>1)])|0);
   $31=(($14+40)|0);
   $32=((HEAP16[(($31)>>1)])|0);
   $33=((($30&65535))>>>0)>((($32&65535))>>>0);
   if (!($33)) {
    break;
   }
   _lily_assign_value($10,$23);
   $35=((HEAP32[(($18)>>2)])|0);
   $36=(($35+32)|0);
   HEAP32[(($36)>>2)]=$10;
   return;
  }
 } while(0);
 $38=((_lily_malloc(24))|0);
 $39=$38;
 $40=$17<<2;
 $41=((_lily_malloc($40))|0);
 $42=$41;
 $43=(($38+8)|0);
 $44=$43;
 HEAP32[(($44)>>2)]=-1;
 $45=$38;
 HEAP32[(($45)>>2)]=1;
 $46=(($38+16)|0);
 $47=$46;
 HEAP32[(($47)>>2)]=$42;
 $48=(($38+20)|0);
 $49=$48;
 HEAP32[(($49)>>2)]=0;
 $50=(($38+4)|0);
 $51=$50;
 HEAP16[(($51)>>1)]=$2;
 $52=((HEAP16[(($code)>>1)])|0);
 $53=(($52<<16)>>16)==53;
 do {
  if ($53) {
   _lily_move_instance_f(73728,$10,$39);
  } else {
   _lily_move_instance_f(8192,$10,$39);
   $56=((HEAP16[(($code)>>1)])|0);
   $57=(($56<<16)>>16)==54;
   if (!($57)) {
    break;
   }
   _lily_tag_value($vm,$10);
  }
 } while(0);
 $59=(($16<<16)>>16)==0;
 if (!($59)) {
  $i_01=0;
  while(1) {

   $60=((_lily_new_empty_value())|0);
   $61=((HEAP32[(($47)>>2)])|0);
   $62=(($61+($i_01<<2))|0);
   HEAP32[(($62)>>2)]=$60;
   $63=((($i_01)+(1))|0);
   $64=($63|0)<($17|0);
   if ($64) {
    $i_01=$63;
   } else {
    break;
   }
  }
 }
 HEAP32[(($44)>>2)]=$17;
 $65=((HEAP32[(($18)>>2)])|0);
 $66=(($65+32)|0);
 HEAP32[(($66)>>2)]=$10;
 return;
}


function _do_o_create_closure($vm,$code){
 $vm=($vm)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$_op=0,$22=0,$24=0,$25=0,$26=0,label=0;

 $1=(($code+4)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=(($code+6)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=($5&65535);
 $7=(($vm)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+($6<<2))|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($vm+24)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((_lily_new_function_copy($14))|0);
 $16=$3<<2;
 $17=((_lily_malloc($16))|0);
 $18=$17;
 $19=(($2<<16)>>16)==0;
 if (!($19)) {
  $20=($2&65535);
  $21=((($2&65535))>>>0)>((1)>>>0);
  $_op=$20<<2;
  $22=($21?$_op:4);
  _memset((((($17)|0))|0), ((((0)|0))|0), (((($22)|0))|0))|0;
 }
 $24=(($15+36)|0);
 HEAP16[(($24)>>1)]=$2;
 $25=(($15+40)|0);
 HEAP32[(($25)>>2)]=$18;
 $26=(($15)|0);
 HEAP32[(($26)>>2)]=1;
 _lily_move_function_f(8192,$10,$15);
 _lily_tag_value($vm,$10);
 return (($18)|0);
}


function _do_o_load_class_closure($vm,$code,$code_pos){
 $vm=($vm)|0;
 $code=($code)|0;
 $code_pos=($code_pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;

 _do_o_get_property($vm,$code,$code_pos);
 $1=((($code_pos)+(4))|0);
 $2=(($code+($1<<1))|0);
 $3=((HEAP16[(($2)>>1)])|0);
 $4=($3&65535);
 $5=(($vm)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+($4<<2))|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+8)|0);
 $10=$9;
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((_lily_new_function_copy($11))|0);
 $13=(($12)|0);
 HEAP32[(($13)>>2)]=1;
 _copy_upvalues($12,$11);
 _lily_move_function_f(73728,$8,$12);
 $14=(($12+40)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 return (($15)|0);
}


function _do_o_load_closure($vm,$code){
 $vm=($vm)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$i_01=0,$16=0,$17=0,$18=0,$20=0;
 var $21=0,$22=0,$23=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$_sum=0,$33=0,$34=0,$35=0,$_lcssa=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,label=0;

 $1=(($vm+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+40)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($code+4)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 $10=(($8<<16)>>16)==0;
 $11=(($code+6)|0);
 $12=((HEAP16[(($11)>>1)])|0);
 $13=($12&65535);
 if ($10) {
  $_lcssa=$13;
 } else {
  $i_01=0;$15=$11;$14=$13;
  while(1) {



   $16=(($6+($14<<2))|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $18=($17|0)==0;
   if (!($18)) {
    $20=(($17+4)|0);
    $21=((HEAP32[(($20)>>2)])|0);
    $22=((($21)-(1))|0);
    HEAP32[(($20)>>2)]=$22;
    $23=($22|0)==0;
    if ($23) {
     _lily_deref($17);
     $25=$17;
     _lily_free($25);
    }
    $27=((HEAP16[(($15)>>1)])|0);
    $28=($27&65535);
    $29=(($6+($28<<2))|0);
    HEAP32[(($29)>>2)]=0;
   }
   $31=((($i_01)+(1))|0);
   $32=($31|0)<($9|0);
   $_sum=((($i_01)+(4))|0);
   $33=(($code+($_sum<<1))|0);
   $34=((HEAP16[(($33)>>1)])|0);
   $35=($34&65535);
   if ($32) {
    $i_01=$31;$15=$33;$14=$35;
   } else {
    $_lcssa=$35;
    break;
   }
  }
 }

 $36=(($vm)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=(($37+($_lcssa<<2))|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=(($4)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=((($41)+(1))|0);
 HEAP32[(($40)>>2)]=$42;
 _lily_move_function_f(40960,$39,$4);
 $43=((HEAP32[(($5)>>2)])|0);
 return (($43)|0);
}


function _load_foreign_ties($vm){
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$tie_iter_01=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;

 $1=(($vm+92)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($vm+4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($4|0)==0;
 if ($7) {
  $17=((HEAP32[(($1)>>2)])|0);
  $18=(($17+12)|0);
  HEAP32[(($18)>>2)]=0;
  return;
 } else {
  $tie_iter_01=$4;
 }
 while(1) {

  $8=(($tie_iter_01+8)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(($6+($9<<2))|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=(($tie_iter_01+16)|0);
  _lily_assign_value_noref($11,$12);
  $13=(($tie_iter_01)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=$tie_iter_01;
  _lily_free($15);
  $16=($14|0)==0;
  if ($16) {
   break;
  } else {
   $tie_iter_01=$14;
  }
 }
 $17=((HEAP32[(($1)>>2)])|0);
 $18=(($17+12)|0);
 HEAP32[(($18)>>2)]=0;
 return;
}


function _setup_readonly_table($vm){
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,label=0;

 $1=(($vm+92)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($vm+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+44)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($4|0)==($6|0);
 if ($7) {
  return;
 }
 $9=(($vm+28)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$10;
 $12=$6<<2;
 $13=((_lily_realloc($11,$12))|0);
 $14=$13;
 $15=((HEAP32[(($3)>>2)])|0);
 $16=(($2+4)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 _load_ties_into_readonly($14,$17,$15);
 $18=(($2+8)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 _load_ties_into_readonly($14,$19,$15);
 $20=((HEAP32[(($5)>>2)])|0);
 HEAP32[(($3)>>2)]=$20;
 HEAP32[(($9)>>2)]=$14;
 return;
}


function _maybe_fix_print($vm){
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,label=0;

 $1=(($vm+92)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+20)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((_lily_find_var($2,$4,8736))|0);
 $6=($5|0)==0;
 if ($6) {
  return;
 }
 $8=((_lily_find_var($2,$4,7416))|0);
 $9=($8|0)==0;
 if ($9) {
  return;
 }
 $11=(($8+8)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($vm+28)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+($12<<2))|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+24)|0);
 $18=$17;
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+24)|0);
 HEAP32[(($20)>>2)]=74;
 $21=(($5+8)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($vm+4)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($24+($22<<2))|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($vm+104)|0);
 HEAP32[(($27)>>2)]=$26;
 return;
}


function _function_marker($pass,$v){
 $pass=($pass)|0;
 $v=($v)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$i_01=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$20=0,$21=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+40)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($3+36)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=($7&65535);
 $9=(($7<<16)>>16)==0;
 if ($9) {
  return;
 } else {
  $i_01=0;
 }
 while(1) {

  $10=(($5+($i_01<<2))|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=($11|0)==0;
  do {
   if (!($12)) {
    $14=(($11)|0);
    $15=((HEAP32[(($14)>>2)])|0);
    $16=$15&98304;
    $17=($16|0)==0;
    if ($17) {
     break;
    }
    _gc_mark($pass,$11);
   }
  } while(0);
  $20=((($i_01)+(1))|0);
  $21=($20|0)<($8|0);
  if ($21) {
   $i_01=$20;
  } else {
   break;
  }
 }
 return;
}


function _add_list_like($vm,$msgbuf,$t,$v,$prefix,$suffix){
 $vm=($vm)|0;
 $msgbuf=($msgbuf)|0;
 $t=($t)|0;
 $v=($v)|0;
 $prefix=($prefix)|0;
 $suffix=($suffix)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$i_01=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$_lcssa=0,$i_0_lcssa=0,$18=0;
 var $20=0,$21=0,$22=0,$23=0,label=0;

 $1=(($v+8)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 _lily_msgbuf_add($msgbuf,$prefix);
 $4=(($3+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 if ($6) {
  _lily_msgbuf_add($msgbuf,$suffix);
  return;
 }
 $7=((HEAP32[(($4)>>2)])|0);
 $8=($7|0)==1;
 if ($8) {
  $i_0_lcssa=0;$_lcssa=1;
 } else {
  $9=(($3+16)|0);
  $i_01=0;
  while(1) {

   $11=((HEAP32[(($9)>>2)])|0);
   $12=(($11+($i_01<<2))|0);
   $13=((HEAP32[(($12)>>2)])|0);
   _add_value_to_msgbuf($vm,$msgbuf,$t,$13);
   _lily_msgbuf_add($msgbuf,13600);
   $14=((($i_01)+(1))|0);
   $15=((HEAP32[(($4)>>2)])|0);
   $16=((($15)-(1))|0);
   $17=($14>>>0)<($16>>>0);
   if ($17) {
    $i_01=$14;
   } else {
    $i_0_lcssa=$14;$_lcssa=$15;
    break;
   }
  }
 }


 $18=($i_0_lcssa|0)==($_lcssa|0);
 if ($18) {
  _lily_msgbuf_add($msgbuf,$suffix);
  return;
 }
 $20=(($3+16)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($21+($i_0_lcssa<<2))|0);
 $23=((HEAP32[(($22)>>2)])|0);
 _add_value_to_msgbuf($vm,$msgbuf,$t,$23);
 _lily_msgbuf_add($msgbuf,$suffix);
 return;
}


function _fixup_exception_val($vm,$result){
 $vm=($vm)|0;
 $result=($result)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;

 $1=(($vm+76)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_assign_value($result,$2);
 $3=((_build_traceback_raw($vm))|0);
 $4=(($result+8)|0);
 $5=$4;
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+16)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+4)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 _lily_move_list_f(73728,$10,$3);
 return;
}


function _make_proper_exception_val($vm,$raised_cls,$result){
 $vm=($vm)|0;
 $raised_cls=($raised_cls)|0;
 $result=($result)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,label=0;

 $1=((_lily_malloc(24))|0);
 $2=$1;
 $3=((_lily_malloc(8))|0);
 $4=$3;
 $5=(($1+16)|0);
 $6=$5;
 HEAP32[(($6)>>2)]=$4;
 $7=(($1+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=-1;
 $9=$1;
 HEAP32[(($9)>>2)]=1;
 $10=(($1+20)|0);
 $11=$10;
 HEAP32[(($11)>>2)]=0;
 $12=(($raised_cls+40)|0);
 $13=((HEAP16[(($12)>>1)])|0);
 $14=(($1+4)|0);
 $15=$14;
 HEAP16[(($15)>>1)]=$13;
 $16=(($vm+96)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($17+4)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=((_lily_new_string($21))|0);
 $23=((HEAP32[(($16)>>2)])|0);
 $24=(($23+4)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 _lily_msgbuf_flush($25);
 $26=((HEAP32[(($6)>>2)])|0);
 HEAP32[(($26)>>2)]=$22;
 HEAP32[(($8)>>2)]=1;
 $27=((_lily_new_empty_value())|0);
 $28=((_build_traceback_raw($vm))|0);
 _lily_move_list_f(8192,$27,$28);
 $29=((HEAP32[(($6)>>2)])|0);
 $30=(($29+4)|0);
 HEAP32[(($30)>>2)]=$27;
 HEAP32[(($8)>>2)]=2;
 _lily_move_instance_f(73728,$result,$2);
 return;
}


function _boundary_error($vm,$bad_index){
 $vm=($vm)|0;
 $bad_index=($bad_index)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($vm+96)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_msgbuf_flush($4);
 _lily_msgbuf_add_fmt($4,12280,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$bad_index,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $5=(($4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 _lily_vm_raise($vm,21,$6);
 STACKTOP=sp;return;
}


function _key_error($vm,$code_pos,$key){
 $vm=($vm)|0;
 $code_pos=($code_pos)|0;
 $key=($key)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0;
 var $22=0,$23=0,$25=0,$ld$0$0=0,$26$0=0,$ld$1$1=0,$26$1=0,$$etemp$2=0,$28=0,$29=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=((($code_pos)+(1))|0);
 $2=(($vm+24)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+12)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+($1<<1))|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=($7&65535);
 $9=(($3+20)|0);
 HEAP32[(($9)>>2)]=$8;
 $10=(($vm+96)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+8)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($key)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=$15&8;
 $17=($16|0)==0;
 $18=(($key+8)|0);
 if ($17) {
  $25=(($18)|0);
  $ld$0$0=(($25)|0);
  $26$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($25+4)|0);
  $26$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $$etemp$2=9928;
  _lily_msgbuf_add_fmt($13,$$etemp$2,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$26$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$26$1,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $28=(($13)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  _lily_vm_raise($vm,18,$29);
  STACKTOP=sp;return;
 } else {
  $20=$18;
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21+8)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  _lily_msgbuf_add_fmt($13,11104,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$23,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $28=(($13)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  _lily_vm_raise($vm,18,$29);
  STACKTOP=sp;return;
 }
}


function _copy_upvalues($target,$source){
 $target=($target)|0;
 $source=($source)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$i_01=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,label=0;

 $1=(($source+40)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($source+36)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=$5<<2;
 $7=((_lily_malloc($6))|0);
 $8=$7;
 $9=(($4<<16)>>16)==0;
 if ($9) {
  $21=(($target+40)|0);
  HEAP32[(($21)>>2)]=$8;
  $22=(($target+36)|0);
  HEAP16[(($22)>>1)]=$4;
  return;
 } else {
  $i_01=0;
 }
 while(1) {

  $10=(($2+($i_01<<2))|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=($11|0)==0;
  if (!($12)) {
   $14=(($11+4)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=((($15)+(1))|0);
   HEAP32[(($14)>>2)]=$16;
  }
  $18=(($8+($i_01<<2))|0);
  HEAP32[(($18)>>2)]=$11;
  $19=((($i_01)+(1))|0);
  $20=($19|0)<($5|0);
  if ($20) {
   $i_01=$19;
  } else {
   break;
  }
 }
 $21=(($target+40)|0);
 HEAP32[(($21)>>2)]=$8;
 $22=(($target+36)|0);
 HEAP16[(($22)>>1)]=$4;
 return;
}


function _load_ties_into_readonly($readonly,$tie,$stop){
 $readonly=($readonly)|0;
 $tie=($tie)|0;
 $stop=($stop)|0;
 var $1=0,$_01=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=($tie|0)==0;
 if ($1) {
  return;
 } else {
  $_01=$tie;
 }
 while(1) {

  $2=(($_01+8)|0);
  $3=((HEAP32[(($2)>>2)])|0);
  $4=($3>>>0)<($stop>>>0);
  if ($4) {
   label = 4;
   break;
  }
  $6=(($readonly+($3<<2))|0);
  HEAP32[(($6)>>2)]=$_01;
  $7=(($_01)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=($8|0)==0;
  if ($9) {
   label = 4;
   break;
  } else {
   $_01=$8;
  }
 }
 if ((label|0) == 4) {
  return;
 }
}


function _builtin_stdout_print($vm,$argc,$code){
 $vm=($vm)|0;
 $argc=($argc)|0;
 $code=($code)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;

 $1=(($vm+104)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=$3;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+12)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($7|0)==0;
 if ($8) {
  _lily_vm_raise($vm,20,5936);
 }
 $11=((HEAP32[(($6)>>2)])|0);
 $12=(($code+2)|0);
 $13=((HEAP16[(($12)>>1)])|0);
 $14=($13&65535);
 $15=(($vm)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+($14<<2))|0);
 $18=((HEAP32[(($17)>>2)])|0);
 _do_print($vm,$11,$18);
 return;
}


function _lily_new_symtab(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;

 $1=((_lily_malloc(104))|0);
 $2=$1;
 $3=(($1+28)|0);
 $4=(($1+92)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=0;
 _memset((((($1)|0))|0), ((((0)|0))|0), ((((16)|0))|0))|0;
 _memset((((($3)|0))|0), ((((0)|0))|0), ((((20)|0))|0))|0;
 return (($2)|0);
}


function _lily_set_first_package($symtab,$package){
 $symtab=($symtab)|0;
 $package=($package)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;

 $1=(($package+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($symtab+20)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=((HEAP32[(($1)>>2)])|0);
 $5=(($symtab+24)|0);
 HEAP32[(($5)>>2)]=$4;
 $6=(($symtab+16)|0);
 HEAP32[(($6)>>2)]=$package;
 return;
}


function _free_vars($symtab,$var){
 $symtab=($symtab)|0;
 $var=($var)|0;
 var $1=0,$_01=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=($var|0)==0;
 if ($1) {
  return;
 } else {
  $_01=$var;
 }
 while(1) {

  $2=(($_01)|0);
  $3=((HEAP32[(($2)>>2)])|0);
  $4=(($_01+16)|0);
  $5=((HEAP32[(($4)>>2)])|0);
  _lily_free($5);
  $6=$_01;
  _lily_free($6);
  $7=($3|0)==0;
  if ($7) {
   break;
  } else {
   $_01=$3;
  }
 }
 return;
}


function _lily_free_symtab($symtab){
 $symtab=($symtab)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$package_iter_03=0,$10=0,$package_iter_04=0,$11=0,$module_iter_01=0,$12=0,$module_iter_02=0,$13=0,$14=0,$15=0,$16=0;
 var $17=0,$module_iter_0=0,$18=0,$19=0,$package_iter_0=0,$20=0,$21=0,$22=0,$23=0,$24=0,label=0;

 $1=(($symtab+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _free_ties($2);
 $3=(($symtab+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _free_ties($4);
 $5=(($symtab+32)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 _free_classes($6);
 $7=(($symtab+28)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 _free_vars(0,$8);
 $9=(($symtab+16)|0);
 $package_iter_03=((HEAP32[(($9)>>2)])|0);
 $10=($package_iter_03|0)==0;
 if ($10) {
  $21=(($symtab+36)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=$22;
  _lily_free($23);
  $24=$symtab;
  _lily_free($24);
  return;
 } else {
  $package_iter_04=$package_iter_03;
 }
 while(1) {

  $11=(($package_iter_04+12)|0);
  $module_iter_01=((HEAP32[(($11)>>2)])|0);
  $12=($module_iter_01|0)==0;
  if (!($12)) {
   $module_iter_02=$module_iter_01;
   while(1) {

    $13=(($module_iter_02+28)|0);
    $14=((HEAP32[(($13)>>2)])|0);
    _free_classes($14);
    $15=(($module_iter_02+32)|0);
    $16=((HEAP32[(($15)>>2)])|0);
    _free_vars(0,$16);
    $17=(($module_iter_02)|0);
    $module_iter_0=((HEAP32[(($17)>>2)])|0);
    $18=($module_iter_0|0)==0;
    if ($18) {
     break;
    } else {
     $module_iter_02=$module_iter_0;
    }
   }
  }
  $19=(($package_iter_04)|0);
  $package_iter_0=((HEAP32[(($19)>>2)])|0);
  $20=($package_iter_0|0)==0;
  if ($20) {
   break;
  } else {
   $package_iter_04=$package_iter_0;
  }
 }
 $21=(($symtab+36)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=$22;
 _lily_free($23);
 $24=$symtab;
 _lily_free($24);
 return;
}


function _lily_get_integer_literal($symtab,$int_val$0,$int_val$1){
 $symtab=($symtab)|0;
 $int_val$0=($int_val$0)|0;
 $int_val$1=($int_val$1)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$lit_02=0,$6=0,$lit_03=0,$7=0,$8=0,$9=0,$11=0,$ld$0$0=0,$12$0=0,$ld$1$1=0,$12$1=0,$13=0,$15=0,$lit_0=0,$16=0;
 var $18=0,$19=0,$20=0,$st$2$0=0,$st$3$1=0,$ret_1=0,label=0;

 $1=(($symtab+48)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+24)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($symtab+4)|0);
 $lit_02=((HEAP32[(($5)>>2)])|0);
 $6=($lit_02|0)==0;
 L1: do {
  if (!($6)) {
   $lit_03=$lit_02;
   while(1) {

    $7=(($lit_03+12)|0);
    $8=((HEAP32[(($7)>>2)])|0);
    $9=($8|0)==($4|0);
    if ($9) {
     $11=(($lit_03+24)|0);
     $ld$0$0=(($11)|0);
     $12$0=((HEAP32[(($ld$0$0)>>2)])|0);
     $ld$1$1=(($11+4)|0);
     $12$1=((HEAP32[(($ld$1$1)>>2)])|0);
     $13=(($12$0|0) == ($int_val$0|0)) & (($12$1|0) == ($int_val$1|0));
     if ($13) {
      break;
     }
    }
    $15=(($lit_03)|0);
    $lit_0=((HEAP32[(($15)>>2)])|0);
    $16=($lit_0|0)==0;
    if ($16) {
     break L1;
    } else {
     $lit_03=$lit_0;
    }
   }
   $18=($lit_03|0)==0;
   if ($18) {
    break;
   } else {
    $ret_1=$lit_03;
   }

   return (($ret_1)|0);
  }
 } while(0);
 $19=((_make_new_literal($symtab,$2))|0);
 $20=(($19+24)|0);
 $st$2$0=(($20)|0);
 HEAP32[(($st$2$0)>>2)]=$int_val$0;
 $st$3$1=(($20+4)|0);
 HEAP32[(($st$3$1)>>2)]=$int_val$1;
 $ret_1=$19;

 return (($ret_1)|0);
}


function _lily_get_double_literal($symtab,$dbl_val){
 $symtab=($symtab)|0;
 $dbl_val=+($dbl_val);
 var $1=0,$2=0,$3=0,$4=0,$5=0,$lit_02=0,$6=0,$lit_03=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=.0,$14=0,$16=0,$lit_0=0,$17=0,$19=0,$20=0;
 var $21=0,$22=0,$ret_1=0,label=0;

 $1=(($symtab+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+24)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($symtab+4)|0);
 $lit_02=((HEAP32[(($5)>>2)])|0);
 $6=($lit_02|0)==0;
 L1: do {
  if (!($6)) {
   $lit_03=$lit_02;
   while(1) {

    $7=(($lit_03+12)|0);
    $8=((HEAP32[(($7)>>2)])|0);
    $9=($8|0)==($4|0);
    if ($9) {
     $11=(($lit_03+24)|0);
     $12=$11;
     $13=(+(HEAPF64[(($12)>>3)]));
     $14=$13==$dbl_val;
     if ($14) {
      break;
     }
    }
    $16=(($lit_03)|0);
    $lit_0=((HEAP32[(($16)>>2)])|0);
    $17=($lit_0|0)==0;
    if ($17) {
     break L1;
    } else {
     $lit_03=$lit_0;
    }
   }
   $19=($lit_03|0)==0;
   if ($19) {
    break;
   } else {
    $ret_1=$lit_03;
   }

   return (($ret_1)|0);
  }
 } while(0);
 $20=((_make_new_literal($symtab,$2))|0);
 $21=(($20+24)|0);
 $22=$21;
 HEAPF64[(($22)>>3)]=$dbl_val;
 $ret_1=$20;

 return (($ret_1)|0);
}


function _lily_get_string_literal($symtab,$want_string){
 $symtab=($symtab)|0;
 $want_string=($want_string)|0;
 var $1=0,$2=0,$lit_02=0,$3=0,$lit_03=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0;
 var $21=0,$22=0,$24=0,$lit_0=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$ret_1=0,label=0;

 $1=((_strlen((($want_string)|0)))|0);
 $2=(($symtab+4)|0);
 $lit_02=((HEAP32[(($2)>>2)])|0);
 $3=($lit_02|0)==0;
 L1: do {
  if (!($3)) {
   $lit_03=$lit_02;
   L2: while(1) {

    $4=(($lit_03+12)|0);
    $5=((HEAP32[(($4)>>2)])|0);
    $6=(($5)|0);
    $7=((HEAP32[(($6)>>2)])|0);
    $8=(($7+40)|0);
    $9=((HEAP16[(($8)>>1)])|0);
    $10=(($9<<16)>>16)==2;
    do {
     if ($10) {
      $12=(($lit_03+24)|0);
      $13=$12;
      $14=((HEAP32[(($13)>>2)])|0);
      $15=(($14+4)|0);
      $16=((HEAP32[(($15)>>2)])|0);
      $17=($16|0)==($1|0);
      if (!($17)) {
       break;
      }
      $19=(($14+8)|0);
      $20=((HEAP32[(($19)>>2)])|0);
      $21=((_strcmp((($20)|0),(($want_string)|0)))|0);
      $22=($21|0)==0;
      if ($22) {
       break L2;
      }
     }
    } while(0);
    $24=(($lit_03)|0);
    $lit_0=((HEAP32[(($24)>>2)])|0);
    $25=($lit_0|0)==0;
    if ($25) {
     break L1;
    } else {
     $lit_03=$lit_0;
    }
   }
   $27=($lit_03|0)==0;
   if ($27) {
    break;
   } else {
    $ret_1=$lit_03;
   }

   return (($ret_1)|0);
  }
 } while(0);
 $28=(($symtab+56)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=((_make_new_literal($symtab,$29))|0);
 $31=((_lily_new_raw_string($want_string))|0);
 $32=(($30+24)|0);
 $33=$32;
 HEAP32[(($33)>>2)]=$31;
 $34=(($30+6)|0);
 $35=((HEAP16[(($34)>>1)])|0);
 $36=$35|8;
 HEAP16[(($34)>>1)]=$36;
 $ret_1=$30;

 return (($ret_1)|0);
}


function _lily_get_bytestring_literal($symtab,$want_string,$len){
 $symtab=($symtab)|0;
 $want_string=($want_string)|0;
 $len=($len)|0;
 var $1=0,$lit_02=0,$2=0,$lit_03=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0;
 var $21=0,$23=0,$lit_0=0,$24=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$ret_1=0,label=0;

 $1=(($symtab+4)|0);
 $lit_02=((HEAP32[(($1)>>2)])|0);
 $2=($lit_02|0)==0;
 L1: do {
  if (!($2)) {
   $lit_03=$lit_02;
   L2: while(1) {

    $3=(($lit_03+12)|0);
    $4=((HEAP32[(($3)>>2)])|0);
    $5=(($4)|0);
    $6=((HEAP32[(($5)>>2)])|0);
    $7=(($6+40)|0);
    $8=((HEAP16[(($7)>>1)])|0);
    $9=(($8<<16)>>16)==3;
    do {
     if ($9) {
      $11=(($lit_03+24)|0);
      $12=$11;
      $13=((HEAP32[(($12)>>2)])|0);
      $14=(($13+4)|0);
      $15=((HEAP32[(($14)>>2)])|0);
      $16=($15|0)==($len|0);
      if (!($16)) {
       break;
      }
      $18=(($13+8)|0);
      $19=((HEAP32[(($18)>>2)])|0);
      $20=((_memcmp((($19)|0),(($want_string)|0),(($len)|0)))|0);
      $21=($20|0)==0;
      if ($21) {
       break L2;
      }
     }
    } while(0);
    $23=(($lit_03)|0);
    $lit_0=((HEAP32[(($23)>>2)])|0);
    $24=($lit_0|0)==0;
    if ($24) {
     break L1;
    } else {
     $lit_03=$lit_0;
    }
   }
   $26=($lit_03|0)==0;
   if ($26) {
    break;
   } else {
    $ret_1=$lit_03;
   }

   return (($ret_1)|0);
  }
 } while(0);
 $27=(($symtab+60)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=((_make_new_literal($symtab,$28))|0);
 $30=((_lily_new_raw_string_sized($want_string,$len))|0);
 $31=(($29+24)|0);
 $32=$31;
 HEAP32[(($32)>>2)]=$30;
 $33=(($29+6)|0);
 $34=((HEAP16[(($33)>>1)])|0);
 $35=$34|16;
 HEAP16[(($33)>>1)]=$35;
 $ret_1=$29;

 return (($ret_1)|0);
}


function _lily_new_raw_unlinked_var($symtab,$type,$name){
 $symtab=($symtab)|0;
 $type=($type)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19$0=0,$19$1=0;
 var $20=0,$21=0,$st$0$0=0,$st$1$1=0,$22=0,$23=0,$24=0,$25=0,$26=0,label=0;

 $1=((_lily_malloc(48))|0);
 $2=$1;
 $3=((_strlen((($name)|0)))|0);
 $4=((($3)+(1))|0);
 $5=((_lily_malloc($4))|0);
 $6=(($1+16)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=$5;
 $8=(($1+4)|0);
 $9=$8;
 HEAP16[(($9)>>1)]=1;
 $10=(($1+6)|0);
 $11=$10;
 HEAP16[(($11)>>1)]=0;
 $12=((HEAP32[(($7)>>2)])|0);
 $13=((_strcpy((($12)|0),(($name)|0)))|0);
 $14=(($symtab+100)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($1+32)|0);
 $18=$17;
 HEAP32[(($18)>>2)]=$16;
 $19$0=((_shorthash_for_name($name))|0);
 $19$1=tempRet0;
 $20=(($1+24)|0);
 $21=$20;
 $st$0$0=(($21)|0);
 HEAP32[(($st$0$0)>>2)]=$19$0;
 $st$1$1=(($21+4)|0);
 HEAP32[(($st$1$1)>>2)]=$19$1;
 $22=(($1+12)|0);
 $23=$22;
 HEAP32[(($23)>>2)]=$type;
 $24=$1;
 HEAP32[(($24)>>2)]=0;
 $25=(($1+40)|0);
 $26=$25;
 HEAP32[(($26)>>2)]=0;
 return (($2)|0);
}


function _lily_new_raw_var($symtab,$type,$name){
 $symtab=($symtab)|0;
 $type=($type)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;

 $1=((_lily_new_raw_unlinked_var($symtab,$type,$name))|0);
 $2=(($symtab+24)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+32)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($1)|0);
 HEAP32[(($6)>>2)]=$5;
 $7=((HEAP32[(($2)>>2)])|0);
 $8=(($7+32)|0);
 HEAP32[(($8)>>2)]=$1;
 return (($1)|0);
}


function _lily_find_var($symtab,$module,$name){
 $symtab=($symtab)|0;
 $module=($module)|0;
 $name=($name)|0;
 var $1$0=0,$1$1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$result_0=0,label=0;

 $1$0=((_shorthash_for_name($name))|0);
 $1$1=tempRet0;
 $2=($module|0)==0;
 if (!($2)) {
  $17=(($module+32)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=((_find_var($18,$name,$1$0,$1$1))|0);
  $result_0=$19;

  return (($result_0)|0);
 }
 $4=(($symtab+20)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+32)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((_find_var($7,$name,$1$0,$1$1))|0);
 $9=($8|0)==0;
 if (!($9)) {
  $result_0=$8;

  return (($result_0)|0);
 }
 $11=(($symtab+24)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($12+32)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((_find_var($14,$name,$1$0,$1$1))|0);
 $result_0=$15;

 return (($result_0)|0);
}


function _lily_hide_block_vars($symtab,$var_stop){
 $symtab=($symtab)|0;
 $var_stop=($var_stop)|0;
 var $1=0,$2=0,$3=0,$var_iter_01=0,$4=0,$var_iter_02=0,$5=0,$6=0,$7=0,$8=0,$var_iter_0=0,$9=0,label=0;

 $1=(($symtab+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+32)|0);
 $var_iter_01=((HEAP32[(($3)>>2)])|0);
 $4=($var_iter_01|0)==($var_stop|0);
 if ($4) {
  return;
 } else {
  $var_iter_02=$var_iter_01;
 }
 while(1) {

  $5=(($var_iter_02+6)|0);
  $6=((HEAP16[(($5)>>1)])|0);
  $7=$6|32;
  HEAP16[(($5)>>1)]=$7;
  $8=(($var_iter_02)|0);
  $var_iter_0=((HEAP32[(($8)>>2)])|0);
  $9=($var_iter_0|0)==($var_stop|0);
  if ($9) {
   break;
  } else {
   $var_iter_02=$var_iter_0;
  }
 }
 return;
}


function _lily_tie_function($symtab,$func_var,$func_val){
 $symtab=($symtab)|0;
 $func_var=($func_var)|0;
 $func_val=($func_val)|0;
 var $1=0,$2=0,label=0;

 $1=(($symtab+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _tie_function($symtab,$func_var,$func_val,$2);
 return;
}


function _lily_new_foreign_tie($symtab,$var,$value){
 $symtab=($symtab)|0;
 $var=($var)|0;
 $value=($value)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $ld$0$0=0,$21$0=0,$ld$1$1=0,$21$1=0,$st$2$0=0,$st$3$1=0,$22=0,$23=0,$24=0,$25=0,$26=0,label=0;

 $1=((_lily_malloc(32))|0);
 $2=$1;
 $3=(($var+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($1+12)|0);
 $6=$5;
 HEAP32[(($6)>>2)]=$4;
 $7=(($var+8)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($1+8)|0);
 $10=$9;
 HEAP32[(($10)>>2)]=$8;
 $11=(($1+4)|0);
 $12=$11;
 HEAP16[(($12)>>1)]=0;
 $13=$value;
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($1+16)|0);
 $16=$15;
 HEAP32[(($16)>>2)]=$14;
 $17=(($1+24)|0);
 $18=(($value+8)|0);
 $19=$18;
 $20=$17;
 $ld$0$0=(($19)|0);
 $21$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($19+4)|0);
 $21$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $st$2$0=(($20)|0);
 HEAP32[(($st$2$0)>>2)]=$21$0;
 $st$3$1=(($20+4)|0);
 HEAP32[(($st$3$1)>>2)]=$21$1;
 $22=(($1+20)|0);
 $23=$22;
 HEAP32[(($23)>>2)]=0;
 $24=(($symtab+12)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=$1;
 HEAP32[(($26)>>2)]=$25;
 HEAP32[(($24)>>2)]=$2;
 _lily_free($value);
 return (($2)|0);
}


function _lily_new_class($symtab,$name){
 $symtab=($symtab)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15$0=0,$15$1=0,$16=0,$17=0,$st$0$0=0,$st$1$1=0;
 var $18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,label=0;

 $1=((_lily_malloc(56))|0);
 $2=$1;
 $3=((_strlen((($name)|0)))|0);
 $4=((($3)+(1))|0);
 $5=((_lily_malloc($4))|0);
 $6=((_strcpy((($5)|0),(($name)|0)))|0);
 $7=(($1+4)|0);
 $8=$7;
 HEAP16[(($8)>>1)]=0;
 $9=(($1+6)|0);
 $10=$9;
 HEAP16[(($10)>>1)]=0;
 $11=(($1+24)|0);
 $12=$11;
 HEAP32[(($12)>>2)]=0;
 $13=(($1+28)|0);
 $14=$13;
 HEAP32[(($14)>>2)]=0;
 $15$0=((_shorthash_for_name($name))|0);
 $15$1=tempRet0;
 $16=(($1+16)|0);
 $17=$16;
 $st$0$0=(($17)|0);
 HEAP32[(($st$0$0)>>2)]=$15$0;
 $st$1$1=(($17+4)|0);
 HEAP32[(($st$1$1)>>2)]=$15$1;
 $18=(($1+12)|0);
 $19=$18;
 HEAP32[(($19)>>2)]=$5;
 $20=(($1+42)|0);
 $21=$20;
 HEAP16[(($21)>>1)]=0;
 $22=(($1+44)|0);
 $23=$22;
 HEAP16[(($23)>>1)]=0;
 $24=(($1+36)|0);
 $25=$24;
 HEAP32[(($25)>>2)]=0;
 $26=(($1+32)|0);
 $27=$26;
 HEAP32[(($27)>>2)]=0;
 $28=(($symtab+24)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $30=(($1+48)|0);
 $31=$30;
 HEAP32[(($31)>>2)]=$29;
 $32=(($1+52)|0);
 $33=$32;
 HEAP32[(($33)>>2)]=0;
 $34=(($1+8)|0);
 $35=$34;
 HEAP32[(($35)>>2)]=1024;
 $36=(($1+46)|0);
 $37=$36;
 HEAP16[(($37)>>1)]=0;
 $38=(($symtab+40)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=(($39)&65535);
 $41=(($1+40)|0);
 $42=$41;
 HEAP16[(($42)>>1)]=$40;
 $43=((HEAP32[(($38)>>2)])|0);
 $44=((($43)+(1))|0);
 HEAP32[(($38)>>2)]=$44;
 $45=((HEAP32[(($28)>>2)])|0);
 $46=(($45+28)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=$1;
 HEAP32[(($48)>>2)]=$47;
 $49=((HEAP32[(($28)>>2)])|0);
 $50=(($49+28)|0);
 HEAP32[(($50)>>2)]=$2;
 return (($2)|0);
}


function _lily_new_enum($symtab,$name){
 $symtab=($symtab)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;

 $1=((_lily_new_class($symtab,$name))|0);
 $2=(($1+6)|0);
 $3=((HEAP16[(($2)>>1)])|0);
 $4=$3|4;
 HEAP16[(($2)>>1)]=$4;
 $5=(($1+8)|0);
 HEAP32[(($5)>>2)]=2048;
 return (($1)|0);
}


function _lily_find_class($symtab,$module,$name){
 $symtab=($symtab)|0;
 $module=($module)|0;
 $name=($name)|0;
 var $1$0=0,$1$1=0,$2=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$24=0;
 var $25=0,$26=0,$28=0,$29=0,$30=0,$result_0=0,label=0;

 $1$0=((_shorthash_for_name($name))|0);
 $1$1=tempRet0;
 $2=($module|0)==0;
 if (!($2)) {
  $28=(($module+28)|0);
  $29=((HEAP32[(($28)>>2)])|0);
  $30=((_find_class($29,$name,$1$0,$1$1))|0);
  $result_0=$30;

  return (($result_0)|0);
 }
 $4=(($name+1)|0);
 $5=((HEAP8[($4)])|0);
 $6=(($5<<24)>>24)==0;
 if ($6) {
  $21=((_lookup_generic($symtab,$name))|0);
  $22=($21|0)==0;
  if ($22) {
   $result_0=0;

   return (($result_0)|0);
  }
  $24=(($symtab+92)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $26=(($25+24)|0);
  HEAP32[(($26)>>2)]=$21;
  $result_0=$25;

  return (($result_0)|0);
 } else {
  $8=(($symtab+20)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(($9+28)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=((_find_class($11,$name,$1$0,$1$1))|0);
  $13=($12|0)==0;
  if (!($13)) {
   $result_0=$12;

   return (($result_0)|0);
  }
  $15=(($symtab+24)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=(($16+28)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=((_find_class($18,$name,$1$0,$1$1))|0);
  $result_0=$19;

  return (($result_0)|0);
 }
  return 0;
}


function _lily_find_member($cls,$name){
 $cls=($cls)|0;
 $name=($name)|0;
 var $cls_tr=0,$1=0,$2=0,$3=0,$5$0=0,$5$1=0,$sym_iter_03=0,$6=0,$sym_iter_04=0,$7=0,$ld$0$0=0,$8$0=0,$ld$1$1=0,$8$1=0,$9=0,$11=0,$12=0,$13=0,$14=0,$16=0;
 var $sym_iter_0=0,$17=0,$19=0,$20=0,$21=0,$22=0,$ret_1=0,label=0;

 $cls_tr=$cls;
 L1: while(1) {

  $1=(($cls_tr+32)|0);
  $2=((HEAP32[(($1)>>2)])|0);
  $3=($2|0)==0;
  L3: do {
   if (!($3)) {
    $5$0=((_shorthash_for_name($name))|0);
    $5$1=tempRet0;
    $sym_iter_03=((HEAP32[(($1)>>2)])|0);
    $6=($sym_iter_03|0)==0;
    if ($6) {
     break;
    } else {
     $sym_iter_04=$sym_iter_03;
    }
    while(1) {

     $7=(($sym_iter_04+24)|0);
     $ld$0$0=(($7)|0);
     $8$0=((HEAP32[(($ld$0$0)>>2)])|0);
     $ld$1$1=(($7+4)|0);
     $8$1=((HEAP32[(($ld$1$1)>>2)])|0);
     $9=(($8$0|0) == ($5$0|0)) & (($8$1|0) == ($5$1|0));
     if ($9) {
      $11=(($sym_iter_04+16)|0);
      $12=((HEAP32[(($11)>>2)])|0);
      $13=((_strcmp((($12)|0),(($name)|0)))|0);
      $14=($13|0)==0;
      if ($14) {
       break;
      }
     }
     $16=(($sym_iter_04)|0);
     $sym_iter_0=((HEAP32[(($16)>>2)])|0);
     $17=($sym_iter_0|0)==0;
     if ($17) {
      break L3;
     } else {
      $sym_iter_04=$sym_iter_0;
     }
    }
    $19=($sym_iter_04|0)==0;
    if (!($19)) {
     $ret_1=$sym_iter_04;
     label = 9;
     break L1;
    }
   }
  } while(0);
  $20=(($cls_tr+28)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=($21|0)==0;
  if ($22) {
   $ret_1=0;
   label = 9;
   break;
  } else {
   $cls_tr=$21;
  }
 }
 if ((label|0) == 9) {

  return (($ret_1)|0);
 }
  return 0;
}


function _lily_find_method($cls,$name){
 $cls=($cls)|0;
 $name=($name)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$phitmp=0,$sym_0=0,label=0;

 $1=((_lily_find_member($cls,$name))|0);
 $2=($1|0)==0;
 if ($2) {
  $sym_0=0;

  return (($sym_0)|0);
 }
 $4=(($1+4)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($5<<16)>>16)==1;
 $7=$1;
 $phitmp=($6?$7:0);
 $sym_0=$phitmp;

 return (($sym_0)|0);
}


function _lily_find_property($cls,$name){
 $cls=($cls)|0;
 $name=($name)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$phitmp=0,$sym_0=0,label=0;

 $1=((_lily_find_member($cls,$name))|0);
 $2=($1|0)==0;
 if ($2) {
  $sym_0=0;

  return (($sym_0)|0);
 }
 $4=(($1+4)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($5<<16)>>16)==4;
 $7=$1;
 $phitmp=($6?$7:0);
 $sym_0=$phitmp;

 return (($sym_0)|0);
}


function _lily_add_class_method($symtab,$cls,$method_var){
 $symtab=($symtab)|0;
 $cls=($cls)|0;
 $method_var=($method_var)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,label=0;

 $1=(($symtab+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+32)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==($method_var|0);
 if ($5) {
  $7=(($method_var)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  HEAP32[(($3)>>2)]=$8;
 }
 $10=(($cls+32)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=$11;
 $13=(($method_var)|0);
 HEAP32[(($13)>>2)]=$12;
 $14=$method_var;
 HEAP32[(($10)>>2)]=$14;
 return;
}


function _lily_add_class_property($symtab,$cls,$type,$name,$flags){
 $symtab=($symtab)|0;
 $cls=($cls)|0;
 $type=($type)|0;
 $name=($name)|0;
 $flags=($flags)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16$0=0,$16$1=0,$17=0,$18=0,$st$0$0=0;
 var $st$1$1=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,label=0;

 $1=((_lily_malloc(40))|0);
 $2=$1;
 $3=((_strlen((($name)|0)))|0);
 $4=((($3)+(1))|0);
 $5=((_lily_malloc($4))|0);
 $6=((_strcpy((($5)|0),(($name)|0)))|0);
 $7=(($1+4)|0);
 $8=$7;
 HEAP16[(($8)>>1)]=4;
 $9=(($flags)&65535);
 $10=(($1+6)|0);
 $11=$10;
 HEAP16[(($11)>>1)]=$9;
 $12=(($1+16)|0);
 $13=$12;
 HEAP32[(($13)>>2)]=$5;
 $14=(($1+12)|0);
 $15=$14;
 HEAP32[(($15)>>2)]=$type;
 $16$0=((_shorthash_for_name($5))|0);
 $16$1=tempRet0;
 $17=(($1+24)|0);
 $18=$17;
 $st$0$0=(($18)|0);
 HEAP32[(($st$0$0)>>2)]=$16$0;
 $st$1$1=(($18+4)|0);
 HEAP32[(($st$1$1)>>2)]=$16$1;
 $19=$1;
 HEAP32[(($19)>>2)]=0;
 $20=(($cls+44)|0);
 $21=((HEAP16[(($20)>>1)])|0);
 $22=($21&65535);
 $23=(($1+8)|0);
 $24=$23;
 HEAP32[(($24)>>2)]=$22;
 $25=(($1+32)|0);
 $26=$25;
 HEAP32[(($26)>>2)]=$cls;
 $27=((HEAP16[(($20)>>1)])|0);
 $28=((($27)+(1))&65535);
 HEAP16[(($20)>>1)]=$28;
 $29=(($cls+32)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=$30;
 HEAP32[(($19)>>2)]=$31;
 $32=$1;
 HEAP32[(($29)>>2)]=$32;
 return (($2)|0);
}


function _lily_new_variant($symtab,$enum_cls,$name,$variant_id){
 $symtab=($symtab)|0;
 $enum_cls=($enum_cls)|0;
 $name=($name)|0;
 $variant_id=($variant_id)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14$0=0,$14$1=0,$15=0,$16=0,$st$0$0=0,$st$1$1=0,$17=0;
 var $18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,label=0;

 $1=((_lily_malloc(32))|0);
 $2=$1;
 $3=(($1+4)|0);
 $4=$3;
 HEAP16[(($4)>>1)]=3;
 $5=(($1+6)|0);
 $6=$5;
 HEAP16[(($6)>>1)]=40;
 $7=(($variant_id)&65535);
 $8=(($1+8)|0);
 $9=$8;
 HEAP16[(($9)>>1)]=$7;
 $10=(($1+28)|0);
 $11=$10;
 HEAP32[(($11)>>2)]=$enum_cls;
 $12=(($1+24)|0);
 $13=$12;
 HEAP32[(($13)>>2)]=0;
 $14$0=((_shorthash_for_name($name))|0);
 $14$1=tempRet0;
 $15=(($1+16)|0);
 $16=$15;
 $st$0$0=(($16)|0);
 HEAP32[(($st$0$0)>>2)]=$14$0;
 $st$1$1=(($16+4)|0);
 HEAP32[(($st$1$1)>>2)]=$14$1;
 $17=((_strlen((($name)|0)))|0);
 $18=((($17)+(1))|0);
 $19=((_lily_malloc($18))|0);
 $20=(($1+12)|0);
 $21=$20;
 HEAP32[(($21)>>2)]=$19;
 $22=((_strcpy((($19)|0),(($name)|0)))|0);
 $23=(($symtab+24)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($24+28)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=$1;
 HEAP32[(($27)>>2)]=$26;
 $28=$1;
 $29=((HEAP32[(($23)>>2)])|0);
 $30=(($29+28)|0);
 HEAP32[(($30)>>2)]=$28;
 return (($2)|0);
}


function _lily_find_scoped_variant($enum_cls,$name){
 $enum_cls=($enum_cls)|0;
 $name=($name)|0;
 var $1$0=0,$1$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$i_02=0,$ret_01=0,$10=0,$11=0,$12=0,$ld$0$0=0,$13$0=0,$ld$1$1=0,$13$1=0,$14=0,$16=0;
 var $17=0,$18=0,$19=0,$_ret_0=0,$ret_1=0,$21=0,$22=0,$ret_0_lcssa=0,label=0;

 $1$0=((_shorthash_for_name($name))|0);
 $1$1=tempRet0;
 $2=(($enum_cls+44)|0);
 $3=((HEAP16[(($2)>>1)])|0);
 $4=(($3<<16)>>16)==0;
 if ($4) {
  $ret_0_lcssa=0;

  return (($ret_0_lcssa)|0);
 }
 $5=(($enum_cls+36)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((HEAP16[(($2)>>1)])|0);
 $8=($7&65535);
 $ret_01=0;$i_02=0;
 while(1) {


  $10=(($6+($i_02<<2))|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=(($11+16)|0);
  $ld$0$0=(($12)|0);
  $13$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($12+4)|0);
  $13$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $14=(($13$0|0) == ($1$0|0)) & (($13$1|0) == ($1$1|0));
  if ($14) {
   $16=(($11+12)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $18=((_strcmp((($17)|0),(($name)|0)))|0);
   $19=($18|0)==0;
   $_ret_0=($19?$11:$ret_01);
   $ret_1=$_ret_0;
  } else {
   $ret_1=$ret_01;
  }

  $21=((($i_02)+(1))|0);
  $22=($21|0)<($8|0);
  if ($22) {
   $ret_01=$ret_1;$i_02=$21;
  } else {
   $ret_0_lcssa=$ret_1;
   break;
  }
 }

 return (($ret_0_lcssa)|0);
}


function _make_variant_default($symtab,$variant){
 $symtab=($symtab)|0;
 $variant=($variant)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$_=0,label=0;

 $1=(($variant+28)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+52)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((_lily_new_instance_val())|0);
 $6=((HEAP32[(($1)>>2)])|0);
 $7=(($6+40)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=(($5+4)|0);
 HEAP16[(($9)>>1)]=$8;
 $10=(($variant+8)|0);
 $11=((HEAP16[(($10)>>1)])|0);
 $12=(($5+6)|0);
 HEAP16[(($12)>>1)]=$11;
 $13=(($5+8)|0);
 HEAP32[(($13)>>2)]=0;
 $14=((_make_new_literal_of_type($symtab,$4))|0);
 $15=(($14+24)|0);
 $16=$15;
 HEAP32[(($16)>>2)]=$5;
 $17=(($14+20)|0);
 HEAP32[(($17)>>2)]=2048;
 $18=((HEAP32[(($1)>>2)])|0);
 $19=(($18+42)|0);
 $20=((HEAP16[(($19)>>1)])|0);
 $21=(($20<<16)>>16)==0;
 $_=($21?2048:67584);
 HEAP32[(($17)>>2)]=$_;
 return (($14)|0);
}


function _lily_finish_enum($symtab,$enum_cls,$is_scoped,$enum_type){
 $symtab=($symtab)|0;
 $enum_cls=($enum_cls)|0;
 $is_scoped=($is_scoped)|0;
 $enum_type=($enum_type)|0;
 var $1=0,$2=0,$3=0,$class_iter_04=0,$4=0,$5=0,$6=0,$class_iter_06=0,$variant_count_05=0,$7=0,$8=0,$class_iter_0=0,$9=0,$10=0,$11=0,$12=0,$13=0,$extract_t=0,$14=0,$15=0;
 var $16=0,$class_iter_13_in=0,$i_02=0,$class_iter_13=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$25=0,$_c=0,$26=0,$27=0,$29=0,$30=0,$31=0,$extract_t11=0,$32=0,$variant_count_0_lcssa10_off0=0;
 var $33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,label=0;

 $1=(($symtab+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+28)|0);
 $class_iter_04=((HEAP32[(($3)>>2)])|0);
 $4=($class_iter_04|0)==($enum_cls|0);
 do {
  if ($4) {
   $5=((_lily_malloc(0))|0);
   $6=$5;
   $variant_count_0_lcssa10_off0=0;$32=$6;
  } else {
   $variant_count_05=0;$class_iter_06=$class_iter_04;
   while(1) {


    $7=((($variant_count_05)+(1))|0);
    $8=(($class_iter_06)|0);
    $class_iter_0=((HEAP32[(($8)>>2)])|0);
    $9=($class_iter_0|0)==($enum_cls|0);
    if ($9) {
     break;
    } else {
     $variant_count_05=$7;$class_iter_06=$class_iter_0;
    }
   }
   $10=$7<<2;
   $11=((_lily_malloc($10))|0);
   $12=$11;
   $13=($variant_count_05|0)>-1;
   $extract_t=(($7)&65535);
   if (!($13)) {
    $variant_count_0_lcssa10_off0=$extract_t;$32=$12;
    break;
   }
   $14=((HEAP32[(($1)>>2)])|0);
   $15=(($14+28)|0);
   $16=(($enum_cls+6)|0);
   $i_02=0;$class_iter_13_in=$15;
   while(1) {


    $class_iter_13=((HEAP32[(($class_iter_13_in)>>2)])|0);
    $18=$class_iter_13;
    $19=((($variant_count_05)-($i_02))|0);
    $20=(($12+($19<<2))|0);
    HEAP32[(($20)>>2)]=$18;
    $21=(($class_iter_13+24)|0);
    $22=((HEAP32[(($21)>>2)])|0);
    $23=($22|0)==0;
    if ($23) {
     $25=((_make_variant_default($symtab,$18))|0);
     $_c=$25;
     HEAP32[(($21)>>2)]=$_c;
     $26=((HEAP16[(($16)>>1)])|0);
     $27=$26|2;
     HEAP16[(($16)>>1)]=$27;
    }
    $29=((($i_02)+(1))|0);
    $30=(($class_iter_13)|0);
    $31=($29|0)<($7|0);
    $extract_t11=(($7)&65535);
    if ($31) {
     $i_02=$29;$class_iter_13_in=$30;
    } else {
     $variant_count_0_lcssa10_off0=$extract_t11;$32=$12;
     break;
    }
   }
  }
 } while(0);


 $33=(($enum_cls+8)|0);
 HEAP32[(($33)>>2)]=2048;
 $34=(($enum_cls+36)|0);
 HEAP32[(($34)>>2)]=$32;
 $35=(($enum_cls+44)|0);
 HEAP16[(($35)>>1)]=$variant_count_0_lcssa10_off0;
 $36=(($enum_cls+6)|0);
 $37=((HEAP16[(($36)>>1)])|0);
 $38=$37|4;
 HEAP16[(($36)>>1)]=$38;
 $39=($is_scoped|0)==0;
 if ($39) {
  return;
 }
 $41=$37|20;
 HEAP16[(($36)>>1)]=$41;
 $42=((HEAP32[(($1)>>2)])|0);
 $43=(($42+28)|0);
 HEAP32[(($43)>>2)]=$enum_cls;
 return;
}


function _lily_register_classes($symtab,$vm){
 $symtab=($symtab)|0;
 $vm=($vm)|0;
 var $1=0,$2=0,$3=0,$4=0,$package_iter_08=0,$5=0,$package_iter_09=0,$6=0,$module_iter_03=0,$7=0,$module_iter_04=0,$8=0,$class_iter_01=0,$9=0,$class_iter_02=0,$10=0,$11=0,$12=0,$13=0,$16=0;
 var $class_iter_0=0,$17=0,$18=0,$module_iter_0=0,$19=0,$20=0,$package_iter_0=0,$21=0,$22=0,$23=0,label=0;

 $1=(($symtab+40)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(1))|0);
 _lily_vm_ensure_class_table($vm,$3);
 $4=(($symtab+16)|0);
 $package_iter_08=((HEAP32[(($4)>>2)])|0);
 $5=($package_iter_08|0)==0;
 if ($5) {
  $22=(($symtab+48)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  _lily_vm_add_class_unchecked($vm,$23);
  return;
 } else {
  $package_iter_09=$package_iter_08;
 }
 while(1) {

  $6=(($package_iter_09+12)|0);
  $module_iter_03=((HEAP32[(($6)>>2)])|0);
  $7=($module_iter_03|0)==0;
  if (!($7)) {
   $module_iter_04=$module_iter_03;
   while(1) {

    $8=(($module_iter_04+28)|0);
    $class_iter_01=((HEAP32[(($8)>>2)])|0);
    $9=($class_iter_01|0)==0;
    if (!($9)) {
     $class_iter_02=$class_iter_01;
     while(1) {

      $10=(($class_iter_02+6)|0);
      $11=((HEAP16[(($10)>>1)])|0);
      $12=$11&8;
      $13=(($12<<16)>>16)==0;
      if ($13) {
       _lily_vm_add_class_unchecked($vm,$class_iter_02);
      }
      $16=(($class_iter_02)|0);
      $class_iter_0=((HEAP32[(($16)>>2)])|0);
      $17=($class_iter_0|0)==0;
      if ($17) {
       break;
      } else {
       $class_iter_02=$class_iter_0;
      }
     }
    }
    $18=(($module_iter_04)|0);
    $module_iter_0=((HEAP32[(($18)>>2)])|0);
    $19=($module_iter_0|0)==0;
    if ($19) {
     break;
    } else {
     $module_iter_04=$module_iter_0;
    }
   }
  }
  $20=(($package_iter_09)|0);
  $package_iter_0=((HEAP32[(($20)>>2)])|0);
  $21=($package_iter_0|0)==0;
  if ($21) {
   break;
  } else {
   $package_iter_09=$package_iter_0;
  }
 }
 $22=(($symtab+48)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 _lily_vm_add_class_unchecked($vm,$23);
 return;
}


function _lily_find_module($symtab,$module,$name){
 $symtab=($symtab)|0;
 $module=($module)|0;
 $name=($name)|0;
 var $1=0,$3=0,$4=0,$5=0,$7=0,$result_0=0,label=0;

 $1=($module|0)==0;
 if ($1) {
  $3=(($symtab+24)|0);
  $4=((HEAP32[(($3)>>2)])|0);
  $5=((_find_module($4,$name))|0);
  $result_0=$5;

  return (($result_0)|0);
 } else {
  $7=((_find_module($module,$name))|0);
  $result_0=$7;

  return (($result_0)|0);
 }
  return 0;
}


function _lily_find_package($module,$name){
 $module=($module)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$link_iter_01=0,$4=0,$6=0,$link_iter_0=0,$7=0,$link_iter_02=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$result_0=0,label=0;

 $1=(($module+36)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $link_iter_01=((HEAP32[(($3)>>2)])|0);
 $4=($link_iter_01|0)==0;
 if ($4) {
  $result_0=0;

  return (($result_0)|0);
 } else {
  $link_iter_02=$link_iter_01;
 }
 while(1) {

  $8=(($link_iter_02)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(($9+4)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=((_strcmp((($11)|0),(($name)|0)))|0);
  $13=($12|0)==0;
  if ($13) {
   $result_0=$9;
   label = 4;
   break;
  }
  $6=(($link_iter_02+4)|0);
  $link_iter_0=((HEAP32[(($6)>>2)])|0);
  $7=($link_iter_0|0)==0;
  if ($7) {
   $result_0=0;
   label = 4;
   break;
  } else {
   $link_iter_02=$link_iter_0;
  }
 }
 if ((label|0) == 4) {

  return (($result_0)|0);
 }
  return 0;
}


function _lily_update_symtab_generics($symtab,$count){
 $symtab=($symtab)|0;
 $count=($count)|0;
 var $1=0,$2=0,$3=0,$type_iter_03=0,$4=0,$type_iter_0_lcssa=0,$5=0,$type_iter_06=0,$_05=0,$i_04=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$or_cond=0,$15=0;
 var $16=0,$17=0,$18=0,$19=0,$21=0,$type_iter_0=0,$22=0,$type_iter_12=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,label=0;

 $1=(($symtab+92)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+52)|0);
 $type_iter_03=((HEAP32[(($3)>>2)])|0);
 $4=($count|0)==0;
 if ($4) {
  $type_iter_0_lcssa=$type_iter_03;
 } else {
  $i_04=1;$_05=$count;$type_iter_06=$type_iter_03;
  while(1) {



   $6=(($type_iter_06+6)|0);
   $7=((HEAP16[(($6)>>1)])|0);
   $8=$7&-3;
   HEAP16[(($6)>>1)]=$8;
   $9=((($_05)-(1))|0);
   $10=(($type_iter_06+16)|0);
   $11=((HEAP32[(($10)>>2)])|0);
   $12=($11|0)==0;
   $13=($9|0)!=0;
   $or_cond=$12&$13;
   if ($or_cond) {
    $15=((HEAP32[(($1)>>2)])|0);
    $16=((_make_new_type($15))|0);
    $17=(($16+6)|0);
    HEAP16[(($17)>>1)]=4;
    $18=(($i_04)&65535);
    $19=(($16+8)|0);
    HEAP16[(($19)>>1)]=$18;
    HEAP32[(($10)>>2)]=$16;
   }
   $21=((($i_04)+(1))|0);
   $type_iter_0=((HEAP32[(($10)>>2)])|0);
   $22=($9|0)==0;
   if ($22) {
    $type_iter_0_lcssa=$type_iter_0;
    break;
   } else {
    $i_04=$21;$_05=$9;$type_iter_06=$type_iter_0;
   }
  }
 }

 $5=($type_iter_0_lcssa|0)==0;
 if ($5) {
  return;
 } else {
  $type_iter_12=$type_iter_0_lcssa;
 }
 while(1) {

  $23=(($type_iter_12+6)|0);
  $24=((HEAP16[(($23)>>1)])|0);
  $25=$24|2;
  HEAP16[(($23)>>1)]=$25;
  $26=(($type_iter_12+16)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=($27|0)==0;
  if ($28) {
   break;
  } else {
   $type_iter_12=$27;
  }
 }
 return;
}


function _free_ties($tie_iter){
 $tie_iter=($tie_iter)|0;
 var $v=0,$1=0,$2=0,$3=0,$_01=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$ld$0$0=0,$14$0=0,$ld$1$1=0,$14$1=0,$st$2$0=0,$st$3$1=0,$16=0;
 var $17=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $v=((sp)|0);
 $1=($tie_iter|0)==0;
 if ($1) {
  STACKTOP=sp;return;
 }
 $2=(($v)|0);
 $3=(($v+8)|0);
 $_01=$tie_iter;
 while(1) {

  $5=(($_01)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  $7=(($_01+20)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=$8&7;
  $10=($9|0)==0;
  if ($10) {
   $12=$8|8192;
   HEAP32[(($2)>>2)]=$12;
   $13=(($_01+24)|0);
   $ld$0$0=(($13)|0);
   $14$0=((HEAP32[(($ld$0$0)>>2)])|0);
   $ld$1$1=(($13+4)|0);
   $14$1=((HEAP32[(($ld$1$1)>>2)])|0);
   $st$2$0=(($3)|0);
   HEAP32[(($st$2$0)>>2)]=$14$0;
   $st$3$1=(($3+4)|0);
   HEAP32[(($st$3$1)>>2)]=$14$1;
   _lily_deref($v);
  }
  $16=$_01;
  _lily_free($16);
  $17=($6|0)==0;
  if ($17) {
   break;
  } else {
   $_01=$6;
  }
 }
 STACKTOP=sp;return;
}


function _free_classes($class_iter){
 $class_iter=($class_iter)|0;
 var $1=0,$_04=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$_0_be=0,$12=0,$14=0,$15=0,$16=0,$19=0,$20=0,$21=0,$type_iter_01=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$i_02=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,label=0;

 $1=($class_iter|0)==0;
 if ($1) {
  return;
 } else {
  $_04=$class_iter;
 }
 while(1) {

  $2=(($_04+12)|0);
  $3=((HEAP32[(($2)>>2)])|0);
  _lily_free($3);
  $4=(($_04+6)|0);
  $5=((HEAP16[(($4)>>1)])|0);
  $6=$5&8;
  $7=(($6<<16)>>16)==0;
  if ($7) {
   $14=(($_04+32)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=($15|0)==0;
   if (!($16)) {
    _free_properties($_04);
   }
   $19=(($_04+52)|0);
   $20=((HEAP32[(($19)>>2)])|0);
   $21=($20|0)==0;
   if (!($21)) {
    $type_iter_01=$20;
    while(1) {

     $22=(($type_iter_01+16)|0);
     $23=((HEAP32[(($22)>>2)])|0);
     $24=(($type_iter_01+12)|0);
     $25=((HEAP32[(($24)>>2)])|0);
     $26=$25;
     _lily_free($26);
     $27=$type_iter_01;
     _lily_free($27);
     $28=($23|0)==0;
     if ($28) {
      break;
     } else {
      $type_iter_01=$23;
     }
    }
   }
   $29=((HEAP16[(($4)>>1)])|0);
   $30=$29&16;
   $31=(($30<<16)>>16)==0;
   do {
    if (!($31)) {
     $32=(($_04+44)|0);
     $33=((HEAP16[(($32)>>1)])|0);
     $34=(($33<<16)>>16)==0;
     if ($34) {
      break;
     }
     $35=(($_04+36)|0);
     $i_02=0;
     while(1) {

      $37=((HEAP32[(($35)>>2)])|0);
      $38=(($37+($i_02<<2))|0);
      $39=((HEAP32[(($38)>>2)])|0);
      $40=(($39+12)|0);
      $41=((HEAP32[(($40)>>2)])|0);
      _lily_free($41);
      $42=((HEAP32[(($35)>>2)])|0);
      $43=(($42+($i_02<<2))|0);
      $44=((HEAP32[(($43)>>2)])|0);
      $45=$44;
      _lily_free($45);
      $46=((($i_02)+(1))|0);
      $47=((HEAP16[(($32)>>1)])|0);
      $48=($47&65535);
      $49=($46|0)<($48|0);
      if ($49) {
       $i_02=$46;
      } else {
       break;
      }
     }
    }
   } while(0);
   $50=(($_04+36)|0);
   $51=((HEAP32[(($50)>>2)])|0);
   $52=$51;
   _lily_free($52);
   $53=(($_04)|0);
   $54=((HEAP32[(($53)>>2)])|0);
   $55=$_04;
   _lily_free($55);
   $_0_be=$54;
  } else {
   $9=(($_04)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=$_04;
   _lily_free($11);
   $_0_be=$10;
  }

  $12=($_0_be|0)==0;
  if ($12) {
   break;
  } else {
   $_04=$_0_be;
  }
 }
 return;
}


function _make_new_literal($symtab,$cls){
 $symtab=($symtab)|0;
 $cls=($cls)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=(($cls+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_make_new_literal_of_type($symtab,$2))|0);
 return (($3)|0);
}


function _shorthash_for_name($name){
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$ret_05$0=0,$ret_05$1=0,$shift_04=0,$i_03=0,$ch_02=0,$4$0=0,$4$1=0,$5$0=0,$5$1=0,$7$0=0,$7$1=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $or_cond=0,$ret_0_lcssa$0=0,$ret_0_lcssa$1=0,$6$0=0,$6$1=0,label=0;

 $1=((HEAP8[($name)])|0);
 $2=(($1<<24)>>24)==0;
 if ($2) {
  $ret_0_lcssa$1=0;$ret_0_lcssa$0=0;


  return (((tempRet0=$ret_0_lcssa$1,$ret_0_lcssa$0))|0);
 } else {
  $ch_02=$name;$i_03=0;$shift_04=0;$ret_05$1=0;$ret_05$0=0;$3=$1;
 }
 while(1) {






  $4$0=(($3<<24)>>24);
  $4$1=(((((($3<<24)>>24)<0))|0)?-1:0);
  $5$0=$shift_04;
  $5$1=0;
  $6$0=((_bitshift64Shl((($4$0)|0),(($4$1)|0),(($5$0)|0)))|0);$6$1=tempRet0;
  $7$0=$6$0|$ret_05$0;
  $7$1=$6$1|$ret_05$1;
  $8=(($ch_02+1)|0);
  $9=((($i_03)+(1))|0);
  $10=((($shift_04)+(8))|0);
  $11=((HEAP8[($8)])|0);
  $12=(($11<<24)>>24)!=0;
  $13=($9|0)!=8;
  $or_cond=$12&$13;
  if ($or_cond) {
   $ch_02=$8;$i_03=$9;$shift_04=$10;$ret_05$1=$7$1;$ret_05$0=$7$0;$3=$11;
  } else {
   $ret_0_lcssa$1=$7$1;$ret_0_lcssa$0=$7$0;
   break;
  }
 }


 return (((tempRet0=$ret_0_lcssa$1,$ret_0_lcssa$0))|0);
}


function _find_var($var_iter,$name,$shorthash$0,$shorthash$1){
 $var_iter=($var_iter)|0;
 $name=($name)|0;
 $shorthash$0=($shorthash$0)|0;
 $shorthash$1=($shorthash$1)|0;
 var $1=0,$_01=0,$2=0,$ld$0$0=0,$3$0=0,$ld$1$1=0,$3$1=0,$4=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$_0_lcssa=0;
 var label=0;

 $1=($var_iter|0)==0;
 if ($1) {
  $_0_lcssa=0;

  return (($_0_lcssa)|0);
 } else {
  $_01=$var_iter;
 }
 L3: while(1) {

  $2=(($_01+24)|0);
  $ld$0$0=(($2)|0);
  $3$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($2+4)|0);
  $3$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $4=(($3$0|0) == ($shorthash$0|0)) & (($3$1|0) == ($shorthash$1|0));
  do {
   if ($4) {
    $6=(($_01+6)|0);
    $7=((HEAP16[(($6)>>1)])|0);
    $8=$7&32;
    $9=(($8<<16)>>16)==0;
    if (!($9)) {
     break;
    }
    $11=(($_01+16)|0);
    $12=((HEAP32[(($11)>>2)])|0);
    $13=((_strcmp((($12)|0),(($name)|0)))|0);
    $14=($13|0)==0;
    if ($14) {
     $_0_lcssa=$_01;
     label = 6;
     break L3;
    }
   }
  } while(0);
  $16=(($_01)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=($17|0)==0;
  if ($18) {
   $_0_lcssa=0;
   label = 6;
   break;
  } else {
   $_01=$17;
  }
 }
 if ((label|0) == 6) {

  return (($_0_lcssa)|0);
 }
  return 0;
}


function _tie_function($symtab,$func_var,$func_val,$module){
 $symtab=($symtab)|0;
 $func_var=($func_var)|0;
 $func_val=($func_val)|0;
 $module=($module)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,label=0;

 $1=((_lily_malloc(32))|0);
 $2=$1;
 $3=(($func_var+32)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($func_val+4)|0);
 HEAP32[(($5)>>2)]=$4;
 $6=(($func_val+20)|0);
 HEAP32[(($6)>>2)]=$module;
 $7=(($func_var+12)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($1+12)|0);
 $10=$9;
 HEAP32[(($10)>>2)]=$8;
 $11=(($1+24)|0);
 $12=$11;
 HEAP32[(($12)>>2)]=$func_val;
 $13=(($func_var+8)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($1+8)|0);
 $16=$15;
 HEAP32[(($16)>>2)]=$14;
 $17=(($1+4)|0);
 $18=$17;
 HEAP16[(($18)>>1)]=0;
 $19=(($1+6)|0);
 $20=$19;
 HEAP16[(($20)>>1)]=32;
 $21=(($1+20)|0);
 $22=$21;
 HEAP32[(($22)>>2)]=32;
 $23=(($symtab+8)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=$1;
 HEAP32[(($25)>>2)]=$24;
 HEAP32[(($23)>>2)]=$2;
 return;
}


function _find_class($class_iter,$name,$shorthash$0,$shorthash$1){
 $class_iter=($class_iter)|0;
 $name=($name)|0;
 $shorthash$0=($shorthash$0)|0;
 $shorthash$1=($shorthash$1)|0;
 var $1=0,$_01=0,$2=0,$ld$0$0=0,$3$0=0,$ld$1$1=0,$3$1=0,$4=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$_0_lcssa=0,label=0;

 $1=($class_iter|0)==0;
 if ($1) {
  $_0_lcssa=0;

  return (($_0_lcssa)|0);
 } else {
  $_01=$class_iter;
 }
 while(1) {

  $2=(($_01+16)|0);
  $ld$0$0=(($2)|0);
  $3$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($2+4)|0);
  $3$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $4=(($3$0|0) == ($shorthash$0|0)) & (($3$1|0) == ($shorthash$1|0));
  if ($4) {
   $6=(($_01+12)|0);
   $7=((HEAP32[(($6)>>2)])|0);
   $8=((_strcmp((($7)|0),(($name)|0)))|0);
   $9=($8|0)==0;
   if ($9) {
    $_0_lcssa=$_01;
    label = 5;
    break;
   }
  }
  $11=(($_01)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=($12|0)==0;
  if ($13) {
   $_0_lcssa=0;
   label = 5;
   break;
  } else {
   $_01=$12;
  }
 }
 if ((label|0) == 5) {

  return (($_0_lcssa)|0);
 }
  return 0;
}


function _lookup_generic($symtab,$name){
 $symtab=($symtab)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$type_iter_02=0,$7=0,$9=0,$type_iter_0=0,$10=0,$type_iter_03=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0;
 var $type_iter_0_=0,label=0;

 $1=((HEAP8[($name)])|0);
 $2=(($1<<24)>>24);
 $3=((($2)-(65))|0);
 $4=(($symtab+92)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+52)|0);
 $type_iter_02=((HEAP32[(($6)>>2)])|0);
 $7=($type_iter_02|0)==0;
 if ($7) {
  return ((0)|0);
 } else {
  $type_iter_03=$type_iter_02;
 }
 while(1) {

  $11=(($type_iter_03+8)|0);
  $12=((HEAP16[(($11)>>1)])|0);
  $13=($12&65535);
  $14=($13|0)==($3|0);
  if ($14) {
   label = 4;
   break;
  }
  $9=(($type_iter_03+16)|0);
  $type_iter_0=((HEAP32[(($9)>>2)])|0);
  $10=($type_iter_0|0)==0;
  if ($10) {
   label = 5;
   break;
  } else {
   $type_iter_03=$type_iter_0;
  }
 }
 if ((label|0) == 4) {
  $16=(($type_iter_03+6)|0);
  $17=((HEAP16[(($16)>>1)])|0);
  $18=$17&2;
  $19=(($18<<16)>>16)==0;
  $type_iter_0_=($19?$type_iter_03:0);
  return (($type_iter_0_)|0);
 }
 else if ((label|0) == 5) {
  return ((0)|0);
 }
  return 0;
}


function _make_new_literal_of_type($symtab,$type){
 $symtab=($symtab)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,label=0;

 $1=((_lily_malloc(32))|0);
 $2=$1;
 $3=(($1+12)|0);
 $4=$3;
 HEAP32[(($4)>>2)]=$type;
 $5=(($1+4)|0);
 $6=$5;
 HEAP16[(($6)>>1)]=0;
 $7=(($1+6)|0);
 $8=$7;
 HEAP16[(($8)>>1)]=0;
 $9=(($symtab+44)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($1+8)|0);
 $12=$11;
 HEAP32[(($12)>>2)]=$10;
 $13=(($type)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+8)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($1+20)|0);
 $18=$17;
 HEAP32[(($18)>>2)]=$16;
 $19=((HEAP32[(($9)>>2)])|0);
 $20=((($19)+(1))|0);
 HEAP32[(($9)>>2)]=$20;
 $21=(($symtab+4)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=$1;
 HEAP32[(($23)>>2)]=$22;
 HEAP32[(($21)>>2)]=$2;
 return (($2)|0);
}


function _find_module($module,$name){
 $module=($module)|0;
 $name=($name)|0;
 var $1=0,$link_iter_01=0,$2=0,$link_iter_02=0,$3=0,$4=0,$5=0,$cond=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$18=0,$link_iter_0=0,$19=0,$result_0=0;
 var label=0;

 $1=(($module+24)|0);
 $link_iter_01=((HEAP32[(($1)>>2)])|0);
 $2=($link_iter_01|0)==0;
 if ($2) {
  $result_0=0;

  return (($result_0)|0);
 } else {
  $link_iter_02=$link_iter_01;
 }
 while(1) {

  $3=(($link_iter_02+4)|0);
  $4=((HEAP32[(($3)>>2)])|0);
  $5=(($link_iter_02)|0);
  $cond=($4|0)==0;
  if ($cond) {
   $10=((HEAP32[(($5)>>2)])|0);
   $11=(($10+12)|0);
   $12=((HEAP32[(($11)>>2)])|0);
   $13=((_strcmp((($12)|0),(($name)|0)))|0);
   $14=($13|0)==0;
   if ($14) {
    break;
   }
  } else {
   $7=((_strcmp((($4)|0),(($name)|0)))|0);
   $8=($7|0)==0;
   if ($8) {
    break;
   }
  }
  $18=(($link_iter_02+8)|0);
  $link_iter_0=((HEAP32[(($18)>>2)])|0);
  $19=($link_iter_0|0)==0;
  if ($19) {
   $result_0=0;
   label = 7;
   break;
  } else {
   $link_iter_02=$link_iter_0;
  }
 }
 if ((label|0) == 7) {

  return (($result_0)|0);
 }
 $16=((HEAP32[(($5)>>2)])|0);
 $result_0=$16;

 return (($result_0)|0);
}


function _make_new_type($cls){
 $cls=($cls)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;

 $1=((_lily_malloc(20))|0);
 $2=$1;
 $3=(($1+4)|0);
 $4=$3;
 HEAP16[(($4)>>1)]=6;
 $5=$1;
 HEAP32[(($5)>>2)]=$cls;
 $6=(($1+6)|0);
 _memset((((($6)|0))|0), ((((0)|0))|0), ((((14)|0))|0))|0;
 return (($2)|0);
}


function _free_properties($cls){
 $cls=($cls)|0;
 var $1=0,$2=0,$3=0,$prop_iter_01=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=(($cls+32)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  return;
 } else {
  $prop_iter_01=$2;
 }
 while(1) {

  $4=(($prop_iter_01)|0);
  $5=((HEAP32[(($4)>>2)])|0);
  $6=(($prop_iter_01+16)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  _lily_free($7);
  $8=$prop_iter_01;
  _lily_free($8);
  $9=($5|0)==0;
  if ($9) {
   break;
  } else {
   $prop_iter_01=$5;
  }
 }
 return;
}


function _siphash24($src,$src_sz,$key){
 $src=($src)|0;
 $src_sz=($src_sz)|0;
 $key=($key)|0;
 var $1=0,$ld$0$0=0,$2$0=0,$ld$1$1=0,$2$1=0,$3=0,$4=0,$ld$2$0=0,$5$0=0,$ld$3$1=0,$5$1=0,$6$0=0,$6$1=0,$7$0=0,$7$1=0,$8=0,$$etemp$4$0=0,$$etemp$4$1=0,$9$0=0,$9$1=0;
 var $$etemp$5$0=0,$$etemp$5$1=0,$10$0=0,$10$1=0,$$etemp$6$0=0,$$etemp$6$1=0,$11$0=0,$11$1=0,$$etemp$7$0=0,$$etemp$7$1=0,$12$0=0,$12$1=0,$13=0,$14=0,$15=0,$16=0,$scevgep=0,$_06=0,$in_05=0,$v3_04$0=0;
 var $v3_04$1=0,$v2_03$0=0,$v2_03$1=0,$v1_02$0=0,$v1_02$1=0,$v0_01$0=0,$v0_01$1=0,$ld$8$0=0,$18$0=0,$ld$9$1=0,$18$1=0,$19=0,$20=0,$21$0=0,$21$1=0,$24$0=0,$24$1=0,$25$0=0,$25$1=0,$26$0=0;
 var $26$1=0,$27$0=0,$27$1=0,$28$0=0,$28$1=0,$29$0=0,$29$1=0,$30$0=0,$30$1=0,$31$0=0,$31$1=0,$32$0=0,$32$1=0,$33$0=0,$33$1=0,$34$0=0,$34$1=0,$37$0=0,$37$1=0,$38$0=0;
 var $38$1=0,$39$0=0,$39$1=0,$40$0=0,$40$1=0,$41$0=0,$41$1=0,$42$0=0,$42$1=0,$43$0=0,$43$1=0,$44$0=0,$44$1=0,$45$0=0,$45$1=0,$46$0=0,$46$1=0,$47$0=0,$47$1=0,$50$0=0;
 var $50$1=0,$51$0=0,$51$1=0,$52$0=0,$52$1=0,$53$0=0,$53$1=0,$54$0=0,$54$1=0,$55$0=0,$55$1=0,$56$0=0,$56$1=0,$57$0=0,$57$1=0,$58$0=0,$58$1=0,$59$0=0,$59$1=0,$60$0=0;
 var $60$1=0,$63$0=0,$63$1=0,$64$0=0,$64$1=0,$65$0=0,$65$1=0,$66$0=0,$66$1=0,$67$0=0,$67$1=0,$68$0=0,$68$1=0,$69$0=0,$69$1=0,$70$0=0,$70$1=0,$71$0=0,$71$1=0,$72$0=0;
 var $72$1=0,$73$0=0,$73$1=0,$74$0=0,$74$1=0,$75=0,$76=0,$scevgep17=0,$_0_lcssa=0,$in_0_lcssa=0,$v3_0_lcssa$0=0,$v3_0_lcssa$1=0,$v2_0_lcssa$0=0,$v2_0_lcssa$1=0,$v1_0_lcssa$0=0,$v1_0_lcssa$1=0,$v0_0_lcssa$0=0,$v0_0_lcssa$1=0,$78=0,$80=0;
 var $81=0,$t_sroa_8_0=0,$83=0,$84=0,$t_sroa_8_1=0,$t_sroa_7_0=0,$86=0,$87=0,$t_sroa_8_2=0,$t_sroa_7_1=0,$t_sroa_6_0=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$98=0;
 var $99=0,$t_sroa_0_sroa_5_0=0,$101=0,$102=0,$t_sroa_0_sroa_5_1=0,$t_sroa_0_sroa_4_0=0,$104=0,$t_sroa_0_sroa_5_2=0,$t_sroa_0_sroa_4_1=0,$t_sroa_0_sroa_0_0=0,$t_sroa_0_sroa_6_sroa_0_0=0,$t_sroa_8_3=0,$t_sroa_7_2=0,$t_sroa_6_1=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0;
 var $112=0,$113=0,$114$0=0,$114$1=0,$115$0=0,$115$1=0,$116$0=0,$116$1=0,$117$0=0,$117$1=0,$118$0=0,$118$1=0,$119$0=0,$119$1=0,$120$0=0,$120$1=0,$121$0=0,$121$1=0,$122$0=0,$122$1=0;
 var $123$0=0,$123$1=0,$124$0=0,$124$1=0,$125$0=0,$125$1=0,$128$0=0,$128$1=0,$129$0=0,$129$1=0,$130$0=0,$130$1=0,$131$0=0,$131$1=0,$132$0=0,$132$1=0,$133$0=0,$133$1=0,$134$0=0,$134$1=0;
 var $135$0=0,$135$1=0,$136$0=0,$136$1=0,$137$0=0,$137$1=0,$138$0=0,$138$1=0,$141$0=0,$141$1=0,$142$0=0,$142$1=0,$143$0=0,$143$1=0,$144$0=0,$144$1=0,$145$0=0,$145$1=0,$146$0=0,$146$1=0;
 var $147$0=0,$147$1=0,$148$0=0,$148$1=0,$149$0=0,$149$1=0,$150$0=0,$150$1=0,$151$0=0,$151$1=0,$154$0=0,$154$1=0,$155$0=0,$155$1=0,$156$0=0,$156$1=0,$157$0=0,$157$1=0,$158$0=0,$158$1=0;
 var $159$0=0,$159$1=0,$160$0=0,$160$1=0,$161$0=0,$161$1=0,$162$0=0,$162$1=0,$163$0=0,$163$1=0,$164$0=0,$164$1=0,$167$0=0,$167$1=0,$168$0=0,$168$1=0,$169$0=0,$169$1=0,$170$0=0,$170$1=0;
 var $171$0=0,$171$1=0,$172$0=0,$172$1=0,$173$0=0,$173$1=0,$174$0=0,$174$1=0,$175$0=0,$175$1=0,$176$0=0,$176$1=0,$177$0=0,$177$1=0,$178$0=0,$178$1=0,$$etemp$10$0=0,$$etemp$10$1=0,$179$0=0,$179$1=0;
 var $182$0=0,$182$1=0,$183$0=0,$183$1=0,$184$0=0,$184$1=0,$185$0=0,$185$1=0,$186$0=0,$186$1=0,$187$0=0,$187$1=0,$188$0=0,$188$1=0,$189$0=0,$189$1=0,$190$0=0,$190$1=0,$191$0=0,$191$1=0;
 var $192$0=0,$192$1=0,$195$0=0,$195$1=0,$196$0=0,$196$1=0,$197$0=0,$197$1=0,$198$0=0,$198$1=0,$199$0=0,$199$1=0,$200$0=0,$200$1=0,$201$0=0,$201$1=0,$202$0=0,$202$1=0,$203$0=0,$203$1=0;
 var $204$0=0,$204$1=0,$205$0=0,$205$1=0,$208$0=0,$208$1=0,$209$0=0,$209$1=0,$210$0=0,$210$1=0,$211$0=0,$211$1=0,$212$0=0,$212$1=0,$213$0=0,$213$1=0,$214$0=0,$214$1=0,$215$0=0,$215$1=0;
 var $216$0=0,$216$1=0,$217$0=0,$217$1=0,$218$0=0,$218$1=0,$221$0=0,$221$1=0,$222$0=0,$222$1=0,$223$0=0,$223$1=0,$224$0=0,$224$1=0,$225$0=0,$225$1=0,$226$0=0,$226$1=0,$227$0=0,$227$1=0;
 var $228$0=0,$228$1=0,$229$0=0,$229$1=0,$230$0=0,$230$1=0,$231$0=0,$231$1=0,$234$0=0,$234$1=0,$235$0=0,$235$1=0,$236$0=0,$236$1=0,$237$0=0,$237$1=0,$238$0=0,$238$1=0,$239$0=0,$239$1=0;
 var $240$0=0,$240$1=0,$241$0=0,$241$1=0,$242$0=0,$242$1=0,$243$0=0,$243$1=0,$244$0=0,$244$1=0,$247$0=0,$247$1=0,$248$0=0,$248$1=0,$249$0=0,$249$1=0,$250$0=0,$250$1=0,$251$0=0,$251$1=0;
 var $252$0=0,$252$1=0,$253$0=0,$253$1=0,$254$0=0,$254$1=0,$255$0=0,$255$1=0,$256$0=0,$256$1=0,$257$0=0,$257$1=0,$260$0=0,$260$1=0,$261$0=0,$261$1=0,$262$0=0,$262$1=0,$263$0=0,$263$1=0;
 var $264$0=0,$264$1=0,$265$0=0,$265$1=0,$266$0=0,$266$1=0,$267$0=0,$267$1=0,$269$0=0,$269$1=0,$270$0=0,$270$1=0,$271$0=0,$271$1=0,$272$0=0,$272$1=0,$273$0=0,$273$1=0,$274$0=0,$274$1=0;
 var $275$0=0,$275$1=0,$276$0=0,$276$1=0,$277$0=0,$277$1=0,$278$0=0,$278$1=0,$279$0=0,$279$1=0,$280$0=0,$280$1=0,$22$0=0,$22$1=0,$23$0=0,$23$1=0,$35$0=0,$35$1=0,$36$0=0,$36$1=0;
 var $48$0=0,$48$1=0,$49$0=0,$49$1=0,$61$0=0,$61$1=0,$62$0=0,$62$1=0,$126$0=0,$126$1=0,$127$0=0,$127$1=0,$139$0=0,$139$1=0,$140$0=0,$140$1=0,$152$0=0,$152$1=0,$153$0=0,$153$1=0;
 var $165$0=0,$165$1=0,$166$0=0,$166$1=0,$180$0=0,$180$1=0,$181$0=0,$181$1=0,$193$0=0,$193$1=0,$194$0=0,$194$1=0,$206$0=0,$206$1=0,$207$0=0,$207$1=0,$219$0=0,$219$1=0,$220$0=0,$220$1=0;
 var $232$0=0,$232$1=0,$233$0=0,$233$1=0,$245$0=0,$245$1=0,$246$0=0,$246$1=0,$258$0=0,$258$1=0,$259$0=0,$259$1=0,$268$0=0,$268$1=0,label=0;

 $1=$key;
 $ld$0$0=(($1)|0);
 $2$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($1+4)|0);
 $2$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $3=(($key+8)|0);
 $4=$3;
 $ld$2$0=(($4)|0);
 $5$0=((HEAP32[(($ld$2$0)>>2)])|0);
 $ld$3$1=(($4+4)|0);
 $5$1=((HEAP32[(($ld$3$1)>>2)])|0);
 $6$0=$src_sz;
 $6$1=0;
 $7$0=(0<<24)|(0>>>8);
 $7$1=($6$0<<24)|(0>>>8);
 $8=$src;
 $$etemp$4$0=1886610805;
 $$etemp$4$1=1936682341;
 $9$0=$2$0^$$etemp$4$0;
 $9$1=$2$1^$$etemp$4$1;
 $$etemp$5$0=1852075885;
 $$etemp$5$1=1685025377;
 $10$0=$5$0^$$etemp$5$0;
 $10$1=$5$1^$$etemp$5$1;
 $$etemp$6$0=1852142177;
 $$etemp$6$1=1819895653;
 $11$0=$2$0^$$etemp$6$0;
 $11$1=$2$1^$$etemp$6$1;
 $$etemp$7$0=2037671283;
 $$etemp$7$1=1952801890;
 $12$0=$5$0^$$etemp$7$0;
 $12$1=$5$1^$$etemp$7$1;
 $13=($src_sz>>>0)>((7)>>>0);
 if ($13) {
  $14=((($src_sz)-(8))|0);
  $15=$14&-8;
  $16=((($15)+(8))|0);
  $scevgep=(($src+$16)|0);
  $v0_01$1=$9$1;$v0_01$0=$9$0;$v1_02$1=$10$1;$v1_02$0=$10$0;$v2_03$1=$11$1;$v2_03$0=$11$0;$v3_04$1=$12$1;$v3_04$0=$12$0;$in_05=$8;$_06=$src_sz;
  while(1) {










   $ld$8$0=(($in_05)|0);
   $18$0=((HEAP32[(($ld$8$0)>>2)])|0);
   $ld$9$1=(($in_05+4)|0);
   $18$1=((HEAP32[(($ld$9$1)>>2)])|0);
   $19=(($in_05+8)|0);
   $20=((($_06)-(8))|0);
   $21$0=$18$0^$v3_04$0;
   $21$1=$18$1^$v3_04$1;
   $22$0=((_i64Add($v1_02$0,$v1_02$1,$v0_01$0,$v0_01$1))|0);$22$1=tempRet0;
   $23$0=((_i64Add($21$0,$21$1,$v2_03$0,$v2_03$1))|0);$23$1=tempRet0;
   $24$0=($v1_02$0<<13)|(0>>>19);
   $24$1=($v1_02$1<<13)|($v1_02$0>>>19);
   $25$0=($v1_02$1>>>19)|(0<<13);
   $25$1=(0>>>19)|(0<<13);
   $26$0=$24$0|$25$0;
   $26$1=$24$1|$25$1;
   $27$0=$26$0^$22$0;
   $27$1=$26$1^$22$1;
   $28$0=($21$0<<16)|(0>>>16);
   $28$1=($21$1<<16)|($21$0>>>16);
   $29$0=($21$1>>>16)|(0<<16);
   $29$1=(0>>>16)|(0<<16);
   $30$0=$28$0|$29$0;
   $30$1=$28$1|$29$1;
   $31$0=$30$0^$23$0;
   $31$1=$30$1^$23$1;
   $32$0=0;
   $32$1=$22$0;
   $33$0=$22$1;
   $33$1=0;
   $34$0=$32$0|$33$0;
   $34$1=$32$1|$33$1;
   $35$0=((_i64Add($23$0,$23$1,$27$0,$27$1))|0);$35$1=tempRet0;
   $36$0=((_i64Add($31$0,$31$1,$34$0,$34$1))|0);$36$1=tempRet0;
   $37$0=($27$0<<17)|(0>>>15);
   $37$1=($27$1<<17)|($27$0>>>15);
   $38$0=($27$1>>>15)|(0<<17);
   $38$1=(0>>>15)|(0<<17);
   $39$0=$37$0|$38$0;
   $39$1=$37$1|$38$1;
   $40$0=$35$0^$39$0;
   $40$1=$35$1^$39$1;
   $41$0=($31$0<<21)|(0>>>11);
   $41$1=($31$1<<21)|($31$0>>>11);
   $42$0=($31$1>>>11)|(0<<21);
   $42$1=(0>>>11)|(0<<21);
   $43$0=$41$0|$42$0;
   $43$1=$41$1|$42$1;
   $44$0=$43$0^$36$0;
   $44$1=$43$1^$36$1;
   $45$0=0;
   $45$1=$35$0;
   $46$0=$35$1;
   $46$1=0;
   $47$0=$45$0|$46$0;
   $47$1=$45$1|$46$1;
   $48$0=((_i64Add($36$0,$36$1,$40$0,$40$1))|0);$48$1=tempRet0;
   $49$0=((_i64Add($44$0,$44$1,$47$0,$47$1))|0);$49$1=tempRet0;
   $50$0=($40$0<<13)|(0>>>19);
   $50$1=($40$1<<13)|($40$0>>>19);
   $51$0=($40$1>>>19)|(0<<13);
   $51$1=(0>>>19)|(0<<13);
   $52$0=$50$0|$51$0;
   $52$1=$50$1|$51$1;
   $53$0=$52$0^$48$0;
   $53$1=$52$1^$48$1;
   $54$0=($44$0<<16)|(0>>>16);
   $54$1=($44$1<<16)|($44$0>>>16);
   $55$0=($44$1>>>16)|(0<<16);
   $55$1=(0>>>16)|(0<<16);
   $56$0=$54$0|$55$0;
   $56$1=$54$1|$55$1;
   $57$0=$56$0^$49$0;
   $57$1=$56$1^$49$1;
   $58$0=0;
   $58$1=$48$0;
   $59$0=$48$1;
   $59$1=0;
   $60$0=$58$0|$59$0;
   $60$1=$58$1|$59$1;
   $61$0=((_i64Add($49$0,$49$1,$53$0,$53$1))|0);$61$1=tempRet0;
   $62$0=((_i64Add($57$0,$57$1,$60$0,$60$1))|0);$62$1=tempRet0;
   $63$0=($53$0<<17)|(0>>>15);
   $63$1=($53$1<<17)|($53$0>>>15);
   $64$0=($53$1>>>15)|(0<<17);
   $64$1=(0>>>15)|(0<<17);
   $65$0=$63$0|$64$0;
   $65$1=$63$1|$64$1;
   $66$0=$65$0^$61$0;
   $66$1=$65$1^$61$1;
   $67$0=($57$0<<21)|(0>>>11);
   $67$1=($57$1<<21)|($57$0>>>11);
   $68$0=($57$1>>>11)|(0<<21);
   $68$1=(0>>>11)|(0<<21);
   $69$0=$67$0|$68$0;
   $69$1=$67$1|$68$1;
   $70$0=$69$0^$62$0;
   $70$1=$69$1^$62$1;
   $71$0=0;
   $71$1=$61$0;
   $72$0=$61$1;
   $72$1=0;
   $73$0=$71$0|$72$0;
   $73$1=$71$1|$72$1;
   $74$0=$62$0^$18$0;
   $74$1=$62$1^$18$1;
   $75=($20>>>0)>((7)>>>0);
   if ($75) {
    $v0_01$1=$74$1;$v0_01$0=$74$0;$v1_02$1=$66$1;$v1_02$0=$66$0;$v2_03$1=$73$1;$v2_03$0=$73$0;$v3_04$1=$70$1;$v3_04$0=$70$0;$in_05=$19;$_06=$20;
   } else {
    break;
   }
  }
  $76=((($14)-($15))|0);
  $scevgep17=$scevgep;
  $v0_0_lcssa$1=$74$1;$v0_0_lcssa$0=$74$0;$v1_0_lcssa$1=$66$1;$v1_0_lcssa$0=$66$0;$v2_0_lcssa$1=$73$1;$v2_0_lcssa$0=$73$0;$v3_0_lcssa$1=$70$1;$v3_0_lcssa$0=$70$0;$in_0_lcssa=$scevgep17;$_0_lcssa=$76;
 } else {
  $v0_0_lcssa$1=$9$1;$v0_0_lcssa$0=$9$0;$v1_0_lcssa$1=$10$1;$v1_0_lcssa$0=$10$0;$v2_0_lcssa$1=$11$1;$v2_0_lcssa$0=$11$0;$v3_0_lcssa$1=$12$1;$v3_0_lcssa$0=$12$0;$in_0_lcssa=$8;$_0_lcssa=$src_sz;
 }










 $78=$in_0_lcssa;
 switch (($_0_lcssa|0)) {
 case 4: {
  $t_sroa_6_0=0;$t_sroa_7_1=0;$t_sroa_8_2=0;
  label = 9;
  break;
 }
 case 3: {
  $98=(($78+2)|0);
  $99=((HEAP8[($98)])|0);
  $t_sroa_0_sroa_5_0=$99;
  label = 11;
  break;
 }
 case 6: {
  $t_sroa_8_0=0;
  label = 7;
  break;
 }
 case 2: {
  $t_sroa_0_sroa_5_0=0;
  label = 11;
  break;
 }
 case 1: {
  $t_sroa_0_sroa_4_0=0;$t_sroa_0_sroa_5_1=0;
  label = 12;
  break;
 }
 case 7: {
  $80=(($78+6)|0);
  $81=((HEAP8[($80)])|0);
  $t_sroa_8_0=$81;
  label = 7;
  break;
 }
 case 5: {
  $t_sroa_7_0=0;$t_sroa_8_1=0;
  label = 8;
  break;
 }
 default: {
  $t_sroa_6_1=0;$t_sroa_7_2=0;$t_sroa_8_3=0;$t_sroa_0_sroa_6_sroa_0_0=0;$t_sroa_0_sroa_0_0=0;$t_sroa_0_sroa_4_1=0;$t_sroa_0_sroa_5_2=0;
 }
 }
 if ((label|0) == 7) {

  $83=(($78+5)|0);
  $84=((HEAP8[($83)])|0);
  $t_sroa_7_0=$84;$t_sroa_8_1=$t_sroa_8_0;
  label = 8;
 }
 else if ((label|0) == 11) {

  $101=(($78+1)|0);
  $102=((HEAP8[($101)])|0);
  $t_sroa_0_sroa_4_0=$102;$t_sroa_0_sroa_5_1=$t_sroa_0_sroa_5_0;
  label = 12;
 }
 if ((label|0) == 8) {


  $86=(($78+4)|0);
  $87=((HEAP8[($86)])|0);
  $t_sroa_6_0=$87;$t_sroa_7_1=$t_sroa_7_0;$t_sroa_8_2=$t_sroa_8_1;
  label = 9;
 }
 else if ((label|0) == 12) {


  $104=((HEAP8[($78)])|0);
  $t_sroa_6_1=0;$t_sroa_7_2=0;$t_sroa_8_3=0;$t_sroa_0_sroa_6_sroa_0_0=0;$t_sroa_0_sroa_0_0=$104;$t_sroa_0_sroa_4_1=$t_sroa_0_sroa_4_0;$t_sroa_0_sroa_5_2=$t_sroa_0_sroa_5_1;
 }
 if ((label|0) == 9) {



  $89=$in_0_lcssa;
  $90=((HEAP32[(($89)>>2)])|0);
  $91=(($90)&255);
  $92=$90>>>8;
  $93=(($92)&255);
  $94=$90>>>16;
  $95=(($94)&255);
  $96=$90&-16777216;
  $t_sroa_6_1=$t_sroa_6_0;$t_sroa_7_2=$t_sroa_7_1;$t_sroa_8_3=$t_sroa_8_2;$t_sroa_0_sroa_6_sroa_0_0=$96;$t_sroa_0_sroa_0_0=$91;$t_sroa_0_sroa_4_1=$93;$t_sroa_0_sroa_5_2=$95;
 }







 $106=($t_sroa_0_sroa_5_2&255);
 $107=$106<<16;
 $108=$t_sroa_0_sroa_6_sroa_0_0|$107;
 $109=($t_sroa_0_sroa_4_1&255);
 $110=$109<<8;
 $111=$108|$110;
 $112=($t_sroa_0_sroa_0_0&255);
 $113=$111|$112;
 $114$0=($t_sroa_8_3&255);
 $114$1=0;
 $115$0=(0<<16)|(0>>>16);
 $115$1=($114$0<<16)|(0>>>16);
 $116$0=($t_sroa_7_2&255);
 $116$1=0;
 $117$0=(0<<8)|(0>>>24);
 $117$1=($116$0<<8)|(0>>>24);
 $118$0=($t_sroa_6_1&255);
 $118$1=0;
 $119$0=0;
 $119$1=$118$0;
 $120$0=$113;
 $120$1=0;
 $121$0=$115$0|$7$0;
 $121$1=$115$1|$7$1;
 $122$0=$121$0|$117$0;
 $122$1=$121$1|$117$1;
 $123$0=$122$0|$120$0;
 $123$1=$122$1|$120$1;
 $124$0=$123$0|$119$0;
 $124$1=$123$1|$119$1;
 $125$0=$124$0^$v3_0_lcssa$0;
 $125$1=$124$1^$v3_0_lcssa$1;
 $126$0=((_i64Add($v1_0_lcssa$0,$v1_0_lcssa$1,$v0_0_lcssa$0,$v0_0_lcssa$1))|0);$126$1=tempRet0;
 $127$0=((_i64Add($125$0,$125$1,$v2_0_lcssa$0,$v2_0_lcssa$1))|0);$127$1=tempRet0;
 $128$0=($v1_0_lcssa$0<<13)|(0>>>19);
 $128$1=($v1_0_lcssa$1<<13)|($v1_0_lcssa$0>>>19);
 $129$0=($v1_0_lcssa$1>>>19)|(0<<13);
 $129$1=(0>>>19)|(0<<13);
 $130$0=$128$0|$129$0;
 $130$1=$128$1|$129$1;
 $131$0=$130$0^$126$0;
 $131$1=$130$1^$126$1;
 $132$0=($125$0<<16)|(0>>>16);
 $132$1=($125$1<<16)|($125$0>>>16);
 $133$0=($125$1>>>16)|(0<<16);
 $133$1=(0>>>16)|(0<<16);
 $134$0=$132$0|$133$0;
 $134$1=$132$1|$133$1;
 $135$0=$134$0^$127$0;
 $135$1=$134$1^$127$1;
 $136$0=0;
 $136$1=$126$0;
 $137$0=$126$1;
 $137$1=0;
 $138$0=$136$0|$137$0;
 $138$1=$136$1|$137$1;
 $139$0=((_i64Add($127$0,$127$1,$131$0,$131$1))|0);$139$1=tempRet0;
 $140$0=((_i64Add($135$0,$135$1,$138$0,$138$1))|0);$140$1=tempRet0;
 $141$0=($131$0<<17)|(0>>>15);
 $141$1=($131$1<<17)|($131$0>>>15);
 $142$0=($131$1>>>15)|(0<<17);
 $142$1=(0>>>15)|(0<<17);
 $143$0=$141$0|$142$0;
 $143$1=$141$1|$142$1;
 $144$0=$139$0^$143$0;
 $144$1=$139$1^$143$1;
 $145$0=($135$0<<21)|(0>>>11);
 $145$1=($135$1<<21)|($135$0>>>11);
 $146$0=($135$1>>>11)|(0<<21);
 $146$1=(0>>>11)|(0<<21);
 $147$0=$145$0|$146$0;
 $147$1=$145$1|$146$1;
 $148$0=$147$0^$140$0;
 $148$1=$147$1^$140$1;
 $149$0=0;
 $149$1=$139$0;
 $150$0=$139$1;
 $150$1=0;
 $151$0=$149$0|$150$0;
 $151$1=$149$1|$150$1;
 $152$0=((_i64Add($140$0,$140$1,$144$0,$144$1))|0);$152$1=tempRet0;
 $153$0=((_i64Add($148$0,$148$1,$151$0,$151$1))|0);$153$1=tempRet0;
 $154$0=($144$0<<13)|(0>>>19);
 $154$1=($144$1<<13)|($144$0>>>19);
 $155$0=($144$1>>>19)|(0<<13);
 $155$1=(0>>>19)|(0<<13);
 $156$0=$154$0|$155$0;
 $156$1=$154$1|$155$1;
 $157$0=$156$0^$152$0;
 $157$1=$156$1^$152$1;
 $158$0=($148$0<<16)|(0>>>16);
 $158$1=($148$1<<16)|($148$0>>>16);
 $159$0=($148$1>>>16)|(0<<16);
 $159$1=(0>>>16)|(0<<16);
 $160$0=$158$0|$159$0;
 $160$1=$158$1|$159$1;
 $161$0=$160$0^$153$0;
 $161$1=$160$1^$153$1;
 $162$0=0;
 $162$1=$152$0;
 $163$0=$152$1;
 $163$1=0;
 $164$0=$162$0|$163$0;
 $164$1=$162$1|$163$1;
 $165$0=((_i64Add($153$0,$153$1,$157$0,$157$1))|0);$165$1=tempRet0;
 $166$0=((_i64Add($161$0,$161$1,$164$0,$164$1))|0);$166$1=tempRet0;
 $167$0=($157$0<<17)|(0>>>15);
 $167$1=($157$1<<17)|($157$0>>>15);
 $168$0=($157$1>>>15)|(0<<17);
 $168$1=(0>>>15)|(0<<17);
 $169$0=$167$0|$168$0;
 $169$1=$167$1|$168$1;
 $170$0=$169$0^$165$0;
 $170$1=$169$1^$165$1;
 $171$0=($161$0<<21)|(0>>>11);
 $171$1=($161$1<<21)|($161$0>>>11);
 $172$0=($161$1>>>11)|(0<<21);
 $172$1=(0>>>11)|(0<<21);
 $173$0=$171$0|$172$0;
 $173$1=$171$1|$172$1;
 $174$0=$173$0^$166$0;
 $174$1=$173$1^$166$1;
 $175$0=0;
 $175$1=$165$0;
 $176$0=$165$1;
 $176$1=0;
 $177$0=$175$0|$176$0;
 $177$1=$175$1|$176$1;
 $178$0=$166$0^$124$0;
 $178$1=$166$1^$124$1;
 $$etemp$10$0=255;
 $$etemp$10$1=0;
 $179$0=$177$0^$$etemp$10$0;
 $179$1=$177$1^$$etemp$10$1;
 $180$0=((_i64Add($178$0,$178$1,$170$0,$170$1))|0);$180$1=tempRet0;
 $181$0=((_i64Add($174$0,$174$1,$179$0,$179$1))|0);$181$1=tempRet0;
 $182$0=($170$0<<13)|(0>>>19);
 $182$1=($170$1<<13)|($170$0>>>19);
 $183$0=($170$1>>>19)|(0<<13);
 $183$1=(0>>>19)|(0<<13);
 $184$0=$182$0|$183$0;
 $184$1=$182$1|$183$1;
 $185$0=$180$0^$184$0;
 $185$1=$180$1^$184$1;
 $186$0=($174$0<<16)|(0>>>16);
 $186$1=($174$1<<16)|($174$0>>>16);
 $187$0=($174$1>>>16)|(0<<16);
 $187$1=(0>>>16)|(0<<16);
 $188$0=$186$0|$187$0;
 $188$1=$186$1|$187$1;
 $189$0=$188$0^$181$0;
 $189$1=$188$1^$181$1;
 $190$0=0;
 $190$1=$180$0;
 $191$0=$180$1;
 $191$1=0;
 $192$0=$190$0|$191$0;
 $192$1=$190$1|$191$1;
 $193$0=((_i64Add($181$0,$181$1,$185$0,$185$1))|0);$193$1=tempRet0;
 $194$0=((_i64Add($189$0,$189$1,$192$0,$192$1))|0);$194$1=tempRet0;
 $195$0=($185$0<<17)|(0>>>15);
 $195$1=($185$1<<17)|($185$0>>>15);
 $196$0=($185$1>>>15)|(0<<17);
 $196$1=(0>>>15)|(0<<17);
 $197$0=$195$0|$196$0;
 $197$1=$195$1|$196$1;
 $198$0=$197$0^$193$0;
 $198$1=$197$1^$193$1;
 $199$0=($189$0<<21)|(0>>>11);
 $199$1=($189$1<<21)|($189$0>>>11);
 $200$0=($189$1>>>11)|(0<<21);
 $200$1=(0>>>11)|(0<<21);
 $201$0=$199$0|$200$0;
 $201$1=$199$1|$200$1;
 $202$0=$201$0^$194$0;
 $202$1=$201$1^$194$1;
 $203$0=0;
 $203$1=$193$0;
 $204$0=$193$1;
 $204$1=0;
 $205$0=$203$0|$204$0;
 $205$1=$203$1|$204$1;
 $206$0=((_i64Add($194$0,$194$1,$198$0,$198$1))|0);$206$1=tempRet0;
 $207$0=((_i64Add($202$0,$202$1,$205$0,$205$1))|0);$207$1=tempRet0;
 $208$0=($198$0<<13)|(0>>>19);
 $208$1=($198$1<<13)|($198$0>>>19);
 $209$0=($198$1>>>19)|(0<<13);
 $209$1=(0>>>19)|(0<<13);
 $210$0=$208$0|$209$0;
 $210$1=$208$1|$209$1;
 $211$0=$210$0^$206$0;
 $211$1=$210$1^$206$1;
 $212$0=($202$0<<16)|(0>>>16);
 $212$1=($202$1<<16)|($202$0>>>16);
 $213$0=($202$1>>>16)|(0<<16);
 $213$1=(0>>>16)|(0<<16);
 $214$0=$212$0|$213$0;
 $214$1=$212$1|$213$1;
 $215$0=$214$0^$207$0;
 $215$1=$214$1^$207$1;
 $216$0=0;
 $216$1=$206$0;
 $217$0=$206$1;
 $217$1=0;
 $218$0=$216$0|$217$0;
 $218$1=$216$1|$217$1;
 $219$0=((_i64Add($207$0,$207$1,$211$0,$211$1))|0);$219$1=tempRet0;
 $220$0=((_i64Add($215$0,$215$1,$218$0,$218$1))|0);$220$1=tempRet0;
 $221$0=($211$0<<17)|(0>>>15);
 $221$1=($211$1<<17)|($211$0>>>15);
 $222$0=($211$1>>>15)|(0<<17);
 $222$1=(0>>>15)|(0<<17);
 $223$0=$221$0|$222$0;
 $223$1=$221$1|$222$1;
 $224$0=$223$0^$219$0;
 $224$1=$223$1^$219$1;
 $225$0=($215$0<<21)|(0>>>11);
 $225$1=($215$1<<21)|($215$0>>>11);
 $226$0=($215$1>>>11)|(0<<21);
 $226$1=(0>>>11)|(0<<21);
 $227$0=$225$0|$226$0;
 $227$1=$225$1|$226$1;
 $228$0=$227$0^$220$0;
 $228$1=$227$1^$220$1;
 $229$0=0;
 $229$1=$219$0;
 $230$0=$219$1;
 $230$1=0;
 $231$0=$229$0|$230$0;
 $231$1=$229$1|$230$1;
 $232$0=((_i64Add($220$0,$220$1,$224$0,$224$1))|0);$232$1=tempRet0;
 $233$0=((_i64Add($228$0,$228$1,$231$0,$231$1))|0);$233$1=tempRet0;
 $234$0=($224$0<<13)|(0>>>19);
 $234$1=($224$1<<13)|($224$0>>>19);
 $235$0=($224$1>>>19)|(0<<13);
 $235$1=(0>>>19)|(0<<13);
 $236$0=$234$0|$235$0;
 $236$1=$234$1|$235$1;
 $237$0=$236$0^$232$0;
 $237$1=$236$1^$232$1;
 $238$0=($228$0<<16)|(0>>>16);
 $238$1=($228$1<<16)|($228$0>>>16);
 $239$0=($228$1>>>16)|(0<<16);
 $239$1=(0>>>16)|(0<<16);
 $240$0=$238$0|$239$0;
 $240$1=$238$1|$239$1;
 $241$0=$240$0^$233$0;
 $241$1=$240$1^$233$1;
 $242$0=0;
 $242$1=$232$0;
 $243$0=$232$1;
 $243$1=0;
 $244$0=$242$0|$243$0;
 $244$1=$242$1|$243$1;
 $245$0=((_i64Add($233$0,$233$1,$237$0,$237$1))|0);$245$1=tempRet0;
 $246$0=((_i64Add($241$0,$241$1,$244$0,$244$1))|0);$246$1=tempRet0;
 $247$0=($237$0<<17)|(0>>>15);
 $247$1=($237$1<<17)|($237$0>>>15);
 $248$0=($237$1>>>15)|(0<<17);
 $248$1=(0>>>15)|(0<<17);
 $249$0=$247$0|$248$0;
 $249$1=$247$1|$248$1;
 $250$0=$249$0^$245$0;
 $250$1=$249$1^$245$1;
 $251$0=($241$0<<21)|(0>>>11);
 $251$1=($241$1<<21)|($241$0>>>11);
 $252$0=($241$1>>>11)|(0<<21);
 $252$1=(0>>>11)|(0<<21);
 $253$0=$251$0|$252$0;
 $253$1=$251$1|$252$1;
 $254$0=$253$0^$246$0;
 $254$1=$253$1^$246$1;
 $255$0=0;
 $255$1=$245$0;
 $256$0=$245$1;
 $256$1=0;
 $257$0=$255$0|$256$0;
 $257$1=$255$1|$256$1;
 $258$0=((_i64Add($246$0,$246$1,$250$0,$250$1))|0);$258$1=tempRet0;
 $259$0=((_i64Add($254$0,$254$1,$257$0,$257$1))|0);$259$1=tempRet0;
 $260$0=($250$0<<13)|(0>>>19);
 $260$1=($250$1<<13)|($250$0>>>19);
 $261$0=($250$1>>>19)|(0<<13);
 $261$1=(0>>>19)|(0<<13);
 $262$0=$260$0|$261$0;
 $262$1=$260$1|$261$1;
 $263$0=$262$0^$258$0;
 $263$1=$262$1^$258$1;
 $264$0=($254$0<<16)|(0>>>16);
 $264$1=($254$1<<16)|($254$0>>>16);
 $265$0=($254$1>>>16)|(0<<16);
 $265$1=(0>>>16)|(0<<16);
 $266$0=$264$0|$265$0;
 $266$1=$264$1|$265$1;
 $267$0=$266$0^$259$0;
 $267$1=$266$1^$259$1;
 $268$0=((_i64Add($259$0,$259$1,$263$0,$263$1))|0);$268$1=tempRet0;
 $269$0=($263$0<<17)|(0>>>15);
 $269$1=($263$1<<17)|($263$0>>>15);
 $270$0=($263$1>>>15)|(0<<17);
 $270$1=(0>>>15)|(0<<17);
 $271$0=$269$0|$270$0;
 $271$1=$269$1|$270$1;
 $272$0=$271$0^$268$0;
 $272$1=$271$1^$268$1;
 $273$0=($267$0<<21)|(0>>>11);
 $273$1=($267$1<<21)|($267$0>>>11);
 $274$0=($267$1>>>11)|(0<<21);
 $274$1=(0>>>11)|(0<<21);
 $275$0=$273$0|$274$0;
 $275$1=$273$1|$274$1;
 $276$0=0;
 $276$1=$268$0;
 $277$0=$268$1;
 $277$1=0;
 $278$0=$276$0|$277$0;
 $278$1=$276$1|$277$1;
 $279$0=$272$0^$278$0;
 $279$1=$272$1^$278$1;
 $280$0=$279$0^$275$0;
 $280$1=$279$1^$275$1;
 return (((tempRet0=$280$1,$280$0))|0);
}


function _lily_new_parse_state($options){
 $options=($options)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0;
 var $41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0;
 var $61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0;
 var $81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0;
 var $101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,label=0;

 $1=((_lily_malloc(84))|0);
 $2=$1;
 $3=(($options+16)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($1+80)|0);
 $6=$5;
 HEAP32[(($6)>>2)]=$4;
 $7=(($1+4)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=0;
 $9=$1;
 HEAP32[(($9)>>2)]=0;
 $10=((_lily_new_raiser())|0);
 $11=(($1+18)|0);
 HEAP8[($11)]=1;
 $12=(($1+19)|0);
 HEAP8[($12)]=0;
 $13=(($1+40)|0);
 $14=$13;
 HEAP32[(($14)>>2)]=0;
 $15=(($1+72)|0);
 $16=$15;
 HEAP32[(($16)>>2)]=$10;
 $17=(($1+36)|0);
 $18=$17;
 HEAP32[(($18)>>2)]=0;
 $19=((_lily_new_expr_state())|0);
 $20=(($1+32)|0);
 $21=$20;
 HEAP32[(($21)>>2)]=$19;
 $22=((_lily_new_symtab())|0);
 $23=(($1+60)|0);
 $24=$23;
 HEAP32[(($24)>>2)]=$22;
 _lily_register_pkg_builtin($2);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=((HEAP32[(($8)>>2)])|0);
 _lily_set_first_package($25,$26);
 $27=((HEAP32[(($24)>>2)])|0);
 _lily_init_pkg_builtin($27);
 $28=((HEAP32[(($24)>>2)])|0);
 $29=((_lily_new_emit_state($28,$10))|0);
 $30=(($1+56)|0);
 $31=$30;
 HEAP32[(($31)>>2)]=$29;
 $32=((_lily_new_lex_state($options,$10))|0);
 $33=(($1+52)|0);
 $34=$33;
 HEAP32[(($34)>>2)]=$32;
 $35=((_lily_new_vm_state($options,$10))|0);
 $36=(($1+64)|0);
 $37=$36;
 HEAP32[(($37)>>2)]=$35;
 $38=((_lily_new_msgbuf())|0);
 $39=(($1+44)|0);
 $40=$39;
 HEAP32[(($40)>>2)]=$38;
 $41=(($1+76)|0);
 $42=$41;
 HEAP32[(($42)>>2)]=$options;
 $43=((_lily_new_buffer_u16(4))|0);
 $44=(($1+12)|0);
 $45=$44;
 HEAP32[(($45)>>2)]=$43;
 $46=((HEAP32[(($21)>>2)])|0);
 $47=(($1+24)|0);
 $48=$47;
 HEAP32[(($48)>>2)]=$46;
 $49=((HEAP32[(($31)>>2)])|0);
 $50=(($49+112)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=(($1+68)|0);
 $53=$52;
 HEAP32[(($53)>>2)]=$51;
 $54=((HEAP32[(($24)>>2)])|0);
 $55=((HEAP32[(($37)>>2)])|0);
 $56=(($55+92)|0);
 HEAP32[(($56)>>2)]=$54;
 $57=((HEAP32[(($16)>>2)])|0);
 $58=(($57+4)|0);
 $59=((HEAP32[(($58)>>2)])|0);
 $60=((HEAP32[(($37)>>2)])|0);
 $61=(($60+80)|0);
 HEAP32[(($61)>>2)]=$59;
 $62=((HEAP32[(($37)>>2)])|0);
 $63=(($62+88)|0);
 HEAP32[(($63)>>2)]=$2;
 $64=((HEAP32[(($34)>>2)])|0);
 $65=(($64+16)|0);
 $66=((HEAP32[(($24)>>2)])|0);
 $67=(($66+100)|0);
 HEAP32[(($67)>>2)]=$65;
 $68=((HEAP32[(($34)>>2)])|0);
 $69=(($68+16)|0);
 $70=((HEAP32[(($48)>>2)])|0);
 $71=(($70+28)|0);
 HEAP32[(($71)>>2)]=$69;
 $72=((HEAP32[(($34)>>2)])|0);
 $73=(($72+16)|0);
 $74=((HEAP32[(($31)>>2)])|0);
 $75=(($74+96)|0);
 HEAP32[(($75)>>2)]=$73;
 $76=((HEAP32[(($24)>>2)])|0);
 $77=((HEAP32[(($31)>>2)])|0);
 $78=(($77+120)|0);
 HEAP32[(($78)>>2)]=$76;
 $79=((HEAP32[(($31)>>2)])|0);
 $80=(($79+116)|0);
 HEAP32[(($80)>>2)]=$2;
 $81=((HEAP32[(($24)>>2)])|0);
 $82=((HEAP32[(($34)>>2)])|0);
 $83=(($82+52)|0);
 HEAP32[(($83)>>2)]=$81;
 $84=((HEAP32[(($31)>>2)])|0);
 $85=(($84+104)|0);
 $86=((HEAP32[(($85)>>2)])|0);
 $87=(($1+28)|0);
 $88=$87;
 HEAP32[(($88)>>2)]=$86;
 $89=((HEAP32[(($31)>>2)])|0);
 _lily_emit_enter_main($89);
 $90=((HEAP32[(($24)>>2)])|0);
 $91=(($90)|0);
 $92=((HEAP32[(($91)>>2)])|0);
 $93=(($92+12)|0);
 $94=((HEAP32[(($93)>>2)])|0);
 $95=(($1+48)|0);
 $96=$95;
 HEAP32[(($96)>>2)]=$94;
 $97=((_new_package($2,17880,0))|0);
 $98=(($97+12)|0);
 $99=((HEAP32[(($98)>>2)])|0);
 $100=(($1+8)|0);
 $101=$100;
 HEAP32[(($101)>>2)]=$99;
 $102=((HEAP32[(($24)>>2)])|0);
 $103=(($102+36)|0);
 $104=((HEAP32[(($103)>>2)])|0);
 $105=(($104+20)|0);
 HEAP32[(($105)>>2)]=$99;
 $106=((HEAP32[(($101)>>2)])|0);
 $107=((HEAP32[(($24)>>2)])|0);
 $108=(($107+24)|0);
 HEAP32[(($108)>>2)]=$106;
 _lily_pkg_sys_init($2,$options);
 $109=(($1+16)|0);
 $110=$109;
 HEAP16[(($110)>>1)]=0;
 return (($2)|0);
}


function _lily_free_parse_state($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$package_iter_010=0,$24=0,$25=0,$26=0,$module_iter_02=0,$27=0,$28=0,$29=0,$link_iter_01=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$link_iter1_06=0,$57=0,$58=0;
 var $59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,label=0;

 $1=(($parser+72)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_free_raiser($2);
 $3=(($parser+32)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_free_expr_state($4);
 $5=(($parser+64)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 _lily_free_vm($6);
 $7=(($parser+60)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 _lily_free_symtab($8);
 $9=(($parser+52)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 _lily_free_lex_state($10);
 $11=(($parser+56)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 _lily_free_emit_state($12);
 $13=(($parser+12)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 _lily_free_buffer_u16($14);
 $15=(($parser)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+12)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+20)|0);
 HEAP32[(($21)>>2)]=0;
 $22=((HEAP32[(($15)>>2)])|0);
 $23=($22|0)==0;
 if ($23) {
  $67=(($parser+44)|0);
  $68=((HEAP32[(($67)>>2)])|0);
  _lily_free_msgbuf($68);
  $69=(($parser+68)|0);
  $70=((HEAP32[(($69)>>2)])|0);
  _lily_free_type_maker($70);
  $71=$parser;
  _lily_free($71);
  return;
 } else {
  $package_iter_010=$22;
 }
 while(1) {

  $24=(($package_iter_010+12)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $26=($25|0)==0;
  if (!($26)) {
   $module_iter_02=$25;
   while(1) {

    $27=(($module_iter_02+24)|0);
    $28=((HEAP32[(($27)>>2)])|0);
    $29=($28|0)==0;
    if (!($29)) {
     $link_iter_01=$28;
     while(1) {

      $30=(($link_iter_01+8)|0);
      $31=((HEAP32[(($30)>>2)])|0);
      $32=(($link_iter_01+4)|0);
      $33=((HEAP32[(($32)>>2)])|0);
      _lily_free($33);
      $34=$link_iter_01;
      _lily_free($34);
      $35=($31|0)==0;
      if ($35) {
       break;
      } else {
       $link_iter_01=$31;
      }
     }
    }
    $36=(($module_iter_02)|0);
    $37=((HEAP32[(($36)>>2)])|0);
    $38=(($module_iter_02+40)|0);
    $39=((HEAP32[(($38)>>2)])|0);
    $40=($39|0)==0;
    if (!($40)) {
     _lily_library_free($39);
    }
    $43=(($module_iter_02+20)|0);
    $44=((HEAP32[(($43)>>2)])|0);
    _lily_free($44);
    $45=(($module_iter_02+16)|0);
    $46=((HEAP32[(($45)>>2)])|0);
    _lily_free($46);
    $47=(($module_iter_02+12)|0);
    $48=((HEAP32[(($47)>>2)])|0);
    _lily_free($48);
    $49=(($module_iter_02+52)|0);
    $50=((HEAP32[(($49)>>2)])|0);
    $51=$50;
    _lily_free($51);
    $52=$module_iter_02;
    _lily_free($52);
    $53=($37|0)==0;
    if ($53) {
     break;
    } else {
     $module_iter_02=$37;
    }
   }
  }
  $54=(($package_iter_010+8)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=($55|0)==0;
  if (!($56)) {
   $link_iter1_06=$55;
   while(1) {

    $57=(($link_iter1_06+4)|0);
    $58=((HEAP32[(($57)>>2)])|0);
    $59=$link_iter1_06;
    _lily_free($59);
    $60=($58|0)==0;
    if ($60) {
     break;
    } else {
     $link_iter1_06=$58;
    }
   }
  }
  $61=(($package_iter_010)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=(($package_iter_010+4)|0);
  $64=((HEAP32[(($63)>>2)])|0);
  _lily_free($64);
  $65=$package_iter_010;
  _lily_free($65);
  $66=($62|0)==0;
  if ($66) {
   break;
  } else {
   $package_iter_010=$62;
  }
 }
 $67=(($parser+44)|0);
 $68=((HEAP32[(($67)>>2)])|0);
 _lily_free_msgbuf($68);
 $69=(($parser+68)|0);
 $70=((HEAP32[(($69)>>2)])|0);
 _lily_free_type_maker($70);
 $71=$parser;
 _lily_free($71);
 return;
}


function _lily_register_package($parser,$name,$dynaload_table,$loader){
 $parser=($parser)|0;
 $name=($name)|0;
 $dynaload_table=($dynaload_table)|0;
 $loader=($loader)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=((_new_package($parser,$name,$dynaload_table))|0);
 $2=(($1+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($3+48)|0);
 HEAP32[(($4)>>2)]=$loader;
 return;
}


function _lily_dynaload_exception($parser,$name){
 $parser=($parser)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;

 $1=(($parser)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((_try_toplevel_dynaload($parser,$4,$name))|0);
 $6=$5;
 return (($6)|0);
}


function _lily_find_or_dl_member($parser,$cls,$name){
 $parser=($parser)|0;
 $cls=($cls)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$12=0,$13=0,$15=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0;
 var $27=0,$index_0=0,$entry_0=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$index_1=0,$entry_1=0,$39=0,$40=0,$42=0,$43=0,$_0=0,label=0;

 $1=(($parser+60)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_find_var($2,0,$name))|0);
 $4=($3|0)==0;
 do {
  if (!($4)) {
   $6=(($3+40)|0);
   $7=((HEAP32[(($6)>>2)])|0);
   $8=($7|0)==($cls|0);
   if (!($8)) {
    break;
   }
   $10=$3;
   $_0=$10;

   return (($_0)|0);
  }
 } while(0);
 $12=((_lily_find_member($cls,$name))|0);
 $13=($12|0)==0;
 if (!($13)) {
  $15=$12;
  $_0=$15;

  return (($_0)|0);
 }
 $17=(($cls+46)|0);
 $18=((HEAP16[(($17)>>1)])|0);
 $19=(($18<<16)>>16)==0;
 if ($19) {
  $_0=0;

  return (($_0)|0);
 }
 $21=($18&65535);
 $22=(($cls+48)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($23+44)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25+($21<<2))|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $entry_0=$27;$index_0=$21;
 while(1) {


  $29=(($entry_0+2)|0);
  $30=((_strcmp((($name)|0),(($29)|0)))|0);
  $31=($30|0)==0;
  if ($31) {
   $entry_1=$entry_0;$index_1=$index_0;
   break;
  }
  $33=((($index_0)+(1))|0);
  $34=(($25+($33<<2))|0);
  $35=((HEAP32[(($34)>>2)])|0);
  $36=((HEAP8[($35)])|0);
  $37=(($36<<24)>>24)==109;
  if ($37) {
   $entry_0=$35;$index_0=$33;
  } else {
   $entry_1=$35;$index_1=$33;
   break;
  }
 }


 $39=((HEAP8[($entry_1)])|0);
 $40=(($39<<24)>>24)==109;
 if (!($40)) {
  $_0=0;

  return (($_0)|0);
 }
 $42=((_dynaload_function($parser,$23,$cls,$index_1))|0);
 $43=$42;
 $_0=$43;

 return (($_0)|0);
}


function _lily_parser_interp_eval($parser,$start_line,$text){
 $parser=($parser)|0;
 $start_line=($start_line)|0;
 $text=($text)|0;
 var $es=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0;
 var $24=0,$26=0,$27=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;
 $es=((sp)|0);
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_load_copy_string($2,1,$text);
 $3=(($2+16)|0);
 HEAP32[(($3)>>2)]=$start_line;
 $4=((HEAP32[(($1)>>2)])|0);
 _lily_lexer($4);
 $5=(($2+40)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)==52;
 if ($7) {
  $9=(($parser+72)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  _lily_raise($10,1,12792,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _init_expr_state($parser,$es);
 _expression($parser);
 $12=(($parser+56)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($parser+24)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((_lily_emit_eval_interp_expr($13,$15))|0);
 $17=((HEAP32[(($5)>>2)])|0);
 $18=($17|0)==52;
 if (!($18)) {
  $20=(($parser+72)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=((_tokname($17))|0);
  _lily_raise($21,1,12608,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$22,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $24=($16|0)==0;
 if (!($24)) {
  _fini_expr_state($parser);
  _lily_pop_lex_entry($2);
  STACKTOP=sp;return (($16)|0);
 }
 $26=(($parser+72)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 _lily_raise($27,1,12424,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 _fini_expr_state($parser);
 _lily_pop_lex_entry($2);
 STACKTOP=sp;return (($16)|0);
}


function _lily_parser_lambda_eval($parser,$lambda_start_line,$lambda_body,$expect_type){
 $parser=($parser)|0;
 $lambda_start_line=($lambda_start_line)|0;
 $lambda_body=($lambda_body)|0;
 $expect_type=($expect_type)|0;
 var $es=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$phitmp=0,$20=0;
 var $21=0,$args_collected_0=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$44=0;
 var $_=0,$flags_0=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;
 $es=((sp)|0);
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+68)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 _lily_load_copy_string($2,1,$lambda_body);
 $7=(($2+16)|0);
 HEAP32[(($7)>>2)]=$lambda_start_line;
 $8=(($parser+56)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($parser+48)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((_lily_emit_new_define_var($9,$11,12248))|0);
 $13=((HEAP32[(($8)>>2)])|0);
 _lily_emit_enter_block($13,14);
 _lily_lexer($2);
 $14=((HEAP32[(($3)>>2)])|0);
 _lily_tm_add($14,0);
 $15=(($2+40)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 if (((($16|0))|0)==((46)|0)) {
  $args_collected_0=1;
 } else if (((($16|0))|0)==((45)|0)) {
  $18=((_collect_lambda_args($parser,$expect_type))|0);
  $phitmp=((($18)+(1))|0);
  $args_collected_0=$phitmp;
 } else {
  $20=(($parser+72)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  _lily_raise($21,1,12040,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $args_collected_0=1;
 }

 _init_expr_state($parser,$es);
 $23=((_parse_lambda_body($parser,$expect_type))|0);
 _fini_expr_state($parser);
 $24=((HEAP32[(($15)>>2)])|0);
 $25=($24|0)==3;
 if (!($25)) {
  $27=(($parser+72)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=((_tokname(3))|0);
  $30=((HEAP32[(($15)>>2)])|0);
  $31=((_tokname($30))|0);
  _lily_raise($28,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$29,HEAP32[(((tempVarArgs)+(8))>>2)]=$31,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $33=((HEAP32[(($3)>>2)])|0);
 _lily_tm_insert($33,$6,$23);
 $34=($expect_type|0)==0;
 do {
  if ($34) {
   $flags_0=0;
  } else {
   $36=(($expect_type)|0);
   $37=((HEAP32[(($36)>>2)])|0);
   $38=(($37+40)|0);
   $39=((HEAP16[(($38)>>1)])|0);
   $40=(($39<<16)>>16)==5;
   if (!($40)) {
    $flags_0=0;
    break;
   }
   $42=(($expect_type+6)|0);
   $43=((HEAP16[(($42)>>1)])|0);
   $44=$43&1;
   $_=($44&65535);
   $flags_0=$_;
  }
 } while(0);

 $46=((HEAP32[(($3)>>2)])|0);
 $47=(($parser+60)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 $49=(($48+72)|0);
 $50=((HEAP32[(($49)>>2)])|0);
 $51=((_lily_tm_make($46,$flags_0,$50,$args_collected_0))|0);
 $52=(($12+12)|0);
 HEAP32[(($52)>>2)]=$51;
 $53=((HEAP32[(($8)>>2)])|0);
 _lily_emit_leave_block($53);
 _lily_pop_lex_entry($2);
 STACKTOP=sp;return (($12)|0);
}


function _lily_parse_string($parser,$name,$mode,$str){
 $parser=($parser)|0;
 $name=($name)|0;
 $mode=($mode)|0;
 $str=($str)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$_0=0,label=0,setjmpLabel=0,setjmpTable=0;

 label = 1; 
setjmpLabel=0;
setjmpTable=STACKTOP;STACKTOP = (STACKTOP + 168)|0;
HEAP32[((setjmpTable)>>2)]=0; while(1)switch(((label)|0)){
 case 1: 
 $1=(($parser+72)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+8)|0);
 $6=_saveSetjmp((($5)|0), label, setjmpTable)|0;
 label=4;break;
 case 4: 
 $7=($6|0)==0;
 if($7){label=2;break;}else{$_0=0;label=3;break;}
 case 2: 
 $9=(($parser+52)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 invoke_viii(10,(($10)|0),(($mode)|0),(($str)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return ((0)|0) } __THREW__ = threwValue = 0;;
 invoke_vii(8,(($parser)|0),(($name)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return ((0)|0) } __THREW__ = threwValue = 0;;
 $11=((HEAP32[(($9)>>2)])|0);
 invoke_vi(8,(($11)|0)); if (((__THREW__|0) != 0) & ((threwValue|0) != 0)) { setjmpLabel = ((_testSetjmp(((HEAP32[((__THREW__)>>2)])|0), setjmpTable))|0); if ((setjmpLabel|0) > 0) { label = -1; break } else return ((0)|0) } __THREW__ = threwValue = 0;;
 $_0=1;label=3;break;
 case 3: 

 return (($_0)|0);
 case -1: if ((setjmpLabel|0) == 1) { $6 = threwValue; label = 4 }
__THREW__ = threwValue = 0;
break;
 }
  return 0;

}


function _lily_build_error_message($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0,$43=0,$44=0,$46=0,$47=0,$48=0,$49=0,$50=0;
 var $51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$58=0,$frame_02=0,$59=0,$60=0,$61=0,$62=0,$63=0,$_=0,$_1=0,$64=0,$65=0,$66=0,$68=0,$69=0;
 var $71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$80=0,$81=0,$82=0,$83=0,$84=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+72)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+44)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_msgbuf_flush($4);
 $5=(($2+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)==0;
 do {
  if (!($7)) {
   $9=(($6+48)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=(($10+36)|0);
   $12=((HEAP32[(($11)>>2)])|0);
   $13=(($12+4)|0);
   $14=((HEAP32[(($13)>>2)])|0);
   $15=((HEAP8[($14)])|0);
   $16=(($15<<24)>>24)==0;
   if ($16) {
    break;
   }
   _lily_msgbuf_add_fmt($4,11480,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$14,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $19=((_lily_name_for_error($2))|0);
 _lily_msgbuf_add($4,$19);
 $20=(($2+4)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($21)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=((HEAP8[($23)])|0);
 $25=(($24<<24)>>24)==0;
 if ($25) {
  _lily_msgbuf_add_char($4,10);
 } else {
  _lily_msgbuf_add_fmt($4,11328,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$23,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $29=(($parser+16)|0);
 $30=((HEAP16[(($29)>>1)])|0);
 $31=(($30<<16)>>16)==0;
 if ($31) {
  $33=(($parser+52)|0);
  $34=((HEAP32[(($33)>>2)])|0);
  $35=(($34)|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=($36|0)==0;
  if ($37) {
   $83=(($4)|0);
   $84=((HEAP32[(($83)>>2)])|0);
   STACKTOP=sp;return (($84)|0);
  }
  $39=(($2+16)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=($40|0)==0;
  if ($41) {
   $43=(($34+16)|0);
   $44=((HEAP32[(($43)>>2)])|0);
   $46=$44;
  } else {
   $46=$40;
  }

  $47=(($parser+60)|0);
  $48=((HEAP32[(($47)>>2)])|0);
  $49=(($48+24)|0);
  $50=((HEAP32[(($49)>>2)])|0);
  $51=(($50+20)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  _lily_msgbuf_add_fmt($4,11184,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$52,HEAP32[(((tempVarArgs)+(8))>>2)]=$46,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $83=(($4)|0);
  $84=((HEAP32[(($83)>>2)])|0);
  STACKTOP=sp;return (($84)|0);
 }
 $54=(($parser+64)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=(($55+24)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 _lily_msgbuf_add($4,11088);
 $58=($57|0)==0;
 if ($58) {
  $83=(($4)|0);
  $84=((HEAP32[(($83)>>2)])|0);
  STACKTOP=sp;return (($84)|0);
 } else {
  $frame_02=$57;
 }
 while(1) {

  $59=(($frame_02)|0);
  $60=((HEAP32[(($59)>>2)])|0);
  $61=(($60+8)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=($62|0)==0;
  $_=($63?17880:$62);
  $_1=($63?17880:11000);
  $64=(($60+28)|0);
  $65=((HEAP32[(($64)>>2)])|0);
  $66=($65|0)==0;
  if ($66) {
   $68=(($60+12)|0);
   $69=((HEAP32[(($68)>>2)])|0);
   _lily_msgbuf_add_fmt($4,10912,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$_,HEAP32[(((tempVarArgs)+(8))>>2)]=$_1,HEAP32[(((tempVarArgs)+(16))>>2)]=$69,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  } else {
   $71=(($60+20)|0);
   $72=((HEAP32[(($71)>>2)])|0);
   $73=(($72+20)|0);
   $74=((HEAP32[(($73)>>2)])|0);
   $75=(($frame_02+20)|0);
   $76=((HEAP32[(($75)>>2)])|0);
   $77=(($60+12)|0);
   $78=((HEAP32[(($77)>>2)])|0);
   _lily_msgbuf_add_fmt($4,10792,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,HEAP32[((tempVarArgs)>>2)]=$74,HEAP32[(((tempVarArgs)+(8))>>2)]=$76,HEAP32[(((tempVarArgs)+(16))>>2)]=$_,HEAP32[(((tempVarArgs)+(24))>>2)]=$_1,HEAP32[(((tempVarArgs)+(32))>>2)]=$78,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $80=(($frame_02+36)|0);
  $81=((HEAP32[(($80)>>2)])|0);
  $82=($81|0)==0;
  if ($82) {
   break;
  } else {
   $frame_02=$81;
  }
 }
 $83=(($4)|0);
 $84=((HEAP32[(($83)>>2)])|0);
 STACKTOP=sp;return (($84)|0);
}


function _load_file($parser,$path){
 $parser=($parser)|0;
 $path=($path)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$result_0=0,label=0;

 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_try_load_file($2,$path))|0);
 $4=($3|0)==0;
 if ($4) {
  $result_0=0;

  return (($result_0)|0);
 }
 $6=((_new_module($path,0))|0);
 $result_0=$6;

 return (($result_0)|0);
}


function _load_library($parser,$path){
 $parser=($parser)|0;
 $path=($path)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$result_0=0,label=0;

 $1=((_lily_library_load($path))|0);
 $2=($1|0)==0;
 if ($2) {
  $result_0=0;

  return (($result_0)|0);
 }
 $4=(($1+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=((_new_module($path,$5))|0);
 $7=(($1)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($6+40)|0);
 HEAP32[(($9)>>2)]=$8;
 $10=$1;
 _lily_free($10);
 $result_0=$6;

 return (($result_0)|0);
}


function _if_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$have_else_0_ph=0,$_pr=0;
 var $23=0,$have_else_0=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$_off8=0,$_cmp=0,$34=0,$35=0,$37=0,$38=0,$40=0,$41=0,$42=0,$or_cond3=0,$44=0,$45=0;
 var $46=0,$_off=0,$47=0,$49=0,$54=0,$55=0,$or_cond7=0,$58=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+56)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_emit_enter_block($4,0);
 _expression($parser);
 $5=((HEAP32[(($3)>>2)])|0);
 $6=(($parser+24)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 _lily_emit_eval_condition($5,$7);
 $8=(($2+40)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==6;
 if (!($10)) {
  $12=(($parser+72)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=((_tokname(6))|0);
  $15=((HEAP32[(($8)>>2)])|0);
  $16=((_tokname($15))|0);
  _lily_raise($13,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$14,HEAP32[(((tempVarArgs)+(8))>>2)]=$16,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $18=((HEAP32[(($8)>>2)])|0);
 $19=($18|0)==29;
 $20=($19&1);
 if ($19) {
  _lily_lexer($2);
  $have_else_0_ph=0;
  label = 5;
 } else {
  $have_else_0=0;$23=$18;
 }
 while(1) {
  if ((label|0) == 5) {
   label = 0;

   $_pr=((HEAP32[(($8)>>2)])|0);
   $have_else_0=$have_else_0_ph;$23=$_pr;
  }


  do {
   if (((($23|0))|0)==((35)|0)) {
    $25=(($2+12)|0);
    $26=((HEAP32[(($25)>>2)])|0);
    $27=((_keyword_by_name($26))|0);
    $28=($27|0)==-1;
    if ($28) {
     _expression($parser);
     $30=((HEAP32[(($3)>>2)])|0);
     $31=((HEAP32[(($6)>>2)])|0);
     _lily_emit_eval_expr($30,$31);
     break;
    }
    $_off8=((($27)-(7))|0);
    $_cmp=($_off8>>>0)>((1)>>>0);
    if (!($_cmp)) {
     break;
    }
    _lily_lexer($2);
    $34=((2384+($27<<2))|0);
    $35=((HEAP32[(($34)>>2)])|0);
    FUNCTION_TABLE_vii[($35)&127]($parser,$20);
   } else if (!(((($23|0))|0)==((3)|0))) {
    _expression($parser);
    $37=((HEAP32[(($3)>>2)])|0);
    $38=((HEAP32[(($6)>>2)])|0);
    _lily_emit_eval_expr($37,$38);
   }
  } while(0);
  $40=((HEAP32[(($8)>>2)])|0);
  $41=($40|0)==35;
  $42=($have_else_0|0)==0;
  $or_cond3=$41&$42;
  if (!($or_cond3)) {
   $54=($40|0)==3;
   $55=$19^1;
   $or_cond7=$54|$55;
   if ($or_cond7) {
    break;
   } else {
    $have_else_0_ph=$have_else_0;
    label = 5;
    continue;
   }
  }
  $44=(($2+12)|0);
  $45=((HEAP32[(($44)>>2)])|0);
  $46=((_keyword_by_name($45))|0);
  $_off=((($46)-(7))|0);
  $47=($_off>>>0)<((2)>>>0);
  if (!($47)) {
   if ($19) {
    $have_else_0_ph=$have_else_0;
    label = 5;
    continue;
   } else {
    label = 21;
    break;
   }
  }
  $49=($46|0)==8;
  _lily_lexer($2);
  if ($49) {
   _do_elif($parser);
   $have_else_0_ph=$have_else_0;
   label = 5;
   continue;
  } else {
   _do_else($parser);
   $have_else_0_ph=1;
   label = 5;
   continue;
  }
 }
 if ((label|0) == 21) {
  $58=((HEAP32[(($3)>>2)])|0);
  _lily_emit_leave_block($58);
  STACKTOP=sp;return;
 }
 if (!($19)) {
  $58=((HEAP32[(($3)>>2)])|0);
  _lily_emit_leave_block($58);
  STACKTOP=sp;return;
 }
 _lily_lexer($2);
 $58=((HEAP32[(($3)>>2)])|0);
 _lily_emit_leave_block($58);
 STACKTOP=sp;return;
}


function _do_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$20=0,$21=0,$23=0,$24=0,$25=0,$26=0;
 var $27=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+56)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_emit_enter_block($4,5);
 $5=(($2+40)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)==6;
 if (!($7)) {
  $9=(($parser+72)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=((_tokname(6))|0);
  $12=((HEAP32[(($5)>>2)])|0);
  $13=((_tokname($12))|0);
  _lily_raise($10,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$11,HEAP32[(((tempVarArgs)+(8))>>2)]=$13,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $15=((HEAP32[(($5)>>2)])|0);
 $16=($15|0)==29;
 if ($16) {
  _parse_multiline_block_body($parser,$multi);
 } else {
  _statement($parser,0);
 }
 $20=((HEAP32[(($5)>>2)])|0);
 $21=($20|0)==35;
 if (!($21)) {
  $23=(($parser+72)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=((_tokname(35))|0);
  $26=((HEAP32[(($5)>>2)])|0);
  $27=((_tokname($26))|0);
  _lily_raise($24,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$25,HEAP32[(((tempVarArgs)+(8))>>2)]=$27,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $29=(($2+12)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 $31=((_strcmp((($30)|0),((13944)|0)))|0);
 $32=($31|0)==0;
 if (!($32)) {
  $34=(($parser+72)|0);
  $35=((HEAP32[(($34)>>2)])|0);
  _lily_raise($35,1,14240,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$30,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $37=(($parser+60)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=((HEAP32[(($3)>>2)])|0);
 $40=(($39+84)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=(($41+4)|0);
 $43=((HEAP32[(($42)>>2)])|0);
 _lily_hide_block_vars($38,$43);
 _expression($parser);
 $44=((HEAP32[(($3)>>2)])|0);
 $45=(($parser+24)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 _lily_emit_eval_condition($44,$46);
 $47=((HEAP32[(($3)>>2)])|0);
 _lily_emit_leave_block($47);
 STACKTOP=sp;return;
}


function _use_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$link_iter_01=0,$34=0,$35=0,$36=0,$link_iter_02=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $46=0,$48=0,$link_iter_0=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$58=0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=0,$67=0,$68=0;
 var $69=0,$package_0=0,$71=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+56)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+84)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+22)|0);
 $8=$7;
 $9=((HEAP16[(($8)>>1)])|0);
 $10=(($9<<16)>>16)==15;
 do {
  if (!($10)) {
   $12=(($6+56)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=($13|0)==0;
   if ($14) {
    break;
   }
   $16=(($parser+72)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   _lily_raise($17,1,14896,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $19=(($parser+60)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+24)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22+36)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($24+12)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=($22|0)==($26|0);
 if (!($27)) {
  $29=(($parser+72)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  _lily_raise($30,1,14824,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $32=((HEAP32[(($23)>>2)])|0);
 $33=(($32+8)|0);
 $link_iter_01=((HEAP32[(($33)>>2)])|0);
 $34=($link_iter_01|0)==0;
 if (!($34)) {
  $35=(($2+12)|0);
  $36=(($parser+72)|0);
  $link_iter_02=$link_iter_01;
  while(1) {

   $38=(($link_iter_02)|0);
   $39=((HEAP32[(($38)>>2)])|0);
   $40=(($39+4)|0);
   $41=((HEAP32[(($40)>>2)])|0);
   $42=((HEAP32[(($35)>>2)])|0);
   $43=((_strcmp((($41)|0),(($42)|0)))|0);
   $44=($43|0)==0;
   if ($44) {
    $46=((HEAP32[(($36)>>2)])|0);
    _lily_raise($46,1,14776,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$42,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   $48=(($link_iter_02+4)|0);
   $link_iter_0=((HEAP32[(($48)>>2)])|0);
   $49=($link_iter_0|0)==0;
   if ($49) {
    break;
   } else {
    $link_iter_02=$link_iter_0;
   }
  }
 }
 $50=(($2+40)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=($51|0)==35;
 if (!($52)) {
  $54=(($parser+72)|0);
  $55=((HEAP32[(($54)>>2)])|0);
  $56=((_tokname(35))|0);
  $57=((HEAP32[(($50)>>2)])|0);
  $58=((_tokname($57))|0);
  _lily_raise($55,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$56,HEAP32[(((tempVarArgs)+(8))>>2)]=$58,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $60=(($2+12)|0);
 $61=((HEAP32[(($60)>>2)])|0);
 $62=((_load_registered_package($parser,$61))|0);
 $63=($62|0)==0;
 if (!($63)) {
  $package_0=$62;

  $71=((HEAP32[(($23)>>2)])|0);
  _link_package_to($71,$package_0);
  _lily_lexer($2);
  STACKTOP=sp;return;
 }
 $65=(($22+16)|0);
 $66=((HEAP32[(($65)>>2)])|0);
 $67=((_load_package($parser,$66,$61))|0);
 $68=(($67+12)|0);
 $69=((HEAP32[(($68)>>2)])|0);
 _run_loaded_module($parser,$69);
 $package_0=$67;

 $71=((HEAP32[(($23)>>2)])|0);
 _link_package_to($71,$package_0);
 _lily_lexer($2);
 STACKTOP=sp;return;
}


function _var_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var label=0;

 _parse_var($parser,0);
 return;
}


function _for_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$loop_var_0=0,$42=0,$43=0,$45=0,$46=0;
 var $47=0,$48=0,$49=0,$51=0,$52=0,$53=0,$55=0,$56=0,$58=0,$59=0,$60=0,$62=0,$63=0,$64=0,$65=0,$66=0,$68=0,$69=0,$70=0,$72=0;
 var $73=0,$74=0,$76=0,$77=0,$79=0,$80=0,$for_step_0=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$89=0,$90=0,$91=0,$92=0,$93=0,$95=0,$96=0;
 var $100=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==35;
 if (!($5)) {
  $7=(($parser+72)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=((_tokname(35))|0);
  $10=((HEAP32[(($3)>>2)])|0);
  $11=((_tokname($10))|0);
  _lily_raise($8,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$9,HEAP32[(((tempVarArgs)+(8))>>2)]=$11,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $13=(($parser+56)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 _lily_emit_enter_block($14,6);
 $15=(($parser+60)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($2+12)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((_lily_find_var($16,0,$18))|0);
 $20=($19|0)==0;
 do {
  if ($20) {
   $22=((HEAP32[(($15)>>2)])|0);
   $23=(($22+48)|0);
   $24=((HEAP32[(($23)>>2)])|0);
   $25=((HEAP32[(($13)>>2)])|0);
   $26=(($24+24)|0);
   $27=((HEAP32[(($26)>>2)])|0);
   $28=((HEAP32[(($17)>>2)])|0);
   $29=((_lily_emit_new_local_var($25,$27,$28))|0);
   $loop_var_0=$29;
  } else {
   $31=(($19+12)|0);
   $32=((HEAP32[(($31)>>2)])|0);
   $33=(($32)|0);
   $34=((HEAP32[(($33)>>2)])|0);
   $35=(($34+40)|0);
   $36=((HEAP16[(($35)>>1)])|0);
   $37=(($36<<16)>>16)==0;
   if ($37) {
    $loop_var_0=$19;
    break;
   }
   $39=(($parser+72)|0);
   $40=((HEAP32[(($39)>>2)])|0);
   _lily_raise($40,1,15296,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$32,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   $loop_var_0=$19;
  }
 } while(0);

 _lily_lexer($2);
 $42=((HEAP32[(($3)>>2)])|0);
 $43=($42|0)==35;
 if (!($43)) {
  $45=(($parser+72)|0);
  $46=((HEAP32[(($45)>>2)])|0);
  $47=((_tokname(35))|0);
  $48=((HEAP32[(($3)>>2)])|0);
  $49=((_tokname($48))|0);
  _lily_raise($46,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$47,HEAP32[(((tempVarArgs)+(8))>>2)]=$49,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $51=((HEAP32[(($17)>>2)])|0);
 $52=((_strcmp((($51)|0),((15280)|0)))|0);
 $53=($52|0)==0;
 if (!($53)) {
  $55=(($parser+72)|0);
  $56=((HEAP32[(($55)>>2)])|0);
  _lily_raise($56,1,15192,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$51,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $58=((_parse_for_range_value($parser,15160))|0);
 $59=((HEAP32[(($3)>>2)])|0);
 $60=($59|0)==48;
 if (!($60)) {
  $62=(($parser+72)|0);
  $63=((HEAP32[(($62)>>2)])|0);
  $64=((_tokname(48))|0);
  $65=((HEAP32[(($3)>>2)])|0);
  $66=((_tokname($65))|0);
  _lily_raise($63,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$64,HEAP32[(((tempVarArgs)+(8))>>2)]=$66,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $68=((_parse_for_range_value($parser,15120))|0);
 $69=((HEAP32[(($3)>>2)])|0);
 $70=($69|0)==35;
 if ($70) {
  $72=((HEAP32[(($17)>>2)])|0);
  $73=((_strcmp((($72)|0),((15096)|0)))|0);
  $74=($73|0)==0;
  if (!($74)) {
   $76=(($parser+72)|0);
   $77=((HEAP32[(($76)>>2)])|0);
   _lily_raise($77,1,15048,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$72,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  _lily_lexer($2);
  $79=((_parse_for_range_value($parser,15016))|0);
  $80=$79;
  $for_step_0=$80;
 } else {
  $for_step_0=0;
 }

 $82=((HEAP32[(($13)>>2)])|0);
 $83=((HEAP32[(($1)>>2)])|0);
 $84=(($83+16)|0);
 $85=((HEAP32[(($84)>>2)])|0);
 _lily_emit_finalize_for_in($82,$loop_var_0,$58,$68,$for_step_0,$85);
 $86=((HEAP32[(($3)>>2)])|0);
 $87=($86|0)==6;
 if (!($87)) {
  $89=(($parser+72)|0);
  $90=((HEAP32[(($89)>>2)])|0);
  $91=((_tokname(6))|0);
  $92=((HEAP32[(($3)>>2)])|0);
  $93=((_tokname($92))|0);
  _lily_raise($90,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$91,HEAP32[(((tempVarArgs)+(8))>>2)]=$93,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $95=((HEAP32[(($3)>>2)])|0);
 $96=($95|0)==29;
 if ($96) {
  _parse_multiline_block_body($parser,$multi);
  $100=((HEAP32[(($13)>>2)])|0);
  _lily_emit_leave_block($100);
  STACKTOP=sp;return;
 } else {
  _statement($parser,0);
  $100=((HEAP32[(($13)>>2)])|0);
  _lily_emit_leave_block($100);
  STACKTOP=sp;return;
 }
}


function _try_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0;
 var $or_cond=0,$24=0,$25=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$37=0,$38=0,$40=0,$41=0,$_pr=0,$44=0,$46=0,$47=0,$48=0,$52=0;
 var $or_cond3=0,$54=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+56)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_emit_enter_block($4,7);
 $5=((HEAP32[(($3)>>2)])|0);
 $6=((HEAP32[(($1)>>2)])|0);
 $7=(($6+16)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 _lily_emit_try($5,$8);
 $9=(($2+40)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)==6;
 if (!($11)) {
  $13=(($parser+72)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=((_tokname(6))|0);
  $16=((HEAP32[(($9)>>2)])|0);
  $17=((_tokname($16))|0);
  _lily_raise($14,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$15,HEAP32[(((tempVarArgs)+(8))>>2)]=$17,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $19=((HEAP32[(($9)>>2)])|0);
 $20=($19|0)==29;
 $21=($20&1);
 $22=($multi|0)==0;
 $or_cond=$20&$22;
 if ($or_cond) {
  $24=(($parser+72)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  _lily_raise($25,1,9792,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 if ($20) {
  _lily_lexer($2);
 }
 $28=(($2+12)|0);
 $29=$20^1;
 $30=(($2+12)|0);
 $31=(($parser+24)|0);
 L10: while(1) {
  $32=((HEAP32[(($9)>>2)])|0);
  do {
   if (((($32|0))|0)==((3)|0)) {
    break L10;
   } else if (((($32|0))|0)==((35)|0)) {
    $34=((HEAP32[(($30)>>2)])|0);
    $35=((_keyword_by_name($34))|0);
    if (((($35|0))|0)==((17)|0)) {
     break;
    } else if (((($35|0))|0)==((-1)|0)) {
     _expression($parser);
     $37=((HEAP32[(($3)>>2)])|0);
     $38=((HEAP32[(($31)>>2)])|0);
     _lily_emit_eval_expr($37,$38);
     break;
    } else {
     _lily_lexer($2);
     $40=((2384+($35<<2))|0);
     $41=((HEAP32[(($40)>>2)])|0);
     FUNCTION_TABLE_vii[($41)&127]($parser,$21);
     break;
    }
   } else {
    _statement($parser,0);
   }
  } while(0);
  $_pr=((HEAP32[(($9)>>2)])|0);
  $44=($_pr|0)==35;
  if (!($44)) {
   $52=($_pr|0)==3;
   $or_cond3=$52|$29;
   if ($or_cond3) {
    break;
   } else {
    continue;
   }
  }
  $46=((HEAP32[(($28)>>2)])|0);
  $47=((_keyword_by_name($46))|0);
  $48=($47|0)==17;
  if ($48) {
   _lily_lexer($2);
   _process_except($parser);
   continue;
  } else {
   if ($20) {
    continue;
   } else {
    label = 20;
    break;
   }
  }
 }
 if ((label|0) == 20) {
  $54=((HEAP32[(($3)>>2)])|0);
  _lily_emit_leave_block($54);
  STACKTOP=sp;return;
 }
 if (!($20)) {
  $54=((HEAP32[(($3)>>2)])|0);
  _lily_emit_leave_block($54);
  STACKTOP=sp;return;
 }
 _lily_lexer($2);
 $54=((HEAP32[(($3)>>2)])|0);
 _lily_emit_leave_block($54);
 STACKTOP=sp;return;
}


function _case_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+72)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_raise($2,1,15608,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _else_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+72)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_raise($2,1,15832,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _elif_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+72)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_raise($2,1,15920,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _enum_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,label=0;

 $1=((_parse_enum($parser,0))|0);
 return;
}


function _while_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$23=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+56)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_emit_enter_block($4,4);
 _expression($parser);
 $5=((HEAP32[(($3)>>2)])|0);
 $6=(($parser+24)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 _lily_emit_eval_condition($5,$7);
 $8=(($2+40)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==6;
 if (!($10)) {
  $12=(($parser+72)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=((_tokname(6))|0);
  $15=((HEAP32[(($8)>>2)])|0);
  $16=((_tokname($15))|0);
  _lily_raise($13,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$14,HEAP32[(((tempVarArgs)+(8))>>2)]=$16,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $18=((HEAP32[(($8)>>2)])|0);
 $19=($18|0)==29;
 if ($19) {
  _parse_multiline_block_body($parser,$multi);
  $23=((HEAP32[(($3)>>2)])|0);
  _lily_emit_leave_block($23);
  STACKTOP=sp;return;
 } else {
  _statement($parser,0);
  $23=((HEAP32[(($3)>>2)])|0);
  _lily_emit_leave_block($23);
  STACKTOP=sp;return;
 }
}


function _raise_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+56)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+80)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+22)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 $8=(($7<<16)>>16)==14;
 if ($8) {
  $10=(($parser+72)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  _lily_raise($11,1,16576,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _expression($parser);
 $13=((HEAP32[(($1)>>2)])|0);
 $14=(($parser+24)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 _lily_emit_raise($13,$15);
 $16=($multi|0)==0;
 if ($16) {
  STACKTOP=sp;return;
 }
 _ensure_no_code_after_exit($parser,13872);
 STACKTOP=sp;return;
}


function _match_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$40=0,$41=0,$44=0,$45=0,$47=0,$48=0,$51=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=($multi|0)==0;
 if ($1) {
  $3=(($parser+72)|0);
  $4=((HEAP32[(($3)>>2)])|0);
  _lily_raise($4,1,17064,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $6=(($parser+52)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($parser+56)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 _lily_emit_enter_block($9,10);
 _expression($parser);
 $10=((HEAP32[(($8)>>2)])|0);
 $11=(($parser+24)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 _lily_emit_eval_match_expr($10,$12);
 $13=((HEAP32[(($11)>>2)])|0);
 $14=(($13)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($7+40)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=($19|0)==6;
 if (!($20)) {
  $22=(($parser+72)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=((_tokname(6))|0);
  $25=((HEAP32[(($18)>>2)])|0);
  $26=((_tokname($25))|0);
  _lily_raise($23,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$24,HEAP32[(((tempVarArgs)+(8))>>2)]=$26,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($7);
 $28=((HEAP32[(($18)>>2)])|0);
 $29=($28|0)==29;
 if (!($29)) {
  $31=(($parser+72)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=((_tokname(29))|0);
  $34=((HEAP32[(($18)>>2)])|0);
  $35=((_tokname($34))|0);
  _lily_raise($32,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$33,HEAP32[(((tempVarArgs)+(8))>>2)]=$35,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($7);
 $37=(($7+12)|0);
 while(1) {
  $38=((HEAP32[(($18)>>2)])|0);
  if (((($38|0))|0)==((3)|0)) {
   break;
  } else if (!(((($38|0))|0)==((35)|0))) {
   _statement($parser,0);
   continue;
  }
  $40=((HEAP32[(($37)>>2)])|0);
  $41=((_keyword_by_name($40))|0);
  if (((($41|0))|0)==((6)|0)) {
   _lily_lexer($7);
   _process_match_case($parser,$17);
   continue;
  } else if (((($41|0))|0)==((-1)|0)) {
   _expression($parser);
   $47=((HEAP32[(($8)>>2)])|0);
   $48=((HEAP32[(($11)>>2)])|0);
   _lily_emit_eval_expr($47,$48);
   continue;
  } else {
   _lily_lexer($7);
   $44=((2384+($41<<2))|0);
   $45=((HEAP32[(($44)>>2)])|0);
   FUNCTION_TABLE_vii[($45)&127]($parser,$multi);
   continue;
  }
 }
 _ensure_proper_match_block($parser,$17);
 _lily_lexer($7);
 $51=((HEAP32[(($8)>>2)])|0);
 _lily_emit_leave_block($51);
 STACKTOP=sp;return;
}


function _break_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+56)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_emit_break($2);
 $3=($multi|0)==0;
 if ($3) {
  STACKTOP=sp;return;
 }
 $5=(($parser+52)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+40)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==3;
 if ($9) {
  STACKTOP=sp;return;
 }
 $11=(($parser+72)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 _lily_raise($12,1,17152,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _class_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+56)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+84)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+22)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 $8=(($7<<16)>>16)==15;
 do {
  if (!($8)) {
   $10=(($4+56)|0);
   $11=((HEAP32[(($10)>>2)])|0);
   $12=($11|0)==0;
   if ($12) {
    break;
   }
   $14=(($parser+72)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   _lily_raise($15,1,4152,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $17=(($parser+52)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+40)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=($20|0)==35;
 if (!($21)) {
  $23=(($parser+72)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=((_tokname(35))|0);
  $26=((HEAP32[(($19)>>2)])|0);
  $27=((_tokname($26))|0);
  _lily_raise($24,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$25,HEAP32[(((tempVarArgs)+(8))>>2)]=$27,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $29=(($18+12)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 _ensure_valid_class($parser,$30);
 $31=(($parser+60)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=((HEAP32[(($29)>>2)])|0);
 $34=((_lily_new_class($32,$33))|0);
 _parse_class_body($parser,$34);
 STACKTOP=sp;return;
}


function _define_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var label=0;

 _parse_define($parser,0);
 return;
}


function _return_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$15=0,$16=0,$17=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0;
 var $28=0,$29=0,$30=0,$31=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+56)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+80)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+22)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 if ((((($7<<16)>>16))|0)==((13)|0)) {
  $9=(($parser+72)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  _lily_raise($10,1,4528,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 } else if ((((($7<<16)>>16))|0)==((15)|0)) {
  label = 5;
 } else if ((((($7<<16)>>16))|0)==((14)|0)) {
  $12=(($parser+72)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  _lily_raise($13,1,4416,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 } else {
  $15=(($4+56)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  $17=($16|0)==0;
  if ($17) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $19=(($parser+72)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  _lily_raise($20,1,4328,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $22=((HEAP32[(($1)>>2)])|0);
 $23=(($22+60)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==0;
 if (!($25)) {
  _expression($parser);
 }
 $28=((HEAP32[(($1)>>2)])|0);
 $29=(($parser+24)|0);
 $30=((HEAP32[(($29)>>2)])|0);
 _lily_emit_eval_return($28,$30);
 $31=($multi|0)==0;
 if ($31) {
  STACKTOP=sp;return;
 }
 _ensure_no_code_after_exit($parser,13408);
 STACKTOP=sp;return;
}


function _except_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+72)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_raise($2,1,4624,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _import_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+72)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_raise($2,1,4680,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _private_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var label=0;

 _parse_modifier($parser,13224,8);
 return;
}


function _protected_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var label=0;

 _parse_modifier($parser,13104,16);
 return;
}


function _continue_handler($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+56)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_emit_continue($2);
 $3=($multi|0)==0;
 if ($3) {
  STACKTOP=sp;return;
 }
 $5=(($parser+52)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+40)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==3;
 if ($9) {
  STACKTOP=sp;return;
 }
 $11=(($parser+72)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 _lily_raise($12,1,10272,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _new_package($parser,$name,$dynaload_table){
 $parser=($parser)|0;
 $name=($name)|0;
 $dynaload_table=($dynaload_table)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=((_new_empty_package($parser,$name))|0);
 $2=((_new_module(0,$dynaload_table))|0);
 $3=(($1+12)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=(($2+36)|0);
 HEAP32[(($4)>>2)]=$1;
 return (($1)|0);
}


function _try_toplevel_dynaload($parser,$m,$name){
 $parser=($parser)|0;
 $m=($m)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$i_0=0,$entry_0=0,$6=0,$7=0,$8=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$result_0=0;
 var label=0;

 $1=(($m+44)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $entry_0=$4;$i_0=1;
 while(1) {


  $6=(($entry_0+2)|0);
  $7=((_strcmp((($6)|0),(($name)|0)))|0);
  $8=($7|0)==0;
  if ($8) {
   break;
  }
  $12=(($entry_0+1)|0);
  $13=((HEAP8[($12)])|0);
  $14=($13&255);
  $15=((($i_0)+(1))|0);
  $16=((($15)+($14))|0);
  $17=(($2+($16<<2))|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=((HEAP8[($18)])|0);
  $20=(($19<<24)>>24)==90;
  if ($20) {
   $result_0=0;
   label = 5;
   break;
  } else {
   $entry_0=$18;$i_0=$16;
  }
 }
 if ((label|0) == 5) {

  return (($result_0)|0);
 }
 $10=((_run_dynaload($parser,$m,$i_0))|0);
 $result_0=$10;

 return (($result_0)|0);
}


function _dynaload_function($parser,$m,$cls,$dyna_index){
 $parser=($parser)|0;
 $m=($m)|0;
 $cls=($cls)|0;
 $dyna_index=($dyna_index)|0;
 var $flags=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$_sum1=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0;
 var $21=0,$source_0=0,$23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$36=0,$37=0,$cls_name_0=0,$39=0,$40=0,$41=0,$42=0,$43=0;
 var $44=0,$45=0,$func_0_in=0,$func_0=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$i_0=0,$60=0,$61=0,$62=0,$phitmp=0;
 var $_pr=0,$66=0,$67=0,$69=0,$i_1=0,$70=0,$72=0,$73=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0;
 var label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $flags=((sp)|0);
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+60)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($m+44)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+($dyna_index<<2))|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+2)|0);
 $10=((_strlen((($9)|0)))|0);
 $_sum1=((($10)+(3))|0);
 $11=(($8+$_sum1)|0);
 $12=(($4+24)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($parser+19)|0);
 $15=((HEAP8[($14)])|0);
 $16=($15&255);
 _lily_load_str($2,1,$11);
 _lily_lexer($2);
 $17=($cls|0)==0;
 if ($17) {
  $19=$m;
  $source_0=$19;
 } else {
  $21=$cls;
  $source_0=$21;
 }

 $23=(($m+48)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=($24|0)==0;
 if ($25) {
  $33=(($parser+44)|0);
  $34=((HEAP32[(($33)>>2)])|0);
  _lily_msgbuf_flush($34);
  if ($17) {
   $cls_name_0=17880;
  } else {
   $36=(($cls+12)|0);
   $37=((HEAP32[(($36)>>2)])|0);
   $cls_name_0=$37;
  }

  $39=(($m+12)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  _lily_msgbuf_add_fmt($34,14064,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$40,HEAP32[(((tempVarArgs)+(8))>>2)]=$cls_name_0,HEAP32[(((tempVarArgs)+(16))>>2)]=$9,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $41=(($m+40)|0);
  $42=((HEAP32[(($41)>>2)])|0);
  $43=(($34)|0);
  $44=((HEAP32[(($43)>>2)])|0);
  $45=((_lily_library_get($42,$44))|0);
  $func_0_in=$45;
 } else {
  $27=(($parser+76)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=(($m+52)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  $31=((FUNCTION_TABLE_iiii[($24)&15]($28,$30,$dyna_index))|0);
  $func_0_in=$31;
 }

 $func_0=$func_0_in;
 $47=((HEAP32[(($3)>>2)])|0);
 $48=(($47+24)|0);
 HEAP32[(($48)>>2)]=$m;
 _collect_generics_or($parser,0);
 $49=(($parser+68)|0);
 $50=((HEAP32[(($49)>>2)])|0);
 $51=(($50+4)|0);
 $52=((HEAP32[(($51)>>2)])|0);
 HEAP32[(($flags)>>2)]=16384;
 $53=((HEAP32[(($49)>>2)])|0);
 _lily_tm_add($53,0);
 $54=(($2+40)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=($55|0)==0;
 if ($56) {
  _lily_lexer($2);
  $58=(($parser+72)|0);
  $i_0=2;
  while(1) {

   $60=((HEAP32[(($49)>>2)])|0);
   $61=((_get_nameless_arg($parser,$flags))|0);
   _lily_tm_add($60,$61);
   $62=((HEAP32[(($54)>>2)])|0);
   if (((($62|0))|0)==((1)|0)) {
    break;
   } else if (((($62|0))|0)==((2)|0)) {
    _lily_lexer($2);
   } else {
    $66=((HEAP32[(($58)>>2)])|0);
    $67=((_tokname($62))|0);
    _lily_raise($66,1,9464,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$67,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   $phitmp=((($i_0)+(1))|0);
   $i_0=$phitmp;
  }
  _lily_lexer($2);
  $_pr=((HEAP32[(($54)>>2)])|0);
  $i_1=$i_0;$69=$_pr;
 } else {
  $i_1=1;$69=$55;
 }


 $70=($69|0)==6;
 if (!($70)) {
  $75=((HEAP32[(($flags)>>2)])|0);
  $76=$75&-16385;
  $77=((HEAP32[(($49)>>2)])|0);
  $78=((HEAP32[(($3)>>2)])|0);
  $79=(($78+72)|0);
  $80=((HEAP32[(($79)>>2)])|0);
  $81=((_lily_tm_make($77,$76,$80,$i_1))|0);
  $82=(($parser+56)|0);
  $83=((HEAP32[(($82)>>2)])|0);
  $84=((_lily_emit_new_tied_dyna_var($83,$func_0,$source_0,$81,$9))|0);
  _lily_update_symtab_generics($4,$16);
  _lily_pop_lex_entry($2);
  HEAP8[($14)]=$15;
  $85=((HEAP32[(($3)>>2)])|0);
  $86=(($85+24)|0);
  HEAP32[(($86)>>2)]=$13;
  STACKTOP=sp;return (($84)|0);
 }
 _lily_lexer($2);
 $72=((HEAP32[(($49)>>2)])|0);
 $73=((_get_type($parser))|0);
 _lily_tm_insert($72,$52,$73);
 $75=((HEAP32[(($flags)>>2)])|0);
 $76=$75&-16385;
 $77=((HEAP32[(($49)>>2)])|0);
 $78=((HEAP32[(($3)>>2)])|0);
 $79=(($78+72)|0);
 $80=((HEAP32[(($79)>>2)])|0);
 $81=((_lily_tm_make($77,$76,$80,$i_1))|0);
 $82=(($parser+56)|0);
 $83=((HEAP32[(($82)>>2)])|0);
 $84=((_lily_emit_new_tied_dyna_var($83,$func_0,$source_0,$81,$9))|0);
 _lily_update_symtab_generics($4,$16);
 _lily_pop_lex_entry($2);
 HEAP8[($14)]=$15;
 $85=((HEAP32[(($3)>>2)])|0);
 $86=(($85+24)|0);
 HEAP32[(($86)>>2)]=$13;
 STACKTOP=sp;return (($84)|0);
}


function _init_expr_state($parser,$new_es){
 $parser=($parser)|0;
 $new_es=($new_es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,label=0;

 $1=(($parser+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+24)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($new_es+22)|0);
 HEAP16[(($5)>>1)]=$4;
 $6=((HEAP16[(($3)>>1)])|0);
 $7=(($new_es+24)|0);
 HEAP16[(($7)>>1)]=$6;
 $8=(($2+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($new_es+12)|0);
 HEAP32[(($10)>>2)]=$9;
 $11=((HEAP32[(($8)>>2)])|0);
 $12=(($new_es+8)|0);
 HEAP32[(($12)>>2)]=$11;
 $13=(($new_es+32)|0);
 HEAP32[(($13)>>2)]=$2;
 $14=(($parser+52)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=(($15+16)|0);
 $17=(($new_es+28)|0);
 HEAP32[(($17)>>2)]=$16;
 $18=(($2+16)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($new_es+16)|0);
 HEAP32[(($20)>>2)]=$19;
 $21=(($new_es+20)|0);
 HEAP16[(($21)>>1)]=0;
 $22=(($new_es)|0);
 HEAP32[(($22)>>2)]=0;
 $23=(($new_es+4)|0);
 HEAP32[(($23)>>2)]=0;
 HEAP32[(($1)>>2)]=$new_es;
 return;
}


function _expression($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,label=0;

 $1=(($parser+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _rewind_expr_state($2);
 _expression_raw($parser,1);
 return;
}


function _fini_expr_state($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=(($parser+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+32)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 HEAP32[(($1)>>2)]=$4;
 return;
}


function _collect_lambda_args($parser,$expect_type){
 $parser=($parser)|0;
 $expect_type=($expect_type)|0;
 var $1=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$num_args_0=0,$17=0,$18=0,$20=0,$21=0,$22=0;
 var $23=0,$25=0,$26=0,$27=0,$29=0,$30=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$arg_type_02=0,$44=0,$45=0,$arg_type_01=0;
 var $47=0,$arg_type_1=0,$49=0,$50=0,$51=0,$53=0,$54=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=($expect_type|0)==0;
 if ($1) {
  $7=-1;
 } else {
  $3=(($expect_type+10)|0);
  $4=((HEAP16[(($3)>>1)])|0);
  $5=($4&65535);
  $7=$5;
 }

 $8=(($parser+52)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+40)|0);
 $11=(($parser+68)|0);
 $12=(($parser+72)|0);
 $13=(($expect_type+12)|0);
 $14=(($parser+72)|0);
 $15=(($9+12)|0);
 $16=(($parser+72)|0);
 $num_args_0=0;
 while(1) {

  _lily_lexer($9);
  $17=((HEAP32[(($10)>>2)])|0);
  $18=($17|0)==35;
  if (!($18)) {
   $20=((HEAP32[(($16)>>2)])|0);
   $21=((_tokname(35))|0);
   $22=((HEAP32[(($10)>>2)])|0);
   $23=((_tokname($22))|0);
   _lily_raise($20,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$21,HEAP32[(((tempVarArgs)+(8))>>2)]=$23,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $25=((_get_named_var($parser,0))|0);
  $26=((HEAP32[(($10)>>2)])|0);
  $27=($26|0)==6;
  if ($27) {
   _lily_lexer($9);
   $29=((_get_type($parser))|0);
   $30=(($25+12)|0);
   HEAP32[(($30)>>2)]=$29;
   $arg_type_1=$29;
  } else {
   $32=($num_args_0|0)<($7|0);
   do {
    if ($32) {
     $34=((($num_args_0)+(1))|0);
     $35=((HEAP32[(($13)>>2)])|0);
     $36=(($35+($34<<2))|0);
     $37=((HEAP32[(($36)>>2)])|0);
     $38=($37|0)==0;
     if ($38) {
      $arg_type_02=0;
      label = 11;
      break;
     }
     $40=(($37+6)|0);
     $41=((HEAP16[(($40)>>1)])|0);
     $42=$41&16;
     $43=(($42<<16)>>16)==0;
     if ($43) {
      $arg_type_01=$37;
     } else {
      $arg_type_02=$37;
      label = 11;
     }
    } else {
     $arg_type_02=0;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    label = 0;

    $44=((HEAP32[(($14)>>2)])|0);
    $45=((HEAP32[(($15)>>2)])|0);
    _lily_raise($44,1,14168,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$45,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    $arg_type_01=$arg_type_02;
   }

   $47=(($25+12)|0);
   HEAP32[(($47)>>2)]=$arg_type_01;
   $arg_type_1=$arg_type_01;
  }

  $49=((HEAP32[(($11)>>2)])|0);
  _lily_tm_add($49,$arg_type_1);
  $50=((($num_args_0)+(1))|0);
  $51=((HEAP32[(($10)>>2)])|0);
  if (((($51|0))|0)==((45)|0)) {
   break;
  } else if (((($51|0))|0)==((2)|0)) {
   $num_args_0=$50;
   continue;
  }
  $53=((HEAP32[(($12)>>2)])|0);
  $54=((_tokname($51))|0);
  _lily_raise($53,1,14080,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$54,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $num_args_0=$50;
 }
 STACKTOP=sp;return (($50)|0);
}


function _parse_lambda_body($parser,$expect_type){
 $parser=($parser)|0;
 $expect_type=($expect_type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$key_id_0_ph=0,$_pr=0,$7=0,$key_id_0=0,$8=0,$10=0,$11=0,$key_id_1=0,$13=0,$15=0,$16=0,$17=0,$18=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$31=0,$32=0,$result_type_0=0,label=0;

 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_lexer($2);
 $3=(($2+40)|0);
 $4=(($2+12)|0);
 $5=(($parser+56)|0);
 $6=(($parser+24)|0);
 $key_id_0_ph=-1;
 L1: while(1) {

  $_pr=((HEAP32[(($3)>>2)])|0);
  $key_id_0=$key_id_0_ph;$7=$_pr;
  while(1) {


   $8=($7|0)==35;
   if ($8) {
    $10=((HEAP32[(($4)>>2)])|0);
    $11=((_keyword_by_name($10))|0);
    $key_id_1=$11;
   } else {
    $key_id_1=$key_id_0;
   }

   $13=($key_id_1|0)==-1;
   if ($13) {
    break;
   }
   _statement($parser,0);
   $31=((HEAP32[(($3)>>2)])|0);
   $32=($31|0)==3;
   if ($32) {
    $result_type_0=0;
    label = 11;
    break L1;
   } else {
    $key_id_0=-1;$7=$31;
   }
  }
  _expression($parser);
  $15=((HEAP32[(($3)>>2)])|0);
  $16=($15|0)==3;
  $17=((HEAP32[(($5)>>2)])|0);
  $18=((HEAP32[(($6)>>2)])|0);
  if ($16) {
   break;
  }
  _lily_emit_eval_expr($17,$18);
  $key_id_0_ph=$key_id_1;
 }
 if ((label|0) == 11) {

  return (($result_type_0)|0);
 }
 _lily_emit_eval_lambda_body($17,$18,$expect_type);
 $21=((HEAP32[(($6)>>2)])|0);
 $22=(($21)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($23)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($25|0)==0;
 if ($26) {
  $result_type_0=0;

  return (($result_type_0)|0);
 }
 $28=(($25+12)|0);
 $29=((HEAP32[(($28)>>2)])|0);
 $result_type_0=$29;

 return (($result_type_0)|0);
}


function _parser_loop($parser,$filename){
 $parser=($parser)|0;
 $filename=($filename)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $25=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0;
 var $49=0,$51=0,$52=0,$54=0,$55=0,$56=0,$59=0,$60=0,$62=0,$63=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+18)|0);
 $2=((HEAP8[($1)])|0);
 $3=(($2<<24)>>24)==0;
 if (!($3)) {
  $5=(($parser+8)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  $7=(($6+20)|0);
  HEAP32[(($7)>>2)]=$filename;
  $8=((HEAP32[(($5)>>2)])|0);
  _set_module_names_by_path($8,$filename);
  HEAP8[($1)]=0;
 }
 $10=(($parser+52)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 _lily_lexer($11);
 $12=(($11+40)|0);
 $13=(($parser+72)|0);
 $14=(($parser+56)|0);
 $15=(($parser+56)|0);
 $16=(($parser+60)|0);
 $17=(($parser+64)|0);
 $18=(($parser+16)|0);
 $19=(($parser+72)|0);
 $20=(($parser+56)|0);
 $21=(($parser+24)|0);
 L4: while(1) {
  $22=((HEAP32[(($12)>>2)])|0);
  switch (($22|0)) {
  case 3: {
   $25=((HEAP32[(($14)>>2)])|0);
   _lily_emit_leave_block($25);
   _lily_lexer($11);
   continue L4;
   break;
  }
  case 40:case 41:case 37:case 0:case 4:case 38:case 39:case 31: {
   _expression($parser);
   $59=((HEAP32[(($20)>>2)])|0);
   $60=((HEAP32[(($21)>>2)])|0);
   _lily_emit_eval_expr($59,$60);
   continue L4;
   break;
  }
  case 35: {
   _statement($parser,1);
   continue L4;
   break;
  }
  case 51:case 52: {
   $27=((HEAP32[(($15)>>2)])|0);
   $28=(($27+84)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   $30=(($29+56)|0);
   $31=((HEAP32[(($30)>>2)])|0);
   $32=($31|0)==0;
   if (!($32)) {
    $34=((HEAP32[(($19)>>2)])|0);
    _lily_raise($34,1,10632,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   $36=((HEAP32[(($15)>>2)])|0);
   $37=(($36+16)|0);
   $38=((HEAP32[(($37)>>2)])|0);
   $39=(($38+4)|0);
   $40=((HEAP32[(($39)>>2)])|0);
   $41=($40|0)==0;
   if (!($41)) {
    $43=((HEAP32[(($16)>>2)])|0);
    $44=((HEAP32[(($17)>>2)])|0);
    _lily_register_classes($43,$44);
    $45=((HEAP32[(($15)>>2)])|0);
    _lily_prepare_main($45);
    $46=((HEAP32[(($17)>>2)])|0);
    $47=((HEAP32[(($16)>>2)])|0);
    _lily_vm_prep($46,$47);
    _update_all_cid_tables($parser);
    HEAP16[(($18)>>1)]=1;
    $48=((HEAP32[(($17)>>2)])|0);
    _lily_vm_execute($48);
    HEAP16[(($18)>>1)]=0;
    $49=((HEAP32[(($15)>>2)])|0);
    _lily_reset_main($49);
   }
   $51=((HEAP32[(($12)>>2)])|0);
   $52=($51|0)==51;
   if (!($52)) {
    label = 16;
    break L4;
   }
   $54=((HEAP32[(($10)>>2)])|0);
   _lily_lexer_handle_page_data($54);
   $55=((HEAP32[(($12)>>2)])|0);
   $56=($55|0)==52;
   if ($56) {
    label = 16;
    break L4;
   }
   _lily_lexer($11);
   continue L4;
   break;
  }
  default: {
   $62=((HEAP32[(($13)>>2)])|0);
   $63=((_tokname($22))|0);
   _lily_raise($62,1,10528,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$63,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   continue L4;
  }
  }
 }
 if ((label|0) == 16) {
  STACKTOP=sp;return;
 }
}


function _new_module($path,$dynaload_table){
 $path=($path)|0;
 $dynaload_table=($dynaload_table)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,label=0;

 $1=((_lily_malloc(56))|0);
 $2=$1;
 $3=($path|0)==0;
 if ($3) {
  $12=(($1+10)|0);
  _memset((((($12)|0))|0), ((((0)|0))|0), ((((14)|0))|0))|0;
 } else {
  $5=((_strlen((($path)|0)))|0);
  $6=((($5)+(1))|0);
  $7=((_lily_malloc($6))|0);
  $8=(($1+20)|0);
  $9=$8;
  HEAP32[(($9)>>2)]=$7;
  $10=((_strcpy((($7)|0),(($path)|0)))|0);
  _set_module_names_by_path($2,$path);
 }
 $14=(($1+44)|0);
 $15=$14;
 HEAP32[(($15)>>2)]=$dynaload_table;
 $16=($dynaload_table|0)==0;
 do {
  if ($16) {
   label = 7;
  } else {
   $18=((HEAP32[(($dynaload_table)>>2)])|0);
   $19=((HEAP8[($18)])|0);
   $20=(($19<<24)>>24)==0;
   if ($20) {
    label = 7;
    break;
   }
   $22=($19&255);
   $23=$22<<1;
   $24=((_lily_malloc($23))|0);
   $25=$24;
   $26=(($1+52)|0);
   $27=$26;
   HEAP32[(($27)>>2)]=$25;
   _memset((((($24)|0))|0), ((((0)|0))|0), (((($23)|0))|0))|0;
  }
 } while(0);
 if ((label|0) == 7) {
  $29=(($1+52)|0);
  $30=$29;
  HEAP32[(($30)>>2)]=0;
 }
 $32=$1;
 HEAP32[(($32)>>2)]=0;
 $33=(($1+24)|0);
 $34=$33;
 HEAP32[(($34)>>2)]=0;
 $35=(($1+28)|0);
 $36=$35;
 HEAP32[(($36)>>2)]=0;
 $37=(($1+32)|0);
 $38=$37;
 HEAP32[(($38)>>2)]=0;
 $39=(($1+40)|0);
 $40=$39;
 HEAP32[(($40)>>2)]=0;
 $41=(($1+48)|0);
 $42=$41;
 HEAP32[(($42)>>2)]=0;
 $43=(($1+4)|0);
 $44=$43;
 HEAP16[(($44)>>1)]=5;
 return (($2)|0);
}


function _keyword_by_name($name){
 $name=($name)|0;
 var $1$0=0,$1$1=0,$i_01=0,$3=0,$ld$0$0=0,$4$0=0,$ld$1$1=0,$4$1=0,$5=0,$7=0,$8=0,$9=0,$10=0,$ld$2$0=0,$12$0=0,$ld$3$1=0,$12$1=0,$13=0,$14=0,$15=0;
 var $or_cond=0,$_0=0,label=0;

 $1$0=((_shorthash_for_name456($name))|0);
 $1$1=tempRet0;
 $i_01=0;
 while(1) {

  $3=((1776+($i_01<<4)+8)|0);
  $ld$0$0=(($3)|0);
  $4$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($3+4)|0);
  $4$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $5=(($4$0|0) == ($1$0|0)) & (($4$1|0) == ($1$1|0));
  if ($5) {
   $7=((1776+($i_01<<4))|0);
   $8=((HEAP32[(($7)>>2)])|0);
   $9=((_strcmp((($8)|0),(($name)|0)))|0);
   $10=($9|0)==0;
   if ($10) {
    $_0=$i_01;
    label = 5;
    break;
   }
  }
  $ld$2$0=(($3)|0);
  $12$0=((HEAP32[(($ld$2$0)>>2)])|0);
  $ld$3$1=(($3+4)|0);
  $12$1=((HEAP32[(($ld$3$1)>>2)])|0);
  $13=(($12$1>>>0) <= ($1$1>>>0)) & (((($12$1>>>0) <  ($1$1>>>0)) | ($12$0>>>0) <= ($1$0>>>0)));
  $14=((($i_01)+(1))|0);
  $15=($14|0)<22;
  $or_cond=$13&$15;
  if ($or_cond) {
   $i_01=$14;
  } else {
   $_0=-1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {

  return (($_0)|0);
 }
  return 0;
}


function _do_elif($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+56)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_emit_change_block_to($4,1);
 _expression($parser);
 $5=((HEAP32[(($3)>>2)])|0);
 $6=(($parser+24)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 _lily_emit_eval_condition($5,$7);
 $8=(($2+40)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==6;
 if ($10) {
  _lily_lexer($2);
  STACKTOP=sp;return;
 }
 $12=(($parser+72)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=((_tokname(6))|0);
 $15=((HEAP32[(($8)>>2)])|0);
 $16=((_tokname($15))|0);
 _lily_raise($13,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$14,HEAP32[(((tempVarArgs)+(8))>>2)]=$16,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 _lily_lexer($2);
 STACKTOP=sp;return;
}


function _do_else($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+56)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_emit_change_block_to($4,2);
 $5=(($2+40)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)==6;
 if ($7) {
  _lily_lexer($2);
  STACKTOP=sp;return;
 }
 $9=(($parser+72)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((_tokname(6))|0);
 $12=((HEAP32[(($5)>>2)])|0);
 $13=((_tokname($12))|0);
 _lily_raise($10,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$11,HEAP32[(((tempVarArgs)+(8))>>2)]=$13,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 _lily_lexer($2);
 STACKTOP=sp;return;
}


function _parse_multiline_block_body($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$8=0,$9=0,$10=0,$_pr=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($multi|0)==0;
 if ($3) {
  $5=(($parser+72)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  _lily_raise($6,1,9792,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $8=(($2+40)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==3;
 if ($10) {
  _lily_lexer($2);
  STACKTOP=sp;return;
 }
 _statement($parser,1);
 $_pr=((HEAP32[(($8)>>2)])|0);
 $12=($_pr|0)==3;
 if ($12) {
  _lily_lexer($2);
  STACKTOP=sp;return;
 }
 $14=(($parser+72)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((_tokname(3))|0);
 $17=((HEAP32[(($8)>>2)])|0);
 $18=((_tokname($17))|0);
 _lily_raise($15,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$16,HEAP32[(((tempVarArgs)+(8))>>2)]=$18,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 _lily_lexer($2);
 STACKTOP=sp;return;
}


function _statement($parser,$multi){
 $parser=($parser)|0;
 $multi=($multi)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$13=0,$14=0,$15=0,$17=0,$18=0,$20=0,$21=0,$23=0,$24=0,$26=0;
 var $27=0,$28=0,$29=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=(($2+12)|0);
 $5=(($parser+56)|0);
 $6=(($parser+24)|0);
 $7=($multi|0)==0;
 $8=(($parser+56)|0);
 $9=(($parser+24)|0);
 L1: while(1) {
  $11=((HEAP32[(($3)>>2)])|0);
  L3: do {
   switch (($11|0)) {
   case 41:case 40:case 39:case 38:case 37:case 36:case 31:case 4:case 0: {
    _expression($parser);
    $23=((HEAP32[(($8)>>2)])|0);
    $24=((HEAP32[(($9)>>2)])|0);
    _lily_emit_eval_expr($23,$24);
    break;
   }
   case 35: {
    $13=((HEAP32[(($4)>>2)])|0);
    $14=((_keyword_by_name($13))|0);
    $15=($14|0)==-1;
    if ($15) {
     _expression($parser);
     $20=((HEAP32[(($5)>>2)])|0);
     $21=((HEAP32[(($6)>>2)])|0);
     _lily_emit_eval_expr($20,$21);
     break L3;
    } else {
     _lily_lexer($2);
     $17=((2384+($14<<2))|0);
     $18=((HEAP32[(($17)>>2)])|0);
     FUNCTION_TABLE_vii[($18)&127]($parser,$multi);
     break L3;
    }
    break;
   }
   default: {
    break L1;
   }
   }
  } while(0);
  if ($7) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP=sp;return;
 }
 $26=($multi|0)==0;
 if (!($26)) {
  STACKTOP=sp;return;
 }
 $27=(($parser+72)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=((_tokname($11))|0);
 _lily_raise($28,1,10376,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$29,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _load_registered_package($parser,$name){
 $parser=($parser)|0;
 $name=($name)|0;
 var $1=0,$package_iter_01=0,$2=0,$4=0,$package_iter_0=0,$5=0,$package_iter_02=0,$6=0,$7=0,$8=0,$9=0,$package_iter_0_lcssa=0,label=0;

 $1=(($parser)|0);
 $package_iter_01=((HEAP32[(($1)>>2)])|0);
 $2=($package_iter_01|0)==0;
 L1: do {
  if ($2) {
   $package_iter_0_lcssa=0;
  } else {
   $package_iter_02=$package_iter_01;
   while(1) {

    $6=(($package_iter_02+4)|0);
    $7=((HEAP32[(($6)>>2)])|0);
    $8=((_strcmp((($7)|0),(($name)|0)))|0);
    $9=($8|0)==0;
    if ($9) {
     $package_iter_0_lcssa=$package_iter_02;
     break L1;
    }
    $4=(($package_iter_02)|0);
    $package_iter_0=((HEAP32[(($4)>>2)])|0);
    $5=($package_iter_0|0)==0;
    if ($5) {
     $package_iter_0_lcssa=0;
     break;
    } else {
     $package_iter_02=$package_iter_0;
    }
   }
  }
 } while(0);

 return (($package_iter_0_lcssa)|0);
}


function _load_package($parser,$dirpath,$name){
 $parser=($parser)|0;
 $dirpath=($dirpath)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$5=0,$i_03=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$module_11=0,$26=0,$27=0,$28=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+44)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $i_03=0;
 while(1) {

  $7=((4048+((($i_03)*(12))&-1))|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=((4048+((($i_03)*(12))&-1)+4)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=((4048+((($i_03)*(12))&-1)+8)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  _lily_msgbuf_flush($2);
  _lily_msgbuf_add_fmt($2,14552,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,HEAP32[((tempVarArgs)>>2)]=$dirpath,HEAP32[(((tempVarArgs)+(8))>>2)]=$name,HEAP32[(((tempVarArgs)+(16))>>2)]=$8,HEAP32[(((tempVarArgs)+(24))>>2)]=$name,HEAP32[(((tempVarArgs)+(32))>>2)]=$10,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $13=((HEAP32[(($3)>>2)])|0);
  $14=((FUNCTION_TABLE_iii[($12)&15]($parser,$13))|0);
  $15=($14|0)==0;
  $16=((($i_03)+(1))|0);
  if (!($15)) {
   $module_11=$14;
   label = 5;
   break;
  }
  $5=($16|0)<2;
  if ($5) {
   $i_03=$16;
  } else {
   break;
  }
 }
 if ((label|0) == 5) {

  $26=((_new_empty_package($parser,$name))|0);
  $27=(($26+12)|0);
  HEAP32[(($27)>>2)]=$module_11;
  $28=(($module_11+36)|0);
  HEAP32[(($28)>>2)]=$26;
  STACKTOP=sp;return (($26)|0);
 }
 _lily_msgbuf_flush($2);
 _lily_msgbuf_add_fmt($2,14472,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$name,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 _lily_msgbuf_add_fmt($2,14384,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$name,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $18=((HEAP32[((4048)>>2)])|0);
 $19=((HEAP32[((4052)>>2)])|0);
 _lily_msgbuf_add_fmt($2,14304,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,HEAP32[((tempVarArgs)>>2)]=$dirpath,HEAP32[(((tempVarArgs)+(8))>>2)]=$name,HEAP32[(((tempVarArgs)+(16))>>2)]=$18,HEAP32[(((tempVarArgs)+(24))>>2)]=$name,HEAP32[(((tempVarArgs)+(32))>>2)]=$19,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $20=((HEAP32[((4060)>>2)])|0);
 $21=((HEAP32[((4064)>>2)])|0);
 _lily_msgbuf_add_fmt($2,14304,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 40)|0,HEAP32[((tempVarArgs)>>2)]=$dirpath,HEAP32[(((tempVarArgs)+(8))>>2)]=$name,HEAP32[(((tempVarArgs)+(16))>>2)]=$20,HEAP32[(((tempVarArgs)+(24))>>2)]=$name,HEAP32[(((tempVarArgs)+(32))>>2)]=$21,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $22=(($parser+72)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=(($2)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 _lily_raise($23,1,$25,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $module_11=0;

 $26=((_new_empty_package($parser,$name))|0);
 $27=(($26+12)|0);
 HEAP32[(($27)>>2)]=$module_11;
 $28=(($module_11+36)|0);
 HEAP32[(($28)>>2)]=$26;
 STACKTOP=sp;return (($26)|0);
}


function _run_loaded_module($parser,$module){
 $parser=($parser)|0;
 $module=($module)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($module+40)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if (!($3)) {
  STACKTOP=sp;return;
 }
 $5=(($parser+60)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+24)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($parser+52)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 HEAP32[(($7)>>2)]=$module;
 $11=(($parser+56)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=(($parser+48)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((_lily_emit_new_define_var($12,$14,14712))|0);
 $16=((HEAP32[(($11)>>2)])|0);
 _lily_emit_enter_block($16,15);
 _lily_lexer($10);
 _statement($parser,1);
 $17=(($10+40)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=($18|0)==3;
 if ($19) {
  $21=(($parser+72)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  _lily_raise($22,1,14664,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $24=((HEAP32[(($11)>>2)])|0);
 $25=(($24+84)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($26+22)|0);
 $28=$27;
 $29=((HEAP16[(($28)>>1)])|0);
 $30=(($29<<16)>>16)==15;
 if (!($30)) {
  $32=(($parser+72)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  _lily_raise($33,1,14592,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $35=((HEAP32[(($11)>>2)])|0);
 _lily_emit_leave_block($35);
 $36=((HEAP32[(($9)>>2)])|0);
 _lily_pop_lex_entry($36);
 $37=((HEAP32[(($11)>>2)])|0);
 _lily_emit_write_import_call($37,$15);
 $38=((HEAP32[(($5)>>2)])|0);
 $39=(($38+24)|0);
 HEAP32[(($39)>>2)]=$8;
 STACKTOP=sp;return;
}


function _link_package_to($target,$to_link){
 $target=($target)|0;
 $to_link=($to_link)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=((_lily_malloc(8))|0);
 $2=$1;
 $3=$1;
 HEAP32[(($3)>>2)]=$to_link;
 $4=(($target+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($1+4)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=$5;
 HEAP32[(($4)>>2)]=$2;
 return;
}


function _parse_var($parser,$modifiers){
 $parser=($parser)|0;
 $modifiers=($modifiers)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$_=0,$_8=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0;
 var $20=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$_pr=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$45=0,$46=0;
 var $47=0,$sym_0=0,$49=0,$50=0,$52=0,$53=0,$_pr9=0,$55=0,$56=0,$58=0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$modifiers|1;
 $4=(($parser+56)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+84)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+22)|0);
 $9=$8;
 $10=((HEAP16[(($9)>>1)])|0);
 $11=(($10<<16)>>16)==13;
 $_=($11?36:35);
 $_8=($11?35:36);
 $12=(($parser+24)|0);
 $13=(($2+40)|0);
 $14=(($parser+72)|0);
 $15=(($parser+72)|0);
 $16=(($parser+72)|0);
 L1: while(1) {
  $18=((HEAP32[(($12)>>2)])|0);
  _rewind_expr_state($18);
  $19=((HEAP32[(($13)>>2)])|0);
  $20=($19|0)==($_8|0);
  if ($20) {
   _bad_decl_token($parser);
  }
  $23=((HEAP32[(($13)>>2)])|0);
  $24=($23|0)==($_|0);
  if ($24) {
   $31=$23;
  } else {
   $26=((HEAP32[(($16)>>2)])|0);
   $27=((_tokname($_))|0);
   $28=((HEAP32[(($13)>>2)])|0);
   $29=((_tokname($28))|0);
   _lily_raise($26,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$27,HEAP32[(((tempVarArgs)+(8))>>2)]=$29,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   $_pr=((HEAP32[(($13)>>2)])|0);
   $31=$_pr;
  }

  $32=($31|0)==35;
  do {
   if ($32) {
    $34=((_get_named_var($parser,0))|0);
    $35=$34;
    $36=(($34+6)|0);
    $37=((HEAP16[(($36)>>1)])|0);
    $38=$37|1;
    HEAP16[(($36)>>1)]=$38;
    $39=$37&512;
    $40=(($39<<16)>>16)==0;
    $41=((HEAP32[(($12)>>2)])|0);
    if ($40) {
     _lily_es_push_local_var($41,$34);
     $sym_0=$35;
     break;
    } else {
     _lily_es_push_global_var($41,$34);
     $sym_0=$35;
     break;
    }
   } else {
    $45=((_get_named_property($parser,$3))|0);
    $46=$45;
    $47=((HEAP32[(($12)>>2)])|0);
    _lily_es_push_property($47,$45);
    $sym_0=$46;
   }
  } while(0);

  $49=((HEAP32[(($13)>>2)])|0);
  $50=($49|0)==6;
  if ($50) {
   _lily_lexer($2);
   $52=((_get_type($parser))|0);
   $53=(($sym_0+12)|0);
   HEAP32[(($53)>>2)]=$52;
   $_pr9=((HEAP32[(($13)>>2)])|0);
   $55=$_pr9;
  } else {
   $55=$49;
  }

  $56=($55|0)==27;
  if (!($56)) {
   $58=((HEAP32[(($15)>>2)])|0);
   _lily_raise($58,1,7192,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $60=((HEAP32[(($12)>>2)])|0);
  _lily_es_push_binary_op($60,21);
  _lily_lexer($2);
  _expression_raw($parser,1);
  $61=((HEAP32[(($4)>>2)])|0);
  $62=((HEAP32[(($12)>>2)])|0);
  _lily_emit_eval_expr($61,$62);
  $63=((HEAP32[(($13)>>2)])|0);
  switch (($63|0)) {
  case 2: {
   break;
  }
  case 52:case 51:case 36:case 35:case 3: {
   break L1;
   break;
  }
  default: {
   $65=((HEAP32[(($14)>>2)])|0);
   $66=((_tokname($63))|0);
   _lily_raise($65,1,7080,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$66,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  }
  _lily_lexer($2);
 }
 STACKTOP=sp;return;
}


function _parse_for_range_value($parser,$name){
 $parser=($parser)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$or_cond=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _expression($parser);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+4)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 $8=$7&255;
 $9=(($8<<16)>>16)==26;
 $10=((($7&65535))>>>0)>((5375)>>>0);
 $or_cond=$9&$10;
 if ($or_cond) {
  $12=(($parser+72)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  _lily_raise($13,1,14944,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $15=(($parser+60)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16+48)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($parser+56)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($18+24)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((_lily_emit_new_local_var($20,$22,$name))|0);
 $24=((HEAP32[(($19)>>2)])|0);
 _lily_emit_eval_expr_to_var($24,$2,$23);
 STACKTOP=sp;return (($23)|0);
}


function _process_except($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$cls_0=0,$18=0,$19=0,$21=0,$22=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$41=0,$42=0,$new_type_0=0,$44=0,$45=0,$46=0,$47=0;
 var $48=0,$50=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,$64=0,$65=0,$66=0,$67=0,$68=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$77=0,$78=0,$79=0,$80=0,$82=0,$83=0,$84=0,$_pr=0,$86=0,$exception_var_0=0,$87=0,$89=0,$90=0,$91=0,$92=0,$93=0,$95=0;
 var $96=0,$97=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_get_type($parser))|0);
 $4=(($parser+36)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 if ($6) {
  $8=(($parser+60)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=((_lily_find_class($9,0,15552))|0);
  $11=($10|0)==0;
  if ($11) {
   $13=((HEAP32[(($8)>>2)])|0);
   $14=(($13+20)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   $16=((_find_run_class_dynaload($parser,$15,15552))|0);
   $cls_0=$16;
  } else {
   $cls_0=$10;
  }

  $18=(($cls_0+24)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  HEAP32[(($4)>>2)]=$19;
 }
 $21=((HEAP32[(($4)>>2)])|0);
 $22=($3|0)==($21|0);
 do {
  if ($22) {
   $new_type_0=9;
  } else {
   $24=(($21)|0);
   $25=((HEAP32[(($24)>>2)])|0);
   $26=(($3)|0);
   $27=((HEAP32[(($26)>>2)])|0);
   $28=((_lily_class_greater_eq($25,$27))|0);
   $29=($28|0)==0;
   if ($29) {
    $31=(($parser+72)|0);
    $32=((HEAP32[(($31)>>2)])|0);
    $33=((HEAP32[(($26)>>2)])|0);
    $34=(($33+12)|0);
    $35=((HEAP32[(($34)>>2)])|0);
    _lily_raise($32,1,15496,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$35,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    $new_type_0=8;
    break;
   }
   $37=(($3+12)|0);
   $38=((HEAP32[(($37)>>2)])|0);
   $39=($38|0)==0;
   if ($39) {
    $new_type_0=8;
    break;
   }
   $41=(($parser+72)|0);
   $42=((HEAP32[(($41)>>2)])|0);
   _lily_raise($42,1,15432,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   $new_type_0=8;
  }
 } while(0);

 $44=(($parser+56)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 _lily_emit_change_block_to($45,$new_type_0);
 $46=(($2+40)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=($47|0)==35;
 if ($48) {
  $50=((HEAP32[(($1)>>2)])|0);
  $51=(($50+12)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=((_strcmp((($52)|0),((15400)|0)))|0);
  $54=($53|0)==0;
  if (!($54)) {
   $56=(($parser+72)|0);
   $57=((HEAP32[(($56)>>2)])|0);
   $58=(($2+12)|0);
   $59=((HEAP32[(($58)>>2)])|0);
   _lily_raise($57,1,15352,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$59,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  _lily_lexer($2);
  $61=((HEAP32[(($46)>>2)])|0);
  $62=($61|0)==35;
  if (!($62)) {
   $64=(($parser+72)|0);
   $65=((HEAP32[(($64)>>2)])|0);
   $66=((_tokname(35))|0);
   $67=((HEAP32[(($46)>>2)])|0);
   $68=((_tokname($67))|0);
   _lily_raise($65,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$66,HEAP32[(((tempVarArgs)+(8))>>2)]=$68,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $70=(($parser+60)|0);
  $71=((HEAP32[(($70)>>2)])|0);
  $72=(($2+12)|0);
  $73=((HEAP32[(($72)>>2)])|0);
  $74=((_lily_find_var($71,0,$73))|0);
  $75=($74|0)==0;
  if (!($75)) {
   $77=(($parser+72)|0);
   $78=((HEAP32[(($77)>>2)])|0);
   $79=(($74+16)|0);
   $80=((HEAP32[(($79)>>2)])|0);
   _lily_raise($78,1,7976,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$80,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $82=((HEAP32[(($44)>>2)])|0);
  $83=((HEAP32[(($72)>>2)])|0);
  $84=((_lily_emit_new_local_var($82,$3,$83))|0);
  _lily_lexer($2);
  $_pr=((HEAP32[(($46)>>2)])|0);
  $exception_var_0=$84;$86=$_pr;
 } else {
  $exception_var_0=0;$86=$47;
 }


 $87=($86|0)==6;
 if ($87) {
  $95=((HEAP32[(($44)>>2)])|0);
  $96=(($2+16)|0);
  $97=((HEAP32[(($96)>>2)])|0);
  _lily_emit_except($95,$3,$exception_var_0,$97);
  _lily_lexer($2);
  STACKTOP=sp;return;
 }
 $89=(($parser+72)|0);
 $90=((HEAP32[(($89)>>2)])|0);
 $91=((_tokname(6))|0);
 $92=((HEAP32[(($46)>>2)])|0);
 $93=((_tokname($92))|0);
 _lily_raise($90,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$91,HEAP32[(((tempVarArgs)+(8))>>2)]=$93,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $95=((HEAP32[(($44)>>2)])|0);
 $96=(($2+16)|0);
 $97=((HEAP32[(($96)>>2)])|0);
 _lily_emit_except($95,$3,$exception_var_0,$97);
 _lily_lexer($2);
 STACKTOP=sp;return;
}


function _parse_enum($parser,$is_dynaload){
 $parser=($parser)|0;
 $is_dynaload=($is_dynaload)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0,$25=0;
 var $26=0,$27=0,$28=0,$29=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0;
 var $49=0,$50=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$variant_count_0=0,$68=0,$69=0,$71=0;
 var $72=0,$73=0,$74=0,$77=0,$78=0,$80=0,$81=0,$82=0,$83=0,$86=0,$87=0,$88=0,$89=0,$92=0,$93=0,$94=0,$96=0,$97=0,$98=0,$100=0;
 var $101=0,$102=0,$103=0,$104=0,$105=0,$_pr=0,$108=0,$110=0,$111=0,$112=0,$114=0,$115=0,$117=0,$119=0,$120=0,$122=0,$124=0,$125=0,$126=0,$127=0;
 var $129=0,$130=0,$131=0,$133=0,$134=0,$135=0,$136=0,$137=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+56)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+84)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($is_dynaload|0)==0;
 do {
  if ($5) {
   $7=(($4+22)|0);
   $8=$7;
   $9=((HEAP16[(($8)>>1)])|0);
   $10=(($9<<16)>>16)==15;
   if ($10) {
    break;
   }
   $12=(($4+56)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=($13|0)==0;
   if ($14) {
    break;
   }
   $16=(($parser+72)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   _lily_raise($17,1,16496,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $19=(($parser+52)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+40)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($22|0)==35;
 if (!($23)) {
  $25=(($parser+72)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((_tokname(35))|0);
  $28=((HEAP32[(($21)>>2)])|0);
  $29=((_tokname($28))|0);
  _lily_raise($26,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$27,HEAP32[(((tempVarArgs)+(8))>>2)]=$29,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 if ($5) {
  $32=(($20+12)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  _ensure_valid_class($parser,$33);
 }
 $35=(($parser+60)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=(($20+12)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=((_lily_new_enum($36,$38))|0);
 _lily_lexer($20);
 $40=(($parser+19)|0);
 $41=((HEAP8[($40)])|0);
 $42=($41&255);
 _collect_generics_or($parser,0);
 $43=((HEAP8[($40)])|0);
 $44=($43&255);
 $45=(($39+42)|0);
 HEAP16[(($45)>>1)]=$44;
 $46=((HEAP32[(($1)>>2)])|0);
 _lily_emit_enter_block($46,11);
 $47=((HEAP8[($40)])|0);
 $48=($47&255);
 $49=((_build_self_type($parser,$39,$48))|0);
 $50=(($parser+40)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 HEAP32[(($50)>>2)]=$49;
 $52=((HEAP32[(($21)>>2)])|0);
 $53=($52|0)==29;
 if (!($53)) {
  $55=(($parser+72)|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $57=((_tokname(29))|0);
  $58=((HEAP32[(($21)>>2)])|0);
  $59=((_tokname($58))|0);
  _lily_raise($56,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$57,HEAP32[(((tempVarArgs)+(8))>>2)]=$59,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($20);
 $61=((HEAP32[(($21)>>2)])|0);
 $62=($61|0)==42;
 $63=($62&1);
 $64=(($parser+72)|0);
 $65=(($parser+72)|0);
 $66=(($parser+72)|0);
 $variant_count_0=0;
 while(1) {

  if ($62) {
   $68=((HEAP32[(($21)>>2)])|0);
   $69=($68|0)==42;
   if (!($69)) {
    $71=((HEAP32[(($64)>>2)])|0);
    $72=((_tokname(42))|0);
    $73=((HEAP32[(($21)>>2)])|0);
    $74=((_tokname($73))|0);
    _lily_raise($71,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$72,HEAP32[(((tempVarArgs)+(8))>>2)]=$74,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   _lily_lexer($20);
  }
  $77=((HEAP32[(($21)>>2)])|0);
  $78=($77|0)==35;
  if (!($78)) {
   $80=((HEAP32[(($66)>>2)])|0);
   $81=((_tokname(35))|0);
   $82=((HEAP32[(($21)>>2)])|0);
   $83=((_tokname($82))|0);
   _lily_raise($80,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$81,HEAP32[(((tempVarArgs)+(8))>>2)]=$83,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  do {
   if ($5) {
    $86=((HEAP32[(($35)>>2)])|0);
    $87=((HEAP32[(($37)>>2)])|0);
    $88=((_lily_find_class($86,0,$87))|0);
    $89=($88|0)==0;
    if ($89) {
     break;
    }
    if ($62) {
     $92=(($88+28)|0);
     $93=((HEAP32[(($92)>>2)])|0);
     $94=($93|0)==($39|0);
     if (!($94)) {
      break;
     }
    }
    $96=((HEAP32[(($65)>>2)])|0);
    $97=(($88+12)|0);
    $98=((HEAP32[(($97)>>2)])|0);
    _lily_raise($96,1,16392,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$98,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
  } while(0);
  $100=((HEAP32[(($35)>>2)])|0);
  $101=((HEAP32[(($37)>>2)])|0);
  $102=((_lily_new_variant($100,$39,$101,$variant_count_0))|0);
  $103=((($variant_count_0)+(1))|0);
  _lily_lexer($20);
  $104=((HEAP32[(($21)>>2)])|0);
  $105=($104|0)==0;
  if ($105) {
   _parse_variant_header($parser,$102);
   $_pr=((HEAP32[(($21)>>2)])|0);
   $108=$_pr;
  } else {
   $108=$104;
  }

  if (((($108|0))|0)==((3)|0)) {
   break;
  } else if (!(((($108|0))|0)==((35)|0))) {
   $variant_count_0=$103;
   continue;
  }
  $110=((HEAP32[(($37)>>2)])|0);
  $111=((HEAP8[($110)])|0);
  $112=(($111<<24)>>24)==100;
  if (!($112)) {
   $variant_count_0=$103;
   continue;
  }
  $114=((_keyword_by_name($110))|0);
  $115=($114|0)==15;
  if ($115) {
   break;
  } else {
   $variant_count_0=$103;
  }
 }
 $117=($103|0)<2;
 if ($117) {
  $119=(($parser+72)|0);
  $120=((HEAP32[(($119)>>2)])|0);
  _lily_raise($120,1,16288,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $122=((HEAP32[(($35)>>2)])|0);
 _lily_finish_enum($122,$39,$63,$49);
 if (!($5)) {
  $136=((HEAP32[(($1)>>2)])|0);
  _lily_emit_leave_block($136);
  HEAP32[(($50)>>2)]=$51;
  $137=((HEAP32[(($35)>>2)])|0);
  _lily_update_symtab_generics($137,$42);
  HEAP8[($40)]=$41;
  _lily_lexer($20);
  STACKTOP=sp;return (($39)|0);
 }
 $124=((HEAP32[(($21)>>2)])|0);
 $125=($124|0)==35;
 if (!($125)) {
  $136=((HEAP32[(($1)>>2)])|0);
  _lily_emit_leave_block($136);
  HEAP32[(($50)>>2)]=$51;
  $137=((HEAP32[(($35)>>2)])|0);
  _lily_update_symtab_generics($137,$42);
  HEAP8[($40)]=$41;
  _lily_lexer($20);
  STACKTOP=sp;return (($39)|0);
 }
 $126=(($parser+72)|0);
 while(1) {
  _lily_lexer($20);
  _define_handler($parser,1);
  $127=((HEAP32[(($21)>>2)])|0);
  if (((($127|0))|0)==((35)|0)) {
   $129=((HEAP32[(($37)>>2)])|0);
   $130=((_keyword_by_name($129))|0);
   $131=($130|0)==15;
   if ($131) {
    continue;
   }
  } else if (((($127|0))|0)==((3)|0)) {
   break;
  }
  $133=((HEAP32[(($126)>>2)])|0);
  $134=((HEAP32[(($21)>>2)])|0);
  $135=((_tokname($134))|0);
  _lily_raise($133,1,16200,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$135,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $136=((HEAP32[(($1)>>2)])|0);
 _lily_emit_leave_block($136);
 HEAP32[(($50)>>2)]=$51;
 $137=((HEAP32[(($35)>>2)])|0);
 _lily_update_symtab_generics($137,$42);
 HEAP8[($40)]=$41;
 _lily_lexer($20);
 STACKTOP=sp;return (($39)|0);
}


function _ensure_no_code_after_exit($parser,$name){
 $parser=($parser)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 if (((($4|0))|0)==((35)|0)) {
  label = 2;
 } else if (((($4|0))|0)==((52)|0)|((($4|0))|0)==((51)|0)|((($4|0))|0)==((3)|0)) {
  STACKTOP=sp;return;
 }
 do {
  if ((label|0) == 2) {
   $6=(($2+12)|0);
   $7=((HEAP32[(($6)>>2)])|0);
   $8=((_keyword_by_name($7))|0);
   if (!(((($8|0))|0)==((17)|0)|((($8|0))|0)==((8)|0)|((($8|0))|0)==((7)|0)|((($8|0))|0)==((6)|0))) {
    break;
   }
   STACKTOP=sp;return;
  }
 } while(0);
 $9=(($parser+72)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 _lily_raise($10,1,4240,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$name,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _process_match_case($parser,$match_sym){
 $parser=($parser)|0;
 $match_sym=($match_sym)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$24=0,$25=0,$26=0,$i_03=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$i_0_lcssa=0,$variant_case_0=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$46=0,$47=0,$48=0,$49=0,$51=0,$52=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,$63=0,$64=0,$65=0;
 var $66=0,$67=0,$69=0,$70=0,$71=0,$72=0,$73=0,$75=0,$76=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0;
 var $i_11=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$100=0,$101=0,$103=0,$104=0,$105=0,$106=0,$108=0,$109=0,$111=0,$112=0;
 var $113=0,$114=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$123=0,$124=0,$125=0,$126=0,$127=0,$129=0,$130=0,$131=0,$132=0,$134=0,$135=0,$137=0;
 var $138=0,$139=0,$140=0,$141=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($match_sym+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($parser+52)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+40)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($8|0)==35;
 if (!($9)) {
  $11=(($parser+72)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=((_tokname(35))|0);
  $14=((HEAP32[(($7)>>2)])|0);
  $15=((_tokname($14))|0);
  _lily_raise($12,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$13,HEAP32[(((tempVarArgs)+(8))>>2)]=$15,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $16=(($4+44)|0);
 $17=((HEAP16[(($16)>>1)])|0);
 $18=(($17<<16)>>16)==0;
 L4: do {
  if ($18) {
   $variant_case_0=0;$i_0_lcssa=0;
  } else {
   $19=(($6+12)|0);
   $20=((HEAP32[(($19)>>2)])|0);
   $21=(($4+36)|0);
   $22=((HEAP32[(($21)>>2)])|0);
   $i_03=0;
   while(1) {

    $28=(($22+($i_03<<2))|0);
    $29=((HEAP32[(($28)>>2)])|0);
    $30=(($29+12)|0);
    $31=((HEAP32[(($30)>>2)])|0);
    $32=((_strcmp((($20)|0),(($31)|0)))|0);
    $33=($32|0)==0;
    $34=((($i_03)+(1))|0);
    if ($33) {
     $variant_case_0=$29;$i_0_lcssa=$i_03;
     break L4;
    }
    $24=((HEAP16[(($16)>>1)])|0);
    $25=($24&65535);
    $26=($34|0)<($25|0);
    if ($26) {
     $i_03=$34;
    } else {
     $variant_case_0=0;$i_0_lcssa=$34;
     break;
    }
   }
  }
 } while(0);


 $35=((HEAP16[(($16)>>1)])|0);
 $36=($35&65535);
 $37=($i_0_lcssa|0)==($36|0);
 if ($37) {
  $39=(($parser+72)|0);
  $40=((HEAP32[(($39)>>2)])|0);
  $41=(($6+12)|0);
  $42=((HEAP32[(($41)>>2)])|0);
  $43=(($4+12)|0);
  $44=((HEAP32[(($43)>>2)])|0);
  _lily_raise($40,1,16768,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$42,HEAP32[(((tempVarArgs)+(8))>>2)]=$44,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $46=(($parser+56)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=((_lily_emit_add_match_case($47,$i_0_lcssa))|0);
 $49=($48|0)==0;
 if ($49) {
  $51=(($parser+72)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=(($6+12)|0);
  $54=((HEAP32[(($53)>>2)])|0);
  _lily_raise($52,1,16712,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$54,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $56=(($variant_case_0+6)|0);
 $57=((HEAP16[(($56)>>1)])|0);
 $58=$57&32;
 $59=(($58<<16)>>16)==0;
 if ($59) {
  $61=(($variant_case_0+24)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=((HEAP32[(($46)>>2)])|0);
  $64=(($63+108)|0);
  $65=((HEAP32[(($64)>>2)])|0);
  _lily_lexer($6);
  $66=((HEAP32[(($7)>>2)])|0);
  $67=($66|0)==0;
  if (!($67)) {
   $69=(($parser+72)|0);
   $70=((HEAP32[(($69)>>2)])|0);
   $71=((_tokname(0))|0);
   $72=((HEAP32[(($7)>>2)])|0);
   $73=((_tokname($72))|0);
   _lily_raise($70,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$71,HEAP32[(((tempVarArgs)+(8))>>2)]=$73,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  _lily_lexer($6);
  $75=((HEAP32[(($7)>>2)])|0);
  $76=($75|0)==35;
  if (!($76)) {
   $78=(($parser+72)|0);
   $79=((HEAP32[(($78)>>2)])|0);
   $80=((_tokname(35))|0);
   $81=((HEAP32[(($7)>>2)])|0);
   $82=((_tokname($81))|0);
   _lily_raise($79,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$80,HEAP32[(((tempVarArgs)+(8))>>2)]=$82,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $83=(($62+10)|0);
  $84=((HEAP16[(($83)>>1)])|0);
  $85=((($84&65535))>>>0)>((1)>>>0);
  if ($85) {
   $86=(($62+12)|0);
   $87=(($parser+72)|0);
   $88=(($parser+72)|0);
   $i_11=1;
   while(1) {

    $90=((HEAP32[(($86)>>2)])|0);
    $91=(($90+($i_11<<2))|0);
    $92=((HEAP32[(($91)>>2)])|0);
    $93=((_lily_ts_resolve_by_second($65,$2,$92))|0);
    $94=((_get_named_var($parser,$93))|0);
    $95=((HEAP16[(($83)>>1)])|0);
    $96=($95&65535);
    $97=((($96)-(1))|0);
    $98=($i_11|0)==($97|0);
    do {
     if (!($98)) {
      $100=((HEAP32[(($7)>>2)])|0);
      $101=($100|0)==2;
      if (!($101)) {
       $103=((HEAP32[(($88)>>2)])|0);
       $104=((_tokname(2))|0);
       $105=((HEAP32[(($7)>>2)])|0);
       $106=((_tokname($105))|0);
       _lily_raise($103,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$104,HEAP32[(((tempVarArgs)+(8))>>2)]=$106,tempVarArgs))|0)); STACKTOP=tempVarArgs;
      }
      _lily_lexer($6);
      $108=((HEAP32[(($7)>>2)])|0);
      $109=($108|0)==35;
      if ($109) {
       break;
      }
      $111=((HEAP32[(($87)>>2)])|0);
      $112=((_tokname(35))|0);
      $113=((HEAP32[(($7)>>2)])|0);
      $114=((_tokname($113))|0);
      _lily_raise($111,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$112,HEAP32[(((tempVarArgs)+(8))>>2)]=$114,tempVarArgs))|0)); STACKTOP=tempVarArgs;
     }
    } while(0);
    $116=((($i_11)+(1))|0);
    $117=((HEAP16[(($83)>>1)])|0);
    $118=($117&65535);
    $119=($116|0)<($118|0);
    if ($119) {
     $i_11=$116;
    } else {
     break;
    }
   }
  }
  $120=((HEAP32[(($7)>>2)])|0);
  $121=($120|0)==1;
  if (!($121)) {
   $123=(($parser+72)|0);
   $124=((HEAP32[(($123)>>2)])|0);
   $125=((_tokname(1))|0);
   $126=((HEAP32[(($7)>>2)])|0);
   $127=((_tokname($126))|0);
   _lily_raise($124,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$125,HEAP32[(((tempVarArgs)+(8))>>2)]=$127,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $129=((HEAP32[(($46)>>2)])|0);
  $130=(($match_sym+8)|0);
  $131=((HEAP32[(($130)>>2)])|0);
  $132=(($131)&65535);
  _lily_emit_variant_decompose($129,$132,$62);
 }
 _lily_lexer($6);
 $134=((HEAP32[(($7)>>2)])|0);
 $135=($134|0)==6;
 if ($135) {
  _lily_lexer($6);
  STACKTOP=sp;return;
 }
 $137=(($parser+72)|0);
 $138=((HEAP32[(($137)>>2)])|0);
 $139=((_tokname(6))|0);
 $140=((HEAP32[(($7)>>2)])|0);
 $141=((_tokname($140))|0);
 _lily_raise($138,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$139,HEAP32[(((tempVarArgs)+(8))>>2)]=$141,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 _lily_lexer($6);
 STACKTOP=sp;return;
}


function _ensure_proper_match_block($parser,$match_sym){
 $parser=($parser)|0;
 $match_sym=($match_sym)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $22=0,$error_02=0,$i_01=0,$23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$error_1=0,$32=0,$33=0,$34=0,$35=0,$36=0,$error_2=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$44=0,$46=0,$47=0,$48=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+56)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+84)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+16)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=(($parser+72)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8+8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((HEAP32[(($1)>>2)])|0);
 $12=(($11+52)|0);
 $13=((HEAP16[(($12)>>1)])|0);
 $14=((($6&65535))>>>0)<((($13&65535))>>>0);
 if (!($14)) {
  STACKTOP=sp;return;
 }
 $15=(($match_sym+12)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($16)|0);
 $18=($6&65535);
 $19=((HEAP32[(($17)>>2)])|0);
 $20=(($19+36)|0);
 $i_01=$18;$error_02=0;$22=$11;
 while(1) {



  $23=(($22+4)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=(($24+($i_01<<2))|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=($26|0)==0;
  if ($27) {
   $29=($error_02|0)==0;
   if ($29) {
    _lily_msgbuf_add($10,16952);
    $error_1=1;
   } else {
    $error_1=$error_02;
   }

   $32=((HEAP32[(($20)>>2)])|0);
   $33=(($32+($i_01<<2))|0);
   $34=((HEAP32[(($33)>>2)])|0);
   $35=(($34+12)|0);
   $36=((HEAP32[(($35)>>2)])|0);
   _lily_msgbuf_add_fmt($10,16848,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$36,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   $error_2=$error_1;
  } else {
   $error_2=$error_02;
  }

  $38=((($i_01)+(1))|0);
  $39=((HEAP32[(($1)>>2)])|0);
  $40=(($39+52)|0);
  $41=((HEAP16[(($40)>>1)])|0);
  $42=($41&65535);
  $43=($38|0)<($42|0);
  if ($43) {
   $i_01=$38;$error_02=$error_2;$22=$39;
  } else {
   break;
  }
 }
 $44=($error_2|0)==0;
 if ($44) {
  STACKTOP=sp;return;
 }
 $46=((HEAP32[(($7)>>2)])|0);
 $47=(($10)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 _lily_raise($46,1,$48,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _ensure_valid_class($parser,$name){
 $parser=($parser)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$21=0,$22=0,$24=0,$25=0;
 var $26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$42=0,$43=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($name+1)|0);
 $2=((HEAP8[($1)])|0);
 $3=(($2<<24)>>24)==0;
 if ($3) {
  $5=(($parser+72)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  _lily_raise($6,1,17416,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$name,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $8=(($parser+56)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+84)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+22)|0);
 $13=$12;
 $14=((HEAP16[(($13)>>1)])|0);
 $15=(($14<<16)>>16)==15;
 do {
  if (!($15)) {
   $17=(($11+56)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   $19=($18|0)==0;
   if ($19) {
    break;
   }
   $21=(($parser+72)|0);
   $22=((HEAP32[(($21)>>2)])|0);
   _lily_raise($22,1,17368,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $24=(($parser+60)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=((_lily_find_class($25,0,$name))|0);
 $27=($26|0)==0;
 if (!($27)) {
  $29=(($parser+72)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  _lily_raise($30,1,17312,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$name,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $32=((HEAP32[(($24)>>2)])|0);
 $33=(($32+20)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=((_try_toplevel_dynaload($parser,$34,$name))|0);
 $36=($35|0)==0;
 if ($36) {
  STACKTOP=sp;return;
 }
 $38=(($35+4)|0);
 $39=((HEAP16[(($38)>>1)])|0);
 $40=(($39<<16)>>16)==1;
 if ($40) {
  STACKTOP=sp;return;
 }
 $42=(($parser+72)|0);
 $43=((HEAP32[(($42)>>2)])|0);
 _lily_raise($43,1,17240,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$name,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _parse_class_body($parser,$cls){
 $parser=($parser)|0;
 $cls=($cls)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$_pr=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($parser+19)|0);
 $6=((HEAP8[($5)])|0);
 $7=($6&255);
 _parse_class_header($parser,$cls);
 $8=(($2+40)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==19;
 if ($10) {
  _parse_inheritance($parser,$cls);
  $_pr=((HEAP32[(($8)>>2)])|0);
  $13=$_pr;
 } else {
  $13=$9;
 }

 $14=($13|0)==29;
 if (!($14)) {
  $16=(($parser+72)|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=((_tokname(29))|0);
  $19=((HEAP32[(($8)>>2)])|0);
  $20=((_tokname($19))|0);
  _lily_raise($17,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$18,HEAP32[(((tempVarArgs)+(8))>>2)]=$20,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _parse_multiline_block_body($parser,1);
 $22=((HEAP32[(($3)>>2)])|0);
 $23=(($22)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 _determine_class_gc_flag($24);
 HEAP32[(($3)>>2)]=$4;
 $25=(($parser+56)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 _lily_emit_leave_block($26);
 $27=(($parser+60)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 _lily_update_symtab_generics($28,$7);
 HEAP8[($5)]=$6;
 STACKTOP=sp;return;
}


function _parse_define($parser,$modifiers){
 $parser=($parser)|0;
 $modifiers=($modifiers)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0;
 var $47=0,$48=0,$49=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+56)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+84)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+22)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 do {
  if (!((((($7<<16)>>16))|0)==((15)|0)|(((($7<<16)>>16))|0)==((12)|0)|(((($7<<16)>>16))|0)==((13)|0)|(((($7<<16)>>16))|0)==((11)|0))) {
   $9=(($4+56)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=($10|0)==0;
   if ($11) {
    break;
   }
   $13=(($parser+72)|0);
   $14=((HEAP32[(($13)>>2)])|0);
   _lily_raise($14,1,9896,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $16=(($parser+52)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($parser+19)|0);
 $19=((HEAP8[($18)])|0);
 $20=($19&255);
 _parse_define_header($parser,$modifiers);
 $21=(($17+40)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($22|0)==29;
 if (!($23)) {
  $25=(($parser+72)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((_tokname(29))|0);
  $28=((HEAP32[(($21)>>2)])|0);
  $29=((_tokname($28))|0);
  _lily_raise($26,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$27,HEAP32[(((tempVarArgs)+(8))>>2)]=$29,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _parse_multiline_block_body($parser,1);
 $31=((HEAP32[(($1)>>2)])|0);
 _lily_emit_leave_block($31);
 $32=(($parser+60)|0);
 $33=((HEAP32[(($32)>>2)])|0);
 _lily_update_symtab_generics($33,$20);
 $34=((HEAP32[(($1)>>2)])|0);
 $35=(($34+84)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=(($36+22)|0);
 $38=$37;
 $39=((HEAP16[(($38)>>1)])|0);
 if (!((((($39<<16)>>16))|0)==((13)|0)|(((($39<<16)>>16))|0)==((11)|0))) {
  STACKTOP=sp;return;
 }
 $41=((HEAP32[(($32)>>2)])|0);
 $42=(($parser+40)|0);
 $43=((HEAP32[(($42)>>2)])|0);
 $44=(($43)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=(($41+24)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=(($47+32)|0);
 $49=((HEAP32[(($48)>>2)])|0);
 _lily_add_class_method($41,$45,$49);
 STACKTOP=sp;return;
}


function _parse_modifier($parser,$name,$modifier){
 $parser=($parser)|0;
 $name=($name)|0;
 $modifier=($modifier)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $25=0,$26=0,$27=0,$28=0,$32=0,$33=0,$34=0,$35=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+56)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+84)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+22)|0);
 $6=$5;
 $7=((HEAP16[(($6)>>1)])|0);
 $8=(($7<<16)>>16)==13;
 if (!($8)) {
  $10=(($parser+72)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  _lily_raise($11,1,10112,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$name,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $13=(($parser+52)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($14+40)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=($16|0)==35;
 if (!($17)) {
  $19=(($parser+72)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=((_tokname(35))|0);
  $22=((HEAP32[(($15)>>2)])|0);
  $23=((_tokname($22))|0);
  _lily_raise($20,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$21,HEAP32[(((tempVarArgs)+(8))>>2)]=$23,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $25=((HEAP32[(($13)>>2)])|0);
 $26=(($25+12)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=((_keyword_by_name($27))|0);
 if (((($28|0))|0)==((15)|0)) {
  _lily_lexer($14);
  _parse_define($parser,$modifier);
  STACKTOP=sp;return;
 } else if (((($28|0))|0)==((3)|0)) {
  _lily_lexer($14);
  _parse_var($parser,$modifier);
  STACKTOP=sp;return;
 } else {
  $32=(($parser+72)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=(($14+12)|0);
  $35=((HEAP32[(($34)>>2)])|0);
  _lily_raise($33,1,9992,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$35,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  STACKTOP=sp;return;
 }
}


function _new_empty_package($parser,$name){
 $parser=($parser)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;

 $1=((_lily_malloc(16))|0);
 $2=$1;
 $3=(($parser+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==0;
 if ($5) {
  $9=(($parser)|0);
  HEAP32[(($9)>>2)]=$2;
 } else {
  $7=(($4)|0);
  HEAP32[(($7)>>2)]=$2;
 }
 HEAP32[(($3)>>2)]=$2;
 $11=(($1+8)|0);
 $12=$11;
 HEAP32[(($12)>>2)]=0;
 $13=$1;
 HEAP32[(($13)>>2)]=0;
 $14=((_strlen((($name)|0)))|0);
 $15=((($14)+(1))|0);
 $16=((_lily_malloc($15))|0);
 $17=(($1+4)|0);
 $18=$17;
 HEAP32[(($18)>>2)]=$16;
 $19=((_strcpy((($16)|0),(($name)|0)))|0);
 return (($2)|0);
}


function _run_dynaload($parser,$m,$dyna_pos){
 $parser=($parser)|0;
 $m=($m)|0;
 $dyna_pos=($dyna_pos)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$14=0,$15=0,$_sum1=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$34=0,$35=0,$37=0,$38=0,$40=0,$41=0,$43=0,$44=0,$result_0=0;
 var label=0;

 $1=(($parser+60)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($m+44)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+($dyna_pos<<2))|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((HEAP8[($6)])|0);
 $8=(($2+24)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 HEAP32[(($8)>>2)]=$m;
 switch ((($7<<24)>>24)) {
 case 70: {
  $31=((_dynaload_function($parser,$m,0,$dyna_pos))|0);
  $32=$31;
  $result_0=$32;
  break;
 }
 case 66: {
  $37=((_dynaload_bootstrap($parser,$m,$dyna_pos))|0);
  $38=$37;
  $result_0=$38;
  break;
 }
 case 69: {
  $43=((_dynaload_enum($parser,$m,$dyna_pos))|0);
  $44=$43;
  $result_0=$44;
  break;
 }
 case 86: {
  $40=((_dynaload_variant($parser,$m,$dyna_pos))|0);
  $41=$40;
  $result_0=$41;
  break;
 }
 case 67: {
  $34=((_dynaload_class($parser,$m,$dyna_pos))|0);
  $35=$34;
  $result_0=$35;
  break;
 }
 case 82: {
  $11=((HEAP32[(($3)>>2)])|0);
  $12=(($11+($dyna_pos<<2))|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=(($13+2)|0);
  $15=((_strlen((($14)|0)))|0);
  $_sum1=((($15)+(3))|0);
  $16=(($13+$_sum1)|0);
  $17=((_type_by_name($parser,$16))|0);
  $18=(($parser+56)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=((_lily_emit_new_dyna_var($19,$m,$17,$14))|0);
  _update_cid_table($parser,$m);
  $21=(($m+48)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=(($parser+76)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=(($m+52)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((FUNCTION_TABLE_iiii[($22)&15]($24,$26,$dyna_pos))|0);
  $28=((_lily_new_foreign_tie($2,$20,$27))|0);
  $29=$20;
  $result_0=$29;
  break;
 }
 default: {
  $result_0=0;
 }
 }

 HEAP32[(($8)>>2)]=$9;
 return (($result_0)|0);
}


function _collect_generics_or($parser,$fallback){
 $parser=($parser)|0;
 $fallback=($fallback)|0;
 var $name=0,$1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$ch_0=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$21=0;
 var $22=0,$23=0,$25=0,$26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$new_count_0=0,$45=0,$46=0;
 var $47=0,$48=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $name=((sp)|0);
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==4;
 if (!($5)) {
  $new_count_0=$fallback;

  $45=(($new_count_0)&255);
  $46=(($parser+19)|0);
  HEAP8[($46)]=$45;
  $47=(($parser+60)|0);
  $48=((HEAP32[(($47)>>2)])|0);
  _lily_update_symtab_generics($48,$new_count_0);
  STACKTOP=sp;return;
 }
 HEAP16[(($name)>>1)]=65;
 $7=$name;
 $8=((HEAP8[($7)])|0);
 $9=(($2+12)|0);
 $10=(($parser+72)|0);
 $11=(($parser+72)|0);
 $12=(($parser+72)|0);
 $ch_0=$8;
 while(1) {

  _lily_lexer($2);
  $13=((HEAP32[(($3)>>2)])|0);
  $14=($13|0)==35;
  if (!($14)) {
   $16=((HEAP32[(($12)>>2)])|0);
   $17=((_tokname(35))|0);
   $18=((HEAP32[(($3)>>2)])|0);
   $19=((_tokname($18))|0);
   _lily_raise($16,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$17,HEAP32[(((tempVarArgs)+(8))>>2)]=$19,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $21=((HEAP32[(($9)>>2)])|0);
  $22=((HEAP8[($21)])|0);
  $23=(($22<<24)>>24)==(($ch_0<<24)>>24);
  if ($23) {
   $25=(($21+1)|0);
   $26=((HEAP8[($25)])|0);
   $27=(($26<<24)>>24)==0;
   if (!($27)) {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   HEAP8[($7)]=$ch_0;
   $29=((HEAP32[(($11)>>2)])|0);
   $30=((HEAP32[(($9)>>2)])|0);
   _lily_raise($29,1,7504,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$name,HEAP32[(((tempVarArgs)+(8))>>2)]=$30,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $32=((($ch_0)+(1))&255);
  _lily_lexer($2);
  $33=((HEAP32[(($3)>>2)])|0);
  if (((($33|0))|0)==((2)|0)) {
   $ch_0=$32;
   continue;
  } else if (((($33|0))|0)==((33)|0)) {
   break;
  }
  $42=((HEAP32[(($10)>>2)])|0);
  $43=((_tokname($33))|0);
  _lily_raise($42,1,9256,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$43,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $ch_0=$32;
 }
 _lily_lexer($2);
 $35=(($32<<24)>>24);
 $36=((($35)-(65))|0);
 $37=(($parser+56)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=(($38+108)|0);
 $40=((HEAP32[(($39)>>2)])|0);
 _lily_ts_generics_seen($40,$36);
 $new_count_0=$36;

 $45=(($new_count_0)&255);
 $46=(($parser+19)|0);
 HEAP8[($46)]=$45;
 $47=(($parser+60)|0);
 $48=((HEAP32[(($47)>>2)])|0);
 _lily_update_symtab_generics($48,$new_count_0);
 STACKTOP=sp;return;
}


function _get_nameless_arg($parser,$flags){
 $parser=($parser)|0;
 $flags=($flags)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$47=0,$48=0,$50=0,$51=0;
 var $53=0,$54=0,$55=0,$56=0,$58=0,$59=0,$61=0,$62=0,$64=0,$65=0,$type_0=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==11;
 $6=((HEAP32[(($flags)>>2)])|0);
 do {
  if ($5) {
   $8=$6|8;
   HEAP32[(($flags)>>2)]=$8;
   _lily_lexer($2);
  } else {
   $10=$6&8;
   $11=($10|0)==0;
   if ($11) {
    break;
   }
   $13=(($parser+72)|0);
   $14=((HEAP32[(($13)>>2)])|0);
   _lily_raise($14,1,9128,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $16=((_get_type($parser))|0);
 $17=((HEAP32[(($flags)>>2)])|0);
 $18=$17&8;
 $19=($18|0)==0;
 if (!($19)) {
  $21=(($16)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  $23=(($22+6)|0);
  $24=((HEAP16[(($23)>>1)])|0);
  $25=$24&2;
  $26=(($25<<16)>>16)==0;
  if ($26) {
   $28=(($parser+72)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   _lily_raise($29,1,8968,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$16,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $31=(($parser+60)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=(($32+88)|0);
  $34=((HEAP32[(($33)>>2)])|0);
  $35=((_make_type_of_class($parser,$34,$16))|0);
  $type_0=$35;

  STACKTOP=sp;return (($type_0)|0);
 }
 $37=((HEAP32[(($3)>>2)])|0);
 $38=($37|0)==48;
 if ($38) {
  $40=(($parser+60)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=(($41+76)|0);
  $43=((HEAP32[(($42)>>2)])|0);
  $44=((_make_type_of_class($parser,$43,$16))|0);
  _lily_lexer($2);
  $45=((HEAP32[(($3)>>2)])|0);
  if (!(((($45|0))|0)==((34)|0)|((($45|0))|0)==((1)|0))) {
   $47=(($parser+72)|0);
   $48=((HEAP32[(($47)>>2)])|0);
   _lily_raise($48,1,8856,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $50=((HEAP32[(($flags)>>2)])|0);
  $51=$50|1;
  HEAP32[(($flags)>>2)]=$51;
  $type_0=$44;

  STACKTOP=sp;return (($type_0)|0);
 }
 $53=(($16+6)|0);
 $54=((HEAP16[(($53)>>1)])|0);
 $55=$54&32;
 $56=(($55<<16)>>16)==0;
 if ($56) {
  $type_0=$16;

  STACKTOP=sp;return (($type_0)|0);
 }
 $58=$17&16384;
 $59=($58|0)==0;
 if ($59) {
  $61=(($parser+72)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  _lily_raise($62,1,8680,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $64=((HEAP32[(($flags)>>2)])|0);
 $65=$64|32;
 HEAP32[(($flags)>>2)]=$65;
 $type_0=$16;

 STACKTOP=sp;return (($type_0)|0);
}


function _get_type($parser){
 $parser=($parser)|0;
 var $arg_flags=0,$1=0,$2=0,$3=0,$4=0,$6=0,$8=0,$ld$0$0=0,$9$0=0,$ld$1$1=0,$9$1=0,$10$0=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$cls_0=0;
 var $19=0,$20=0,$21=0,$22=0,$24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$39=0,$41=0,$42=0,$43=0,$44=0;
 var $45=0,$46=0,$47=0,$i_0=0,$49=0,$50=0,$51=0,$53=0,$54=0,$phitmp6=0,$56=0,$57=0,$59=0,$61=0,$62=0,$63=0,$64=0,$65=0,$67=0,$68=0;
 var $69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$i1_01=0,$phitmp=0,$76=0,$77=0,$78=0,$79=0,$80=0,$i1_1=0,$81=0,$83=0,$84=0,$86=0,$87=0;
 var $89=0,$90=0,$91=0,$92=0,$93=0,$95=0,$96=0,$97=0,$98=0,$result_0=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $arg_flags=((sp)|0);
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 if (((($4|0))|0)==((40)|0)) {
  $8=(($2+32)|0);
  $ld$0$0=(($8)|0);
  $9$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($8+4)|0);
  $9$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $10$0=$9$0;
  $10=$10$0;
  $11=((_get_scoop_class($parser,$10))|0);
  $cls_0=$11;
 } else if (((($4|0))|0)==((35)|0)) {
  $6=((_resolve_class_name($parser))|0);
  $cls_0=$6;
 } else {
  $13=(($parser+72)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  $15=((_tokname(35))|0);
  $16=((HEAP32[(($3)>>2)])|0);
  $17=((_tokname($16))|0);
  _lily_raise($14,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$15,HEAP32[(((tempVarArgs)+(8))>>2)]=$17,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  $cls_0=0;
 }

 $19=(($cls_0+6)|0);
 $20=((HEAP16[(($19)>>1)])|0);
 $21=$20&8;
 $22=(($21<<16)>>16)==0;
 if (!($22)) {
  $24=(($parser+72)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  _lily_raise($25,1,9344,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $27=(($cls_0+42)|0);
 $28=((HEAP16[(($27)>>1)])|0);
 $29=(($28<<16)>>16)==0;
 if ($29) {
  $31=(($cls_0+24)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $result_0=$32;

  _lily_lexer($2);
  STACKTOP=sp;return (($result_0)|0);
 }
 $34=(($cls_0+40)|0);
 $35=((HEAP16[(($34)>>1)])|0);
 $36=(($35<<16)>>16)==5;
 _lily_lexer($2);
 $37=((HEAP32[(($3)>>2)])|0);
 if (!($36)) {
  $39=($37|0)==4;
  if (!($39)) {
   $41=(($parser+72)|0);
   $42=((HEAP32[(($41)>>2)])|0);
   $43=((_tokname(4))|0);
   $44=((HEAP32[(($3)>>2)])|0);
   $45=((_tokname($44))|0);
   _lily_raise($42,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$43,HEAP32[(((tempVarArgs)+(8))>>2)]=$45,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $46=(($parser+68)|0);
  $47=(($parser+72)|0);
  $i_0=1;
  while(1) {

   _lily_lexer($2);
   $49=((HEAP32[(($46)>>2)])|0);
   $50=((_get_type($parser))|0);
   _lily_tm_add($49,$50);
   $51=((HEAP32[(($3)>>2)])|0);
   if (((($51|0))|0)==((33)|0)) {
    break;
   } else if (!(((($51|0))|0)==((2)|0))) {
    $53=((HEAP32[(($47)>>2)])|0);
    $54=((_tokname($51))|0);
    _lily_raise($53,1,9256,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$54,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   $phitmp6=((($i_0)+(1))|0);
   $i_0=$phitmp6;
  }
  $56=((HEAP32[(($46)>>2)])|0);
  $57=((_lily_tm_make($56,0,$cls_0,$i_0))|0);
  _ensure_valid_type($parser,$57);
  $result_0=$57;

  _lily_lexer($2);
  STACKTOP=sp;return (($result_0)|0);
 }
 $59=($37|0)==0;
 if (!($59)) {
  $61=(($parser+72)|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=((_tokname(0))|0);
  $64=((HEAP32[(($3)>>2)])|0);
  $65=((_tokname($64))|0);
  _lily_raise($62,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$63,HEAP32[(((tempVarArgs)+(8))>>2)]=$65,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 HEAP32[(($arg_flags)>>2)]=0;
 $67=(($parser+68)|0);
 $68=((HEAP32[(($67)>>2)])|0);
 $69=(($68+4)|0);
 $70=((HEAP32[(($69)>>2)])|0);
 _lily_tm_add($68,0);
 $71=((HEAP32[(($3)>>2)])|0);
 do {
  if (((($71|0))|0)==((34)|0)|((($71|0))|0)==((1)|0)) {
   $i1_1=0;$80=$71;
  } else {
   $72=((HEAP32[(($67)>>2)])|0);
   $73=((_get_nameless_arg($parser,$arg_flags))|0);
   _lily_tm_add($72,$73);
   $74=((HEAP32[(($3)>>2)])|0);
   $75=($74|0)==2;
   if ($75) {
    $i1_01=1;
   } else {
    $i1_1=1;$80=$74;
    break;
   }
   while(1) {

    _lily_lexer($2);
    $phitmp=((($i1_01)+(1))|0);
    $76=((HEAP32[(($67)>>2)])|0);
    $77=((_get_nameless_arg($parser,$arg_flags))|0);
    _lily_tm_add($76,$77);
    $78=((HEAP32[(($3)>>2)])|0);
    $79=($78|0)==2;
    if ($79) {
     $i1_01=$phitmp;
    } else {
     $i1_1=$phitmp;$80=$78;
     break;
    }
   }
  }
 } while(0);


 $81=($80|0)==34;
 if ($81) {
  _lily_lexer($2);
  $83=((HEAP32[(($67)>>2)])|0);
  $84=((_get_type($parser))|0);
  _lily_tm_insert($83,$70,$84);
 }
 $86=((HEAP32[(($3)>>2)])|0);
 $87=($86|0)==1;
 if (!($87)) {
  $89=(($parser+72)|0);
  $90=((HEAP32[(($89)>>2)])|0);
  $91=((_tokname(1))|0);
  $92=((HEAP32[(($3)>>2)])|0);
  $93=((_tokname($92))|0);
  _lily_raise($90,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$91,HEAP32[(((tempVarArgs)+(8))>>2)]=$93,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $95=((HEAP32[(($67)>>2)])|0);
 $96=((HEAP32[(($arg_flags)>>2)])|0);
 $97=((($i1_1)+(1))|0);
 $98=((_lily_tm_make($95,$96,$cls_0,$97))|0);
 $result_0=$98;

 _lily_lexer($2);
 STACKTOP=sp;return (($result_0)|0);
}


function _rewind_expr_state($es){
 $es=($es)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;

 $1=(($es)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($es+4)|0);
 HEAP32[(($2)>>2)]=0;
 $3=(($es+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($es+8)|0);
 HEAP32[(($5)>>2)]=$4;
 return;
}


function _expression_raw($parser,$state){
 $parser=($parser)|0;
 $state=($state)|0;
 var $1=0,$2=0,$3=0,$4=0,$_state=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$37=0,$39=0,$40=0,$42=0,$44=0,$49=0,$50=0,$51=0,$53=0;
 var $55=0,$57=0,$59=0,$60=0,$61=0,$63=0,$65=0,$67=0,$69=0,$70=0,$74=0,$75=0,$78=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$89=0;
 var $91=0,$92=0,$94=0,$95=0,$96=0,$97=0,$104=0,$105=0,$107=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$120=0;
 var $123=0,$124=0,$125=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$or_cond5=0,$135=0,$_pr=0,$139=0,$140=0,$141=0,$142=0,$143=0,$145=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $1=((sp)|0);
 $2=(($parser+52)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=($state|0)==4;
 $_state=($4?3:$state);
 HEAP32[(($1)>>2)]=$_state;
 $5=(($3+40)|0);
 $6=(($parser+24)|0);
 $7=(($parser+72)|0);
 $8=(($parser+24)|0);
 $9=(($parser+24)|0);
 $10=(($parser+24)|0);
 $11=(($parser+24)|0);
 $12=(($parser+24)|0);
 $13=(($parser+24)|0);
 $14=(($parser+24)|0);
 $15=(($parser+24)|0);
 $16=(($parser+24)|0);
 $17=(($parser+28)|0);
 $18=(($3+12)|0);
 $19=(($3+20)|0);
 $20=(($parser+24)|0);
 L1: while(1) {
  $21=((HEAP32[(($5)>>2)])|0);
  $22=((640+((($21)*(12))&-1)+8)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=($21|0)==35;
  L3: do {
   if ($24) {
    $26=((HEAP32[(($1)>>2)])|0);
    $27=($26|0)==2;
    if (!($27)) {
     _expression_word($parser,$1);
     label = 51;
     break;
    }
    $29=((HEAP32[(($6)>>2)])|0);
    $30=(($29+20)|0);
    $31=((HEAP16[(($30)>>1)])|0);
    $32=(($31<<16)>>16)==0;
    if ($32) {
     label = 5;
     break L1;
    }
    HEAP32[(($1)>>2)]=6;
    label = 52;
   } else {
    $37=($23|0)==-1;
    if (!($37)) {
     $39=((HEAP32[(($1)>>2)])|0);
     $40=($39|0)==2;
     if ($40) {
      $42=((HEAP32[(($20)>>2)])|0);
      _lily_es_push_binary_op($42,$23);
      HEAP32[(($1)>>2)]=1;
      label = 55;
      break;
     }
     $44=($21|0)==17;
     if ($44) {
      _expression_unary($parser,$1);
      label = 51;
      break;
     } else {
      HEAP32[(($1)>>2)]=6;
      label = 52;
      break;
     }
    }
    switch (($21|0)) {
    case 0: {
     $49=((HEAP32[(($1)>>2)])|0);
     $50=$49&-3;
     $51=($50|0)==1;
     if ($51) {
      $53=((HEAP32[(($9)>>2)])|0);
      _lily_es_enter_tree($53,4);
      HEAP32[(($1)>>2)]=1;
      label = 55;
      break L3;
     }
     $55=($49|0)==2;
     if (!($55)) {
      label = 51;
      break L3;
     }
     $57=((HEAP32[(($10)>>2)])|0);
     _lily_es_enter_tree($57,0);
     HEAP32[(($1)>>2)]=3;
     label = 55;
     break L3;
     break;
    }
    case 31: {
     $74=((HEAP32[(($1)>>2)])|0);
     $75=($74|0)==2;
     if ($75) {
      label = 27;
      break L1;
     }
     $78=((HEAP32[(($13)>>2)])|0);
     _lily_es_enter_tree($78,12);
     HEAP32[(($1)>>2)]=3;
     label = 55;
     break L3;
     break;
    }
    case 1:case 33:case 32: {
     $80=((HEAP32[(($1)>>2)])|0);
     $81=($80|0)==1;
     do {
      if (!($81)) {
       $83=((HEAP32[(($14)>>2)])|0);
       $84=(($83+20)|0);
       $85=((HEAP16[(($84)>>1)])|0);
       $86=(($85<<16)>>16)==0;
       if ($86) {
        break;
       }
       _check_valid_close_tok($parser);
       $89=((HEAP32[(($14)>>2)])|0);
       _lily_es_leave_tree($89);
       do {
        if ($4) {
         $91=((HEAP32[(($5)>>2)])|0);
         $92=($91|0)==1;
         if (!($92)) {
          break;
         }
         $94=((HEAP32[(($14)>>2)])|0);
         $95=(($94+20)|0);
         $96=((HEAP16[(($95)>>1)])|0);
         $97=(($96<<16)>>16)==0;
         if ($97) {
          label = 36;
          break L1;
         }
        }
       } while(0);
       HEAP32[(($1)>>2)]=2;
       label = 55;
       break L3;
      }
     } while(0);
     HEAP32[(($1)>>2)]=6;
     label = 52;
     break L3;
     break;
    }
    case 40:case 41:case 37:case 38:case 39: {
     _expression_literal($parser,$1);
     label = 51;
     break L3;
     break;
    }
    case 42: {
     _expression_dot($parser,$1);
     label = 51;
     break L3;
     break;
    }
    case 17:case 7: {
     _expression_unary($parser,$1);
     label = 51;
     break L3;
     break;
    }
    case 30: {
     $104=((HEAP32[(($1)>>2)])|0);
     $105=($104|0)==2;
     if ($105) {
      $107=((HEAP32[(($15)>>2)])|0);
      _lily_es_enter_tree($107,0);
     }
     $109=((HEAP32[(($16)>>2)])|0);
     $110=(($109+24)|0);
     $111=((HEAP16[(($110)>>1)])|0);
     $112=($111&65535);
     $113=((HEAP32[(($17)>>2)])|0);
     $114=((HEAP32[(($18)>>2)])|0);
     _lily_sp_insert($113,$114,$110);
     $115=((HEAP32[(($16)>>2)])|0);
     $116=((HEAP32[(($19)>>2)])|0);
     _lily_es_push_text($115,15,$116,$112);
     $117=((HEAP32[(($1)>>2)])|0);
     $118=($117|0)==2;
     if ($118) {
      $120=((HEAP32[(($16)>>2)])|0);
      _lily_es_leave_tree($120);
     }
     HEAP32[(($1)>>2)]=2;
     label = 55;
     break L3;
     break;
    }
    case 36: {
     $69=((HEAP32[(($1)>>2)])|0);
     $70=($69|0)==2;
     if ($70) {
      label = 24;
      break L1;
     }
     _expression_property($parser,$1);
     label = 51;
     break L3;
     break;
    }
    case 4: {
     $59=((HEAP32[(($1)>>2)])|0);
     $60=$59&-3;
     $61=($60|0)==1;
     if ($61) {
      $63=((HEAP32[(($11)>>2)])|0);
      _lily_es_enter_tree($63,2);
      HEAP32[(($1)>>2)]=3;
      label = 55;
      break L3;
     }
     $65=($59|0)==2;
     if (!($65)) {
      label = 51;
      break L3;
     }
     $67=((HEAP32[(($12)>>2)])|0);
     _lily_es_enter_tree($67,1);
     HEAP32[(($1)>>2)]=1;
     label = 55;
     break L3;
     break;
    }
    default: {
     $123=((640+((($21)*(12))&-1)+4)|0);
     $124=((HEAP32[(($123)>>2)])|0);
     $125=($124|0)==0;
     if (!($125)) {
      $127=((HEAP32[(($8)>>2)])|0);
      $128=(($127+20)|0);
      $129=((HEAP16[(($128)>>1)])|0);
      $130=(($129<<16)>>16)==0;
      $131=((HEAP32[(($1)>>2)])|0);
      $132=($131|0)==2;
      $or_cond5=$130&$132;
      if ($or_cond5) {
       label = 47;
       break L1;
      }
     }
     $135=((HEAP32[(($5)>>2)])|0);
     if (((($135|0))|0)==((2)|0)|((($135|0))|0)==((34)|0)) {
      _expression_comma_arrow($parser,$1);
      label = 51;
      break L3;
     } else {
      HEAP32[(($1)>>2)]=6;
      label = 52;
      break L3;
     }
    }
    }
   }
  } while(0);
  do {
   if ((label|0) == 51) {
    label = 0;
    $_pr=((HEAP32[(($1)>>2)])|0);
    if (((($_pr|0))|0)==((6)|0)) {
     label = 52;
     break;
    } else if (((($_pr|0))|0)==((5)|0)) {
     label = 56;
     break L1;
    }
    $142=$_pr&8;
    $143=($142|0)==0;
    if ($143) {
     label = 55;
     break;
    }
    $145=$_pr&-9;
    HEAP32[(($1)>>2)]=$145;
    continue L1;
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   $139=((HEAP32[(($7)>>2)])|0);
   $140=((HEAP32[(($5)>>2)])|0);
   $141=((_tokname($140))|0);
   _lily_raise($139,1,12040,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$141,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   continue;
  }
  else if ((label|0) == 55) {
   label = 0;
   _lily_lexer($3);
   continue;
  }
 }
 if ((label|0) == 5) {
  HEAP32[(($1)>>2)]=5;
  STACKTOP=sp;return;
 }
 else if ((label|0) == 24) {
  HEAP32[(($1)>>2)]=5;
  STACKTOP=sp;return;
 }
 else if ((label|0) == 27) {
  HEAP32[(($1)>>2)]=5;
  STACKTOP=sp;return;
 }
 else if ((label|0) == 36) {
  HEAP32[(($1)>>2)]=5;
  STACKTOP=sp;return;
 }
 else if ((label|0) == 47) {
  HEAP32[(($1)>>2)]=5;
  STACKTOP=sp;return;
 }
 else if ((label|0) == 56) {
  STACKTOP=sp;return;
 }
}


function _get_named_var($parser,$var_type){
 $parser=($parser)|0;
 $var_type=($var_type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+60)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((_lily_find_var($4,0,$6))|0);
 $8=($7|0)==0;
 if (!($8)) {
  $10=(($parser+72)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=((HEAP32[(($5)>>2)])|0);
  _lily_raise($11,1,7976,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$12,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $14=(($parser+56)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((HEAP32[(($5)>>2)])|0);
 $17=((_lily_emit_new_scoped_var($15,$var_type,$16))|0);
 _lily_lexer($2);
 STACKTOP=sp;return (($17)|0);
}


function _set_module_names_by_path($module,$path){
 $module=($module)|0;
 $path=($path)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$slash_0=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,label=0;

 $1=((HEAP8[($path)])|0);
 $2=(($1<<24)>>24)==91;
 if ($2) {
  $4=((_lily_malloc(1))|0);
  $5=(($module+12)|0);
  HEAP32[(($5)>>2)]=$4;
  HEAP8[($4)]=0;
  $6=((_lily_malloc(3))|0);
  $7=(($module+16)|0);
  HEAP32[(($7)>>2)]=$6;
  HEAP8[($6)]=((HEAP8[(14200)])|0);HEAP8[((($6)+(1))|0)]=((HEAP8[(14201)])|0);HEAP8[((($6)+(2))|0)]=((HEAP8[(14202)])|0);
  $8=(($module+10)|0);
  HEAP16[(($8)>>1)]=0;
  return;
 }
 $10=((_strrchr((($path)|0),((47)|0)))|0);
 $11=($10|0)==0;
 if ($11) {
  $13=((_lily_malloc(1))|0);
  $14=(($module+16)|0);
  HEAP32[(($14)>>2)]=$13;
  HEAP8[($13)]=0;
  $slash_0=$path;
 } else {
  $16=(($10+1)|0);
  $17=$16;
  $18=$path;
  $19=((($17)-($18))|0);
  $20=((($19)+(1))|0);
  $21=((_lily_malloc($20))|0);
  $22=(($module+16)|0);
  HEAP32[(($22)>>2)]=$21;
  $23=((_strncpy((($21)|0),(($path)|0),(($19)|0)))|0);
  $24=((HEAP32[(($22)>>2)])|0);
  $25=(($24+$19)|0);
  HEAP8[($25)]=0;
  $slash_0=$16;
 }

 $27=((_strrchr((($slash_0)|0),((46)|0)))|0);
 $28=$27;
 $29=$slash_0;
 $30=((($28)-($29))|0);
 $31=((($30)+(1))|0);
 $32=((_lily_malloc($31))|0);
 $33=(($module+12)|0);
 HEAP32[(($33)>>2)]=$32;
 $34=((_strncpy((($32)|0),(($slash_0)|0),(($30)|0)))|0);
 $35=((HEAP32[(($33)>>2)])|0);
 $36=(($35+$30)|0);
 HEAP8[($36)]=0;
 $37=(($module+16)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=((_strlen((($38)|0)))|0);
 $40=((($39)+($30))|0);
 $41=(($40)&65535);
 $42=(($module+10)|0);
 HEAP16[(($42)>>1)]=$41;
 return;
}


function _update_all_cid_tables($parser){
 $parser=($parser)|0;
 var $1=0,$package_iter_03=0,$2=0,$package_iter_04=0,$3=0,$entry_iter_01=0,$4=0,$entry_iter_02=0,$5=0,$6=0,$7=0,$10=0,$entry_iter_0=0,$11=0,$12=0,$package_iter_0=0,$13=0,label=0;

 $1=(($parser)|0);
 $package_iter_03=((HEAP32[(($1)>>2)])|0);
 $2=($package_iter_03|0)==0;
 if ($2) {
  return;
 } else {
  $package_iter_04=$package_iter_03;
 }
 while(1) {

  $3=(($package_iter_04+12)|0);
  $entry_iter_01=((HEAP32[(($3)>>2)])|0);
  $4=($entry_iter_01|0)==0;
  if (!($4)) {
   $entry_iter_02=$entry_iter_01;
   while(1) {

    $5=(($entry_iter_02+52)|0);
    $6=((HEAP32[(($5)>>2)])|0);
    $7=($6|0)==0;
    if (!($7)) {
     _update_cid_table($parser,$entry_iter_02);
    }
    $10=(($entry_iter_02)|0);
    $entry_iter_0=((HEAP32[(($10)>>2)])|0);
    $11=($entry_iter_0|0)==0;
    if ($11) {
     break;
    } else {
     $entry_iter_02=$entry_iter_0;
    }
   }
  }
  $12=(($package_iter_04)|0);
  $package_iter_0=((HEAP32[(($12)>>2)])|0);
  $13=($package_iter_0|0)==0;
  if ($13) {
   break;
  } else {
   $package_iter_04=$package_iter_0;
  }
 }
 return;
}


function _shorthash_for_name456($name){
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$ret_05$0=0,$ret_05$1=0,$shift_04=0,$i_03=0,$ch_02=0,$4$0=0,$4$1=0,$5$0=0,$5$1=0,$7$0=0,$7$1=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0;
 var $or_cond=0,$ret_0_lcssa$0=0,$ret_0_lcssa$1=0,$6$0=0,$6$1=0,label=0;

 $1=((HEAP8[($name)])|0);
 $2=(($1<<24)>>24)==0;
 if ($2) {
  $ret_0_lcssa$1=0;$ret_0_lcssa$0=0;


  return (((tempRet0=$ret_0_lcssa$1,$ret_0_lcssa$0))|0);
 } else {
  $ch_02=$name;$i_03=0;$shift_04=0;$ret_05$1=0;$ret_05$0=0;$3=$1;
 }
 while(1) {






  $4$0=(($3<<24)>>24);
  $4$1=(((((($3<<24)>>24)<0))|0)?-1:0);
  $5$0=$shift_04;
  $5$1=0;
  $6$0=((_bitshift64Shl((($4$0)|0),(($4$1)|0),(($5$0)|0)))|0);$6$1=tempRet0;
  $7$0=$6$0|$ret_05$0;
  $7$1=$6$1|$ret_05$1;
  $8=(($ch_02+1)|0);
  $9=((($i_03)+(1))|0);
  $10=((($shift_04)+(8))|0);
  $11=((HEAP8[($8)])|0);
  $12=(($11<<24)>>24)!=0;
  $13=($9|0)!=8;
  $or_cond=$12&$13;
  if ($or_cond) {
   $ch_02=$8;$i_03=$9;$shift_04=$10;$ret_05$1=$7$1;$ret_05$0=$7$0;$3=$11;
  } else {
   $ret_0_lcssa$1=$7$1;$ret_0_lcssa$0=$7$0;
   break;
  }
 }


 return (((tempRet0=$ret_0_lcssa$1,$ret_0_lcssa$0))|0);
}


function _bad_decl_token($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$_=0,$6=0,$7=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==35;
 $_=($5?4896:4784);
 $6=(($parser+72)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 _lily_raise($7,1,$_,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _get_named_property($parser,$flags){
 $parser=($parser)|0;
 $flags=($flags)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$22=0,$23=0,$24=0;
 var $25=0,$26=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($parser+40)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((_lily_find_member($8,$4))|0);
 $10=($9|0)==0;
 do {
  if (!($10)) {
   $12=(($9+4)|0);
   $13=((HEAP16[(($12)>>1)])|0);
   $14=(($13<<16)>>16)==1;
   $15=(($parser+72)|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=(($8+12)|0);
   $18=((HEAP32[(($17)>>2)])|0);
   if ($14) {
    _lily_raise($16,1,5192,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$18,HEAP32[(((tempVarArgs)+(8))>>2)]=$4,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    break;
   } else {
    _lily_raise($16,1,5064,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$4,HEAP32[(((tempVarArgs)+(8))>>2)]=$18,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    break;
   }
  }
 } while(0);
 $22=(($parser+60)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=$flags&-2;
 $25=((_lily_add_class_property($23,$8,0,$4,$24))|0);
 $26=((HEAP32[(($1)>>2)])|0);
 _lily_lexer($26);
 STACKTOP=sp;return (($25)|0);
}


function _find_run_class_dynaload($parser,$m,$name){
 $parser=($parser)|0;
 $m=($m)|0;
 $name=($name)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$8=0,$_0=0,label=0;

 $1=((_try_toplevel_dynaload($parser,$m,$name))|0);
 $2=($1|0)==0;
 do {
  if ($2) {
   $_0=0;
  } else {
   $4=(($1+4)|0);
   $5=((HEAP16[(($4)>>1)])|0);
   $6=(($5<<16)>>16)==1;
   if ($6) {
    $_0=0;
    break;
   }
   $8=$1;
   $_0=$8;
  }
 } while(0);

 return (($_0)|0);
}


function _build_self_type($parser,$cls,$generics_used){
 $parser=($parser)|0;
 $cls=($cls)|0;
 $generics_used=($generics_used)|0;
 var $name=0,$1=0,$2=0,$3=0,$4=0,$_01=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$23=0,$24=0,$25=0,$result_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $name=((sp)|0);
 $1=($generics_used|0)==0;
 if ($1) {
  $23=(($parser+68)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=((_lily_tm_make_default_for($24,$cls))|0);
  $result_0=$25;

  STACKTOP=sp;return (($result_0)|0);
 }
 HEAP16[(($name)>>1)]=65;
 $2=(($parser+60)|0);
 $3=$name;
 $4=(($parser+68)|0);
 $_01=$generics_used;
 while(1) {

  $6=((HEAP32[(($2)>>2)])|0);
  $7=((_lily_find_class($6,0,$3))|0);
  $8=((HEAP32[(($4)>>2)])|0);
  $9=(($7+24)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  _lily_tm_add($8,$10);
  $11=((HEAP8[($3)])|0);
  $12=((($11)+(1))&255);
  HEAP8[($3)]=$12;
  $13=((($_01)-(1))|0);
  $14=($13|0)==0;
  if ($14) {
   break;
  } else {
   $_01=$13;
  }
 }
 $15=(($parser+68)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=$name;
 $18=((HEAP8[($17)])|0);
 $19=(($18<<24)>>24);
 $20=((($19)-(65))|0);
 $21=((_lily_tm_make($16,0,$cls,$20))|0);
 $result_0=$21;

 STACKTOP=sp;return (($result_0)|0);
}


function _parse_variant_header($parser,$variant_cls){
 $parser=($parser)|0;
 $variant_cls=($variant_cls)|0;
 var $flags=0,$1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$i_0=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$23=0;
 var $phitmp=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $flags=((sp)|0);
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_lexer($2);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==1;
 if ($5) {
  $7=(($parser+72)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  _lily_raise($8,1,16112,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 HEAP32[(($flags)>>2)]=0;
 $10=(($parser+68)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 _lily_tm_add($11,0);
 $12=(($parser+72)|0);
 $13=(($parser+72)|0);
 $i_0=2;
 while(1) {

  $15=((HEAP32[(($10)>>2)])|0);
  $16=((_get_nameless_arg($parser,$flags))|0);
  _lily_tm_add($15,$16);
  $17=((HEAP32[(($flags)>>2)])|0);
  $18=$17&8;
  $19=($18|0)==0;
  if (!($19)) {
   $21=((HEAP32[(($13)>>2)])|0);
   _lily_raise($21,1,16016,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $23=((HEAP32[(($3)>>2)])|0);
  if (((($23|0))|0)==((2)|0)) {
   _lily_lexer($2);
  } else if (((($23|0))|0)==((1)|0)) {
   break;
  } else {
   $26=((HEAP32[(($12)>>2)])|0);
   $27=((_tokname($23))|0);
   _lily_raise($26,1,9464,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$27,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $phitmp=((($i_0)+(1))|0);
  $i_0=$phitmp;
 }
 _lily_lexer($2);
 $29=((HEAP32[(($10)>>2)])|0);
 $30=((HEAP32[(($flags)>>2)])|0);
 $31=(($parser+60)|0);
 $32=((HEAP32[(($31)>>2)])|0);
 $33=(($32+72)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=((_lily_tm_make($29,$30,$34,$i_0))|0);
 $36=(($variant_cls+24)|0);
 HEAP32[(($36)>>2)]=$35;
 $37=(($variant_cls+6)|0);
 $38=((HEAP16[(($37)>>1)])|0);
 $39=$38&-33;
 HEAP16[(($37)>>1)]=$39;
 STACKTOP=sp;return;
}


function _parse_class_header($parser,$cls){
 $parser=($parser)|0;
 $cls=($cls)|0;
 var $flags=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$28=0,$29=0,$31=0,$32=0,$33=0,$i_0=0,$35=0,$36=0,$37=0,$phitmp=0,$41=0,$42=0,$i_1=0;
 var $44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$61=0,$62=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $flags=((sp)|0);
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+56)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($parser+48)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((_lily_emit_new_define_var($4,$6,5656))|0);
 _lily_lexer($2);
 _collect_generics_or($parser,0);
 $8=(($parser+19)|0);
 $9=((HEAP8[($8)])|0);
 $10=($9&255);
 $11=(($cls+42)|0);
 HEAP16[(($11)>>1)]=$10;
 $12=((HEAP32[(($3)>>2)])|0);
 _lily_emit_enter_block($12,13);
 $13=((HEAP8[($8)])|0);
 $14=($13&255);
 $15=((_build_self_type($parser,$cls,$14))|0);
 $16=(($parser+40)|0);
 HEAP32[(($16)>>2)]=$15;
 HEAP32[(($flags)>>2)]=0;
 $17=(($parser+12)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+4)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($parser+68)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=((HEAP32[(($16)>>2)])|0);
 _lily_tm_add($22,$23);
 $24=(($2+40)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=($25|0)==0;
 if ($26) {
  _lily_lexer($2);
  $28=((HEAP32[(($24)>>2)])|0);
  $29=($28|0)==1;
  if ($29) {
   $31=(($parser+72)|0);
   $32=((HEAP32[(($31)>>2)])|0);
   _lily_raise($32,1,17528,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $33=(($parser+72)|0);
  $i_0=2;
  while(1) {

   $35=((HEAP32[(($21)>>2)])|0);
   $36=((_get_named_arg($parser,$flags))|0);
   _lily_tm_add($35,$36);
   $37=((HEAP32[(($24)>>2)])|0);
   if (((($37|0))|0)==((2)|0)) {
    _lily_lexer($2);
   } else if (((($37|0))|0)==((1)|0)) {
    break;
   } else {
    $41=((HEAP32[(($33)>>2)])|0);
    $42=((_tokname($37))|0);
    _lily_raise($41,1,9464,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$42,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   $phitmp=((($i_0)+(1))|0);
   $i_0=$phitmp;
  }
  _lily_lexer($2);
  $i_1=$i_0;
 } else {
  $i_1=1;
 }

 $44=((HEAP32[(($21)>>2)])|0);
 $45=((HEAP32[(($flags)>>2)])|0);
 $46=(($parser+60)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=(($47+72)|0);
 $49=((HEAP32[(($48)>>2)])|0);
 $50=((_lily_tm_make($44,$45,$49,$i_1))|0);
 $51=(($7+12)|0);
 HEAP32[(($51)>>2)]=$50;
 $52=((HEAP32[(($3)>>2)])|0);
 $53=((HEAP32[(($16)>>2)])|0);
 $54=(($50+12)|0);
 $55=((HEAP32[(($54)>>2)])|0);
 $56=((HEAP32[(($55)>>2)])|0);
 _lily_emit_update_function_block($52,$53,$56);
 $57=((HEAP32[(($flags)>>2)])|0);
 $58=$57&8;
 $59=($58|0)==0;
 if ($59) {
  STACKTOP=sp;return;
 }
 $61=((HEAP32[(($3)>>2)])|0);
 $62=((HEAP32[(($17)>>2)])|0);
 _lily_emit_write_optargs($61,$62,$20);
 STACKTOP=sp;return;
}


function _parse_inheritance($parser,$cls){
 $parser=($parser)|0;
 $cls=($cls)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$21=0,$23=0,$24=0,$26=0;
 var $27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$45=0,$46=0,$49=0,$51=0,$52=0,$53=0;
 var $54=0,$55=0,$56=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_lexer($2);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==35;
 if (!($5)) {
  $7=(($parser+72)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=((_tokname(35))|0);
  $10=((HEAP32[(($3)>>2)])|0);
  $11=((_tokname($10))|0);
  _lily_raise($8,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$9,HEAP32[(((tempVarArgs)+(8))>>2)]=$11,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $13=((_resolve_class_name($parser))|0);
 $14=($13|0)==0;
 do {
  if ($14) {
   $16=(($parser+72)|0);
   $17=((HEAP32[(($16)>>2)])|0);
   $18=(($2+12)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   _lily_raise($17,1,8120,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$19,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  } else {
   $21=($13|0)==($cls|0);
   if ($21) {
    $23=(($parser+72)|0);
    $24=((HEAP32[(($23)>>2)])|0);
    _lily_raise($24,1,4072,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    break;
   }
   $26=(($13+6)|0);
   $27=((HEAP16[(($26)>>1)])|0);
   $28=$27&268;
   $29=(($28<<16)>>16)==0;
   if ($29) {
    break;
   }
   $31=(($parser+72)|0);
   $32=((HEAP32[(($31)>>2)])|0);
   $33=(($13+12)|0);
   $34=((HEAP32[(($33)>>2)])|0);
   _lily_raise($32,1,17688,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$34,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $36=((_lily_find_method($13,5656))|0);
 $37=(($parser+24)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 _rewind_expr_state($38);
 _lily_es_enter_tree($38,0);
 _lily_es_push_inherited_new($38,$36);
 _lily_es_collect_arg($38);
 _lily_lexer($2);
 $39=((HEAP32[(($3)>>2)])|0);
 $40=($39|0)==0;
 if (!($40)) {
  $49=((HEAP32[(($37)>>2)])|0);
  _lily_es_leave_tree($49);
  $51=(($parser+56)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  _lily_emit_eval_expr($52,$38);
  $53=(($cls+28)|0);
  HEAP32[(($53)>>2)]=$13;
  $54=(($13+44)|0);
  $55=((HEAP16[(($54)>>1)])|0);
  $56=(($cls+44)|0);
  HEAP16[(($56)>>1)]=$55;
  STACKTOP=sp;return;
 }
 _lily_lexer($2);
 $42=((HEAP32[(($3)>>2)])|0);
 $43=($42|0)==1;
 if ($43) {
  $45=(($parser+72)|0);
  $46=((HEAP32[(($45)>>2)])|0);
  _lily_raise($46,1,17608,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _expression_raw($parser,4);
 _lily_lexer($2);
 $51=(($parser+56)|0);
 $52=((HEAP32[(($51)>>2)])|0);
 _lily_emit_eval_expr($52,$38);
 $53=(($cls+28)|0);
 HEAP32[(($53)>>2)]=$13;
 $54=(($13+44)|0);
 $55=((HEAP16[(($54)>>1)])|0);
 $56=(($cls+44)|0);
 HEAP16[(($56)>>1)]=$55;
 STACKTOP=sp;return;
}


function _determine_class_gc_flag($target){
 $target=($target)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$parent_iter_015=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$mark_0=0,$20=0;
 var $prop_iter_06=0,$21=0,$prop_iter_08=0,$mark_17=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$i_04=0,$mark_23=0,$36=0;
 var $37=0,$38=0,$39=0,$40=0,$41=0,$mark_3=0,$42=0,$prop_iter_0=0,$43=0,$mark_1_lcssa=0,$44=0,$45=0,$46=0,$mark_1_=0,$parent_iter_11=0,$47=0,$parent_iter_12=0,$48=0,$49=0,$50=0;
 var $51=0,$parent_iter_1=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,label=0;

 $1=(($target+28)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 L1: do {
  if ($3) {
   $mark_0=0;
  } else {
   $5=(($2+6)|0);
   $6=((HEAP16[(($5)>>1)])|0);
   $7=($6&65535);
   $8=$7&192;
   $9=($8|0)==64;
   if (!($9)) {
    $parent_iter_015=$2;
    while(1) {

     $14=(($parent_iter_015+6)|0);
     $15=((HEAP16[(($14)>>1)])|0);
     $16=$15|512;
     HEAP16[(($14)>>1)]=$16;
     $17=(($parent_iter_015)|0);
     $18=((HEAP32[(($17)>>2)])|0);
     $19=($18|0)==0;
     if ($19) {
      $mark_0=$8;
      break L1;
     } else {
      $parent_iter_015=$18;
     }
    }
   }
   $11=(($target+6)|0);
   $12=((HEAP16[(($11)>>1)])|0);
   $13=$12|64;
   HEAP16[(($11)>>1)]=$13;
   return;
  }
 } while(0);

 $20=(($target+32)|0);
 $prop_iter_06=((HEAP32[(($20)>>2)])|0);
 $21=($prop_iter_06|0)==0;
 if ($21) {
  $mark_1_lcssa=$mark_0;
 } else {
  $mark_17=$mark_0;$prop_iter_08=$prop_iter_06;
  while(1) {


   $22=(($prop_iter_08+12)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=((_get_gc_flags_for($target,$23))|0);
   $25=$24|$mark_17;
   $26=(($23+10)|0);
   $27=((HEAP16[(($26)>>1)])|0);
   $28=(($27<<16)>>16)==0;
   do {
    if ($28) {
     $mark_3=$25;
    } else {
     $29=((HEAP16[(($26)>>1)])|0);
     $30=(($29<<16)>>16)==0;
     if ($30) {
      $mark_3=$25;
      break;
     }
     $31=(($23+12)|0);
     $32=((HEAP32[(($31)>>2)])|0);
     $33=((HEAP16[(($26)>>1)])|0);
     $34=($33&65535);
     $mark_23=$25;$i_04=0;
     while(1) {


      $36=(($32+($i_04<<2))|0);
      $37=((HEAP32[(($36)>>2)])|0);
      $38=((_get_gc_flags_for($target,$37))|0);
      $39=$38|$mark_23;
      $40=((($i_04)+(1))|0);
      $41=($40|0)<($34|0);
      if ($41) {
       $mark_23=$39;$i_04=$40;
      } else {
       $mark_3=$39;
       break;
      }
     }
    }
   } while(0);

   $42=(($prop_iter_08)|0);
   $prop_iter_0=((HEAP32[(($42)>>2)])|0);
   $43=($prop_iter_0|0)==0;
   if ($43) {
    $mark_1_lcssa=$mark_3;
    break;
   } else {
    $mark_17=$mark_3;$prop_iter_08=$prop_iter_0;
   }
  }
 }

 $44=$mark_1_lcssa&64;
 $45=($44|0)==0;
 $46=$mark_1_lcssa&65407;
 $mark_1_=($45?$mark_1_lcssa:$46);
 $parent_iter_11=((HEAP32[(($1)>>2)])|0);
 $47=($parent_iter_11|0)==0;
 if (!($47)) {
  $parent_iter_12=$parent_iter_11;
  while(1) {

   $48=(($parent_iter_12+6)|0);
   $49=((HEAP16[(($48)>>1)])|0);
   $50=$49&-513;
   HEAP16[(($48)>>1)]=$50;
   $51=(($parent_iter_12)|0);
   $parent_iter_1=((HEAP32[(($51)>>2)])|0);
   $52=($parent_iter_1|0)==0;
   if ($52) {
    break;
   } else {
    $parent_iter_12=$parent_iter_1;
   }
  }
 }
 $53=(($target+6)|0);
 $54=((HEAP16[(($53)>>1)])|0);
 $55=$54&-513;
 $56=($55&65535);
 $57=$56|$mark_1_;
 $58=(($57)&65535);
 HEAP16[(($53)>>1)]=$58;
 return;
}


function _parse_define_header($parser,$modifiers){
 $parser=($parser)|0;
 $modifiers=($modifiers)|0;
 var $arg_flags=0,$1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0;
 var $43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$i_0=0,$56=0,$57=0,$59=0,$60=0,$62=0,$63=0,$i_1_ph=0;
 var $_pr=0,$65=0,$i_1=0,$66=0,$68=0,$69=0,$70=0,$71=0,$72=0,$74=0,$75=0,$76=0,$77=0,$_pr1=0,$81=0,$82=0,$83=0,$85=0,$i_2=0,$86=0;
 var $88=0,$89=0,$91=0,$92=0,$94=0,$95=0,$96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0;
 var $111=0,$112=0,$113=0,$114=0,$115=0,$117=0,$118=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $arg_flags=((sp)|0);
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==35;
 if (!($5)) {
  $7=(($parser+72)|0);
  $8=((HEAP32[(($7)>>2)])|0);
  $9=((_tokname(35))|0);
  $10=((HEAP32[(($3)>>2)])|0);
  $11=((_tokname($10))|0);
  _lily_raise($8,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$9,HEAP32[(((tempVarArgs)+(8))>>2)]=$11,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $13=(($2+12)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 _ensure_unique_method_name($parser,$14);
 $15=(($parser+56)|0);
 $16=((HEAP32[(($15)>>2)])|0);
 $17=(($parser+48)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=((HEAP32[(($13)>>2)])|0);
 $20=((_lily_emit_new_define_var($16,$18,$19))|0);
 HEAP32[(($arg_flags)>>2)]=0;
 $21=(($parser+68)|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=(($22+4)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 $25=(($parser+12)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($26+4)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 _lily_tm_add($22,0);
 _lily_lexer($2);
 $29=(($parser+19)|0);
 $30=((HEAP8[($29)])|0);
 $31=($30&255);
 _collect_generics_or($parser,$31);
 $32=((HEAP32[(($15)>>2)])|0);
 _lily_emit_enter_block($32,12);
 $33=(($parser+40)|0);
 $34=((HEAP32[(($33)>>2)])|0);
 $35=($34|0)==0;
 if ($35) {
  $i_0=0;
 } else {
  $37=((HEAP32[(($21)>>2)])|0);
  _lily_tm_add($37,$34);
  $38=((HEAP32[(($15)>>2)])|0);
  $39=((HEAP32[(($33)>>2)])|0);
  $40=((_lily_emit_new_local_var($38,$39,9712))|0);
  $41=((HEAP32[(($33)>>2)])|0);
  $42=(($41)|0);
  $43=((HEAP32[(($42)>>2)])|0);
  $44=(($20+40)|0);
  HEAP32[(($44)>>2)]=$43;
  $45=(($20+6)|0);
  $46=((HEAP16[(($45)>>1)])|0);
  $47=($46&65535);
  $48=$47|$modifiers;
  $49=(($48)&65535);
  HEAP16[(($45)>>1)]=$49;
  $50=$40;
  $51=((HEAP32[(($15)>>2)])|0);
  $52=(($51+84)|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $54=(($53+48)|0);
  HEAP32[(($54)>>2)]=$50;
  $i_0=1;
 }

 $56=((HEAP32[(($3)>>2)])|0);
 $57=($56|0)==0;
 if ($57) {
  _lily_lexer($2);
  $59=((HEAP32[(($3)>>2)])|0);
  $60=($59|0)==1;
  if ($60) {
   $62=(($parser+72)|0);
   $63=((HEAP32[(($62)>>2)])|0);
   _lily_raise($63,1,9608,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   $i_1_ph=$i_0;
   label = 8;
  } else {
   $i_1=$i_0;$65=$59;
  }
  while(1) {
   if ((label|0) == 8) {
    label = 0;

    $_pr=((HEAP32[(($3)>>2)])|0);
    $i_1=$i_1_ph;$65=$_pr;
   }


   $66=($65|0)==35;
   if (!($66)) {
    $68=(($parser+72)|0);
    $69=((HEAP32[(($68)>>2)])|0);
    $70=((_tokname(35))|0);
    $71=((HEAP32[(($3)>>2)])|0);
    $72=((_tokname($71))|0);
    _lily_raise($69,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$70,HEAP32[(((tempVarArgs)+(8))>>2)]=$72,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   $74=((HEAP32[(($21)>>2)])|0);
   $75=((_get_named_arg($parser,$arg_flags))|0);
   _lily_tm_add($74,$75);
   $76=((($i_1)+(1))|0);
   $77=((HEAP32[(($3)>>2)])|0);
   if (((($77|0))|0)==((2)|0)) {
    _lily_lexer($2);
    $i_1_ph=$76;
    label = 8;
    continue;
   } else if (((($77|0))|0)==((1)|0)) {
    break;
   } else {
    $81=(($parser+72)|0);
    $82=((HEAP32[(($81)>>2)])|0);
    $83=((_tokname($77))|0);
    _lily_raise($82,1,9464,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$83,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    $i_1_ph=$76;
    label = 8;
    continue;
   }
  }
  _lily_lexer($2);
  $_pr1=((HEAP32[(($3)>>2)])|0);
  $i_2=$76;$85=$_pr1;
 } else {
  $i_2=$i_0;$85=$56;
 }


 $86=($85|0)==6;
 if ($86) {
  _lily_lexer($2);
  $88=((HEAP32[(($21)>>2)])|0);
  $89=((_get_type($parser))|0);
  _lily_tm_insert($88,$24,$89);
 }
 $91=((HEAP32[(($3)>>2)])|0);
 $92=($91|0)==29;
 if (!($92)) {
  $94=(($parser+72)|0);
  $95=((HEAP32[(($94)>>2)])|0);
  $96=((_tokname(29))|0);
  $97=((HEAP32[(($3)>>2)])|0);
  $98=((_tokname($97))|0);
  _lily_raise($95,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$96,HEAP32[(((tempVarArgs)+(8))>>2)]=$98,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $100=((HEAP32[(($21)>>2)])|0);
 $101=((HEAP32[(($arg_flags)>>2)])|0);
 $102=(($parser+60)|0);
 $103=((HEAP32[(($102)>>2)])|0);
 $104=(($103+72)|0);
 $105=((HEAP32[(($104)>>2)])|0);
 $106=((($i_2)+(1))|0);
 $107=((_lily_tm_make($100,$101,$105,$106))|0);
 $108=(($20+12)|0);
 HEAP32[(($108)>>2)]=$107;
 $109=((HEAP32[(($15)>>2)])|0);
 $110=(($107+12)|0);
 $111=((HEAP32[(($110)>>2)])|0);
 $112=((HEAP32[(($111)>>2)])|0);
 _lily_emit_update_function_block($109,0,$112);
 $113=((HEAP32[(($arg_flags)>>2)])|0);
 $114=$113&8;
 $115=($114|0)==0;
 if ($115) {
  STACKTOP=sp;return;
 }
 $117=((HEAP32[(($15)>>2)])|0);
 $118=((HEAP32[(($25)>>2)])|0);
 _lily_emit_write_optargs($117,$118,$28);
 STACKTOP=sp;return;
}


function _type_by_name($parser,$name){
 $parser=($parser)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;

 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_load_copy_string($2,1,$name);
 $3=((HEAP32[(($1)>>2)])|0);
 _lily_lexer($3);
 $4=((_get_type($parser))|0);
 $5=((HEAP32[(($1)>>2)])|0);
 _lily_pop_lex_entry($5);
 return (($4)|0);
}


function _update_cid_table($parser,$m){
 $parser=($parser)|0;
 $m=($m)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$cid_entry_03=0,$counter_02=0,$17=0,$18=0,$19=0;
 var $21=0,$22=0,$24=0,$25=0,$cls_01=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,label=0;

 $1=(($m+44)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((HEAP8[($3)])|0);
 $5=(($4<<24)>>24);
 $6=(($m+52)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($parser+60)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($parser)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=(($11+12)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($4<<24)>>24)>0;
 if (!($14)) {
  return;
 }
 $15=(($3+1)|0);
 $counter_02=0;$cid_entry_03=$15;
 while(1) {


  $17=(($7+($counter_02<<1))|0);
  $18=((HEAP16[(($17)>>1)])|0);
  $19=(($18<<16)>>16)==0;
  do {
   if ($19) {
    $21=((_lily_find_class($9,$m,$cid_entry_03))|0);
    $22=($21|0)==0;
    if ($22) {
     $24=((_lily_find_class($9,$13,$cid_entry_03))|0);
     $25=($24|0)==0;
     if ($25) {
      break;
     } else {
      $cls_01=$24;
     }
    } else {
     $cls_01=$21;
    }

    $26=(($cls_01+40)|0);
    $27=((HEAP16[(($26)>>1)])|0);
    HEAP16[(($17)>>1)]=$27;
   }
  } while(0);
  $29=((_strlen((($cid_entry_03)|0)))|0);
  $30=((($29)+(1))|0);
  $31=(($cid_entry_03+$30)|0);
  $32=((($counter_02)+(1))|0);
  $33=($32|0)<($5|0);
  if ($33) {
   $counter_02=$32;$cid_entry_03=$31;
  } else {
   break;
  }
 }
 return;
}


function _dynaload_class($parser,$m,$dyna_index){
 $parser=($parser)|0;
 $m=($m)|0;
 $dyna_index=($dyna_index)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,label=0;

 $1=(($m+44)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+($dyna_index<<2))|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($parser+60)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($4+2)|0);
 $8=((_lily_new_class($6,$7))|0);
 $9=(($8+6)|0);
 $10=((HEAP16[(($9)>>1)])|0);
 $11=$10|256;
 HEAP16[(($9)>>1)]=$11;
 $12=(($dyna_index)&65535);
 $13=(($8+46)|0);
 HEAP16[(($13)>>1)]=$12;
 $14=(($parser+68)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((_lily_tm_make_default_for($15,$8))|0);
 return (($8)|0);
}


function _dynaload_bootstrap($parser,$m,$dyna_index){
 $parser=($parser)|0;
 $m=($m)|0;
 $dyna_index=($dyna_index)|0;
 var $es=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$_sum1=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0;
 var $19=0,$20=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$ex_index_0_in=0;
 var $ex_index_0=0,$43=0,$44=0,$45=0,$46=0,$47=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$63=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;
 $es=((sp)|0);
 $1=(($m+44)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+($dyna_index<<2))|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+2)|0);
 $6=((_strlen((($5)|0)))|0);
 $_sum1=((($6)+(3))|0);
 $7=(($4+$_sum1)|0);
 $8=(($parser+52)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 _lily_load_str($9,1,$7);
 $10=(($parser+60)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((_lily_new_class($11,$5))|0);
 $13=((($dyna_index)+(1))|0);
 $14=(($13)&65535);
 $15=(($12+46)|0);
 HEAP16[(($15)>>1)]=$14;
 $16=(($m+36)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=(($parser)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=($17|0)==($19|0);
 do {
  if ($20) {
   $22=((_strcmp((($5)|0),((15552)|0)))|0);
   $23=($22|0)==0;
   if ($23) {
    $25=((HEAP32[(($10)>>2)])|0);
    $26=(($25+40)|0);
    $27=((HEAP32[(($26)>>2)])|0);
    $28=((($27)-(1))|0);
    HEAP32[(($26)>>2)]=$28;
    $29=(($12+40)|0);
    HEAP16[(($29)>>1)]=15;
    break;
   }
   $31=((_strcmp((($5)|0),((14048)|0)))|0);
   $32=($31|0)==0;
   if ($32) {
    $34=((HEAP32[(($10)>>2)])|0);
    $35=(($34+40)|0);
    $36=((HEAP32[(($35)>>2)])|0);
    $37=((($36)-(1))|0);
    HEAP32[(($35)>>2)]=$37;
    $38=(($12+40)|0);
    HEAP16[(($38)>>1)]=23;
    break;
   }
   $40=((_strstr((($5)|0),((14032)|0)))|0);
   $41=($40|0)==0;
   if ($41) {
    break;
   }
   $42=((HEAP32[(($1)>>2)])|0);
   $ex_index_0_in=$dyna_index;
   while(1) {

    $ex_index_0=((($ex_index_0_in)-(1))|0);
    $43=(($42+($ex_index_0<<2))|0);
    $44=((HEAP32[(($43)>>2)])|0);
    $45=(($44+2)|0);
    $46=((HEAP8[($45)])|0);
    $47=(($46<<24)>>24)==69;
    if (!($47)) {
     $ex_index_0_in=$ex_index_0;
     continue;
    }
    $49=((_strcmp(((15552)|0),(($45)|0)))|0);
    $50=($49|0)==0;
    if ($50) {
     break;
    } else {
     $ex_index_0_in=$ex_index_0;
    }
   }
   $52=((HEAP32[(($10)>>2)])|0);
   $53=(($52+40)|0);
   $54=((HEAP32[(($53)>>2)])|0);
   $55=((($54)-(1))|0);
   HEAP32[(($53)>>2)]=$55;
   $56=((HEAP16[(($15)>>1)])|0);
   $57=($56&65535);
   $58=(((15)-($ex_index_0_in))|0);
   $59=((($58)+($57))|0);
   $60=(($59)&65535);
   $61=(($12+40)|0);
   HEAP16[(($61)>>1)]=$60;
  }
 } while(0);
 _init_expr_state($parser,$es);
 _parse_class_body($parser,$12);
 _fini_expr_state($parser);
 $63=((HEAP32[(($8)>>2)])|0);
 _lily_pop_lex_entry($63);
 STACKTOP=sp;return (($12)|0);
}


function _dynaload_variant($parser,$m,$dyna_index){
 $parser=($parser)|0;
 $m=($m)|0;
 $dyna_index=($dyna_index)|0;
 var $1=0,$2=0,$3=0,$enum_pos_0=0,$_pn=0,$entry_0_in=0,$entry_0=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,label=0;

 $1=((($dyna_index)-(1))|0);
 $2=(($m+44)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $_pn=$1;$enum_pos_0=$1;
 while(1) {


  $entry_0_in=(($3+($_pn<<2))|0);
  $entry_0=((HEAP32[(($entry_0_in)>>2)])|0);
  $5=((HEAP8[($entry_0)])|0);
  $6=(($5<<24)>>24)==69;
  $7=((($enum_pos_0)-(1))|0);
  if ($6) {
   break;
  } else {
   $_pn=$enum_pos_0;$enum_pos_0=$7;
  }
 }
 $9=(($3+($dyna_index<<2))|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((($enum_pos_0)+(1))|0);
 $12=((_dynaload_enum($parser,$m,$11))|0);
 $13=(($parser+60)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($10+2)|0);
 $16=((_lily_find_class($14,$m,$15))|0);
 return (($16)|0);
}


function _dynaload_enum($parser,$m,$dyna_index){
 $parser=($parser)|0;
 $m=($m)|0;
 $dyna_index=($dyna_index)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$_sum1=0,$9=0,$entry_index_0=0,$11=0,$12=0,$13=0,$14=0,$15=0,$entry_index_1=0,$entry_0=0,$16=0,$17=0;
 var $_sum3=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0;
 var $38=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$53=0,label=0;

 $1=(($m+44)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+($dyna_index<<2))|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+2)|0);
 $6=(($parser+44)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 _lily_msgbuf_flush($7);
 _lily_msgbuf_add($7,$5);
 $8=((_strlen((($5)|0)))|0);
 $_sum1=((($8)+(3))|0);
 $9=(($4+$_sum1)|0);
 _lily_msgbuf_add($7,$9);
 _lily_msgbuf_add_char($7,123);
 $entry_index_0=$dyna_index;
 while(1) {

  $11=((($entry_index_0)+(1))|0);
  $12=(($2+($11<<2))|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=((HEAP8[($13)])|0);
  $15=(($14<<24)>>24)==86;
  if ($15) {
   $entry_0=$13;$entry_index_1=$11;
   break;
  } else {
   $entry_index_0=$11;
  }
 }
 while(1) {


  $16=(($entry_0+2)|0);
  _lily_msgbuf_add($7,$16);
  $17=((_strlen((($16)|0)))|0);
  $_sum3=((($17)+(3))|0);
  $18=(($entry_0+$_sum3)|0);
  _lily_msgbuf_add($7,$18);
  _lily_msgbuf_add_char($7,32);
  $19=((($entry_index_1)+(1))|0);
  $20=(($2+($19<<2))|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=((HEAP8[($21)])|0);
  $23=(($22<<24)>>24)==86;
  if ($23) {
   $entry_0=$21;$entry_index_1=$19;
  } else {
   break;
  }
 }
 _lily_msgbuf_add_char($7,125);
 $25=(($parser+52)|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($7)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 _lily_load_copy_string($26,1,$28);
 $29=((HEAP32[(($25)>>2)])|0);
 _lily_lexer($29);
 $30=((_parse_enum($parser,1))|0);
 $31=((($dyna_index)+(1))|0);
 $32=(($31)&65535);
 $33=(($30+46)|0);
 HEAP16[(($33)>>1)]=$32;
 $34=(($m+36)|0);
 $35=((HEAP32[(($34)>>2)])|0);
 $36=(($parser)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=($35|0)==($37|0);
 if (!($38)) {
  $53=((HEAP32[(($25)>>2)])|0);
  _lily_pop_lex_entry($53);
  return (($30)|0);
 }
 $40=(($parser+60)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=(($41+40)|0);
 $43=((HEAP32[(($42)>>2)])|0);
 $44=((($43)-(1))|0);
 HEAP32[(($42)>>2)]=$44;
 $45=((HEAP32[(($3)>>2)])|0);
 $46=(($45+2)|0);
 $47=((HEAP8[($46)])|0);
 $48=(($47<<24)>>24)==79;
 $49=(($30+40)|0);
 if ($48) {
  HEAP16[(($49)>>1)]=13;
  $53=((HEAP32[(($25)>>2)])|0);
  _lily_pop_lex_entry($53);
  return (($30)|0);
 } else {
  HEAP16[(($49)>>1)]=14;
  $53=((HEAP32[(($25)>>2)])|0);
  _lily_pop_lex_entry($53);
  return (($30)|0);
 }
  return 0;
}


function _make_type_of_class($parser,$cls,$type){
 $parser=($parser)|0;
 $cls=($cls)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=(($parser+68)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_tm_add($2,$type);
 $3=((HEAP32[(($1)>>2)])|0);
 $4=((_lily_tm_make($3,0,$cls,1))|0);
 return (($4)|0);
}


function _resolve_class_name($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$23=0,$24=0;
 var $search_module_0=0,$26=0,$27=0,$28=0,$30=0,$31=0,$result_0=0,$33=0,$35=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$result_2=0;
 var label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+60)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+52)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+40)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)==35;
 if (!($7)) {
  $9=(($parser+72)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=((_tokname(35))|0);
  $12=((HEAP32[(($5)>>2)])|0);
  $13=((_tokname($12))|0);
  _lily_raise($10,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$11,HEAP32[(((tempVarArgs)+(8))>>2)]=$13,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $15=((_resolve_module($parser))|0);
 $16=(($4+12)|0);
 $17=((HEAP32[(($16)>>2)])|0);
 $18=((_lily_find_class($2,$15,$17))|0);
 $19=($18|0)==0;
 if (!($19)) {
  $result_2=$18;

  STACKTOP=sp;return (($result_2)|0);
 }
 $21=($15|0)==0;
 if ($21) {
  $23=(($2+20)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $search_module_0=$24;
 } else {
  $search_module_0=$15;
 }

 $26=(($search_module_0+44)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=($27|0)==0;
 if ($28) {
  $result_0=$18;
 } else {
  $30=((HEAP32[(($16)>>2)])|0);
  $31=((_find_run_class_dynaload($parser,$search_module_0,$30))|0);
  $result_0=$31;
 }

 $33=($result_0|0)==0;
 if (!($33)) {
  $result_2=$result_0;

  STACKTOP=sp;return (($result_2)|0);
 }
 $35=(($2+24)|0);
 $36=((HEAP32[(($35)>>2)])|0);
 $37=(($36+44)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=($38|0)==0;
 do {
  if (!($39)) {
   $41=((HEAP32[(($16)>>2)])|0);
   $42=((_find_run_class_dynaload($parser,$36,$41))|0);
   $43=($42|0)==0;
   if ($43) {
    break;
   } else {
    $result_2=$42;
   }

   STACKTOP=sp;return (($result_2)|0);
  }
 } while(0);
 $44=(($parser+72)|0);
 $45=((HEAP32[(($44)>>2)])|0);
 $46=((HEAP32[(($16)>>2)])|0);
 _lily_raise($45,1,8120,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$46,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $result_2=0;

 STACKTOP=sp;return (($result_2)|0);
}


function _get_scoop_class($parser,$which){
 $parser=($parser)|0;
 $which=($which)|0;
 var $1=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$old_class_iter_01=0,$10=0,$12=0,$old_class_iter_0=0,$13=0,$old_class_iter_02=0,$14=0,$15=0,$16=0,$17=0,$old_class_iter_0_lcssa=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=($which|0)>2;
 if ($1) {
  $3=(($parser+72)|0);
  $4=((HEAP32[(($3)>>2)])|0);
  _lily_raise($4,1,8280,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $6=(($parser+60)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+32)|0);
 $9=(((65535)-($which))|0);
 $old_class_iter_01=((HEAP32[(($8)>>2)])|0);
 $10=($old_class_iter_01|0)==0;
 if ($10) {
  $old_class_iter_0_lcssa=0;

  STACKTOP=sp;return (($old_class_iter_0_lcssa)|0);
 } else {
  $old_class_iter_02=$old_class_iter_01;
 }
 while(1) {

  $14=(($old_class_iter_02+40)|0);
  $15=((HEAP16[(($14)>>1)])|0);
  $16=($15&65535);
  $17=($16|0)==($9|0);
  if ($17) {
   $old_class_iter_0_lcssa=$old_class_iter_02;
   label = 6;
   break;
  }
  $12=(($old_class_iter_02)|0);
  $old_class_iter_0=((HEAP32[(($12)>>2)])|0);
  $13=($old_class_iter_0|0)==0;
  if ($13) {
   $old_class_iter_0_lcssa=0;
   label = 6;
   break;
  } else {
   $old_class_iter_02=$old_class_iter_0;
  }
 }
 if ((label|0) == 6) {

  STACKTOP=sp;return (($old_class_iter_0_lcssa)|0);
 }
  return 0;
}


function _ensure_valid_type($parser,$type){
 $parser=($parser)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$or_cond=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$38=0,$39=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($type+10)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=(($type)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+42)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=(($7<<16)>>16);
 $9=($3|0)==($8|0);
 $10=(($7<<16)>>16)==-1;
 $or_cond=$9|$10;
 if (!($or_cond)) {
  $12=(($parser+72)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=(($5+12)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  _lily_raise($13,1,8552,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$15,HEAP32[(((tempVarArgs)+(8))>>2)]=$8,HEAP32[(((tempVarArgs)+(16))>>2)]=$3,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $17=((HEAP32[(($4)>>2)])|0);
 $18=(($parser+60)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($19+80)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=($17|0)==($21|0);
 if (!($22)) {
  STACKTOP=sp;return;
 }
 $24=(($type+12)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=((HEAP32[(($25)>>2)])|0);
 $27=(($26)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=(($28+6)|0);
 $30=((HEAP16[(($29)>>1)])|0);
 $31=$30&1;
 $32=(($31<<16)>>16)==0;
 if (!($32)) {
  STACKTOP=sp;return;
 }
 $34=(($28+40)|0);
 $35=((HEAP16[(($34)>>1)])|0);
 $36=(($35<<16)>>16)==11;
 if ($36) {
  STACKTOP=sp;return;
 }
 $38=(($parser+72)|0);
 $39=((HEAP32[(($38)>>2)])|0);
 _lily_raise($39,1,8448,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$26,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _expression_word($parser,$state){
 $parser=($parser)|0;
 $state=($state)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$12=0,$14=0,$15=0,$17=0,$18=0,$19=0,$21=0,$22=0,$25=0,$26=0,$27=0;
 var $28=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$43=0,$45=0,$46=0,$search_module_0=0,$47=0,$48=0,$49=0,$52=0,$53=0,$54=0;
 var label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+60)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+52)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((_resolve_module($parser))|0);
 $6=(($4+12)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=((_lily_find_var($2,$5,$7))|0);
 $9=($8|0)==0;
 if (!($9)) {
  _dispatch_word_as_var($parser,$8,$state);
  STACKTOP=sp;return;
 }
 $12=($5|0)==0;
 L5: do {
  if ($12) {
   $14=((HEAP32[(($6)>>2)])|0);
   $15=((_constant_by_name($14))|0);
   do {
    if (((($15|0))|0)==((1)|0)) {
     $17=(($parser+40)|0);
     $18=((HEAP32[(($17)>>2)])|0);
     $19=($18|0)==0;
     if (!($19)) {
      break;
     }
     $21=(($parser+72)|0);
     $22=((HEAP32[(($21)>>2)])|0);
     _lily_raise($22,1,6040,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    } else if (((($15|0))|0)==((-1)|0)) {
     break L5;
    }
   } while(0);
   _push_constant($parser,$15);
   HEAP32[(($state)>>2)]=2;
   STACKTOP=sp;return;
  }
 } while(0);
 $25=((HEAP32[(($1)>>2)])|0);
 $26=((HEAP32[(($6)>>2)])|0);
 $27=((_lily_find_class($25,$5,$26))|0);
 $28=($27|0)==0;
 if (!($28)) {
  _dispatch_word_as_class($parser,$27,$state);
  STACKTOP=sp;return;
 }
 L17: do {
  if ($12) {
   $32=(($parser+40)|0);
   $33=((HEAP32[(($32)>>2)])|0);
   $34=($33|0)==0;
   do {
    if (!($34)) {
     $36=(($33)|0);
     $37=((HEAP32[(($36)>>2)])|0);
     $38=((HEAP32[(($6)>>2)])|0);
     $39=((_lily_find_method($37,$38))|0);
     $40=($39|0)==0;
     if ($40) {
      if ($12) {
       break;
      } else {
       $search_module_0=$5;
       break L17;
      }
     }
     $42=(($parser+24)|0);
     $43=((HEAP32[(($42)>>2)])|0);
     _lily_es_push_method($43,$39);
     HEAP32[(($state)>>2)]=2;
     STACKTOP=sp;return;
    }
   } while(0);
   $45=(($2+20)|0);
   $46=((HEAP32[(($45)>>2)])|0);
   $search_module_0=$46;
  } else {
   $search_module_0=$5;
  }
 } while(0);

 $47=((HEAP32[(($6)>>2)])|0);
 $48=((_try_toplevel_dynaload($parser,$search_module_0,$47))|0);
 $49=($48|0)==0;
 if ($49) {
  $52=(($parser+72)|0);
  $53=((HEAP32[(($52)>>2)])|0);
  $54=((HEAP32[(($6)>>2)])|0);
  _lily_raise($53,1,5904,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$54,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  STACKTOP=sp;return;
 } else {
  _dispatch_dynaload($parser,$48,$state);
  STACKTOP=sp;return;
 }
}


function _expression_unary($parser,$state){
 $parser=($parser)|0;
 $state=($state)|0;
 var $1=0,$2=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$storemerge=0,label=0;

 $1=((HEAP32[(($state)>>2)])|0);
 $2=($1|0)==2;
 do {
  if ($2) {
   $storemerge=6;
  } else {
   $4=(($parser+52)|0);
   $5=((HEAP32[(($4)>>2)])|0);
   $6=(($5+40)|0);
   $7=((HEAP32[(($6)>>2)])|0);
   if (((($7|0))|0)==((7)|0)) {
    $12=(($parser+24)|0);
    $13=((HEAP32[(($12)>>2)])|0);
    _lily_es_push_unary_op($13,16);
    $storemerge=1;
    break;
   } else if (((($7|0))|0)==((17)|0)) {
    $9=(($parser+24)|0);
    $10=((HEAP32[(($9)>>2)])|0);
    _lily_es_push_unary_op($10,17);
    $storemerge=1;
    break;
   } else {
    $storemerge=1;
    break;
   }
  }
 } while(0);

 HEAP32[(($state)>>2)]=$storemerge;
 return;
}


function _expression_property($parser,$state){
 $parser=($parser)|0;
 $state=($state)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$23=0,$24=0;
 var label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+40)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  $5=(($parser+72)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  _lily_raise($6,1,6360,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $8=(($parser+52)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($9+12)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((HEAP32[(($1)>>2)])|0);
 $13=(($12)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((_lily_find_property($14,$11))|0);
 $16=($15|0)==0;
 if (!($16)) {
  $23=(($parser+24)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  _lily_es_push_property($24,$15);
  HEAP32[(($state)>>2)]=2;
  STACKTOP=sp;return;
 }
 $18=(($parser+72)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($14+12)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 _lily_raise($19,1,6152,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$11,HEAP32[(((tempVarArgs)+(8))>>2)]=$21,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 $23=(($parser+24)|0);
 $24=((HEAP32[(($23)>>2)])|0);
 _lily_es_push_property($24,$15);
 HEAP32[(($state)>>2)]=2;
 STACKTOP=sp;return;
}


function _check_valid_close_tok($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$or_cond3=0,$16=0,$_=0,$expect_0=0,$18=0,$20=0;
 var $21=0,$22=0,$23=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($parser+24)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((_lily_es_get_saved_tree($6))|0);
 $8=(($7+4)|0);
 $9=$8;
 $10=((HEAP16[(($9)>>1)])|0);
 $11=$10&255;
 $12=$10&251;
 $13=(($12<<16)>>16)==0;
 $14=(($11<<16)>>16)==11;
 $or_cond3=$13|$14;
 if ($or_cond3) {
  $expect_0=1;
 } else {
  $16=(($11<<16)>>16)==12;
  $_=($16?32:33);
  $expect_0=$_;
 }

 $18=($4|0)==($expect_0|0);
 if ($18) {
  STACKTOP=sp;return;
 }
 $20=(($parser+72)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=((_tokname($expect_0))|0);
 $23=((_tokname($4))|0);
 _lily_raise($21,1,6528,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$22,HEAP32[(((tempVarArgs)+(8))>>2)]=$23,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _expression_literal($parser,$state){
 $parser=($parser)|0;
 $state=($state)|0;
 var $scan_string=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$or_cond=0,$10=0,$11=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0;
 var $25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$43=0,$44=0,$45=0,$46=0,$49=0,$ld$0$0=0;
 var $50$0=0,$ld$1$1=0,$50$1=0,$$etemp$2$0=0,$$etemp$2$1=0,$$etemp$3$0=0,$$etemp$3$1=0,$51=0,$53=0,$54=0,$55$0=0,$55=0,$57=0,$58=0,$59=0,$62=0,$63=0,$_off$0=0,$_off$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $scan_string=((sp)|0);
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((HEAP32[(($state)>>2)])|0);
 $6=($5|0)==2;
 $7=$4&-2;
 $8=($7|0)==40;
 $or_cond=$6&$8;
 if ($or_cond) {
  $10=((_maybe_digit_fixup($parser))|0);
  $11=($10|0)==0;
  if (!($11)) {
   STACKTOP=sp;return;
  }
  HEAP32[(($state)>>2)]=5;
  STACKTOP=sp;return;
 }
 if ($6) {
  HEAP32[(($state)>>2)]=6;
  STACKTOP=sp;return;
 }
 if (((($4|0))|0)==((39)|0)) {
  $17=(($parser+24)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=(($parser+60)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=(($parser+44)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  _lily_msgbuf_flush($22);
  $23=(($2+12)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  _lily_msgbuf_add($22,$24);
  $25=(($22)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  HEAP32[(($scan_string)>>2)]=$26;
  _lily_es_enter_tree($18,22);
  $27=(($18+24)|0);
  $28=(($parser+28)|0);
  $29=(($2+20)|0);
  while(1) {
   $31=((_lily_scan_interpolation_piece($2,$scan_string))|0);
   $32=($31|0)==0;
   if ($32) {
    $40=((HEAP32[(($23)>>2)])|0);
    $41=((_lily_get_string_literal($20,$40))|0);
    _push_literal($parser,$41);
   } else {
    $34=((HEAP16[(($27)>>1)])|0);
    $35=($34&65535);
    $36=((HEAP32[(($28)>>2)])|0);
    $37=((HEAP32[(($23)>>2)])|0);
    _lily_sp_insert($36,$37,$27);
    $38=((HEAP32[(($29)>>2)])|0);
    _lily_es_push_text($18,23,$38,$35);
   }
   $43=((HEAP32[(($17)>>2)])|0);
   _lily_es_collect_arg($43);
   $44=((HEAP32[(($scan_string)>>2)])|0);
   $45=((HEAP8[($44)])|0);
   $46=(($45<<24)>>24)==0;
   if ($46) {
    break;
   }
  }
  _lily_es_leave_tree($18);
  _lily_msgbuf_flush($22);
  HEAP32[(($state)>>2)]=2;
  STACKTOP=sp;return;
 } else if (((($4|0))|0)==((40)|0)) {
  $49=(($2+32)|0);
  $ld$0$0=(($49)|0);
  $50$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($49+4)|0);
  $50$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $$etemp$2$0=32768;
  $$etemp$2$1=0;
  $_off$0=((_i64Add($50$0,$50$1,$$etemp$2$0,$$etemp$2$1))|0);$_off$1=tempRet0;
  $$etemp$3$0=65536;
  $$etemp$3$1=0;
  $51=(($_off$1>>>0) < ($$etemp$3$1>>>0)) | (((($_off$1>>>0) == ($$etemp$3$1>>>0) & ($_off$0>>>0) <  ($$etemp$3$0>>>0))));
  if ($51) {
   $53=(($parser+24)|0);
   $54=((HEAP32[(($53)>>2)])|0);
   $55$0=$50$0;
   $55=$55$0&65535;
   _lily_es_push_integer($54,$55);
  } else {
   $57=(($parser+60)|0);
   $58=((HEAP32[(($57)>>2)])|0);
   $59=((_lily_get_integer_literal($58,$50$0,$50$1))|0);
   _push_literal($parser,$59);
  }
  HEAP32[(($state)>>2)]=2;
  STACKTOP=sp;return;
 } else {
  $62=(($2+48)|0);
  $63=((HEAP32[(($62)>>2)])|0);
  _push_literal($parser,$63);
  HEAP32[(($state)>>2)]=2;
  STACKTOP=sp;return;
 }
}


function _expression_dot($parser,$state){
 $parser=($parser)|0;
 $state=($state)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $24=0,$25=0,$option_cls_0=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,label=0;

 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_lexer($2);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 if (((($4|0))|0)==((47)|0)) {
  _lily_lexer($2);
  $16=((_get_type($parser))|0);
  $17=(($parser+60)|0);
  $18=((HEAP32[(($17)>>2)])|0);
  $19=(($18+20)|0);
  $20=((HEAP32[(($19)>>2)])|0);
  $21=((_lily_find_class($18,$20,6672))|0);
  $22=($21|0)==0;
  if ($22) {
   $24=((HEAP32[(($19)>>2)])|0);
   $25=((_find_run_class_dynaload($parser,$24,6672))|0);
   $option_cls_0=$25;
  } else {
   $option_cls_0=$21;
  }

  $27=(($parser+68)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  _lily_tm_add($28,$16);
  $29=((HEAP32[(($27)>>2)])|0);
  $30=((_lily_tm_make($29,0,$option_cls_0,1))|0);
  $31=(($parser+24)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  _lily_es_enter_typecast($32,$30);
  $33=((HEAP32[(($31)>>2)])|0);
  _lily_es_leave_tree($33);
  HEAP32[(($state)>>2)]=2;
  return;
 } else if (((($4|0))|0)==((35)|0)) {
  $6=(($parser+24)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+24)|0);
  $9=((HEAP16[(($8)>>1)])|0);
  $10=($9&65535);
  $11=(($parser+28)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=(($2+12)|0);
  $14=((HEAP32[(($13)>>2)])|0);
  _lily_sp_insert($12,$14,$8);
  _lily_es_push_text($7,8,0,$10);
  HEAP32[(($state)>>2)]=2;
  return;
 } else {
  HEAP32[(($state)>>2)]=2;
  return;
 }
}


function _expression_comma_arrow($parser,$state){
 $parser=($parser)|0;
 $state=($state)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0,$21=0,$23=0,$24=0;
 var $25=0,$26=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$40=0,$41=0,$43=0,$44=0,$45=0,$47=0,$48=0,$49=0,$50=0;
 var $52=0,$53=0,$54=0,$56=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+24)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=($6|0)==0;
 if ($7) {
  $9=(($parser+72)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  _lily_raise($10,1,6952,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $12=((HEAP32[(($3)>>2)])|0);
 $13=((_lily_es_get_saved_tree($12))|0);
 $14=(($2+40)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 do {
  if (((($15|0))|0)==((2)|0)) {
   $17=(($13+4)|0);
   $18=$17;
   $19=((HEAP16[(($18)>>1)])|0);
   $20=$19&255;
   $21=(($20<<16)>>16)==3;
   if (!($21)) {
    break;
   }
   $23=(($13+14)|0);
   $24=((HEAP16[(($23)>>1)])|0);
   $25=$24&1;
   $26=(($25<<16)>>16)==0;
   if (!($26)) {
    break;
   }
   $28=(($parser+72)|0);
   $29=((HEAP32[(($28)>>2)])|0);
   _lily_raise($29,1,6792,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  } else if (((($15|0))|0)==((34)|0)) {
   $31=(($13+4)|0);
   $32=$31;
   $33=((HEAP16[(($32)>>1)])|0);
   $34=$33&255;
   if ((((($34<<16)>>16))|0)==((2)|0)) {
    $36=(($13+14)|0);
    $37=((HEAP16[(($36)>>1)])|0);
    $38=(($37<<16)>>16)==0;
    if ($38) {
     $40=$33&-256;
     $41=$40|3;
     HEAP16[(($32)>>1)]=$41;
     break;
    } else {
     $43=(($parser+72)|0);
     $44=((HEAP32[(($43)>>2)])|0);
     $45=((_tokname(34))|0);
     _lily_raise($44,1,12040,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$45,tempVarArgs))|0)); STACKTOP=tempVarArgs;
     break;
    }
   } else if ((((($34<<16)>>16))|0)==((3)|0)) {
    $47=(($13+14)|0);
    $48=((HEAP16[(($47)>>1)])|0);
    $49=$48&1;
    $50=(($49<<16)>>16)==0;
    if ($50) {
     break;
    }
   }
   $52=(($parser+72)|0);
   $53=((HEAP32[(($52)>>2)])|0);
   $54=((_tokname(34))|0);
   _lily_raise($53,1,12040,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$54,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 $56=((HEAP32[(($3)>>2)])|0);
 _lily_es_collect_arg($56);
 HEAP32[(($state)>>2)]=1;
 STACKTOP=sp;return;
}


function _get_named_arg($parser,$flags){
 $parser=($parser)|0;
 $flags=($flags)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$38=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+60)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((_lily_find_var($4,0,$6))|0);
 $8=($7|0)==0;
 if (!($8)) {
  $10=(($parser+72)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=((HEAP32[(($5)>>2)])|0);
  _lily_raise($11,1,7976,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$12,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $14=(($parser+56)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((HEAP32[(($5)>>2)])|0);
 $17=((_lily_emit_new_scoped_var($15,0,$16))|0);
 _lily_lexer($2);
 $18=(($2+40)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=($19|0)==6;
 if (!($20)) {
  $22=(($parser+72)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=((_tokname(6))|0);
  $25=((HEAP32[(($18)>>2)])|0);
  $26=((_tokname($25))|0);
  _lily_raise($23,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$24,HEAP32[(((tempVarArgs)+(8))>>2)]=$26,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $28=((_get_nameless_arg($parser,$flags))|0);
 $29=((HEAP32[(($flags)>>2)])|0);
 $30=$29&8;
 $31=($30|0)==0;
 if ($31) {
  $38=(($17+12)|0);
  HEAP32[(($38)>>2)]=$28;
  STACKTOP=sp;return (($28)|0);
 } else {
  $33=(($28+12)|0);
  $34=((HEAP32[(($33)>>2)])|0);
  $35=((HEAP32[(($34)>>2)])|0);
  $36=(($17+12)|0);
  HEAP32[(($36)>>2)]=$35;
  _collect_optarg_for($parser,$17);
  STACKTOP=sp;return (($28)|0);
 }
  return 0;
}


function _get_gc_flags_for($top_class,$target){
 $top_class=($top_class)|0;
 $target=($target)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$_=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$20=0,$22=0,$23=0,$25=0;
 var $26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$i_02=0,$result_flag_01=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$_0=0,label=0;

 $1=($target|0)==0;
 if ($1) {
  $_0=0;

  return (($_0)|0);
 }
 $3=(($target)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+40)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=(($6<<16)>>16)==11;
 if ($7) {
  $9=(($top_class+42)|0);
  $10=((HEAP16[(($9)>>1)])|0);
  $11=(($10<<16)>>16)==0;
  $_=($11?64:128);
  $_0=$_;

  return (($_0)|0);
 }
 $13=(($4+6)|0);
 $14=((HEAP16[(($13)>>1)])|0);
 $15=($14&65535);
 $16=$15&64;
 $17=($16|0)==0;
 if (!($17)) {
  $_0=64;

  return (($_0)|0);
 }
 $19=$15&128;
 $20=($19|0)==0;
 if (!($20)) {
  $_0=128;

  return (($_0)|0);
 }
 $22=$15&512;
 $23=($22|0)==0;
 if (!($23)) {
  $_0=64;

  return (($_0)|0);
 }
 $25=(($target+10)|0);
 $26=((HEAP16[(($25)>>1)])|0);
 $27=(($26<<16)>>16)==0;
 if ($27) {
  $_0=0;

  return (($_0)|0);
 }
 $28=((HEAP16[(($25)>>1)])|0);
 $29=(($28<<16)>>16)==0;
 if ($29) {
  $_0=0;

  return (($_0)|0);
 }
 $30=(($target+12)|0);
 $31=((HEAP32[(($30)>>2)])|0);
 $32=((HEAP16[(($25)>>1)])|0);
 $33=($32&65535);
 $result_flag_01=0;$i_02=0;
 while(1) {


  $35=(($31+($i_02<<2))|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=((_get_gc_flags_for($top_class,$36))|0);
  $38=$37|$result_flag_01;
  $39=((($i_02)+(1))|0);
  $40=($39|0)<($33|0);
  if ($40) {
   $result_flag_01=$38;$i_02=$39;
  } else {
   $_0=$38;
   break;
  }
 }

 return (($_0)|0);
}


function _ensure_unique_method_name($parser,$name){
 $parser=($parser)|0;
 $name=($name)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+60)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_find_var($2,0,$name))|0);
 $4=($3|0)==0;
 if (!($4)) {
  $6=(($parser+72)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  _lily_raise($7,1,7976,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$name,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $9=(($parser+40)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=($10|0)==0;
 if ($11) {
  STACKTOP=sp;return;
 }
 $13=(($10)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=((_lily_find_property($14,$name))|0);
 $16=($15|0)==0;
 if ($16) {
  STACKTOP=sp;return;
 }
 $18=(($parser+72)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=(($14+12)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 _lily_raise($19,1,7360,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$21,HEAP32[(((tempVarArgs)+(8))>>2)]=$name,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _resolve_module($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$15=0,$16=0,$search_entry_0_ph=0,$17=0,$18=0,$19=0,$20=0,$search_entry_01=0;
 var $22=0,$23=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$result_0_lcssa=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+60)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+52)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+24)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($4+12)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((_lily_find_package($6,$8))|0);
 $10=($9|0)==0;
 if ($10) {
  $15=((HEAP32[(($7)>>2)])|0);
  $16=((_lily_find_module($2,0,$15))|0);
  $search_entry_0_ph=$16;
 } else {
  $12=(($9+12)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $search_entry_0_ph=$13;
 }

 $17=($search_entry_0_ph|0)==0;
 if ($17) {
  $result_0_lcssa=0;

  STACKTOP=sp;return (($result_0_lcssa)|0);
 }
 $18=(($4+40)|0);
 $19=(($parser+72)|0);
 $20=(($parser+72)|0);
 $search_entry_01=$search_entry_0_ph;
 while(1) {

  _lily_lexer($4);
  $22=((HEAP32[(($18)>>2)])|0);
  $23=($22|0)==42;
  if (!($23)) {
   $25=((HEAP32[(($20)>>2)])|0);
   $26=((_tokname(42))|0);
   $27=((HEAP32[(($18)>>2)])|0);
   $28=((_tokname($27))|0);
   _lily_raise($25,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$26,HEAP32[(((tempVarArgs)+(8))>>2)]=$28,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  _lily_lexer($4);
  $30=((HEAP32[(($18)>>2)])|0);
  $31=($30|0)==35;
  if (!($31)) {
   $33=((HEAP32[(($19)>>2)])|0);
   $34=((_tokname(35))|0);
   $35=((HEAP32[(($18)>>2)])|0);
   $36=((_tokname($35))|0);
   _lily_raise($33,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$34,HEAP32[(((tempVarArgs)+(8))>>2)]=$36,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $38=((HEAP32[(($7)>>2)])|0);
  $39=((_lily_find_module($2,$search_entry_01,$38))|0);
  $40=($39|0)==0;
  if ($40) {
   $result_0_lcssa=$search_entry_01;
   break;
  } else {
   $search_entry_01=$39;
  }
 }

 STACKTOP=sp;return (($result_0_lcssa)|0);
}


function _dispatch_word_as_var($parser,$var,$state){
 $parser=($parser)|0;
 $var=($var)|0;
 $state=($state)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$16=0,$17=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$26=0;
 var $27=0,$28=0,$29=0,$30=0,$31=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($var+6)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=$3&1;
 $5=($4|0)==0;
 do {
  if ($5) {
   $12=$3&64;
   $13=($12|0)==0;
   if (!($13)) {
    _push_maybe_method($parser,$var);
    break;
   }
   $16=$3&512;
   $17=($16|0)==0;
   if (!($17)) {
    $19=(($parser+24)|0);
    $20=((HEAP32[(($19)>>2)])|0);
    _lily_es_push_global_var($20,$var);
    break;
   }
   $22=(($var+36)|0);
   $23=((HEAP32[(($22)>>2)])|0);
   $24=(($parser+56)|0);
   $25=((HEAP32[(($24)>>2)])|0);
   $26=(($25+90)|0);
   $27=((HEAP16[(($26)>>1)])|0);
   $28=($27&65535);
   $29=($23|0)==($28|0);
   $30=(($parser+24)|0);
   $31=((HEAP32[(($30)>>2)])|0);
   if ($29) {
    _lily_es_push_local_var($31,$var);
    break;
   } else {
    _lily_es_push_upvalue($31,$var);
    break;
   }
  } else {
   $7=(($parser+72)|0);
   $8=((HEAP32[(($7)>>2)])|0);
   $9=(($var+16)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   _lily_raise($8,1,5288,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$10,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
 } while(0);
 HEAP32[(($state)>>2)]=2;
 STACKTOP=sp;return;
}


function _constant_by_name($name){
 $name=($name)|0;
 var $1$0=0,$1$1=0,$i_01=0,$3=0,$ld$0$0=0,$4$0=0,$ld$1$1=0,$4$1=0,$5=0,$7=0,$8=0,$9=0,$10=0,$ld$2$0=0,$12$0=0,$ld$3$1=0,$12$1=0,$13=0,$14=0,$15=0;
 var $or_cond=0,$_0=0,label=0;

 $1$0=((_shorthash_for_name456($name))|0);
 $1$1=tempRet0;
 $i_01=0;
 while(1) {

  $3=((3952+($i_01<<4)+8)|0);
  $ld$0$0=(($3)|0);
  $4$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($3+4)|0);
  $4$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $5=(($4$0|0) == ($1$0|0)) & (($4$1|0) == ($1$1|0));
  if ($5) {
   $7=((3952+($i_01<<4))|0);
   $8=((HEAP32[(($7)>>2)])|0);
   $9=((_strcmp((($8)|0),(($name)|0)))|0);
   $10=($9|0)==0;
   if ($10) {
    $_0=$i_01;
    label = 5;
    break;
   }
  }
  $ld$2$0=(($3)|0);
  $12$0=((HEAP32[(($ld$2$0)>>2)])|0);
  $ld$3$1=(($3+4)|0);
  $12$1=((HEAP32[(($ld$3$1)>>2)])|0);
  $13=(($12$1>>>0) <= ($1$1>>>0)) & (((($12$1>>>0) <  ($1$1>>>0)) | ($12$0>>>0) <= ($1$0>>>0)));
  $14=((($i_01)+(1))|0);
  $15=($14|0)<6;
  $or_cond=$13&$15;
  if ($or_cond) {
   $i_01=$14;
  } else {
   $_0=-1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {

  return (($_0)|0);
 }
  return 0;
}


function _push_constant($parser,$key_id){
 $parser=($parser)|0;
 $key_id=($key_id)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,label=0;

 $1=(($parser+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+60)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 switch (($key_id|0)) {
 case 1: {
  _lily_es_push_self($2);
  return;
  break;
 }
 case 3: {
  $12=(($4+24)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=(($13+20)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  $16=((_lily_get_string_literal($4,$15))|0);
  _push_literal($parser,$16);
  return;
  break;
 }
 case 2: {
  _lily_es_push_boolean($2,0);
  return;
  break;
 }
 case 0: {
  _lily_es_push_boolean($2,1);
  return;
  break;
 }
 case 5: {
  $18=(($parser+56)|0);
  $19=((HEAP32[(($18)>>2)])|0);
  $20=(($19+56)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=(($21+16)|0);
  $23=((HEAP32[(($22)>>2)])|0);
  $24=((_lily_get_string_literal($4,$23))|0);
  _push_literal($parser,$24);
  return;
  break;
 }
 case 4: {
  $6=(($parser+52)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=(($7+16)|0);
  $9=((HEAP32[(($8)>>2)])|0);
  $10=(($9)&65535);
  _lily_es_push_integer($2,$10);
  return;
  break;
 }
 default: {
  return;
 }
 }
}


function _dispatch_word_as_class($parser,$cls,$state){
 $parser=($parser)|0;
 $cls=($cls)|0;
 $state=($state)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,label=0;

 $1=(($cls+6)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=$2&8;
 $4=(($3<<16)>>16)==0;
 if ($4) {
  _expression_class_access($parser,$cls,$state);
  return;
 } else {
  $6=(($parser+24)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=$cls;
  _lily_es_push_variant($7,$8);
  HEAP32[(($state)>>2)]=2;
  return;
 }
}


function _dispatch_dynaload($parser,$dl_item,$state){
 $parser=($parser)|0;
 $dl_item=($dl_item)|0;
 $state=($state)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$16=0,label=0;

 $1=(($parser+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($dl_item+4)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($4<<16)>>16)==1;
 if (!($5)) {
  $16=$dl_item;
  _dispatch_word_as_class($parser,$16,$state);
  return;
 }
 $7=$dl_item;
 $8=(($dl_item+6)|0);
 $9=((HEAP16[(($8)>>1)])|0);
 $10=$9&64;
 $11=(($10<<16)>>16)==0;
 if ($11) {
  _lily_es_push_global_var($2,$7);
 } else {
  _lily_es_push_defined_func($2,$7);
 }
 HEAP32[(($state)>>2)]=2;
 return;
}


function _maybe_digit_fixup($parser){
 $parser=($parser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$_=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$ld$0$0=0,$19$0=0,$ld$1$1=0;
 var $19$1=0,$$etemp$2$0=0,$$etemp$2$1=0,$$etemp$3$0=0,$$etemp$3$1=0,$20=0,$22=0,$23$0=0,$23=0,$25=0,$26=0,$27=0,$29=0,$30=0,$fixed_0=0,$_off$0=0,$_off$1=0,label=0;

 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+24)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($2+8)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+$5)|0);
 $9=((HEAP8[($8)])|0);
 $10=(($9<<24)>>24)==45;
 if (!((((($9<<24)>>24))|0)==((45)|0)|(((($9<<24)>>24))|0)==((43)|0))) {
  $fixed_0=0;

  return (($fixed_0)|0);
 }
 $_=($10&1);
 $12=(($parser+24)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 _lily_es_push_binary_op($13,$_);
 _lily_lexer_digit_rescan($2);
 $14=(($2+40)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=($15|0)==40;
 if (!($16)) {
  $29=(($2+48)|0);
  $30=((HEAP32[(($29)>>2)])|0);
  _push_literal($parser,$30);
  $fixed_0=1;

  return (($fixed_0)|0);
 }
 $18=(($2+32)|0);
 $ld$0$0=(($18)|0);
 $19$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($18+4)|0);
 $19$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $$etemp$2$0=32768;
 $$etemp$2$1=0;
 $_off$0=((_i64Add($19$0,$19$1,$$etemp$2$0,$$etemp$2$1))|0);$_off$1=tempRet0;
 $$etemp$3$0=65536;
 $$etemp$3$1=0;
 $20=(($_off$1>>>0) < ($$etemp$3$1>>>0)) | (((($_off$1>>>0) == ($$etemp$3$1>>>0) & ($_off$0>>>0) <  ($$etemp$3$0>>>0))));
 if ($20) {
  $22=((HEAP32[(($12)>>2)])|0);
  $23$0=$19$0;
  $23=$23$0&65535;
  _lily_es_push_integer($22,$23);
  $fixed_0=1;

  return (($fixed_0)|0);
 } else {
  $25=(($parser+60)|0);
  $26=((HEAP32[(($25)>>2)])|0);
  $27=((_lily_get_integer_literal($26,$19$0,$19$1))|0);
  _push_literal($parser,$27);
  $fixed_0=1;

  return (($fixed_0)|0);
 }
  return 0;
}


function _push_literal($parser,$literal){
 $parser=($parser)|0;
 $literal=($literal)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=(($parser+24)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($literal+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($literal+8)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6)&65535);
 _lily_es_push_literal($2,$4,$7);
 return;
}


function _collect_optarg_for($parser,$var){
 $parser=($parser)|0;
 $var=($var)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$19=0,$20=0,$21=0,$23=0;
 var $24=0,$25=0,$_=0,$expect_0=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$34=0,$35=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=0,$46=0;
 var $47=0,$48=0,$49=0,$50=0,$51=0,$53=0,$54=0,$55=0,$57=0,$58=0,$60=0,$61=0,$64=0,$65=0,$66=0,$67=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$75=0,$76=0,$77=0,$78=0,$80=0,$81=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$90=0,$91=0,$92=0,$93=0,$94=0,$96=0,$ld$0$0=0;
 var $97$0=0,$ld$1$1=0,$97$1=0,$$etemp$2$0=0,$$etemp$2$1=0,$$etemp$3$0=0,$$etemp$3$1=0,$98=0,$100$0=0,$100=0,$102=0,$103=0,$104=0,$105=0,$_off$0=0,$_off$1=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($parser+60)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($parser+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($var+12)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=(($8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=(($4+48)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=($10|0)==($12|0);
 do {
  if ($13) {
   $expect_0=40;
  } else {
   $15=(($4+52)|0);
   $16=((HEAP32[(($15)>>2)])|0);
   $17=($10|0)==($16|0);
   if ($17) {
    $expect_0=41;
    break;
   }
   $19=(($4+56)|0);
   $20=((HEAP32[(($19)>>2)])|0);
   $21=($10|0)==($20|0);
   if ($21) {
    $expect_0=37;
    break;
   }
   $23=(($4+60)|0);
   $24=((HEAP32[(($23)>>2)])|0);
   $25=($10|0)==($24|0);
   $_=($25?38:35);
   $expect_0=$_;
  }
 } while(0);

 $27=(($2+40)|0);
 $28=((HEAP32[(($27)>>2)])|0);
 $29=($28|0)==27;
 if (!($29)) {
  $31=(($parser+72)|0);
  $32=((HEAP32[(($31)>>2)])|0);
  $33=((_tokname(27))|0);
  $34=((HEAP32[(($27)>>2)])|0);
  $35=((_tokname($34))|0);
  _lily_raise($32,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$33,HEAP32[(((tempVarArgs)+(8))>>2)]=$35,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer($2);
 $37=((HEAP32[(($27)>>2)])|0);
 $38=($37|0)==($expect_0|0);
 if (!($38)) {
  $40=(($parser+72)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=((_tokname($expect_0))|0);
  $43=((HEAP32[(($27)>>2)])|0);
  $44=((_tokname($43))|0);
  _lily_raise($41,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$42,HEAP32[(((tempVarArgs)+(8))>>2)]=$44,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $46=(($var+8)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=(($47)&65535);
 _lily_u16_write_1($6,$48);
 $49=(($4+64)|0);
 $50=((HEAP32[(($49)>>2)])|0);
 $51=($10|0)==($50|0);
 if ($51) {
  $53=(($2+12)|0);
  $54=((HEAP32[(($53)>>2)])|0);
  $55=((_constant_by_name($54))|0);
  if (!(((($55|0))|0)==((2)|0)|((($55|0))|0)==((0)|0))) {
   $57=(($parser+72)|0);
   $58=((HEAP32[(($57)>>2)])|0);
   _lily_raise($58,1,7848,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$54,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $60=($55|0)==0;
  $61=($60&1);
  _lily_u16_write_2($6,44,$61);
  _lily_lexer($2);
  STACKTOP=sp;return;
 }
 if (((($expect_0|0))|0)==((40)|0)) {
  $96=(($2+32)|0);
  $ld$0$0=(($96)|0);
  $97$0=((HEAP32[(($ld$0$0)>>2)])|0);
  $ld$1$1=(($96+4)|0);
  $97$1=((HEAP32[(($ld$1$1)>>2)])|0);
  $$etemp$2$0=32768;
  $$etemp$2$1=0;
  $_off$0=((_i64Add($97$0,$97$1,$$etemp$2$0,$$etemp$2$1))|0);$_off$1=tempRet0;
  $$etemp$3$0=65536;
  $$etemp$3$1=0;
  $98=(($_off$1>>>0) < ($$etemp$3$1>>>0)) | (((($_off$1>>>0) == ($$etemp$3$1>>>0) & ($_off$0>>>0) <  ($$etemp$3$0>>>0))));
  if ($98) {
   $100$0=$97$0;
   $100=$100$0&65535;
   _lily_u16_write_2($6,43,$100);
   _lily_lexer($2);
   STACKTOP=sp;return;
  } else {
   $102=((_lily_get_integer_literal($4,$97$0,$97$1))|0);
   $103=(($102+8)|0);
   $104=((HEAP32[(($103)>>2)])|0);
   $105=(($104)&65535);
   _lily_u16_write_2($6,42,$105);
   _lily_lexer($2);
   STACKTOP=sp;return;
  }
 } else if (((($expect_0|0))|0)==((35)|0)) {
  $64=(($2+12)|0);
  $65=((HEAP32[(($64)>>2)])|0);
  $66=((_lily_find_scoped_variant($10,$65))|0);
  $67=($66|0)==0;
  if ($67) {
   $69=(($parser+72)|0);
   $70=((HEAP32[(($69)>>2)])|0);
   $71=(($10+12)|0);
   $72=((HEAP32[(($71)>>2)])|0);
   $73=((HEAP32[(($64)>>2)])|0);
   _lily_raise($70,1,7752,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$72,HEAP32[(((tempVarArgs)+(8))>>2)]=$73,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $75=(($66+6)|0);
  $76=((HEAP16[(($75)>>1)])|0);
  $77=$76&32;
  $78=(($77<<16)>>16)==0;
  if ($78) {
   $80=(($parser+72)|0);
   $81=((HEAP32[(($80)>>2)])|0);
   _lily_raise($81,1,7600,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $83=(($66+24)|0);
  $84=$83;
  $85=((HEAP32[(($84)>>2)])|0);
  $86=(($85+8)|0);
  $87=((HEAP32[(($86)>>2)])|0);
  $88=(($87)&65535);
  _lily_u16_write_2($6,42,$88);
  _lily_lexer($2);
  STACKTOP=sp;return;
 } else {
  $90=(($2+48)|0);
  $91=((HEAP32[(($90)>>2)])|0);
  $92=(($91+8)|0);
  $93=((HEAP32[(($92)>>2)])|0);
  $94=(($93)&65535);
  _lily_u16_write_2($6,42,$94);
  _lily_lexer($2);
  STACKTOP=sp;return;
 }
}


function _push_maybe_method($parser,$func){
 $parser=($parser)|0;
 $func=($func)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$17=0,$18=0,label=0;

 $1=(($func+40)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 do {
  if (!($3)) {
   $5=(($parser+40)|0);
   $6=((HEAP32[(($5)>>2)])|0);
   $7=($6|0)==0;
   if ($7) {
    break;
   }
   $9=(($6)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=((_lily_class_greater_eq($2,$10))|0);
   $12=($11|0)==0;
   if ($12) {
    break;
   }
   $14=(($parser+24)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   _lily_es_push_method($15,$func);
   return;
  }
 } while(0);
 $17=(($parser+24)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 _lily_es_push_defined_func($18,$func);
 return;
}


function _expression_class_access($parser,$cls,$state){
 $parser=($parser)|0;
 $cls=($cls)|0;
 $state=($state)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0,$23=0,$24=0,$25=0;
 var $27=0,$28=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$43=0,$45=0,$46=0,$47=0,$48=0,$_pr=0,$50=0;
 var $51=0,$52=0,$or_cond=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$62=0,$63=0,$64=0,$66=0,$67=0,$69=0,$70=0,$71=0,$72=0,$73=0;
 var label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($parser+52)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_lexer($2);
 $3=(($2+40)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($4|0)==42;
 if (!($5)) {
  $7=(($cls+6)|0);
  $8=((HEAP16[(($7)>>1)])|0);
  $9=$8&4;
  $10=(($9<<16)>>16)==0;
  if (!($10)) {
   $12=(($parser+72)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   _lily_raise($13,1,5752,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $15=((_lily_find_or_dl_member($parser,$cls,5656))|0);
  $16=($15|0)==0;
  if ($16) {
   $18=(($parser+72)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=(($cls+12)|0);
   $21=((HEAP32[(($20)>>2)])|0);
   _lily_raise($19,1,5528,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$21,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $23=(($parser+24)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=$15;
  _lily_es_push_static_func($24,$25);
  HEAP32[(($state)>>2)]=10;
  STACKTOP=sp;return;
 }
 HEAP32[(($state)>>2)]=2;
 _lily_lexer($2);
 $27=((HEAP32[(($3)>>2)])|0);
 $28=($27|0)==35;
 if (!($28)) {
  $30=(($parser+72)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=((_tokname(35))|0);
  $33=((HEAP32[(($3)>>2)])|0);
  $34=((_tokname($33))|0);
  _lily_raise($31,1,12136,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$32,HEAP32[(((tempVarArgs)+(8))>>2)]=$34,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $36=(($2+12)|0);
 $37=((HEAP32[(($36)>>2)])|0);
 $38=((_lily_find_or_dl_member($parser,$cls,$37))|0);
 $39=($38|0)==0;
 do {
  if (!($39)) {
   $41=(($38+4)|0);
   $42=((HEAP16[(($41)>>1)])|0);
   $43=(($42<<16)>>16)==1;
   if ($43) {
    $45=(($38+40)|0);
    $46=$45;
    $47=((HEAP32[(($46)>>2)])|0);
    $48=($47|0)==($cls|0);
    if (!($48)) {
     break;
    }
    $_pr=((HEAP16[(($41)>>1)])|0);
    $50=$_pr;
   } else {
    $50=$42;
   }

   $51=(($50<<16)>>16)==4;
   $52=($38|0)==0;
   $or_cond=$51|$52;
   if ($or_cond) {
    break;
   }
   $54=(($parser+24)|0);
   $55=((HEAP32[(($54)>>2)])|0);
   $56=$38;
   _lily_es_push_static_func($55,$56);
   STACKTOP=sp;return;
  }
 } while(0);
 $57=(($cls+6)|0);
 $58=((HEAP16[(($57)>>1)])|0);
 $59=$58&4;
 $60=(($59<<16)>>16)==0;
 do {
  if (!($60)) {
   $62=((HEAP32[(($36)>>2)])|0);
   $63=((_lily_find_scoped_variant($cls,$62))|0);
   $64=($63|0)==0;
   if ($64) {
    break;
   }
   $66=(($parser+24)|0);
   $67=((HEAP32[(($66)>>2)])|0);
   _lily_es_push_variant($67,$63);
   STACKTOP=sp;return;
  }
 } while(0);
 $69=(($parser+72)|0);
 $70=((HEAP32[(($69)>>2)])|0);
 $71=(($cls+12)|0);
 $72=((HEAP32[(($71)>>2)])|0);
 $73=((HEAP32[(($36)>>2)])|0);
 _lily_raise($70,1,5416,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,HEAP32[((tempVarArgs)>>2)]=$72,HEAP32[(((tempVarArgs)+(8))>>2)]=$73,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return;
}


function _lily_new_msgbuf(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;

 $1=((_lily_malloc(12))|0);
 $2=$1;
 $3=((_lily_malloc(64))|0);
 $4=$1;
 HEAP32[(($4)>>2)]=$3;
 HEAP8[($3)]=0;
 $5=(($1+4)|0);
 $6=$5;
 HEAP32[(($6)>>2)]=0;
 $7=(($1+8)|0);
 $8=$7;
 HEAP32[(($8)>>2)]=64;
 return (($2)|0);
}


function _lily_free_msgbuf($msgbuf){
 $msgbuf=($msgbuf)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=(($msgbuf)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_free($2);
 $3=$msgbuf;
 _lily_free($3);
 return;
}


function _lily_msgbuf_add($msgbuf,$str){
 $msgbuf=($msgbuf)|0;
 $str=($str)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$11=0,$12=0,$13=0,$14=0,$15=0,label=0;

 $1=((_strlen((($str)|0)))|0);
 $2=(($msgbuf+4)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($1)+(1))|0);
 $5=((($4)+($3))|0);
 $6=(($msgbuf+8)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($5>>>0)>($7>>>0);
 if ($8) {
  _resize_msgbuf($msgbuf,$5);
 }
 $11=(($msgbuf)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((_strcat((($12)|0),(($str)|0)))|0);
 $14=((HEAP32[(($2)>>2)])|0);
 $15=((($14)+($1))|0);
 HEAP32[(($2)>>2)]=$15;
 return;
}


function _lily_msgbuf_add_bytestring($msgbuf,$str,$length){
 $msgbuf=($msgbuf)|0;
 $str=($str)|0;
 $length=($length)|0;
 var label=0;

 _add_escaped_sized($msgbuf,1,$str,$length);
 return;
}


function _lily_msgbuf_escape_add_str($msgbuf,$str){
 $msgbuf=($msgbuf)|0;
 $str=($str)|0;
 var $1=0,label=0;

 $1=((_strlen((($str)|0)))|0);
 _add_escaped_sized($msgbuf,0,$str,$1);
 return;
}


function _lily_msgbuf_add_text_range($msgbuf,$text,$start,$stop){
 $msgbuf=($msgbuf)|0;
 $text=($text)|0;
 $start=($start)|0;
 $stop=($stop)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,label=0;

 $1=((($stop)-($start))|0);
 $2=(($msgbuf+4)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((($1)+(1))|0);
 $5=((($4)+($3))|0);
 $6=(($msgbuf+8)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=($5>>>0)>($7>>>0);
 if ($8) {
  _resize_msgbuf($msgbuf,$5);
 }
 $11=(($msgbuf)|0);
 $12=((HEAP32[(($11)>>2)])|0);
 $13=((HEAP32[(($2)>>2)])|0);
 $14=(($12+$13)|0);
 $15=(($text+$start)|0);
 (_memcpy((($14)|0), (($15)|0), $1)|0);
 $16=((HEAP32[(($2)>>2)])|0);
 $17=((($16)+($1))|0);
 HEAP32[(($2)>>2)]=$17;
 $18=((HEAP32[(($11)>>2)])|0);
 $19=(($18+$17)|0);
 HEAP8[($19)]=0;
 return;
}


function _lily_msgbuf_add_char($msgbuf,$c){
 $msgbuf=($msgbuf)|0;
 $c=($c)|0;
 var $ch_buf=0,$1=0,$2=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $ch_buf=((sp)|0);
 $1=(($ch_buf)|0);
 HEAP8[($1)]=$c;
 $2=(($ch_buf+1)|0);
 HEAP8[($2)]=0;
 _lily_msgbuf_add($msgbuf,$1);
 STACKTOP=sp;return;
}


function _lily_msgbuf_add_boolean($msgbuf,$b){
 $msgbuf=($msgbuf)|0;
 $b=($b)|0;
 var $1=0,label=0;

 $1=($b|0)==0;
 if ($1) {
  _lily_msgbuf_add($msgbuf,10712);
  return;
 } else {
  _lily_msgbuf_add($msgbuf,14368);
  return;
 }
}


function _lily_msgbuf_add_int($msgbuf,$i){
 $msgbuf=($msgbuf)|0;
 $i=($i)|0;
 var $buf=0,$1=0,$2=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+64)|0;
 $buf=((sp)|0);
 $1=(($buf)|0);
 $2=((_sprintf((($1)|0),((13264)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$i,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 _lily_msgbuf_add($msgbuf,$1);
 STACKTOP=sp;return;
}


function _lily_msgbuf_add_double($msgbuf,$d){
 $msgbuf=($msgbuf)|0;
 $d=+($d);
 var $buf=0,$1=0,$2=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+64)|0;
 $buf=((sp)|0);
 $1=(($buf)|0);
 $2=((_sprintf((($1)|0),((12024)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAPF64[((tempVarArgs)>>3)]=$d,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 _lily_msgbuf_add($msgbuf,$1);
 STACKTOP=sp;return;
}


function _lily_msgbuf_flush($msgbuf){
 $msgbuf=($msgbuf)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=(($msgbuf+4)|0);
 HEAP32[(($1)>>2)]=0;
 $2=(($msgbuf)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 HEAP8[($3)]=0;
 return;
}


function _lily_msgbuf_add_fmt_va($msgbuf,$fmt,$var_args){
 $msgbuf=($msgbuf)|0;
 $fmt=($fmt)|0;
 $var_args=($var_args)|0;
 var $modifier_buf=0,$buffer=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$i_04=0,$text_start_03=0,$12=0,$13=0,$15=0,$16=0,$18=0,$21=0;
 var $22=0,$_off=0,$23=0,$25=0,$26=0,$27=0,$_off2=0,$28=0,$30=0,$31=0,$32=0,$c_0=0,$i_1=0,$36=0,$38=0,$39=0,$40=0,$43=0,$45=0,$46=0;
 var $48=0,$49=0,$51=0,$53=0,$56=0,$57=0,$58=0,$60=0,$62=0,$64=0,$66=0,$68=0,$text_start_1=0,$i_2=0,$70=0,$71=0,$i_0_lcssa=0,$text_start_0_lcssa=0,$72=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+136)|0;
 $modifier_buf=((sp)|0);
 $buffer=(((sp)+(8))|0);
 $1=(($modifier_buf)|0);
 HEAP8[($1)]=37;
 $2=(($modifier_buf+1)|0);
 HEAP8[($2)]=0;
 $3=((_strlen((($fmt)|0)))|0);
 $4=($3|0)>0;
 if (!($4)) {
  STACKTOP=sp;return;
 }
 $5=(($modifier_buf+2)|0);
 $6=(($modifier_buf+3)|0);
 $7=(($modifier_buf+4)|0);
 $8=(($modifier_buf+3)|0);
 $9=(($buffer)|0);
 $10=(($buffer)|0);
 $text_start_03=0;$i_04=0;
 while(1) {


  $12=(($fmt+$i_04)|0);
  $13=((HEAP8[($12)])|0);
  if ((((($13<<24)>>24))|0)==((94)|0)) {
   $53=($i_04|0)==($text_start_03|0);
   if (!($53)) {
    _lily_msgbuf_add_text_range($msgbuf,$fmt,$text_start_03,$i_04);
   }
   $56=((($i_04)+(1))|0);
   $57=(($fmt+$56)|0);
   $58=((HEAP8[($57)])|0);
   if ((((($58<<24)>>24))|0)==((84)|0)) {
    $60=(tempInt=((HEAP32[((($var_args)+(4))>>2)])|0),HEAP32[((($var_args)+(4))>>2)]=tempInt + 8,((HEAP32[(((((HEAP32[(($var_args)>>2)])|0))+(tempInt))>>2)])|0));
    _add_type($msgbuf,$60);
   } else if ((((($58<<24)>>24))|0)==((73)|0)) {
    $62=(tempInt=((HEAP32[((($var_args)+(4))>>2)])|0),HEAP32[((($var_args)+(4))>>2)]=tempInt + 8,((HEAP32[(((((HEAP32[(($var_args)>>2)])|0))+(tempInt))>>2)])|0));
    _msgbuf_add_indent($msgbuf,$62);
   } else if ((((($58<<24)>>24))|0)==((69)|0)) {
    $64=(tempInt=((HEAP32[((($var_args)+(4))>>2)])|0),HEAP32[((($var_args)+(4))>>2)]=tempInt + 8,((HEAP32[(((((HEAP32[(($var_args)>>2)])|0))+(tempInt))>>2)])|0));
    _lily_msgbuf_escape_add_str($msgbuf,$64);
   } else if ((((($58<<24)>>24))|0)==((82)|0)) {
    $66=(tempInt=((HEAP32[((($var_args)+(4))>>2)])|0),HEAP32[((($var_args)+(4))>>2)]=tempInt + 8,((HEAP32[(((((HEAP32[(($var_args)>>2)])|0))+(tempInt))>>2)])|0));
    _msgbuf_add_errno_string($msgbuf,$66);
   }
   $68=((($i_04)+(2))|0);
   $i_2=$56;$text_start_1=$68;
  } else if ((((($13<<24)>>24))|0)==((37)|0)) {
   $15=((($i_04)+(1))|0);
   $16=($15|0)==($3|0);
   if ($16) {
    $text_start_0_lcssa=$text_start_03;$i_0_lcssa=$i_04;
    break;
   }
   $18=($i_04|0)==($text_start_03|0);
   if (!($18)) {
    _lily_msgbuf_add_text_range($msgbuf,$fmt,$text_start_03,$i_04);
   }
   $21=(($fmt+$15)|0);
   $22=((HEAP8[($21)])|0);
   $_off=((($22)-(48))&255);
   $23=((($_off&255))>>>0)<((10)>>>0);
   do {
    if ($23) {
     HEAP8[($2)]=$22;
     $25=((($i_04)+(2))|0);
     $26=(($fmt+$25)|0);
     $27=((HEAP8[($26)])|0);
     $_off2=((($27)-(48))&255);
     $28=((($_off2&255))>>>0)<((10)>>>0);
     if ($28) {
      HEAP8[($5)]=$27;
      HEAP8[($6)]=100;
      HEAP8[($7)]=0;
      $30=((($i_04)+(3))|0);
      $31=(($fmt+$30)|0);
      $32=((HEAP8[($31)])|0);
      $i_1=$30;$c_0=$32;
      break;
     } else {
      HEAP8[($5)]=100;
      HEAP8[($8)]=0;
      $i_1=$25;$c_0=$27;
      break;
     }
    } else {
     $i_1=$15;$c_0=$22;
    }
   } while(0);


   do {
    if ((((($c_0<<24)>>24))|0)==((112)|0)) {
     $48=(tempInt=((HEAP32[((($var_args)+(4))>>2)])|0),HEAP32[((($var_args)+(4))>>2)]=tempInt + 8,((HEAP32[(((((HEAP32[(($var_args)>>2)])|0))+(tempInt))>>2)])|0));
     $49=((_snprintf((($10)|0),((128)|0),((10888)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$48,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
     _lily_msgbuf_add($msgbuf,$10);
    } else if ((((($c_0<<24)>>24))|0)==((100)|0)) {
     $38=(tempInt=((HEAP32[((($var_args)+(4))>>2)])|0),HEAP32[((($var_args)+(4))>>2)]=tempInt + 8,((HEAP32[(((((HEAP32[(($var_args)>>2)])|0))+(tempInt))>>2)])|0));
     $39=((HEAP8[($2)])|0);
     $40=(($39<<24)>>24)==0;
     if ($40) {
      _lily_msgbuf_add_int($msgbuf,$38);
      break;
     } else {
      $43=((_snprintf((($9)|0),((128)|0),(($1)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$38,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
      _lily_msgbuf_add($msgbuf,$9);
      HEAP8[($2)]=0;
      break;
     }
    } else if ((((($c_0<<24)>>24))|0)==((115)|0)) {
     $36=(tempInt=((HEAP32[((($var_args)+(4))>>2)])|0),HEAP32[((($var_args)+(4))>>2)]=tempInt + 8,((HEAP32[(((((HEAP32[(($var_args)>>2)])|0))+(tempInt))>>2)])|0));
     _lily_msgbuf_add($msgbuf,$36);
    } else if ((((($c_0<<24)>>24))|0)==((99)|0)) {
     $45=(tempInt=((HEAP32[((($var_args)+(4))>>2)])|0),HEAP32[((($var_args)+(4))>>2)]=tempInt + 8,((HEAP32[(((((HEAP32[(($var_args)>>2)])|0))+(tempInt))>>2)])|0));
     $46=(($45)&255);
     _lily_msgbuf_add_char($msgbuf,$46);
    }
   } while(0);
   $51=((($i_1)+(1))|0);
   $i_2=$i_1;$text_start_1=$51;
  } else {
   $i_2=$i_04;$text_start_1=$text_start_03;
  }


  $70=((($i_2)+(1))|0);
  $71=($70|0)<($3|0);
  if ($71) {
   $text_start_03=$text_start_1;$i_04=$70;
  } else {
   $text_start_0_lcssa=$text_start_1;$i_0_lcssa=$70;
   break;
  }
 }


 $72=($i_0_lcssa|0)==($text_start_0_lcssa|0);
 if ($72) {
  STACKTOP=sp;return;
 }
 _lily_msgbuf_add_text_range($msgbuf,$fmt,$text_start_0_lcssa,$i_0_lcssa);
 STACKTOP=sp;return;
}


function _lily_msgbuf_add_fmt($msgbuf,$fmt,varrp){
 $msgbuf=($msgbuf)|0;
 $fmt=($fmt)|0;
 varrp=(varrp)|0;
 var $var_args=0,$1=0,$2=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $var_args=((sp)|0);
 $1=(($var_args)|0);
 $2=$var_args;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 _lily_msgbuf_add_fmt_va($msgbuf,$fmt,$1);

 STACKTOP=sp;return;
}


function _lily_msgbuf_grow($msgbuf){
 $msgbuf=($msgbuf)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=(($msgbuf+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2<<1;
 _resize_msgbuf($msgbuf,$3);
 return;
}


function _resize_msgbuf($msgbuf,$new_size){
 $msgbuf=($msgbuf)|0;
 $new_size=($new_size)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=(($msgbuf)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_realloc($2,$new_size))|0);
 HEAP32[(($1)>>2)]=$3;
 $4=(($msgbuf+8)|0);
 HEAP32[(($4)>>2)]=$new_size;
 return;
}


function _add_escaped_sized($msgbuf,$is_bytestring,$str,$len){
 $msgbuf=($msgbuf)|0;
 $is_bytestring=($is_bytestring)|0;
 $str=($str)|0;
 $len=($len)|0;
 var $1=0,$2=0,$escape_char_06=0,$start_05=0,$i_04=0,$4=0,$5=0,$14=0,$15=0,$16=0,$17=0,$or_cond=0,$or_cond8=0,$escape_char_1_ph=0,$19=0,$22=0,$26=0,$escape_char_13=0,$start_1=0,$28=0;
 var $29=0,$30=0,$32=0,label=0;

 $1=($len|0)>0;
 do {
  if ($1) {
   $2=($is_bytestring|0)==0;
   $i_04=0;$start_05=0;$escape_char_06=0;
   while(1) {



    $4=(($str+$i_04)|0);
    $5=((HEAP8[($4)])|0);
    switch ((($5<<24)>>24)) {
    case 39: {
     $escape_char_1_ph=$5;
     label = 12;
     break;
    }
    case 34: {
     $escape_char_1_ph=$5;
     label = 12;
     break;
    }
    case 10: {
     $escape_char_1_ph=110;
     label = 12;
     break;
    }
    case 92: {
     $escape_char_1_ph=$5;
     label = 12;
     break;
    }
    case 8: {
     $escape_char_1_ph=98;
     label = 12;
     break;
    }
    case 7: {
     $escape_char_1_ph=97;
     label = 12;
     break;
    }
    case 13: {
     $escape_char_1_ph=114;
     label = 12;
     break;
    }
    case 9: {
     $escape_char_1_ph=116;
     label = 12;
     break;
    }
    default: {
     $14=(($5<<24)>>24);
     $15=((_isprint((($14)|0)))|0);
     $16=($15|0)!=0;
     $17=(($5<<24)>>24)<0;
     $or_cond=$17&$2;
     $or_cond8=$16|$or_cond;
     if ($or_cond8) {
      $start_1=$start_05;$escape_char_13=0;
     } else {
      $escape_char_1_ph=$escape_char_06;
      label = 12;
     }
    }
    }
    if ((label|0) == 12) {
     label = 0;

     $19=($i_04|0)==($start_05|0);
     if (!($19)) {
      _lily_msgbuf_add_text_range($msgbuf,$str,$start_05,$i_04);
     }
     _lily_msgbuf_add_char($msgbuf,92);
     $22=(($escape_char_1_ph<<24)>>24)==0;
     if ($22) {
      _add_escaped_char($msgbuf,$5);
     } else {
      _lily_msgbuf_add_char($msgbuf,$escape_char_1_ph);
     }
     $26=((($i_04)+(1))|0);
     $start_1=$26;$escape_char_13=$escape_char_1_ph;
    }


    $28=((($i_04)+(1))|0);
    $29=($28|0)<($len|0);
    if ($29) {
     $i_04=$28;$start_05=$start_1;$escape_char_06=$escape_char_13;
    } else {
     break;
    }
   }
   $30=($start_1|0)==($len|0);
   if ($30) {
    break;
   }
   _lily_msgbuf_add_text_range($msgbuf,$str,$start_1,$len);
  }
 } while(0);
 $32=($is_bytestring|0)==0;
 if ($32) {
  return;
 }
 _lily_msgbuf_add_char($msgbuf,0);
 return;
}


function _add_type($msgbuf,$type){
 $msgbuf=($msgbuf)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$i_07=0,$ch_06=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$i1_03=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$i1_0_lcssa=0;
 var $42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$51=0,$52=0,$53=0,$56=0,$57=0,$58=0,$59=0,$62=0,$63=0,$65=0,$66=0,$67=0;
 var $68=0,$70=0,$71=0,$72=0,$74=0,$76=0,$77=0,$78=0,$79=0,$i2_01=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$90=0,$91=0,$92=0;
 var $93=0,label=0;

 $1=(($type)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+12)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 _lily_msgbuf_add($msgbuf,$4);
 $5=((HEAP32[(($1)>>2)])|0);
 $6=(($5+40)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 if ((((($7<<16)>>16))|0)==((5)|0)) {
  $9=(($type+8)|0);
  $10=((HEAP16[(($9)>>1)])|0);
  $11=(($10<<16)>>16)==0;
  if ($11) {
   _lily_msgbuf_add($msgbuf,4520);
  } else {
   _lily_msgbuf_add($msgbuf,8392);
   $13=((HEAP16[(($9)>>1)])|0);
   $14=($13&65535);
   $15=((($14)-(1))|0);
   $16=($15|0)>0;
   _lily_msgbuf_add_char($msgbuf,65);
   if ($16) {
    $ch_06=65;$i_07=0;
    while(1) {


     _lily_msgbuf_add($msgbuf,7032);
     $17=((($i_07)+(1))|0);
     $18=((($ch_06)+(1))&255);
     $19=((HEAP16[(($9)>>1)])|0);
     $20=($19&65535);
     $21=((($20)-(1))|0);
     $22=($17|0)<($21|0);
     _lily_msgbuf_add_char($msgbuf,$18);
     if ($22) {
      $ch_06=$18;$i_07=$17;
     } else {
      break;
     }
    }
   }
   _lily_msgbuf_add($msgbuf,5648);
  }
  $25=(($type+10)|0);
  $26=((HEAP16[(($25)>>1)])|0);
  $27=((($26&65535))>>>0)>((1)>>>0);
  do {
   if ($27) {
    $28=((HEAP16[(($25)>>1)])|0);
    $29=($28&65535);
    $30=((($29)-(1))|0);
    $31=($30|0)>1;
    if ($31) {
     $32=(($type+12)|0);
     $i1_03=1;
     while(1) {

      $34=((HEAP32[(($32)>>2)])|0);
      $35=(($34+($i1_03<<2))|0);
      $36=((HEAP32[(($35)>>2)])|0);
      _add_type($msgbuf,$36);
      _lily_msgbuf_add($msgbuf,7032);
      $37=((($i1_03)+(1))|0);
      $38=((HEAP16[(($25)>>1)])|0);
      $39=($38&65535);
      $40=((($39)-(1))|0);
      $41=($37|0)<($40|0);
      if ($41) {
       $i1_03=$37;
      } else {
       $i1_0_lcssa=$37;
       break;
      }
     }
    } else {
     $i1_0_lcssa=1;
    }

    $42=(($type+6)|0);
    $43=((HEAP16[(($42)>>1)])|0);
    $44=$43&1;
    $45=(($44<<16)>>16)==0;
    $46=(($type+12)|0);
    $47=((HEAP32[(($46)>>2)])|0);
    $48=(($47+($i1_0_lcssa<<2))|0);
    $49=((HEAP32[(($48)>>2)])|0);
    if ($45) {
     _add_type($msgbuf,$49);
     break;
    } else {
     $51=(($49+12)|0);
     $52=((HEAP32[(($51)>>2)])|0);
     $53=((HEAP32[(($52)>>2)])|0);
     _add_type($msgbuf,$53);
     _lily_msgbuf_add($msgbuf,17360);
     break;
    }
   }
  } while(0);
  $56=(($type+12)|0);
  $57=((HEAP32[(($56)>>2)])|0);
  $58=((HEAP32[(($57)>>2)])|0);
  $59=($58|0)==0;
  if (!($59)) {
   _lily_msgbuf_add($msgbuf,15488);
   $62=((HEAP32[(($56)>>2)])|0);
   $63=((HEAP32[(($62)>>2)])|0);
   _add_type($msgbuf,$63);
   _lily_msgbuf_add($msgbuf,16488);
   return;
  }
  _lily_msgbuf_add($msgbuf,16488);
  return;
 } else if ((((($7<<16)>>16))|0)==((11)|0)) {
  $65=(($type+8)|0);
  $66=((HEAP16[(($65)>>1)])|0);
  $67=(($66)&255);
  $68=((($67)+(65))&255);
  _lily_msgbuf_add_char($msgbuf,$68);
  return;
 } else {
  $70=(($5+42)|0);
  $71=((HEAP16[(($70)>>1)])|0);
  $72=(($71<<16)>>16)==0;
  if ($72) {
   return;
  }
  $74=(($7<<16)>>16)==-4;
  if (!($74)) {
   _lily_msgbuf_add($msgbuf,8392);
  }
  $76=(($type+10)|0);
  $77=((HEAP16[(($76)>>1)])|0);
  $78=(($77<<16)>>16)==0;
  if (!($78)) {
   $79=(($type+12)|0);
   $i2_01=0;
   while(1) {

    $81=((HEAP32[(($79)>>2)])|0);
    $82=(($81+($i2_01<<2))|0);
    $83=((HEAP32[(($82)>>2)])|0);
    _add_type($msgbuf,$83);
    $84=((HEAP16[(($76)>>1)])|0);
    $85=($84&65535);
    $86=((($85)-(1))|0);
    $87=($i2_01|0)==($86|0);
    if (!($87)) {
     _lily_msgbuf_add($msgbuf,7032);
    }
    $90=((($i2_01)+(1))|0);
    $91=((HEAP16[(($76)>>1)])|0);
    $92=($91&65535);
    $93=($90|0)<($92|0);
    if ($93) {
     $i2_01=$90;
    } else {
     break;
    }
   }
  }
  if ($74) {
   return;
  }
  _lily_msgbuf_add($msgbuf,15040);
  return;
 }
}


function _msgbuf_add_indent($msgbuf,$indent){
 $msgbuf=($msgbuf)|0;
 $indent=($indent)|0;
 var $1=0,$i_01=0,$2=0,$3=0,label=0;

 $1=($indent|0)>0;
 if ($1) {
  $i_01=0;
 } else {
  return;
 }
 while(1) {

  _lily_msgbuf_add($msgbuf,9696);
  $2=((($i_01)+(1))|0);
  $3=($2|0)<($indent|0);
  if ($3) {
   $i_01=$2;
  } else {
   break;
  }
 }
 return;
}


function _msgbuf_add_errno_string($msgbuf,$errno_val){
 $msgbuf=($msgbuf)|0;
 $errno_val=($errno_val)|0;
 var $buffer=0,$1=0,$2=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+128)|0;
 $buffer=((sp)|0);
 $1=(($buffer)|0);
 $2=((_strerror_r((($errno_val)|0),(($1)|0),((128)|0)))|0);
 _lily_msgbuf_add($msgbuf,$1);
 STACKTOP=sp;return;
}


function _add_escaped_char($msgbuf,$ch){
 $msgbuf=($msgbuf)|0;
 $ch=($ch)|0;
 var $buffer=0,$1=0,$2=0,$3=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $buffer=((sp)|0);
 $1=(($buffer)|0);
 $2=($ch&255);
 $3=((_sprintf((($1)|0),((14464)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$2,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;
 _lily_msgbuf_add($msgbuf,$1);
 STACKTOP=sp;return;
}


function _lily_new_type_maker(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=((_lily_malloc(20))|0);
 $2=$1;
 $3=((_lily_malloc(16))|0);
 $4=$3;
 $5=$1;
 HEAP32[(($5)>>2)]=$4;
 $6=(($1+4)|0);
 $7=$6;
 HEAP32[(($7)>>2)]=0;
 $8=(($1+8)|0);
 $9=$8;
 HEAP32[(($9)>>2)]=4;
 return (($2)|0);
}


function _lily_tm_reserve($tm,$amount){
 $tm=($tm)|0;
 $amount=($amount)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$_lcssa=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,label=0;

 $1=(($tm+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+($amount))|0);
 $4=(($tm+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3>>>0)>($5>>>0);
 if (!($6)) {
  return;
 }
 $7=((HEAP32[(($1)>>2)])|0);
 $8=((($7)+($amount))|0);
 $9=((HEAP32[(($4)>>2)])|0);
 $10=($8>>>0)>($9>>>0);
 if ($10) {
  $11=((HEAP32[(($1)>>2)])|0);
  $12=((($11)+($amount))|0);
  $14=$9;
  while(1) {

   $15=$14<<1;
   $16=($12>>>0)>($15>>>0);
   if ($16) {
    $14=$15;
   } else {
    break;
   }
  }
  HEAP32[(($4)>>2)]=$15;
  $_lcssa=$15;
 } else {
  $_lcssa=$9;
 }

 $18=(($tm)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 $20=$19;
 $21=$_lcssa<<2;
 $22=((_lily_realloc($20,$21))|0);
 $23=$22;
 HEAP32[(($18)>>2)]=$23;
 return;
}


function _lily_tm_add_unchecked($tm,$type){
 $tm=($tm)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=(($tm+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($tm)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($4+($2<<2))|0);
 HEAP32[(($5)>>2)]=$type;
 $6=((HEAP32[(($1)>>2)])|0);
 $7=((($6)+(1))|0);
 HEAP32[(($1)>>2)]=$7;
 return;
}


function _lily_tm_add($tm,$type){
 $tm=($tm)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,label=0;

 $1=(($tm+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)+(1))|0);
 $4=(($tm+8)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($3|0)==($5|0);
 if ($6) {
  $8=$5<<1;
  HEAP32[(($4)>>2)]=$8;
  $9=(($tm)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=$10;
  $12=$5<<3;
  $13=((_lily_realloc($11,$12))|0);
  $14=$13;
  HEAP32[(($9)>>2)]=$14;
 }
 $16=((HEAP32[(($1)>>2)])|0);
 $17=(($tm)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+($16<<2))|0);
 HEAP32[(($19)>>2)]=$type;
 $20=((HEAP32[(($1)>>2)])|0);
 $21=((($20)+(1))|0);
 HEAP32[(($1)>>2)]=$21;
 return;
}


function _lily_tm_insert($tm,$pos,$type){
 $tm=($tm)|0;
 $pos=($pos)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$_lcssa=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$18=0,$19=0,label=0;

 $1=(($tm+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2>>>0)>($pos>>>0);
 if (!($3)) {
  $4=((HEAP32[(($1)>>2)])|0);
  $5=($4>>>0)>($pos>>>0);
  if ($5) {
   $_lcssa=$4;
  } else {
   $6=$4;
   while(1) {

    $7=$6<<1;
    $8=($7>>>0)>($pos>>>0);
    if ($8) {
     break;
    } else {
     $6=$7;
    }
   }
   HEAP32[(($1)>>2)]=$7;
   $_lcssa=$7;
  }

  $10=(($tm)|0);
  $11=((HEAP32[(($10)>>2)])|0);
  $12=$11;
  $13=$_lcssa<<2;
  $14=((_lily_realloc($12,$13))|0);
  $15=$14;
  HEAP32[(($10)>>2)]=$15;
 }
 $17=(($tm)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=(($18+($pos<<2))|0);
 HEAP32[(($19)>>2)]=$type;
 return;
}


function _lily_tm_pop($tm){
 $tm=($tm)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=(($tm+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((($2)-(1))|0);
 HEAP32[(($1)>>2)]=$3;
 $4=(($tm)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($5+($3<<2))|0);
 $7=((HEAP32[(($6)>>2)])|0);
 return (($7)|0);
}


function _lily_tm_make($tm,$flags,$cls,$num_entries){
 $tm=($tm)|0;
 $flags=($flags)|0;
 $cls=($cls)|0;
 $num_entries=($num_entries)|0;
 var $fake_type=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$result_type_0=0;
 var $21=0,$22=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 $fake_type=((sp)|0);
 $1=(($fake_type)|0);
 HEAP32[(($1)>>2)]=$cls;
 $2=(($fake_type+8)|0);
 HEAP16[(($2)>>1)]=0;
 $3=(($tm)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($tm+4)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((($6)-($num_entries))|0);
 $8=(($4+($7<<2))|0);
 $9=(($fake_type+12)|0);
 HEAP32[(($9)>>2)]=$8;
 $10=(($num_entries)&65535);
 $11=(($fake_type+10)|0);
 HEAP16[(($11)>>1)]=$10;
 $12=(($flags)&65535);
 $13=(($fake_type+6)|0);
 HEAP16[(($13)>>1)]=$12;
 $14=(($fake_type+16)|0);
 HEAP32[(($14)>>2)]=0;
 $15=((_lookup_type($fake_type))|0);
 $16=($15|0)==0;
 if (!($16)) {
  $result_type_0=$15;

  $21=((HEAP32[(($5)>>2)])|0);
  $22=((($21)-($num_entries))|0);
  HEAP32[(($5)>>2)]=$22;
  STACKTOP=sp;return (($result_type_0)|0);
 }
 $18=(($fake_type+4)|0);
 HEAP16[(($18)>>1)]=6;
 $19=((_build_real_type_for($fake_type))|0);
 $result_type_0=$19;

 $21=((HEAP32[(($5)>>2)])|0);
 $22=((($21)-($num_entries))|0);
 HEAP32[(($5)>>2)]=$22;
 STACKTOP=sp;return (($result_type_0)|0);
}


function _lily_tm_make_dynamicd_copy($tm,$t){
 $tm=($tm)|0;
 $t=($t)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$j_01=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$18=0,$19=0,$20=0,$21=0,$j_0_lcssa=0,$22=0;
 var $23=0,$24=0,label=0;

 $1=(($tm+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($t+10)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($4<<16)>>16)==0;
 if ($5) {
  $j_0_lcssa=0;
 } else {
  $6=(($t+12)|0);
  $j_01=0;
  while(1) {

   $8=((HEAP32[(($6)>>2)])|0);
   $9=(($8+($j_01<<2))|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=(($10+6)|0);
   $12=((HEAP16[(($11)>>1)])|0);
   $13=$12&16;
   $14=(($13<<16)>>16)==0;
   if ($14) {
    _lily_tm_add($tm,$10);
   } else {
    _lily_tm_add($tm,$2);
   }
   $18=((($j_01)+(1))|0);
   $19=((HEAP16[(($3)>>1)])|0);
   $20=($19&65535);
   $21=($18|0)<($20|0);
   if ($21) {
    $j_01=$18;
   } else {
    $j_0_lcssa=$18;
    break;
   }
  }
 }

 $22=(($t)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 $24=((_lily_tm_make($tm,0,$23,$j_0_lcssa))|0);
 return (($24)|0);
}


function _lily_tm_make_default_for($tm,$cls){
 $tm=($tm)|0;
 $cls=($cls)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=((_make_new_type512($cls))|0);
 $2=(($cls+24)|0);
 HEAP32[(($2)>>2)]=$1;
 $3=(($cls+52)|0);
 HEAP32[(($3)>>2)]=$1;
 return (($1)|0);
}


function _lily_free_type_maker($tm){
 $tm=($tm)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=(($tm)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2;
 _lily_free($3);
 $4=$tm;
 _lily_free($4);
 return;
}


function _lookup_type($input_type){
 $input_type=($input_type)|0;
 var $1=0,$2=0,$3=0,$iter_type_06=0,$4=0,$5=0,$6=0,$7=0,$iter_type_07=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$i_01=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$iter_type_0=0,$40=0,$ret_0=0;
 var label=0;

 $1=(($input_type)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+52)|0);
 $iter_type_06=((HEAP32[(($3)>>2)])|0);
 $4=($iter_type_06|0)==0;
 if ($4) {
  $ret_0=0;

  return (($ret_0)|0);
 }
 $5=(($input_type+10)|0);
 $6=(($input_type+6)|0);
 $7=(($input_type+12)|0);
 $iter_type_07=$iter_type_06;
 L4: while(1) {

  $9=(($iter_type_07+12)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=($10|0)==0;
  L6: do {
   if (!($11)) {
    $13=(($iter_type_07+10)|0);
    $14=((HEAP16[(($13)>>1)])|0);
    $15=((HEAP16[(($5)>>1)])|0);
    $16=(($14<<16)>>16)==(($15<<16)>>16);
    if (!($16)) {
     break;
    }
    $18=(($iter_type_07+6)|0);
    $19=((HEAP16[(($18)>>1)])|0);
    $20=((HEAP16[(($6)>>1)])|0);
    $21=$20^$19;
    $22=$21&-53;
    $23=(($22<<16)>>16)==0;
    if (!($23)) {
     break;
    }
    $24=((HEAP16[(($13)>>1)])|0);
    $25=(($24<<16)>>16)==0;
    if ($25) {
     $ret_0=$iter_type_07;
     label = 11;
     break L4;
    }
    $26=((HEAP32[(($9)>>2)])|0);
    $27=((HEAP32[(($7)>>2)])|0);
    $i_01=0;
    while(1) {

     $33=(($26+($i_01<<2))|0);
     $34=((HEAP32[(($33)>>2)])|0);
     $35=(($27+($i_01<<2))|0);
     $36=((HEAP32[(($35)>>2)])|0);
     $37=($34|0)==($36|0);
     $38=((($i_01)+(1))|0);
     if (!($37)) {
      break L6;
     }
     $29=((HEAP16[(($13)>>1)])|0);
     $30=($29&65535);
     $31=($38|0)<($30|0);
     if ($31) {
      $i_01=$38;
     } else {
      $ret_0=$iter_type_07;
      label = 11;
      break L4;
     }
    }
   }
  } while(0);
  $39=(($iter_type_07+16)|0);
  $iter_type_0=((HEAP32[(($39)>>2)])|0);
  $40=($iter_type_0|0)==0;
  if ($40) {
   $ret_0=0;
   label = 11;
   break;
  } else {
   $iter_type_07=$iter_type_0;
  }
 }
 if ((label|0) == 11) {

  return (($ret_0)|0);
 }
  return 0;
}


function _build_real_type_for($fake_type){
 $fake_type=($fake_type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$i_01=0,$41=0,$42=0,$43=0,$44=0;
 var $46=0,$47=0,$48=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,label=0;

 $1=(($fake_type)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_make_new_type512($2))|0);
 $4=(($fake_type+10)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=$3;
 $7=$fake_type;
 HEAP32[(($6)>>2)]=((HEAP32[(($7)>>2)])|0);HEAP32[((($6)+(4))>>2)]=((HEAP32[((($7)+(4))>>2)])|0);HEAP32[((($6)+(8))>>2)]=((HEAP32[((($7)+(8))>>2)])|0);HEAP32[((($6)+(12))>>2)]=((HEAP32[((($7)+(12))>>2)])|0);HEAP32[((($6)+(16))>>2)]=((HEAP32[((($7)+(16))>>2)])|0);
 $8=(($5<<16)>>16)==0;
 if ($8) {
  $10=(($3+12)|0);
  HEAP32[(($10)>>2)]=0;
  $11=(($3+10)|0);
  HEAP16[(($11)>>1)]=0;
  $12=((HEAP32[(($1)>>2)])|0);
  $13=(($12+24)|0);
  HEAP32[(($13)>>2)]=$3;
  return (($3)|0);
 }
 $15=($5&65535);
 $16=$15<<2;
 $17=((_lily_malloc($16))|0);
 $18=$17;
 $19=(($fake_type+12)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=$20;
 (_memcpy((($17)|0), (($21)|0), $16)|0);
 $22=(($3+12)|0);
 HEAP32[(($22)>>2)]=$18;
 $23=(($3+10)|0);
 HEAP16[(($23)>>1)]=$5;
 $24=(($3)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25+52)|0);
 $27=((HEAP32[(($26)>>2)])|0);
 $28=($27|0)==0;
 if ($28) {
  $34=(($3+16)|0);
  HEAP32[(($34)>>2)]=$27;
  $35=((HEAP32[(($24)>>2)])|0);
  $36=(($35+52)|0);
  HEAP32[(($36)>>2)]=$3;
 } else {
  $30=(($27+16)|0);
  $31=((HEAP32[(($30)>>2)])|0);
  $32=(($3+16)|0);
  HEAP32[(($32)>>2)]=$31;
  HEAP32[(($30)>>2)]=$3;
 }
 $37=((HEAP16[(($23)>>1)])|0);
 $38=(($37<<16)>>16)==0;
 if ($38) {
  return (($3)|0);
 }
 $39=(($3+6)|0);
 $i_01=0;
 while(1) {

  $41=((HEAP32[(($22)>>2)])|0);
  $42=(($41+($i_01<<2))|0);
  $43=((HEAP32[(($42)>>2)])|0);
  $44=($43|0)==0;
  if (!($44)) {
   $46=(($43+6)|0);
   $47=((HEAP16[(($46)>>1)])|0);
   $48=$47&52;
   $49=((HEAP16[(($39)>>1)])|0);
   $50=$49|$48;
   HEAP16[(($39)>>1)]=$50;
  }
  $52=((($i_01)+(1))|0);
  $53=((HEAP16[(($23)>>1)])|0);
  $54=($53&65535);
  $55=($52|0)<($54|0);
  if ($55) {
   $i_01=$52;
  } else {
   break;
  }
 }
 return (($3)|0);
}


function _make_new_type512($cls){
 $cls=($cls)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,label=0;

 $1=((_lily_malloc(20))|0);
 $2=$1;
 $3=(($1+4)|0);
 $4=$3;
 HEAP16[(($4)>>1)]=6;
 $5=$1;
 HEAP32[(($5)>>2)]=$cls;
 $6=(($1+6)|0);
 _memset((((($6)|0))|0), ((((0)|0))|0), ((((14)|0))|0))|0;
 return (($2)|0);
}


function _lily_new_type_system($tm,$dynamic_type,$question_type){
 $tm=($tm)|0;
 $dynamic_type=($dynamic_type)|0;
 $question_type=($question_type)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$$etemp$0$0=0,$$etemp$0$1=0,$st$1$0=0,$st$2$1=0,label=0;

 $1=((_lily_malloc(32))|0);
 $2=$1;
 $3=((_lily_malloc(16))|0);
 $4=$3;
 $5=(($1+28)|0);
 $6=$5;
 HEAP32[(($6)>>2)]=$tm;
 $7=$1;
 HEAP32[(($7)>>2)]=$4;
 $8=(($1+4)|0);
 $9=$8;
 HEAP16[(($9)>>1)]=0;
 $10=(($1+10)|0);
 $11=$10;
 HEAP16[(($11)>>1)]=4;
 $12=(($1+8)|0);
 $13=$12;
 HEAP16[(($13)>>1)]=1;
 $14=(($1+6)|0);
 $15=$14;
 HEAP16[(($15)>>1)]=0;
 $16=(($1+20)|0);
 $17=$16;
 HEAP32[(($17)>>2)]=$dynamic_type;
 $18=(($1+24)|0);
 $19=$18;
 HEAP32[(($19)>>2)]=$question_type;
 $20=((HEAP32[(($7)>>2)])|0);
 HEAP32[(($20)>>2)]=0;
 $21=(($1+12)|0);
 $22=$21;
 $$etemp$0$0=0;
 $$etemp$0$1=0;
 $st$1$0=(($22)|0);
 tempBigInt=$$etemp$0$0;HEAP16[(($st$1$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$1$0)+(2))>>1)]=tempBigInt>>16;
 $st$2$1=(($22+4)|0);
 tempBigInt=$$etemp$0$1;HEAP16[(($st$2$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$2$1)+(2))>>1)]=tempBigInt>>16;
 return (($2)|0);
}


function _lily_free_type_system($ts){
 $ts=($ts)|0;
 var $1=0,$3=0,$4=0,$5=0,$7=0,label=0;

 $1=($ts|0)==0;
 if (!($1)) {
  $3=(($ts)|0);
  $4=((HEAP32[(($3)>>2)])|0);
  $5=$4;
  _lily_free($5);
 }
 $7=$ts;
 _lily_free($7);
 return;
}


function _lily_ts_resolve_with($ts,$type,$fallback){
 $ts=($ts)|0;
 $type=($type)|0;
 $fallback=($fallback)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$27=0,$i_02=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$_lcssa=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0;
 var $42=0,$43=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0;
 var $65=0,$66=0,$67=0,$68=0,$69=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$79=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$88=0;
 var $89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$target_01=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$ret_0=0,label=0;

 $1=($type|0)==0;
 if ($1) {
  $ret_0=0;

  return (($ret_0)|0);
 }
 $3=(($type+6)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=$4&36;
 $6=(($5<<16)>>16)==0;
 if ($6) {
  $ret_0=$type;

  return (($ret_0)|0);
 }
 $8=(($type+12)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=($9|0)==0;
 if (!($10)) {
  $12=(($ts+28)|0);
  $13=((HEAP32[(($12)>>2)])|0);
  $14=(($type+10)|0);
  $15=((HEAP16[(($14)>>1)])|0);
  $16=($15&65535);
  $17=(($ts+6)|0);
  $18=((HEAP16[(($17)>>1)])|0);
  $19=($18&65535);
  $20=((($19)+($16))|0);
  _lily_tm_reserve($13,$20);
  $21=((HEAP32[(($8)>>2)])|0);
  $22=((HEAP32[(($12)>>2)])|0);
  $23=(($22+4)|0);
  $24=((HEAP32[(($23)>>2)])|0);
  $25=((HEAP16[(($14)>>1)])|0);
  $26=(($25<<16)>>16)==0;
  if ($26) {
   $_lcssa=$22;
  } else {
   $i_02=0;$27=$22;
   while(1) {


    $28=(($21+($i_02<<2))|0);
    $29=((HEAP32[(($28)>>2)])|0);
    $30=((_lily_ts_resolve_with($ts,$29,$fallback))|0);
    _lily_tm_add_unchecked($27,$30);
    $31=((($i_02)+(1))|0);
    $32=((HEAP16[(($14)>>1)])|0);
    $33=($32&65535);
    $34=($31|0)<($33|0);
    $35=((HEAP32[(($12)>>2)])|0);
    if ($34) {
     $i_02=$31;$27=$35;
    } else {
     $_lcssa=$35;
     break;
    }
   }
  }

  $36=((HEAP16[(($3)>>1)])|0);
  $37=($36&65535);
  $38=(($type)|0);
  $39=((HEAP32[(($38)>>2)])|0);
  $40=(($_lcssa+4)|0);
  $41=((HEAP32[(($40)>>2)])|0);
  $42=((($41)-($24))|0);
  $43=((_lily_tm_make($_lcssa,$37,$39,$42))|0);
  $ret_0=$43;

  return (($ret_0)|0);
 }
 $45=(($type)|0);
 $46=((HEAP32[(($45)>>2)])|0);
 $47=(($46+40)|0);
 $48=((HEAP16[(($47)>>1)])|0);
 $49=($48&65535);
 $50=(($48<<16)>>16)==11;
 if ($50) {
  $52=(($ts+4)|0);
  $53=((HEAP16[(($52)>>1)])|0);
  $54=($53&65535);
  $55=(($type+8)|0);
  $56=((HEAP16[(($55)>>1)])|0);
  $57=($56&65535);
  $58=((($57)+($54))|0);
  $59=(($ts)|0);
  $60=((HEAP32[(($59)>>2)])|0);
  $61=(($60+($58<<2))|0);
  $62=((HEAP32[(($61)>>2)])|0);
  $63=($62|0)==0;
  do {
   if (!($63)) {
    $65=(($62)|0);
    $66=((HEAP32[(($65)>>2)])|0);
    $67=(($66+40)|0);
    $68=((HEAP16[(($67)>>1)])|0);
    $69=(($68<<16)>>16)==12;
    if ($69) {
     break;
    } else {
     $ret_0=$62;
    }

    return (($ret_0)|0);
   }
  } while(0);
  $71=((HEAP16[(($52)>>1)])|0);
  $72=($71&65535);
  $73=((HEAP16[(($55)>>1)])|0);
  $74=($73&65535);
  $75=((($74)+($72))|0);
  $76=((HEAP32[(($59)>>2)])|0);
  $77=(($76+($75<<2))|0);
  HEAP32[(($77)>>2)]=$fallback;
  $ret_0=$fallback;

  return (($ret_0)|0);
 }
 $79=((($48&65535))>>>0)>((65532)>>>0);
 if (!($79)) {
  $ret_0=$type;

  return (($ret_0)|0);
 }
 $81=$49^65535;
 $82=(($ts+12+($81<<1))|0);
 $83=((HEAP16[(($82)>>1)])|0);
 $84=($83&65535);
 $85=((($84)-(1))|0);
 $86=($85|0)==0;
 if ($86) {
  $ret_0=$type;

  return (($ret_0)|0);
 }
 $88=((($81)-(1))|0);
 $89=(($ts+12+($88<<1))|0);
 $90=((HEAP16[(($89)>>1)])|0);
 $91=($90&65535);
 $92=($91|0)<($85|0);
 if ($92) {
  $93=(($ts+28)|0);
  $94=(($ts)|0);
  $target_01=$91;
  while(1) {

   $96=((HEAP32[(($93)>>2)])|0);
   $97=((HEAP32[(($94)>>2)])|0);
   $98=(($97+($target_01<<2))|0);
   $99=((HEAP32[(($98)>>2)])|0);
   _lily_tm_add_unchecked($96,$99);
   $100=((($target_01)+(1))|0);
   $101=($100|0)<($85|0);
   if ($101) {
    $target_01=$100;
   } else {
    break;
   }
  }
 }
 $102=(($ts)|0);
 $103=((HEAP32[(($102)>>2)])|0);
 $104=(($103+($85<<2))|0);
 $105=((HEAP32[(($104)>>2)])|0);
 $ret_0=$105;

 return (($ret_0)|0);
}


function _lily_ts_resolve($ts,$type){
 $ts=($ts)|0;
 $type=($type)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=(($ts+20)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((_lily_ts_resolve_with($ts,$type,$2))|0);
 return (($3)|0);
}


function _lily_ts_check($ts,$left,$right){
 $ts=($ts)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,label=0;

 $1=((_check_raw($ts,$left,$right,2))|0);
 return (($1)|0);
}


function _lily_ts_unify($ts,$left,$right){
 $ts=($ts)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$11=0,$result_0=0,label=0;

 $1=(($ts+28)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+4)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((_check_raw($ts,$left,$right,11))|0);
 $6=($5|0)==0;
 $7=((HEAP32[(($1)>>2)])|0);
 if ($6) {
  $11=(($7+4)|0);
  HEAP32[(($11)>>2)]=$4;
  $result_0=0;

  return (($result_0)|0);
 } else {
  $9=((_lily_tm_pop($7))|0);
  $result_0=$9;

  return (($result_0)|0);
 }
  return 0;
}


function _lily_ts_type_greater_eq($ts,$left,$right){
 $ts=($ts)|0;
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,label=0;

 $1=((_check_raw($ts,$left,$right,3))|0);
 return (($1)|0);
}


function _lily_ts_resolve_by_second($ts,$first,$second){
 $ts=($ts)|0;
 $first=($first)|0;
 $second=($second)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$20=0,$21=0;
 var $i_01=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,label=0;

 $1=(($ts+4)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=(($ts+6)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=($5&65535);
 $7=((($3)+(1))|0);
 $8=((($7)+($6))|0);
 $9=(($first+10)|0);
 $10=((HEAP16[(($9)>>1)])|0);
 $11=($10&65535);
 $12=((($8)+($11))|0);
 $13=(($ts+10)|0);
 $14=((HEAP16[(($13)>>1)])|0);
 $15=($14&65535);
 $16=($12|0)<($15|0);
 if (!($16)) {
  _grow_types($ts);
 }
 $18=((HEAP16[(($9)>>1)])|0);
 $19=(($18<<16)>>16)==0;
 if ($19) {
  $33=(($8)&65535);
  HEAP16[(($1)>>1)]=$33;
  $34=((_lily_ts_resolve($ts,$second))|0);
  HEAP16[(($1)>>1)]=$2;
  return (($34)|0);
 }
 $20=(($first+12)|0);
 $21=(($ts)|0);
 $i_01=0;
 while(1) {

  $23=((HEAP32[(($20)>>2)])|0);
  $24=(($23+($i_01<<2))|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $26=((($i_01)+($8))|0);
  $27=((HEAP32[(($21)>>2)])|0);
  $28=(($27+($26<<2))|0);
  HEAP32[(($28)>>2)]=$25;
  $29=((($i_01)+(1))|0);
  $30=((HEAP16[(($9)>>1)])|0);
  $31=($30&65535);
  $32=($29|0)<($31|0);
  if ($32) {
   $i_01=$29;
  } else {
   break;
  }
 }
 $33=(($8)&65535);
 HEAP16[(($1)>>1)]=$33;
 $34=((_lily_ts_resolve($ts,$second))|0);
 HEAP16[(($1)>>1)]=$2;
 return (($34)|0);
}


function _lily_ts_resolve_as_question($ts){
 $ts=($ts)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$i_01=0,$12=0,$13=0,$14=0,$15=0,$17=0,$19=0,$20=0,$21=0,$$etemp$0$0=0;
 var $$etemp$0$1=0,$st$1$0=0,$st$2$1=0,label=0;

 $1=(($ts+12)|0);
 $2=(($1)|0);
 $3=((HEAP16[(($2)>>1)])|0);
 $4=($3&65535);
 $5=(($ts+4)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=((($6&65535))>>>0)<((($3&65535))>>>0);
 if ($7) {
  $8=($6&65535);
  $9=(($ts)|0);
  $10=(($ts+24)|0);
  $i_01=$8;
  while(1) {

   $12=((HEAP32[(($9)>>2)])|0);
   $13=(($12+($i_01<<2))|0);
   $14=((HEAP32[(($13)>>2)])|0);
   $15=($14|0)==0;
   if ($15) {
    $17=((HEAP32[(($10)>>2)])|0);
    HEAP32[(($13)>>2)]=$17;
   }
   $19=((($i_01)+(1))|0);
   $20=($19|0)<($4|0);
   if ($20) {
    $i_01=$19;
   } else {
    break;
   }
  }
 }
 $21=$1;
 $$etemp$0$0=0;
 $$etemp$0$1=0;
 $st$1$0=(($21)|0);
 tempBigInt=$$etemp$0$0;HEAP16[(($st$1$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$1$0)+(2))>>1)]=tempBigInt>>16;
 $st$2$1=(($21+4)|0);
 tempBigInt=$$etemp$0$1;HEAP16[(($st$2$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$2$1)+(2))>>1)]=tempBigInt>>16;
 return;
}


function _lily_ts_default_incomplete_solves($ts){
 $ts=($ts)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$i_02=0,$15=0,$16=0,$17=0,$18=0,$19=0,$or_cond=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$j_01=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$42=0,$43=0;
 var $44=0,$45=0,$j_0_lcssa=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$53=0,$54=0,label=0;

 $1=(($ts+12)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=(($ts+24)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($ts+4)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=((($7&65535))>>>0)<((($2&65535))>>>0);
 if (!($8)) {
  return;
 }
 $9=($7&65535);
 $10=(($ts)|0);
 $11=(($ts+28)|0);
 $12=(($ts+28)|0);
 $13=(($ts+20)|0);
 $i_02=$9;
 while(1) {

  $15=((HEAP32[(($10)>>2)])|0);
  $16=(($15+($i_02<<2))|0);
  $17=((HEAP32[(($16)>>2)])|0);
  $18=($17|0)==0;
  $19=($17|0)==($5|0);
  $or_cond=$18|$19;
  do {
   if (!($or_cond)) {
    $21=(($17+6)|0);
    $22=((HEAP16[(($21)>>1)])|0);
    $23=$22&16;
    $24=(($23<<16)>>16)==0;
    if ($24) {
     break;
    }
    $25=(($17+10)|0);
    $26=((HEAP16[(($25)>>1)])|0);
    $27=(($26<<16)>>16)==0;
    if ($27) {
     $j_0_lcssa=0;
    } else {
     $28=(($17+12)|0);
     $j_01=0;
     while(1) {

      $30=((HEAP32[(($28)>>2)])|0);
      $31=(($30+($j_01<<2))|0);
      $32=((HEAP32[(($31)>>2)])|0);
      $33=(($32+6)|0);
      $34=((HEAP16[(($33)>>1)])|0);
      $35=$34&16;
      $36=(($35<<16)>>16)==0;
      $37=((HEAP32[(($12)>>2)])|0);
      if ($36) {
       _lily_tm_add($37,$32);
      } else {
       $39=((HEAP32[(($13)>>2)])|0);
       _lily_tm_add($37,$39);
      }
      $42=((($j_01)+(1))|0);
      $43=((HEAP16[(($25)>>1)])|0);
      $44=($43&65535);
      $45=($42|0)<($44|0);
      if ($45) {
       $j_01=$42;
      } else {
       $j_0_lcssa=$42;
       break;
      }
     }
    }

    $46=((HEAP32[(($11)>>2)])|0);
    $47=(($17)|0);
    $48=((HEAP32[(($47)>>2)])|0);
    $49=((_lily_tm_make($46,0,$48,$j_0_lcssa))|0);
    $50=((HEAP32[(($10)>>2)])|0);
    $51=(($50+($i_02<<2))|0);
    HEAP32[(($51)>>2)]=$49;
   }
  } while(0);
  $53=((($i_02)+(1))|0);
  $54=($53|0)<($3|0);
  if ($54) {
   $i_02=$53;
  } else {
   break;
  }
 }
 return;
}


function _lily_ts_scope_save($ts,$p){
 $ts=($ts)|0;
 $p=($p)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$ld$0$0=0,$11$0=0,$ld$1$1=0,$11$1=0,$st$2$0=0,$st$3$1=0,$12=0,$13=0,$14=0,$15=0;
 var $16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$32=0,$i_01=0,$34=0,$35=0,$36=0;
 var $37=0,$38=0,$39=0,$40=0,$41=0,$42=0,label=0;

 $1=(($ts+4)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($p)|0);
 HEAP16[(($3)>>1)]=$2;
 $4=(($ts+6)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($p+2)|0);
 HEAP16[(($6)>>1)]=$5;
 $7=(($p+8)|0);
 $8=(($ts+12)|0);
 $9=$8;
 $10=$7;
 $ld$0$0=(($9)|0);
 $11$0=(((HEAPU16[(($ld$0$0)>>1)])|0)|(((HEAPU16[((($ld$0$0)+(2))>>1)])|0)<<16));
 $ld$1$1=(($9+4)|0);
 $11$1=(((HEAPU16[(($ld$1$1)>>1)])|0)|(((HEAPU16[((($ld$1$1)+(2))>>1)])|0)<<16));
 $st$2$0=(($10)|0);
 tempBigInt=$11$0;HEAP16[(($st$2$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$2$0)+(2))>>1)]=tempBigInt>>16;
 $st$3$1=(($10+4)|0);
 tempBigInt=$11$1;HEAP16[(($st$3$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$3$1)+(2))>>1)]=tempBigInt>>16;
 $12=((HEAP16[(($4)>>1)])|0);
 $13=((HEAP16[(($1)>>1)])|0);
 $14=((($13)+($12))&65535);
 HEAP16[(($1)>>1)]=$14;
 $15=(($ts+8)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 HEAP16[(($4)>>1)]=$16;
 $17=((HEAP16[(($1)>>1)])|0);
 $18=((($17)+($16))&65535);
 $19=(($8)|0);
 HEAP16[(($19)>>1)]=$18;
 $20=((HEAP16[(($1)>>1)])|0);
 $21=($20&65535);
 $22=((HEAP16[(($4)>>1)])|0);
 $23=($22&65535);
 $24=((($23)+($21))|0);
 $25=(($ts+10)|0);
 $26=((HEAP16[(($25)>>1)])|0);
 $27=($26&65535);
 $28=($24|0)<($27|0);
 if (!($28)) {
  _grow_types($ts);
 }
 $30=((HEAP16[(($4)>>1)])|0);
 $31=(($30<<16)>>16)==0;
 if ($31) {
  return;
 }
 $32=(($ts)|0);
 $i_01=0;
 while(1) {

  $34=((HEAP16[(($1)>>1)])|0);
  $35=($34&65535);
  $36=((($35)+($i_01))|0);
  $37=((HEAP32[(($32)>>2)])|0);
  $38=(($37+($36<<2))|0);
  HEAP32[(($38)>>2)]=0;
  $39=((($i_01)+(1))|0);
  $40=((HEAP16[(($4)>>1)])|0);
  $41=($40&65535);
  $42=($39|0)<($41|0);
  if ($42) {
   $i_01=$39;
  } else {
   break;
  }
 }
 return;
}


function _lily_ts_scope_restore($ts,$p){
 $ts=($ts)|0;
 $p=($p)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$ld$0$0=0,$11$0=0,$ld$1$1=0,$11$1=0,$st$2$0=0,$st$3$1=0,label=0;

 $1=(($p)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=(($ts+4)|0);
 HEAP16[(($3)>>1)]=$2;
 $4=(($p+2)|0);
 $5=((HEAP16[(($4)>>1)])|0);
 $6=(($ts+6)|0);
 HEAP16[(($6)>>1)]=$5;
 $7=(($ts+12)|0);
 $8=(($p+8)|0);
 $9=$8;
 $10=$7;
 $ld$0$0=(($9)|0);
 $11$0=(((HEAPU16[(($ld$0$0)>>1)])|0)|(((HEAPU16[((($ld$0$0)+(2))>>1)])|0)<<16));
 $ld$1$1=(($9+4)|0);
 $11$1=(((HEAPU16[(($ld$1$1)>>1)])|0)|(((HEAPU16[((($ld$1$1)+(2))>>1)])|0)<<16));
 $st$2$0=(($10)|0);
 tempBigInt=$11$0;HEAP16[(($st$2$0)>>1)]=tempBigInt&0xffff;HEAP16[((($st$2$0)+(2))>>1)]=tempBigInt>>16;
 $st$3$1=(($10+4)|0);
 tempBigInt=$11$1;HEAP16[(($st$3$1)>>1)]=tempBigInt&0xffff;HEAP16[((($st$3$1)+(2))>>1)]=tempBigInt>>16;
 return;
}


function _lily_ts_generics_seen($ts,$amount){
 $ts=($ts)|0;
 $amount=($amount)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,label=0;

 $1=(($ts+8)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=($3|0)<($amount|0);
 if (!($4)) {
  return;
 }
 $6=(($amount)&65535);
 HEAP16[(($1)>>1)]=$6;
 return;
}


function _lily_class_greater_eq($left,$right){
 $left=($left)|0;
 $right=($right)|0;
 var $1=0,$_0=0,$2=0,$4=0,$5=0,$6=0,$ret_0=0,label=0;

 $1=($left|0)==($right|0);
 L1: do {
  if ($1) {
   $ret_0=1;
  } else {
   $_0=$right;
   while(1) {

    $2=($_0|0)==0;
    if ($2) {
     $ret_0=0;
     break L1;
    }
    $4=(($_0+28)|0);
    $5=((HEAP32[(($4)>>2)])|0);
    $6=($5|0)==($left|0);
    if ($6) {
     $ret_0=1;
     break;
    } else {
     $_0=$5;
    }
   }
  }
 } while(0);

 return (($ret_0)|0);
}


function _check_raw($ts,$left,$right,$flags){
 $ts=($ts)|0;
 $left=($left)|0;
 $right=($right)|0;
 $flags=($flags)|0;
 var $1=0,$2=0,$or_cond=0,$4=0,$5=0,$_not=0,$6=0,$7=0,$or_cond3=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$21=0,$22=0;
 var $24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$33=0,$34=0,$37=0,$39=0,$41=0,$43=0,$44=0,$45=0,$46=0,$48=0,$50=0,$ret_0=0,label=0;

 $1=($left|0)==0;
 $2=($right|0)==0;
 $or_cond=$1|$2;
 if ($or_cond) {
  $4=($left|0)==($right|0);
  $5=($4&1);
  $_not=$4^1;
  $6=$flags&8;
  $7=($6|0)==0;
  $or_cond3=$7|$_not;
  if ($or_cond3) {
   $ret_0=$5;

   return (($ret_0)|0);
  }
  $9=(($ts+28)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  _lily_tm_add($10,$left);
  $ret_0=$5;

  return (($ret_0)|0);
 }
 $12=(($left)|0);
 $13=((HEAP32[(($12)>>2)])|0);
 $14=(($13+40)|0);
 $15=((HEAP16[(($14)>>1)])|0);
 $16=(($15<<16)>>16)==12;
 if ($16) {
  $18=$flags&8;
  $19=($18|0)==0;
  if ($19) {
   $ret_0=1;

   return (($ret_0)|0);
  }
  $21=(($ts+28)|0);
  $22=((HEAP32[(($21)>>2)])|0);
  _lily_tm_add($22,$right);
  $ret_0=1;

  return (($ret_0)|0);
 }
 $24=(($right)|0);
 $25=((HEAP32[(($24)>>2)])|0);
 $26=(($25+40)|0);
 $27=((HEAP16[(($26)>>1)])|0);
 $28=(($27<<16)>>16)==12;
 if ($28) {
  $30=$flags&8;
  $31=($30|0)==0;
  if ($31) {
   $ret_0=1;

   return (($ret_0)|0);
  }
  $33=(($ts+28)|0);
  $34=((HEAP32[(($33)>>2)])|0);
  _lily_tm_add($34,$left);
  $ret_0=1;

  return (($ret_0)|0);
 }
 if ((((($15<<16)>>16))|0)==((11)|0)) {
  $37=((_check_generic($ts,$left,$right,$flags))|0);
  $ret_0=$37;

  return (($ret_0)|0);
 } else if ((((($15<<16)>>16))|0)==((5)|0)) {
  label = 12;
 }
 do {
  if ((label|0) == 12) {
   $39=(($27<<16)>>16)==5;
   if (!($39)) {
    break;
   }
   $41=((_check_function($ts,$left,$right,$flags))|0);
   $ret_0=$41;

   return (($ret_0)|0);
  }
 } while(0);
 $43=((HEAP32[(($12)>>2)])|0);
 $44=(($43+40)|0);
 $45=((HEAP16[(($44)>>1)])|0);
 $46=(($45<<16)>>16)==9;
 if ($46) {
  $48=((_check_tuple($ts,$left,$right,$flags))|0);
  $ret_0=$48;

  return (($ret_0)|0);
 } else {
  $50=((_check_misc($ts,$left,$right,$flags))|0);
  $ret_0=$50;

  return (($ret_0)|0);
 }
  return 0;
}


function _grow_types($ts){
 $ts=($ts)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,label=0;

 $1=(($ts+10)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=$2<<1;
 HEAP16[(($1)>>1)]=$3;
 $4=(($ts)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5;
 $7=($3&65535);
 $8=$7<<2;
 $9=((_lily_realloc($6,$8))|0);
 $10=$9;
 HEAP32[(($4)>>2)]=$10;
 return;
}


function _check_generic($ts,$left,$right,$flags){
 $ts=($ts)|0;
 $left=($left)|0;
 $right=($right)|0;
 $flags=($flags)|0;
 var $1=0,$2=0,$4=0,$5=0,$_not=0,$6=0,$7=0,$or_cond=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,$25=0,$26=0,$27=0,$29=0,$30=0,$32=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$42=0,$43=0,$45=0,$46=0,$ret_0=0,label=0;

 $1=$flags&1;
 $2=($1|0)==0;
 if (!($2)) {
  $4=($left|0)==($right|0);
  $5=($4&1);
  $_not=$4^1;
  $6=$flags&8;
  $7=($6|0)==0;
  $or_cond=$7|$_not;
  if ($or_cond) {
   $ret_0=$5;

   return (($ret_0)|0);
  }
  $9=(($ts+28)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  _lily_tm_add($10,$left);
  $ret_0=$5;

  return (($ret_0)|0);
 }
 $12=(($ts+4)|0);
 $13=((HEAP16[(($12)>>1)])|0);
 $14=($13&65535);
 $15=(($left+8)|0);
 $16=((HEAP16[(($15)>>1)])|0);
 $17=($16&65535);
 $18=((($17)+($14))|0);
 $19=(($ts)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($20+($18<<2))|0);
 $22=((HEAP32[(($21)>>2)])|0);
 $23=($22|0)==0;
 do {
  if (!($23)) {
   $25=(($ts+24)|0);
   $26=((HEAP32[(($25)>>2)])|0);
   $27=($22|0)==($26|0);
   if ($27) {
    break;
   }
   $32=($22|0)==($right|0);
   if ($32) {
    $ret_0=1;

    return (($ret_0)|0);
   }
   $34=(($22+6)|0);
   $35=((HEAP16[(($34)>>1)])|0);
   $36=$35&16;
   $37=(($36<<16)>>16)==0;
   if ($37) {
    $45=$flags|1;
    $46=((_check_raw($ts,$22,$right,$45))|0);
    $ret_0=$46;

    return (($ret_0)|0);
   }
   $39=((_lily_ts_unify($ts,$22,$right))|0);
   $40=($39|0)==0;
   if ($40) {
    $ret_0=0;

    return (($ret_0)|0);
   }
   $42=((HEAP32[(($19)>>2)])|0);
   $43=(($42+($18<<2))|0);
   HEAP32[(($43)>>2)]=$39;
   $ret_0=1;

   return (($ret_0)|0);
  }
 } while(0);
 $29=((HEAP32[(($19)>>2)])|0);
 $30=(($29+($18<<2))|0);
 HEAP32[(($30)>>2)]=$right;
 $ret_0=1;

 return (($ret_0)|0);
}


function _check_function($ts,$left,$right,$flags){
 $ts=($ts)|0;
 $left=($left)|0;
 $right=($right)|0;
 $flags=($flags)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$not_=0,$_=0,$10=0,$11=0,$12=0,$13=0,$14=0,$ret_1=0,$15=0,$17=0,$18=0;
 var $19=0,$21=0,$22=0,$23=0,$i_04=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$42=0,$43=0,$44=0,$right_type_0=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$or_cond=0,$53=0,$54=0,$ret_23=0,label=0;

 $1=$flags&9;
 $2=(($left+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($right+12)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=$1|2;
 $9=((_check_raw($ts,$4,$7,$8))|0);
 $not_=($9|0)!=0;
 $_=($not_&1);
 $10=(($left+10)|0);
 $11=((HEAP16[(($10)>>1)])|0);
 $12=(($right+10)|0);
 $13=((HEAP16[(($12)>>1)])|0);
 $14=((($11&65535))>>>0)>((($13&65535))>>>0);
 $ret_1=($14?0:$_);
 $15=($ret_1|0)==0;
 if ($15) {
  $ret_23=0;

  return (($ret_23)|0);
 }
 $17=$1|4;
 $18=((HEAP16[(($10)>>1)])|0);
 $19=((($18&65535))>>>0)>((1)>>>0);
 L4: do {
  if ($19) {
   $i_04=1;
   while(1) {

    $24=((HEAP32[(($2)>>2)])|0);
    $25=(($24+($i_04<<2))|0);
    $26=((HEAP32[(($25)>>2)])|0);
    $27=((HEAP32[(($5)>>2)])|0);
    $28=(($27+($i_04<<2))|0);
    $29=((HEAP32[(($28)>>2)])|0);
    $30=(($29)|0);
    $31=((HEAP32[(($30)>>2)])|0);
    $32=(($31+40)|0);
    $33=((HEAP16[(($32)>>1)])|0);
    $34=(($33<<16)>>16)==-4;
    do {
     if ($34) {
      $36=(($26)|0);
      $37=((HEAP32[(($36)>>2)])|0);
      $38=(($37+40)|0);
      $39=((HEAP16[(($38)>>1)])|0);
      $40=(($39<<16)>>16)==-4;
      if ($40) {
       $right_type_0=$29;
       break;
      }
      $42=(($29+12)|0);
      $43=((HEAP32[(($42)>>2)])|0);
      $44=((HEAP32[(($43)>>2)])|0);
      $right_type_0=$44;
     } else {
      $right_type_0=$29;
     }
    } while(0);

    $46=((_check_raw($ts,$26,$right_type_0,$17))|0);
    $47=($46|0)==0;
    $48=((($i_04)+(1))|0);
    if ($47) {
     $ret_23=0;
     break;
    }
    $21=((HEAP16[(($10)>>1)])|0);
    $22=($21&65535);
    $23=($48|0)<($22|0);
    if ($23) {
     $i_04=$48;
    } else {
     break L4;
    }
   }

   return (($ret_23)|0);
  }
 } while(0);
 $49=($ret_1|0)==0;
 $50=$flags&8;
 $51=($50|0)==0;
 $or_cond=$49|$51;
 if ($or_cond) {
  $ret_23=$ret_1;

  return (($ret_23)|0);
 }
 $53=((HEAP16[(($10)>>1)])|0);
 $54=($53&65535);
 _simple_unify($ts,$left,$right,$54);
 $ret_23=$ret_1;

 return (($ret_23)|0);
}


function _check_tuple($ts,$left,$right,$flags){
 $ts=($ts)|0;
 $left=($left)|0;
 $right=($right)|0;
 $flags=($flags)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$18=0,$20=0,$21=0,$23=0,$24=0,$25=0;
 var $26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0;
 var $47=0,$48=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$i_01=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$_lcssa=0;
 var $67=0,$68=0,$69=0,$70=0,$71=0,$_0=0,label=0;

 $1=(($right)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($4<<16)>>16)==9;
 if (!($5)) {
  $_0=0;

  return (($_0)|0);
 }
 $7=(($left+6)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=$8&32;
 $10=(($9<<16)>>16)==0;
 if ($10) {
  $12=(($left+10)|0);
  $13=((HEAP16[(($12)>>1)])|0);
  $14=(($right+10)|0);
  $15=((HEAP16[(($14)>>1)])|0);
  $16=(($13<<16)>>16)==(($15<<16)>>16);
  if (!($16)) {
   $_0=0;

   return (($_0)|0);
  }
  $18=((_check_misc($ts,$left,$right,$flags))|0);
  $_0=$18;

  return (($_0)|0);
 }
 $20=$flags&8;
 $21=($20|0)==0;
 if (!($21)) {
  $_0=0;

  return (($_0)|0);
 }
 $23=(($left+10)|0);
 $24=((HEAP16[(($23)>>1)])|0);
 $25=(($right+10)|0);
 $26=((HEAP16[(($25)>>1)])|0);
 $27=((($24&65535))>>>0)>((($26&65535))>>>0);
 if ($27) {
  $_0=0;

  return (($_0)|0);
 }
 $29=($26&65535);
 $30=(($ts+4)|0);
 $31=((HEAP16[(($30)>>1)])|0);
 $32=($31&65535);
 $33=(($ts+6)|0);
 $34=((HEAP16[(($33)>>1)])|0);
 $35=($34&65535);
 $36=((($35)+($32))|0);
 $37=(($left+12)|0);
 $38=((HEAP32[(($37)>>2)])|0);
 $39=((HEAP32[(($38)>>2)])|0);
 $40=(($39)|0);
 $41=((HEAP32[(($40)>>2)])|0);
 $42=(($41+40)|0);
 $43=((HEAP16[(($42)>>1)])|0);
 $44=($43&65535);
 $45=$44^65535;
 $46=((($36)+($29))|0);
 $47=(($ts+10)|0);
 $48=((HEAP16[(($47)>>1)])|0);
 $49=($48&65535);
 $50=($46|0)<($49|0);
 if (!($50)) {
  _grow_types($ts);
 }
 $52=((HEAP16[(($25)>>1)])|0);
 $53=(($52<<16)>>16)==0;
 if ($53) {
  $_lcssa=0;
 } else {
  $54=(($right+12)|0);
  $55=(($ts)|0);
  $i_01=0;
  while(1) {

   $57=((HEAP32[(($54)>>2)])|0);
   $58=(($57+($i_01<<2))|0);
   $59=((HEAP32[(($58)>>2)])|0);
   $60=((($i_01)+($36))|0);
   $61=((HEAP32[(($55)>>2)])|0);
   $62=(($61+($60<<2))|0);
   HEAP32[(($62)>>2)]=$59;
   $63=((($i_01)+(1))|0);
   $64=((HEAP16[(($25)>>1)])|0);
   $65=($64&65535);
   $66=($63|0)<($65|0);
   if ($66) {
    $i_01=$63;
   } else {
    $_lcssa=$64;
    break;
   }
  }
 }

 $67=((HEAP16[(($33)>>1)])|0);
 $68=((($67)+($_lcssa))&65535);
 HEAP16[(($33)>>1)]=$68;
 $69=((HEAP16[(($30)>>1)])|0);
 $70=((($69)+($68))&65535);
 $71=(($ts+12+($45<<1))|0);
 HEAP16[(($71)>>1)]=$70;
 $_0=1;

 return (($_0)|0);
}


function _check_misc($ts,$left,$right,$flags){
 $ts=($ts)|0;
 $left=($left)|0;
 $right=($right)|0;
 $flags=($flags)|0;
 var $num_subtypes=0,$1=0,$2=0,$4=0,$6=0,$7=0,$9=0,$11=0,$ret_0=0,$13=0,$14=0,$15=0,$or_cond=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$26=0,$i_06=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$ret_1=0,$_0=0,$35=0,$36=0,$37=0,$or_cond3=0,$39=0,$ret_15=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $num_subtypes=((sp)|0);
 $1=$flags&2;
 $2=($1|0)==0;
 do {
  if ($2) {
   $6=$flags&4;
   $7=($6|0)==0;
   if ($7) {
    $11=((_invariant_check($left,$right,$num_subtypes))|0);
    $ret_0=$11;
    break;
   } else {
    $9=((_non_invariant_check($right,$left,$num_subtypes))|0);
    $ret_0=$9;
    break;
   }
  } else {
   $4=((_non_invariant_check($left,$right,$num_subtypes))|0);
   $ret_0=$4;
  }
 } while(0);

 $13=($ret_0|0)!=0;
 $14=((HEAP32[(($num_subtypes)>>2)])|0);
 $15=($14|0)!=0;
 $or_cond=$13&$15;
 L8: do {
  if ($or_cond) {
   $17=$flags&9;
   $18=(($left+12)|0);
   $19=((HEAP32[(($18)>>2)])|0);
   $20=(($right+12)|0);
   $21=((HEAP32[(($20)>>2)])|0);
   $22=((HEAP32[(($num_subtypes)>>2)])|0);
   $23=($22|0)>0;
   if (!($23)) {
    $_0=$17;$ret_1=1;
    break;
   }
   $24=((HEAP32[(($num_subtypes)>>2)])|0);
   $i_06=0;
   while(1) {

    $28=(($19+($i_06<<2))|0);
    $29=((HEAP32[(($28)>>2)])|0);
    $30=(($21+($i_06<<2))|0);
    $31=((HEAP32[(($30)>>2)])|0);
    $32=((_check_raw($ts,$29,$31,$17))|0);
    $33=($32|0)==0;
    $34=((($i_06)+(1))|0);
    if ($33) {
     $ret_15=0;
     break;
    }
    $26=($34|0)<($24|0);
    if ($26) {
     $i_06=$34;
    } else {
     $_0=$17;$ret_1=1;
     break L8;
    }
   }

   STACKTOP=sp;return (($ret_15)|0);
  } else {
   $_0=$flags;$ret_1=$ret_0;
  }
 } while(0);


 $35=($ret_1|0)==0;
 $36=$_0&8;
 $37=($36|0)==0;
 $or_cond3=$35|$37;
 if ($or_cond3) {
  $ret_15=$ret_1;

  STACKTOP=sp;return (($ret_15)|0);
 }
 $39=((HEAP32[(($num_subtypes)>>2)])|0);
 _simple_unify($ts,$left,$right,$39);
 $ret_15=$ret_1;

 STACKTOP=sp;return (($ret_15)|0);
}


function _simple_unify($ts,$left,$right,$num_subtypes){
 $ts=($ts)|0;
 $left=($left)|0;
 $right=($right)|0;
 $num_subtypes=($num_subtypes)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$_=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$24=0,$25=0,$26=0,$27=0,label=0;

 $1=(($left)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+40)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=(($right)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($6+40)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=((($4&65535))>>>0)<((($8&65535))>>>0);
 $_=($9?$2:$6);
 $10=($num_subtypes|0)==0;
 if ($10) {
  $24=(($ts+28)|0);
  $25=((HEAP32[(($24)>>2)])|0);
  $26=(($_+24)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  _lily_tm_add($25,$27);
  return;
 } else {
  $12=(($left+6)|0);
  $13=((HEAP16[(($12)>>1)])|0);
  $14=($13&65535);
  $15=(($right+6)|0);
  $16=((HEAP16[(($15)>>1)])|0);
  $17=($16&65535);
  $18=$14&1;
  $19=$18&$17;
  $20=(($ts+28)|0);
  $21=((HEAP32[(($20)>>2)])|0);
  $22=((_lily_tm_make($21,$19,$_,$num_subtypes))|0);
  _lily_tm_add($21,$22);
  return;
 }
}


function _non_invariant_check($left,$right,$num_subtypes){
 $left=($left)|0;
 $right=($right)|0;
 $num_subtypes=($num_subtypes)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;

 $1=(($left)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($right)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=((_lily_class_greater_eq($2,$4))|0);
 $6=(($left+10)|0);
 $7=((HEAP16[(($6)>>1)])|0);
 $8=($7&65535);
 HEAP32[(($num_subtypes)>>2)]=$8;
 return (($5)|0);
}


function _invariant_check($left,$right,$num_subtypes){
 $left=($left)|0;
 $right=($right)|0;
 $num_subtypes=($num_subtypes)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,label=0;

 $1=(($left)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($right)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($2|0)==($4|0);
 $6=($5&1);
 $7=(($left+10)|0);
 $8=((HEAP16[(($7)>>1)])|0);
 $9=($8&65535);
 HEAP32[(($num_subtypes)>>2)]=$9;
 return (($6)|0);
}


function _lily_new_default_options(){
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;

 $1=((_lily_malloc(24))|0);
 $2=$1;
 HEAP8[($1)]=1;
 $3=(($1+4)|0);
 $4=$3;
 HEAP32[(($4)>>2)]=100;
 $5=(($1+1)|0);
 HEAP8[($5)]=4;
 $6=(($1+2)|0);
 $7=$6;
 HEAP16[(($7)>>1)]=0;
 $8=(($1+12)|0);
 $9=$8;
 HEAP32[(($9)>>2)]=0;
 $10=(($1+20)|0);
 $11=$10;
 HEAP32[(($11)>>2)]=(10);
 $12=((HEAP32[((_stdout)>>2)])|0);
 $13=$12;
 $14=(($1+16)|0);
 $15=$14;
 HEAP32[(($15)>>2)]=$13;
 $16=((_lily_malloc(16))|0);
 $17=(($1+8)|0);
 $18=$17;
 HEAP32[(($18)>>2)]=$16;
 (_memcpy((($16)|0), ((1696)|0), 16)|0);
 return (($2)|0);
}


function _lily_free_options($o){
 $o=($o)|0;
 var $1=0,$2=0,$3=0,label=0;

 $1=(($o+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _lily_free($2);
 $3=(($o)|0);
 _lily_free($3);
 return;
}


function _lily_new_lex_state($options,$raiser){
 $options=($options)|0;
 $raiser=($raiser)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$$etemp$0$0=0,$$etemp$0$1=0,$st$1$0=0,$st$2$1=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$scevgep9=0;
 var $36=0,$scevgep8=0,$scevgep7=0,$scevgep=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0;
 var $53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,label=0;

 $1=((_lily_malloc(72))|0);
 $2=(($options+16)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($1+64)|0);
 $5=$4;
 HEAP32[(($5)>>2)]=$3;
 $6=(($options+20)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($1+60)|0);
 $9=$8;
 HEAP32[(($9)>>2)]=$7;
 $10=(($1+24)|0);
 $11=$10;
 HEAP16[(($11)>>1)]=0;
 $12=$1;
 HEAP32[(($12)>>2)]=0;
 $13=(($1+56)|0);
 $14=$13;
 HEAP32[(($14)>>2)]=$raiser;
 $15=((_lily_malloc(128))|0);
 $16=(($1+8)|0);
 $17=$16;
 HEAP32[(($17)>>2)]=$15;
 $18=((_lily_malloc(128))|0);
 $19=(($1+12)|0);
 $20=$19;
 HEAP32[(($20)>>2)]=$18;
 $21=(($1+4)|0);
 $22=$21;
 HEAP32[(($22)>>2)]=0;
 $23=(($1+48)|0);
 $24=$23;
 HEAP32[(($24)>>2)]=0;
 $25=(($1+32)|0);
 $26=$25;
 $$etemp$0$0=0;
 $$etemp$0$1=0;
 $st$1$0=(($26)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 $st$2$1=(($26+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 $27=((_lily_malloc(256))|0);
 $28=(($1+30)|0);
 $29=$28;
 HEAP16[(($29)>>1)]=0;
 $30=(($1+28)|0);
 $31=$30;
 HEAP16[(($31)>>1)]=128;
 $32=(($1+26)|0);
 $33=$32;
 HEAP16[(($33)>>1)]=128;
 $34=(($1+16)|0);
 $35=$34;
 HEAP32[(($35)>>2)]=0;
 _memset((((($27)|0))|0), ((((30)|0))|0), ((((256)|0))|0))|0;
 $scevgep9=(($27+97)|0);
 _memset((((($scevgep9)|0))|0), ((((15)|0))|0), ((((26)|0))|0))|0;
 $36=$1;
 $scevgep8=(($27+65)|0);
 _memset((((($scevgep8)|0))|0), ((((15)|0))|0), ((((26)|0))|0))|0;
 $scevgep7=(($27+48)|0);
 _memset((((($scevgep7)|0))|0), ((((17)|0))|0), ((((10)|0))|0))|0;
 $scevgep=(($27+194)|0);
 _memset((((($scevgep)|0))|0), ((((15)|0))|0), ((((51)|0))|0))|0;
 $37=(($27+66)|0);
 HEAP8[($37)]=28;
 $38=(($27+95)|0);
 HEAP8[($38)]=15;
 $39=(($27+40)|0);
 HEAP8[($39)]=0;
 $40=(($27+41)|0);
 HEAP8[($40)]=1;
 $41=(($27+34)|0);
 HEAP8[($41)]=16;
 $42=(($27+64)|0);
 HEAP8[($42)]=24;
 $43=(($27+63)|0);
 HEAP8[($43)]=27;
 $44=(($27+35)|0);
 HEAP8[($44)]=22;
 $45=(($27+61)|0);
 HEAP8[($45)]=20;
 $46=(($27+46)|0);
 HEAP8[($46)]=23;
 $47=(($27+44)|0);
 HEAP8[($47)]=2;
 $48=(($27+43)|0);
 HEAP8[($48)]=13;
 $49=(($27+45)|0);
 HEAP8[($49)]=14;
 $50=(($27+123)|0);
 HEAP8[($50)]=18;
 $51=(($27+125)|0);
 HEAP8[($51)]=3;
 $52=(($27+60)|0);
 HEAP8[($52)]=12;
 $53=(($27+62)|0);
 HEAP8[($53)]=11;
 $54=(($27+58)|0);
 HEAP8[($54)]=6;
 $55=(($27+33)|0);
 HEAP8[($55)]=7;
 $56=(($27+42)|0);
 HEAP8[($56)]=9;
 $57=(($27+47)|0);
 HEAP8[($57)]=10;
 $58=(($27+38)|0);
 HEAP8[($58)]=25;
 $59=(($27+37)|0);
 HEAP8[($59)]=8;
 $60=(($27+124)|0);
 HEAP8[($60)]=26;
 $61=(($27+91)|0);
 HEAP8[($61)]=4;
 $62=(($27+93)|0);
 HEAP8[($62)]=19;
 $63=(($27+36)|0);
 HEAP8[($63)]=29;
 $64=(($27+10)|0);
 HEAP8[($64)]=21;
 $65=(($1+40)|0);
 $66=$65;
 HEAP32[(($66)>>2)]=50;
 HEAP32[(($22)>>2)]=$27;
 return (($36)|0);
}


function _lily_free_lex_state($lexer){
 $lexer=($lexer)|0;
 var $1=0,$2=0,$3=0,$entry_iter_0=0,$4=0,$5=0,$6=0,$entry_iter_11=0,$7=0,$8=0,$9=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0;
 var $21=0,$22=0,$23=0,$24=0,label=0;

 $1=(($lexer)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if (!($3)) {
  $entry_iter_0=$2;
  while(1) {

   $4=(($entry_iter_0+48)|0);
   $5=((HEAP32[(($4)>>2)])|0);
   $6=($5|0)==0;
   if ($6) {
    $entry_iter_11=$entry_iter_0;
    break;
   } else {
    $entry_iter_0=$5;
   }
  }
  while(1) {

   $7=(($entry_iter_11+40)|0);
   $8=((HEAP32[(($7)>>2)])|0);
   $9=($8|0)==0;
   if (!($9)) {
    _close_entry($entry_iter_11);
   }
   $12=(($entry_iter_11+52)|0);
   $13=((HEAP32[(($12)>>2)])|0);
   $14=(($entry_iter_11+8)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   _lily_free($15);
   $16=$entry_iter_11;
   _lily_free($16);
   $17=($13|0)==0;
   if ($17) {
    break;
   } else {
    $entry_iter_11=$13;
   }
  }
 }
 $18=(($lexer+8)|0);
 $19=((HEAP32[(($18)>>2)])|0);
 _lily_free($19);
 $20=(($lexer+4)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 _lily_free($21);
 $22=(($lexer+12)|0);
 $23=((HEAP32[(($22)>>2)])|0);
 _lily_free($23);
 $24=$lexer;
 _lily_free($24);
 return;
}


function _lily_pop_lex_entry($lexer){
 $lexer=($lexer)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;
 var $22=0,$ld$0$0=0,$23$0=0,$ld$1$1=0,$23$1=0,$24=0,$st$2$0=0,$st$3$1=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$32=0,$33=0,$34=0,$pos_0=0,$36=0,$37=0;
 var $38=0,$39=0,$40=0,$41=0,$42=0,$44=0,$pos_1=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$55=0,label=0;

 $1=(($lexer)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 _close_entry($2);
 $3=(($2+40)|0);
 HEAP32[(($3)>>2)]=0;
 $4=(($2+48)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=($5|0)==0;
 if ($6) {
  $55=(($lexer+16)|0);
  HEAP32[(($55)>>2)]=0;
  return;
 }
 $8=(($lexer+8)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=(($5+8)|0);
 $11=((HEAP32[(($10)>>2)])|0);
 $12=((_strcpy((($9)|0),(($11)|0)))|0);
 $13=(($5+20)|0);
 $14=((HEAP32[(($13)>>2)])|0);
 $15=(($lexer+16)|0);
 HEAP32[(($15)>>2)]=$14;
 $16=(($5+12)|0);
 $17=((HEAP16[(($16)>>1)])|0);
 $18=(($lexer+30)|0);
 HEAP16[(($18)>>1)]=$17;
 HEAP32[(($1)>>2)]=$5;
 $19=(($5+4)|0);
 $20=((HEAP32[(($19)>>2)])|0);
 $21=(($lexer+48)|0);
 HEAP32[(($21)>>2)]=$20;
 $22=(($5+32)|0);
 $ld$0$0=(($22)|0);
 $23$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($22+4)|0);
 $23$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $24=(($lexer+32)|0);
 $st$2$0=(($24)|0);
 HEAP32[(($st$2$0)>>2)]=$23$0;
 $st$3$1=(($24+4)|0);
 HEAP32[(($st$3$1)>>2)]=$23$1;
 $25=(($5+16)|0);
 $26=$25;
 $27=((HEAP32[(($26)>>2)])|0);
 $28=$27>>>16;
 $29=(($lexer+40)|0);
 HEAP32[(($29)>>2)]=$28;
 $30=($28|0)==35;
 if (!($30)) {
  return;
 }
 $32=((HEAP16[(($18)>>1)])|0);
 $33=($32&65535);
 $34=((HEAP32[(($8)>>2)])|0);
 $pos_0=$33;
 while(1) {

  $36=((($pos_0)-(1))|0);
  $37=(($34+$36)|0);
  $38=((HEAP8[($37)])|0);
  $39=(($38<<24)>>24);
  $40=((2128+$39)|0);
  $41=((HEAP8[($40)])|0);
  $42=(($41<<24)>>24)==0;
  if ($42) {
   $pos_1=$pos_0;
   break;
  }
  $44=($36|0)==0;
  if ($44) {
   $pos_1=0;
   break;
  } else {
   $pos_0=$36;
  }
 }

 $46=(($lexer+12)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=((HEAP32[(($8)>>2)])|0);
 $49=(($48+$pos_1)|0);
 $50=((($33)-($pos_1))|0);
 $51=((_strncpy((($47)|0),(($49)|0),(($50)|0)))|0);
 $52=((HEAP32[(($46)>>2)])|0);
 $53=(($52+$50)|0);
 HEAP8[($53)]=0;
 return;
}


function _lily_scan_interpolation_piece($lexer,$start_ch){
 $lexer=($lexer)|0;
 $start_ch=($start_ch)|0;
 var $ch=0,$start=0,$1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$16=0,$17=0,$is_interpolated_0=0,$19=0,$20=0,$21=0;
 var $22=0,$23=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $ch=((sp)|0);
 $start=(((sp)+(8))|0);
 $1=((HEAP32[(($start_ch)>>2)])|0);
 HEAP32[(($ch)>>2)]=$1;
 HEAP32[(($start)>>2)]=0;
 $2=((HEAP8[($1)])|0);
 $3=(($2<<24)>>24)==94;
 do {
  if ($3) {
   $5=(($1+1)|0);
   $6=((HEAP8[($5)])|0);
   $7=(($6<<24)>>24)==40;
   if (!($7)) {
    label = 4;
    break;
   }
   $9=(($1+2)|0);
   HEAP32[(($ch)>>2)]=$9;
   $10=(($lexer+16)|0);
   $11=((HEAP32[(($10)>>2)])|0);
   $12=(($lexer+20)|0);
   HEAP32[(($12)>>2)]=$11;
   _scan_interpolation($lexer,$ch,$start);
   $13=((HEAP32[(($ch)>>2)])|0);
   $14=(($13+1)|0);
   HEAP32[(($ch)>>2)]=$14;
   $is_interpolated_0=1;
  } else {
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  $16=((HEAP32[(($ch)>>2)])|0);
  $17=((($16)-(1))|0);
  HEAP32[(($ch)>>2)]=$17;
  _scan_quoted_raw($lexer,$ch,$start,80);
  $is_interpolated_0=0;
 }

 $19=((HEAP32[(($start)>>2)])|0);
 $20=(($lexer+12)|0);
 $21=((HEAP32[(($20)>>2)])|0);
 $22=(($21+$19)|0);
 HEAP8[($22)]=0;
 $23=((HEAP32[(($ch)>>2)])|0);
 HEAP32[(($start_ch)>>2)]=$23;
 STACKTOP=sp;return (($is_interpolated_0)|0);
}


function _lily_lexer_digit_rescan($lexer){
 $lexer=($lexer)|0;
 var $1=0,$2=0,$3=0,$4=0,label=0;

 $1=(($lexer+24)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=((($2)+(1))&65535);
 $4=(($lexer+30)|0);
 HEAP16[(($4)>>1)]=$3;
 _lily_lexer($lexer);
 return;
}


function _lily_lexer($lexer){
 $lexer=($lexer)|0;
 var $input_pos=0,$token=0,$ch=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$storemerge=0,$11=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$word_pos_0=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;
 var $40=0,$42=0,$43=0,$44=0,$46=0,$48=0,$51=0,$52=0,$56=0,$58=0,$59=0,$60=0,$62=0,$63=0,$64=0,$65=0,$66=0,$68=0,$69=0,$73=0;
 var $74=0,$75=0,$77=0,$78=0,$80=0,$81=0,$82=0,$83=0,$84=0,$86=0,$87=0,$88=0,$89=0,$90=0,$92=0,$93=0,$94=0,$96=0,$97=0,$98=0;
 var $99=0,$100=0,$101=0,$102=0,$104=0,$106=0,$107=0,$108=0,$109=0,$110=0,$112=0,$113=0,$114=0,$115=0,$117=0,$118=0,$119=0,$123=0,$124=0,$125=0;
 var $126=0,$127=0,$128=0,$131=0,$132=0,$133=0,$134=0,$136=0,$137=0,$138=0,$139=0,$140=0,$142=0,$144=0,$145=0,$147=0,$148=0,$149=0,$150=0,$151=0;
 var $152=0,$155=0,$157=0,$158=0,$159=0,$161=0,$162=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$172=0,$174=0,$175=0,$176=0,$178=0,$179=0,$181=0;
 var $182=0,$183=0,$184=0,$185=0,$187=0,$188=0,$189=0,$190=0,$191=0,$194=0,$195=0,$196=0,$197=0,$198=0,$200=0,$201=0,$202=0,$203=0,$206=0,$207=0;
 var $208=0,$209=0,$211=0,$212=0,$213=0,$214=0,$216=0,$217=0,$218=0,$219=0,$_off=0,$222=0,$224=0,$225=0,$_5=0,$226=0,$227=0,$228=0,$229=0,$231=0;
 var $232=0,$233=0,$234=0,$236=0,$237=0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=0,$246=0,$247=0,$248=0,$249=0,$251=0,$252=0,$254=0,$255=0,$256=0;
 var $or_cond3=0,$258=0,$259=0,$262=0,$263=0,$264=0,$265=0,$267=0,$268=0,$270=0,$271=0,$274=0,$275=0,$276=0,$277=0,$278=0,$280=0,$281=0,$284=0,$285=0;
 var $286=0,$287=0,$288=0,$290=0,$292=0,$293=0,$294=0,$295=0,$297=0,$298=0,$word_pos2_0=0,$300=0,$301=0,$302=0,$303=0,$304=0,$305=0,$306=0,$307=0,$308=0;
 var $309=0,$310=0,$312=0,$313=0,$314=0,$317=0,$318=0,$319=0,$320=0,$321=0,$323=0,$324=0,$325=0,$327=0,$328=0,$330=0,$331=0,$332=0,$333=0,$334=0;
 var $336=0,$337=0,$339=0,$340=0,$344=0,$345=0,$346=0,$347=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;
 $input_pos=((sp)|0);
 $token=(((sp)+(8))|0);
 $ch=(((sp)+(16))|0);
 $1=(($lexer+30)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 HEAP32[(($input_pos)>>2)]=$3;
 $4=(($lexer+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=(($lexer+8)|0);
 L1: while(1) {
  $7=((HEAP32[(($input_pos)>>2)])|0);
  $8=((HEAP32[(($6)>>2)])|0);
  $9=(($8+$7)|0);
  $storemerge=$9;
  while(1) {

   HEAP32[(($ch)>>2)]=$storemerge;
   $11=((HEAP8[($storemerge)])|0);
   if (!((((($11<<24)>>24))|0)==((32)|0)|(((($11<<24)>>24))|0)==((9)|0))) {
    break;
   }
   $13=(($storemerge+1)|0);
   $storemerge=$13;
  }
  $15=$storemerge;
  $16=$9;
  $17=((($15)-($16))|0);
  $18=((HEAP32[(($input_pos)>>2)])|0);
  $19=((($18)+($17))|0);
  HEAP32[(($input_pos)>>2)]=$19;
  $20=((HEAP32[(($ch)>>2)])|0);
  $21=((HEAP8[($20)])|0);
  $22=($21&255);
  $23=(($5+$22)|0);
  $24=((HEAP8[($23)])|0);
  $25=(($24<<24)>>24);
  $26=(($24<<24)>>24)==15;
  if ($26) {
   label = 6;
   break;
  }
  $46=(($24<<24)>>24)<7;
  if ($46) {
   label = 10;
   break;
  }
  switch ((($24<<24)>>24)) {
  case 16: {
   label = 24;
   break L1;
   break;
  }
  case 22: {
   break;
  }
  case 29: {
   label = 21;
   break L1;
   break;
  }
  case 21: {
   $51=((_read_line($lexer))|0);
   $52=($51|0)==0;
   if ($52) {
    label = 14;
    break L1;
   }
   HEAP32[(($input_pos)>>2)]=0;
   continue L1;
   break;
  }
  case 28: {
   label = 25;
   break L1;
   break;
  }
  default: {
   label = 27;
   break L1;
  }
  }
  $56=(($21<<24)>>24)==35;
  do {
   if ($56) {
    $58=(($20+1)|0);
    $59=((HEAP8[($58)])|0);
    $60=(($59<<24)>>24)==91;
    if (!($60)) {
     break;
    }
    _scan_multiline_comment($lexer,$ch);
    $62=((HEAP32[(($ch)>>2)])|0);
    $63=((HEAP32[(($6)>>2)])|0);
    $64=$62;
    $65=$63;
    $66=((($64)-($65))|0);
    HEAP32[(($input_pos)>>2)]=$66;
    continue L1;
   }
  } while(0);
  $68=((_read_line($lexer))|0);
  $69=($68|0)==0;
  if ($69) {
   label = 20;
   break;
  }
  HEAP32[(($input_pos)>>2)]=0;
 }
 L18: do {
  if ((label|0) == 10) {
   $48=((($19)+(1))|0);
   HEAP32[(($input_pos)>>2)]=$48;
   HEAP32[(($token)>>2)]=$25;
  }
  else if ((label|0) == 14) {
   HEAP32[(($token)>>2)]=52;
   HEAP32[(($input_pos)>>2)]=0;
  }
  else if ((label|0) == 20) {
   HEAP32[(($token)>>2)]=52;
   HEAP32[(($input_pos)>>2)]=0;
  }
  else if ((label|0) == 21) {
   $73=(($20+1)|0);
   HEAP32[(($ch)>>2)]=$73;
   $74=((HEAP8[($73)])|0);
   $75=(($74<<24)>>24)==34;
   if (!($75)) {
    $77=(($lexer+56)|0);
    $78=((HEAP32[(($77)>>2)])|0);
    _lily_raise($78,1,11888,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   _scan_quoted($lexer,$ch,22);
   $80=((HEAP32[(($ch)>>2)])|0);
   $81=((HEAP32[(($6)>>2)])|0);
   $82=$80;
   $83=$81;
   $84=((($82)-($83))|0);
   HEAP32[(($input_pos)>>2)]=$84;
   HEAP32[(($token)>>2)]=39;
  }
  else if ((label|0) == 24) {
   _scan_quoted($lexer,$ch,0);
   $86=((HEAP32[(($ch)>>2)])|0);
   $87=((HEAP32[(($6)>>2)])|0);
   $88=$86;
   $89=$87;
   $90=((($88)-($89))|0);
   HEAP32[(($input_pos)>>2)]=$90;
   HEAP32[(($token)>>2)]=37;
  }
  else if ((label|0) == 25) {
   $92=(($20+1)|0);
   $93=((HEAP8[($92)])|0);
   $94=(($93<<24)>>24)==34;
   if (!($94)) {
    label = 6;
    break;
   }
   HEAP32[(($ch)>>2)]=$92;
   $96=((HEAP32[(($input_pos)>>2)])|0);
   $97=((($96)+(1))|0);
   HEAP32[(($input_pos)>>2)]=$97;
   _scan_quoted($lexer,$ch,1);
   $98=((HEAP32[(($ch)>>2)])|0);
   $99=((HEAP32[(($6)>>2)])|0);
   $100=$98;
   $101=$99;
   $102=((($100)-($101))|0);
   HEAP32[(($input_pos)>>2)]=$102;
   HEAP32[(($token)>>2)]=38;
  }
  else if ((label|0) == 27) {
   $104=(($24<<24)>>24)<11;
   if ($104) {
    $106=((($19)+(1))|0);
    HEAP32[(($input_pos)>>2)]=$106;
    $107=((HEAP32[(($6)>>2)])|0);
    $108=(($107+$106)|0);
    $109=((HEAP8[($108)])|0);
    $110=(($109<<24)>>24)==61;
    if ($110) {
     $112=((($19)+(2))|0);
     HEAP32[(($input_pos)>>2)]=$112;
     $113=((($25)-(7))|0);
     $114=((2488+($113<<2))|0);
     $115=((HEAP32[(($114)>>2)])|0);
     HEAP32[(($token)>>2)]=$115;
     break;
    } else {
     $117=((($25)-(7))|0);
     $118=((2472+($117<<2))|0);
     $119=((HEAP32[(($118)>>2)])|0);
     HEAP32[(($token)>>2)]=$119;
     break;
    }
   }
   switch ((($24<<24)>>24)) {
   case 17: {
    _scan_number($lexer,$input_pos,$token,$20);
    break L18;
    break;
   }
   case 23: {
    $123=(($20+1)|0);
    $124=((HEAP8[($123)])|0);
    $125=($124&255);
    $126=(($5+$125)|0);
    $127=((HEAP8[($126)])|0);
    $128=(($127<<24)>>24)==17;
    if ($128) {
     _scan_number($lexer,$input_pos,$token,$20);
     break L18;
    }
    HEAP32[(($ch)>>2)]=$123;
    $131=((HEAP32[(($input_pos)>>2)])|0);
    $132=((($131)+(1))|0);
    HEAP32[(($input_pos)>>2)]=$132;
    HEAP32[(($token)>>2)]=42;
    $133=((HEAP8[($123)])|0);
    $134=(($133<<24)>>24)==46;
    if (!($134)) {
     break L18;
    }
    $136=(($20+2)|0);
    HEAP32[(($ch)>>2)]=$136;
    $137=((HEAP32[(($input_pos)>>2)])|0);
    $138=((($137)+(1))|0);
    HEAP32[(($input_pos)>>2)]=$138;
    $139=((HEAP8[($136)])|0);
    $140=(($139<<24)>>24)==46;
    if ($140) {
     $142=((($137)+(2))|0);
     HEAP32[(($input_pos)>>2)]=$142;
     HEAP32[(($token)>>2)]=48;
     break L18;
    } else {
     $144=(($lexer+56)|0);
     $145=((HEAP32[(($144)>>2)])|0);
     _lily_raise($145,1,10736,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
     break L18;
    }
    break;
   }
   case 13: {
    $147=(($20+1)|0);
    $148=((HEAP8[($147)])|0);
    $149=($148&255);
    $150=(($5+$149)|0);
    $151=((HEAP8[($150)])|0);
    $152=(($151<<24)>>24)==17;
    if ($152) {
     _scan_number($lexer,$input_pos,$token,$20);
     break L18;
    }
    $155=(($148<<24)>>24)==61;
    if ($155) {
     $157=(($20+2)|0);
     HEAP32[(($ch)>>2)]=$157;
     $158=((HEAP32[(($input_pos)>>2)])|0);
     $159=((($158)+(2))|0);
     HEAP32[(($input_pos)>>2)]=$159;
     HEAP32[(($token)>>2)]=16;
     break L18;
    } else {
     HEAP32[(($ch)>>2)]=$147;
     $161=((HEAP32[(($input_pos)>>2)])|0);
     $162=((($161)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$162;
     HEAP32[(($token)>>2)]=15;
     break L18;
    }
    break;
   }
   case 14: {
    $164=(($20+1)|0);
    $165=((HEAP8[($164)])|0);
    $166=($165&255);
    $167=(($5+$166)|0);
    $168=((HEAP8[($167)])|0);
    $169=(($168<<24)>>24)==17;
    if ($169) {
     _scan_number($lexer,$input_pos,$token,$20);
     break L18;
    }
    $172=(($165<<24)>>24)==61;
    if ($172) {
     $174=(($20+2)|0);
     HEAP32[(($ch)>>2)]=$174;
     $175=((HEAP32[(($input_pos)>>2)])|0);
     $176=((($175)+(2))|0);
     HEAP32[(($input_pos)>>2)]=$176;
     HEAP32[(($token)>>2)]=18;
     break L18;
    } else {
     HEAP32[(($ch)>>2)]=$164;
     $178=((HEAP32[(($input_pos)>>2)])|0);
     $179=((($178)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$179;
     HEAP32[(($token)>>2)]=17;
     break L18;
    }
    break;
   }
   case 18: {
    $181=((($19)+(1))|0);
    HEAP32[(($input_pos)>>2)]=$181;
    $182=((HEAP32[(($ch)>>2)])|0);
    $183=(($182+1)|0);
    HEAP32[(($ch)>>2)]=$183;
    $184=((HEAP8[($183)])|0);
    $185=(($184<<24)>>24)==124;
    if ($185) {
     _scan_lambda($lexer,$ch);
     $187=((HEAP32[(($ch)>>2)])|0);
     $188=((HEAP32[(($6)>>2)])|0);
     $189=$187;
     $190=$188;
     $191=((($189)-($190))|0);
     HEAP32[(($input_pos)>>2)]=$191;
     HEAP32[(($token)>>2)]=30;
     break L18;
    } else {
     HEAP32[(($token)>>2)]=29;
     break L18;
    }
    break;
   }
   case 25: {
    $194=((($19)+(1))|0);
    HEAP32[(($input_pos)>>2)]=$194;
    $195=((HEAP32[(($ch)>>2)])|0);
    $196=(($195+1)|0);
    HEAP32[(($ch)>>2)]=$196;
    $197=((HEAP8[($196)])|0);
    $198=(($197<<24)>>24)==38;
    if ($198) {
     $200=((HEAP32[(($input_pos)>>2)])|0);
     $201=((($200)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$201;
     $202=((HEAP32[(($ch)>>2)])|0);
     $203=(($202+1)|0);
     HEAP32[(($ch)>>2)]=$203;
     HEAP32[(($token)>>2)]=44;
     break L18;
    } else {
     HEAP32[(($token)>>2)]=43;
     break L18;
    }
    break;
   }
   case 26: {
    $206=((($19)+(1))|0);
    HEAP32[(($input_pos)>>2)]=$206;
    $207=((HEAP32[(($ch)>>2)])|0);
    $208=(($207+1)|0);
    HEAP32[(($ch)>>2)]=$208;
    $209=((HEAP8[($208)])|0);
    if ((((($209<<24)>>24))|0)==((124)|0)) {
     $211=((HEAP32[(($input_pos)>>2)])|0);
     $212=((($211)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$212;
     $213=((HEAP32[(($ch)>>2)])|0);
     $214=(($213+1)|0);
     HEAP32[(($ch)>>2)]=$214;
     HEAP32[(($token)>>2)]=46;
     break L18;
    } else if ((((($209<<24)>>24))|0)==((62)|0)) {
     $216=((HEAP32[(($input_pos)>>2)])|0);
     $217=((($216)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$217;
     $218=((HEAP32[(($ch)>>2)])|0);
     $219=(($218+1)|0);
     HEAP32[(($ch)>>2)]=$219;
     HEAP32[(($token)>>2)]=49;
     break L18;
    } else {
     HEAP32[(($token)>>2)]=45;
     break L18;
    }
    break;
   }
   default: {
    $_off=((($24)-(11))&255);
    $222=((($_off&255))>>>0)<((2)>>>0);
    if ($222) {
     $224=(($24<<24)>>24)==11;
     $225=((($19)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$225;
     $_5=($224?23:19);
     HEAP32[(($token)>>2)]=$_5;
     $226=((HEAP32[(($ch)>>2)])|0);
     $227=(($226+1)|0);
     HEAP32[(($ch)>>2)]=$227;
     $228=((HEAP8[($227)])|0);
     $229=(($228<<24)>>24)==61;
     if ($229) {
      $231=((HEAP32[(($token)>>2)])|0);
      $232=((($231)+(1))|0);
      HEAP32[(($token)>>2)]=$232;
      $233=((HEAP32[(($input_pos)>>2)])|0);
      $234=((($233)+(1))|0);
      HEAP32[(($input_pos)>>2)]=$234;
      break L18;
     }
     $236=((HEAP8[($226)])|0);
     $237=(($228<<24)>>24)==(($236<<24)>>24);
     if (!($237)) {
      $254=(($228<<24)>>24)==91;
      $255=((HEAP32[(($token)>>2)])|0);
      $256=($255|0)==19;
      $or_cond3=$254&$256;
      if (!($or_cond3)) {
       break L18;
      }
      $258=((HEAP32[(($input_pos)>>2)])|0);
      $259=((($258)+(1))|0);
      HEAP32[(($input_pos)>>2)]=$259;
      HEAP32[(($token)>>2)]=31;
      break L18;
     }
     $239=((HEAP32[(($input_pos)>>2)])|0);
     $240=((($239)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$240;
     $241=((HEAP32[(($ch)>>2)])|0);
     $242=(($241+1)|0);
     HEAP32[(($ch)>>2)]=$242;
     $243=((HEAP8[($242)])|0);
     $244=(($243<<24)>>24)==61;
     if ($244) {
      $246=((HEAP32[(($input_pos)>>2)])|0);
      $247=((($246)+(1))|0);
      HEAP32[(($input_pos)>>2)]=$247;
      $248=((HEAP32[(($token)>>2)])|0);
      $249=((($248)+(3))|0);
      HEAP32[(($token)>>2)]=$249;
      break L18;
     } else {
      $251=((HEAP32[(($token)>>2)])|0);
      $252=((($251)+(2))|0);
      HEAP32[(($token)>>2)]=$252;
      break L18;
     }
    }
    if ((((($24<<24)>>24))|0)==((20)|0)) {
     $262=((($19)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$262;
     $263=((HEAP32[(($6)>>2)])|0);
     $264=(($263+$262)|0);
     $265=((HEAP8[($264)])|0);
     if ((((($265<<24)>>24))|0)==((61)|0)) {
      HEAP32[(($token)>>2)]=28;
      $267=((HEAP32[(($input_pos)>>2)])|0);
      $268=((($267)+(1))|0);
      HEAP32[(($input_pos)>>2)]=$268;
      break L18;
     } else if ((((($265<<24)>>24))|0)==((62)|0)) {
      HEAP32[(($token)>>2)]=34;
      $270=((HEAP32[(($input_pos)>>2)])|0);
      $271=((($270)+(1))|0);
      HEAP32[(($input_pos)>>2)]=$271;
      break L18;
     } else {
      HEAP32[(($token)>>2)]=27;
      break L18;
     }
    } else if ((((($24<<24)>>24))|0)==((19)|0)) {
     $274=((($19)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$274;
     $275=((HEAP32[(($ch)>>2)])|0);
     $276=(($275+1)|0);
     HEAP32[(($ch)>>2)]=$276;
     $277=((HEAP8[($276)])|0);
     $278=(($277<<24)>>24)==62;
     if ($278) {
      $280=((HEAP32[(($input_pos)>>2)])|0);
      $281=((($280)+(1))|0);
      HEAP32[(($input_pos)>>2)]=$281;
      HEAP32[(($token)>>2)]=32;
      break L18;
     } else {
      HEAP32[(($token)>>2)]=33;
      break L18;
     }
    } else if ((((($24<<24)>>24))|0)==((24)|0)) {
     $284=(($20+1)|0);
     HEAP32[(($ch)>>2)]=$284;
     $285=((HEAP32[(($input_pos)>>2)])|0);
     $286=((($285)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$286;
     $287=((HEAP8[($284)])|0);
     $288=(($287<<24)>>24)==40;
     if ($288) {
      $290=((($285)+(2))|0);
      HEAP32[(($input_pos)>>2)]=$290;
      HEAP32[(($token)>>2)]=47;
      break L18;
     }
     $292=($287&255);
     $293=(($5+$292)|0);
     $294=((HEAP8[($293)])|0);
     $295=(($294<<24)>>24)==15;
     if (!($295)) {
      HEAP32[(($token)>>2)]=50;
      break L18;
     }
     $297=(($lexer+12)|0);
     $298=((HEAP32[(($297)>>2)])|0);
     $word_pos2_0=0;
     while(1) {

      $300=((HEAP32[(($ch)>>2)])|0);
      $301=((HEAP8[($300)])|0);
      $302=(($298+$word_pos2_0)|0);
      HEAP8[($302)]=$301;
      $303=((($word_pos2_0)+(1))|0);
      $304=((HEAP32[(($ch)>>2)])|0);
      $305=(($304+1)|0);
      HEAP32[(($ch)>>2)]=$305;
      $306=((HEAP8[($305)])|0);
      $307=($306&255);
      $308=((2128+$307)|0);
      $309=((HEAP8[($308)])|0);
      $310=(($309<<24)>>24)==0;
      if ($310) {
       break;
      } else {
       $word_pos2_0=$303;
      }
     }
     $312=((HEAP32[(($input_pos)>>2)])|0);
     $313=((($312)+($303))|0);
     HEAP32[(($input_pos)>>2)]=$313;
     $314=(($298+$303)|0);
     HEAP8[($314)]=0;
     HEAP32[(($token)>>2)]=36;
     break L18;
    } else if ((((($24<<24)>>24))|0)==((27)|0)) {
     $317=(($20+1)|0);
     HEAP32[(($ch)>>2)]=$317;
     $318=((HEAP32[(($input_pos)>>2)])|0);
     $319=((($318)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$319;
     $320=((HEAP8[($317)])|0);
     $321=(($320<<24)>>24)==62;
     if (!($321)) {
      HEAP32[(($token)>>2)]=50;
      break L18;
     }
     $323=(($lexer+44)|0);
     $324=((HEAP32[(($323)>>2)])|0);
     $325=($324|0)==1;
     if ($325) {
      $327=(($lexer+56)|0);
      $328=((HEAP32[(($327)>>2)])|0);
      _lily_raise($328,1,9568,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
     }
     $330=(($lexer)|0);
     $331=((HEAP32[(($330)>>2)])|0);
     $332=(($331+48)|0);
     $333=((HEAP32[(($332)>>2)])|0);
     $334=($333|0)==0;
     if (!($334)) {
      $336=(($lexer+56)|0);
      $337=((HEAP32[(($336)>>2)])|0);
      _lily_raise($337,1,8240,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
     }
     $339=((HEAP32[(($input_pos)>>2)])|0);
     $340=((($339)+(1))|0);
     HEAP32[(($input_pos)>>2)]=$340;
     HEAP32[(($token)>>2)]=51;
     break L18;
    } else {
     HEAP32[(($token)>>2)]=50;
     break L18;
    }
   }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $27=(($lexer+12)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $word_pos_0=0;
  while(1) {

   $30=((HEAP32[(($ch)>>2)])|0);
   $31=((HEAP8[($30)])|0);
   $32=(($28+$word_pos_0)|0);
   HEAP8[($32)]=$31;
   $33=((($word_pos_0)+(1))|0);
   $34=((HEAP32[(($ch)>>2)])|0);
   $35=(($34+1)|0);
   HEAP32[(($ch)>>2)]=$35;
   $36=((HEAP8[($35)])|0);
   $37=($36&255);
   $38=((2128+$37)|0);
   $39=((HEAP8[($38)])|0);
   $40=(($39<<24)>>24)==0;
   if ($40) {
    break;
   } else {
    $word_pos_0=$33;
   }
  }
  $42=((HEAP32[(($input_pos)>>2)])|0);
  $43=((($42)+($33))|0);
  HEAP32[(($input_pos)>>2)]=$43;
  $44=(($28+$33)|0);
  HEAP8[($44)]=0;
  HEAP32[(($token)>>2)]=35;
 }
 $344=((HEAP32[(($input_pos)>>2)])|0);
 $345=(($344)&65535);
 HEAP16[(($1)>>1)]=$345;
 $346=((HEAP32[(($token)>>2)])|0);
 $347=(($lexer+40)|0);
 HEAP32[(($347)>>2)]=$346;
 STACKTOP=sp;return;
}


function _lily_grow_lexer_buffers($lexer){
 $lexer=($lexer)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,label=0;

 $1=(($lexer+28)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $4=$3<<1;
 $5=(($lexer+26)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=(($6<<16)>>16)==(($2<<16)>>16);
 if ($7) {
  $9=(($lexer+12)|0);
  $10=((HEAP32[(($9)>>2)])|0);
  $11=((_lily_realloc($10,$4))|0);
  HEAP32[(($9)>>2)]=$11;
  $12=(($4)&65535);
  HEAP16[(($5)>>1)]=$12;
 }
 $14=(($lexer+8)|0);
 $15=((HEAP32[(($14)>>2)])|0);
 $16=((_lily_realloc($15,$4))|0);
 HEAP32[(($14)>>2)]=$16;
 $17=(($4)&65535);
 HEAP16[(($1)>>1)]=$17;
 return;
}


function _lily_try_load_file($lexer,$filename){
 $lexer=($lexer)|0;
 $filename=($filename)|0;
 var $1=0,$2=0,$_0=0,label=0;

 $1=((_fopen((($filename)|0),((14016)|0)))|0);
 $2=($1|0)==0;
 if ($2) {
  $_0=0;

  return (($_0)|0);
 }
 _setup_opened_file($lexer,1,$1);
 $_0=1;

 return (($_0)|0);
}


function _lily_load_str($lexer,$mode,$str){
 $lexer=($lexer)|0;
 $mode=($mode)|0;
 $str=($str)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=((_get_entry($lexer))|0);
 $2=(($1+40)|0);
 HEAP32[(($2)>>2)]=$str;
 $3=(($1+16)|0);
 $4=$3;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5&-65536;
 $7=$6|1;
 HEAP32[(($4)>>2)]=$7;
 _setup_entry($lexer,$1,$mode);
 return;
}


function _lily_load_copy_string($lexer,$mode,$str){
 $lexer=($lexer)|0;
 $mode=($mode)|0;
 $str=($str)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;

 $1=((_get_entry($lexer))|0);
 $2=((_strlen((($str)|0)))|0);
 $3=((($2)+(1))|0);
 $4=((_lily_malloc($3))|0);
 $5=((_strcpy((($4)|0),(($str)|0)))|0);
 $6=(($1+40)|0);
 HEAP32[(($6)>>2)]=$4;
 $7=(($1+44)|0);
 HEAP32[(($7)>>2)]=$4;
 $8=(($1+16)|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$10&-65536;
 $12=$11|2;
 HEAP32[(($9)>>2)]=$12;
 _setup_entry($lexer,$1,$mode);
 return;
}


function _lily_lexer_handle_page_data($lexer){
 $lexer=($lexer)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$lbp_0=0,$htmlp_0=0,$c_0_in=0,$c_0=0,$13=0,$14=0,$16=0,$17=0,$18=0;
 var $19=0,$21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$extract_t=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0;
 var $43=0,$htmlp_1=0,$45=0,$47=0,$48=0,$50=0,$52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$lbp_1=0,$60=0,$61=0,$lbp_2_off0=0,label=0;

 $1=(($lexer+64)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($lexer+30)|0);
 $4=((HEAP16[(($3)>>1)])|0);
 $5=($4&65535);
 $6=(($lexer+8)|0);
 $7=((HEAP32[(($6)>>2)])|0);
 $8=(($7+$5)|0);
 $9=(($lexer+12)|0);
 $10=(($lexer+28)|0);
 $11=(($lexer+60)|0);
 $c_0_in=$8;$htmlp_0=0;$lbp_0=$5;
 while(1) {



  $c_0=((HEAP8[($c_0_in)])|0);
  $13=((($lbp_0)+(1))|0);
  $14=(($c_0<<24)>>24)==60;
  if ($14) {
   $16=((HEAP32[(($6)>>2)])|0);
   $17=(($16+$13)|0);
   $18=((_strncmp((($17)|0),((6944)|0),((5)|0)))|0);
   $19=($18|0)==0;
   if ($19) {
    label = 4;
    break;
   }
  }
  $32=((HEAP32[(($9)>>2)])|0);
  $33=(($32+$htmlp_0)|0);
  HEAP8[($33)]=$c_0;
  $34=((($htmlp_0)+(1))|0);
  $35=((HEAP16[(($10)>>1)])|0);
  $36=($35&65535);
  $37=((($36)-(1))|0);
  $38=($34|0)==($37|0);
  if ($38) {
   $40=((HEAP32[(($9)>>2)])|0);
   $41=(($40+$34)|0);
   HEAP8[($41)]=0;
   $42=((HEAP32[(($11)>>2)])|0);
   $43=((HEAP32[(($9)>>2)])|0);
   FUNCTION_TABLE_vii[($42)&127]($43,$2);
   $htmlp_1=0;
  } else {
   $htmlp_1=$34;
  }

  $45=(($c_0<<24)>>24)==10;
  if ($45) {
   $47=((_read_line($lexer))|0);
   $48=($47|0)==0;
   if ($48) {
    label = 11;
    break;
   } else {
    $lbp_1=0;
   }
  } else {
   $lbp_1=$13;
  }

  $60=((HEAP32[(($6)>>2)])|0);
  $61=(($60+$lbp_1)|0);
  $c_0_in=$61;$htmlp_0=$htmlp_1;$lbp_0=$lbp_1;
 }
 if ((label|0) == 4) {
  $21=($htmlp_0|0)==0;
  if (!($21)) {
   $23=(($lexer+12)|0);
   $24=((HEAP32[(($23)>>2)])|0);
   $25=(($24+$htmlp_0)|0);
   HEAP8[($25)]=0;
   $26=(($lexer+60)|0);
   $27=((HEAP32[(($26)>>2)])|0);
   $28=((HEAP32[(($23)>>2)])|0);
   FUNCTION_TABLE_vii[($27)&127]($28,$2);
  }
  $30=((($lbp_0)+(6))|0);
  $extract_t=(($30)&65535);
  $lbp_2_off0=$extract_t;

  HEAP16[(($3)>>1)]=$lbp_2_off0;
  return;
 }
 else if ((label|0) == 11) {
  $50=($htmlp_1|0)==0;
  if (!($50)) {
   $52=((HEAP32[(($9)>>2)])|0);
   $53=(($52+$htmlp_1)|0);
   HEAP8[($53)]=0;
   $54=(($lexer+60)|0);
   $55=((HEAP32[(($54)>>2)])|0);
   $56=((HEAP32[(($9)>>2)])|0);
   FUNCTION_TABLE_vii[($55)&127]($56,$2);
  }
  $58=(($lexer+40)|0);
  HEAP32[(($58)>>2)]=52;
  $lbp_2_off0=0;

  HEAP16[(($3)>>1)]=$lbp_2_off0;
  return;
 }
}


function _tokname($t){
 $t=($t)|0;
 var $1=0,$3=0,$4=0,$_0=0,label=0;

 $1=($t>>>0)<((53)>>>0);
 if ($1) {
  $3=((408+($t<<2))|0);
  $4=((HEAP32[(($3)>>2)])|0);
  $_0=$4;
 } else {
  $_0=0;
 }

 return (($_0)|0);
}


function _close_entry($entry){
 $entry=($entry)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,label=0;

 $1=(($entry+16)|0);
 $2=$1;
 $3=((HEAP32[(($2)>>2)])|0);
 $4=$3&65535;
 if (((($4|0))|0)==((2)|0)) {
  $11=(($entry+44)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  _lily_free($12);
  return;
 } else if (((($4|0))|0)==((0)|0)) {
  $6=(($entry+40)|0);
  $7=((HEAP32[(($6)>>2)])|0);
  $8=$7;
  $9=((_fclose((($8)|0)))|0);
  return;
 } else {
  return;
 }
}


function _scan_interpolation($lexer,$source_ch,$start){
 $lexer=($lexer)|0;
 $source_ch=($source_ch)|0;
 $start=($start)|0;
 var $ch=0,$label_pos=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$storemerge=0,$parenth_depth_0=0,$10=0,$11=0,$13=0,$15=0,$16=0,$17=0,$19=0,$21=0;
 var $22=0,$24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$32=0,$35=0,$37=0,$parenth_depth_1=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$47=0,$49=0;
 var $parenth_depth_2=0,$51=0,$52=0,$53=0,$54=0,$56=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $ch=((sp)|0);
 $label_pos=(((sp)+(8))|0);
 $1=(($lexer+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP32[(($source_ch)>>2)])|0);
 HEAP32[(($ch)>>2)]=$3;
 $4=((HEAP32[(($start)>>2)])|0);
 $5=(($lexer+56)|0);
 $6=(($lexer+56)|0);
 $7=(($lexer+56)|0);
 $8=(($lexer+56)|0);
 $parenth_depth_0=1;$storemerge=$4;
 while(1) {


  HEAP32[(($label_pos)>>2)]=$storemerge;
  $10=((HEAP32[(($ch)>>2)])|0);
  $11=((HEAP8[($10)])|0);
  do {
   if ((((($11<<24)>>24))|0)==((40)|0)) {
    $13=((($parenth_depth_0)+(1))|0);
    $parenth_depth_1=$13;
   } else if ((((($11<<24)>>24))|0)==((36)|0)) {
    $15=(($10+1)|0);
    $16=((HEAP8[($15)])|0);
    $17=(($16<<24)>>24)==34;
    if (!($17)) {
     label = 6;
     break;
    }
    $19=((HEAP32[(($8)>>2)])|0);
    _lily_raise($19,1,7040,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    $parenth_depth_1=$parenth_depth_0;
   } else {
    label = 6;
   }
  } while(0);
  do {
   if ((label|0) == 6) {
    label = 0;
    $21=((HEAP32[(($ch)>>2)])|0);
    $22=((HEAP8[($21)])|0);
    if ((((($22<<24)>>24))|0)==((34)|0)) {
     $24=(($21+1)|0);
     $25=((HEAP8[($24)])|0);
     $26=(($25<<24)>>24)==34;
     do {
      if ($26) {
       $28=(($21+2)|0);
       $29=((HEAP8[($28)])|0);
       $30=(($29<<24)>>24)==34;
       if (!($30)) {
        break;
       }
       $32=((HEAP32[(($5)>>2)])|0);
       _lily_raise($32,1,6888,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
      }
     } while(0);
     _scan_quoted_raw($lexer,$ch,$label_pos,36);
     $parenth_depth_1=$parenth_depth_0;
     break;
    } else if ((((($22<<24)>>24))|0)==((10)|0)) {
     $35=((HEAP32[(($6)>>2)])|0);
     _lily_raise($35,1,6752,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
     $parenth_depth_1=$parenth_depth_0;
     break;
    } else if ((((($22<<24)>>24))|0)==((35)|0)) {
     $37=((HEAP32[(($7)>>2)])|0);
     _lily_raise($37,1,6632,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
     $parenth_depth_1=$parenth_depth_0;
     break;
    } else {
     $parenth_depth_1=$parenth_depth_0;
     break;
    }
   }
  } while(0);

  $39=((HEAP32[(($ch)>>2)])|0);
  $40=((HEAP8[($39)])|0);
  $41=((HEAP32[(($label_pos)>>2)])|0);
  $42=(($2+$41)|0);
  HEAP8[($42)]=$40;
  $43=((HEAP32[(($ch)>>2)])|0);
  $44=((HEAP8[($43)])|0);
  $45=(($44<<24)>>24)==41;
  if ($45) {
   $47=($parenth_depth_1|0)==1;
   if ($47) {
    break;
   }
   $49=((($parenth_depth_1)-(1))|0);
   $parenth_depth_2=$49;
  } else {
   $parenth_depth_2=$parenth_depth_1;
  }

  $51=((HEAP32[(($ch)>>2)])|0);
  $52=(($51+1)|0);
  HEAP32[(($ch)>>2)]=$52;
  $53=((HEAP32[(($label_pos)>>2)])|0);
  $54=((($53)+(1))|0);
  $parenth_depth_0=$parenth_depth_2;$storemerge=$54;
 }
 HEAP32[(($source_ch)>>2)]=$43;
 $56=((HEAP32[(($label_pos)>>2)])|0);
 HEAP32[(($start)>>2)]=$56;
 STACKTOP=sp;return;
}


function _scan_quoted_raw($lexer,$source_ch,$start,$flags){
 $lexer=($lexer)|0;
 $source_ch=($source_ch)|0;
 $start=($start)|0;
 $flags=($flags)|0;
 var $label_pos=0,$new_ch=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$or_cond=0,$14=0,$15=0,$is_multiline_0=0,$multiline_start_0=0,$17=0,$18=0;
 var $20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$31=0,$32=0,$_old=0,$_old2=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0;
 var $39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$label_0_ph=0,$45=0,$46=0,$51=0,$53=0,$54=0,$56=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0;
 var $65=0,$66=0,$68=0,$69=0,$70=0,$73=0,$74=0,$75=0,$77=0,$78=0,$79=0,$or_cond3=0,$82=0,$83=0,$85=0,$86=0,$87=0,$89=0,$90=0,$91=0;
 var $or_cond6=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$104=0,$105=0,$106=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0;
 var $116=0,$117=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$128=0,$129=0,$131=0,$132=0,$134=0,$135=0,$137=0,$138=0,$140=0,$141=0,$143=0;
 var $144=0,$145=0,$147=0,$148=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $label_pos=((sp)|0);
 $new_ch=(((sp)+(8))|0);
 $1=((HEAP32[(($source_ch)>>2)])|0);
 HEAP32[(($new_ch)>>2)]=$1;
 $2=(($lexer+12)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($1+1)|0);
 $5=((HEAP8[($4)])|0);
 $6=(($5<<24)>>24)==34;
 do {
  if ($6) {
   $8=(($1+2)|0);
   $9=((HEAP8[($8)])|0);
   $10=(($9<<24)>>24)==34;
   $11=$flags&64;
   $12=($11|0)==0;
   $or_cond=$10&$12;
   if (!($or_cond)) {
    $multiline_start_0=0;$is_multiline_0=0;
    break;
   }
   $14=(($lexer+16)|0);
   $15=((HEAP32[(($14)>>2)])|0);
   HEAP32[(($new_ch)>>2)]=$8;
   $multiline_start_0=$15;$is_multiline_0=1;
  } else {
   $multiline_start_0=0;$is_multiline_0=0;
  }
 } while(0);


 $17=$flags&32;
 $18=($17|0)!=0;
 if ($18) {
  $20=($is_multiline_0|0)!=0;
  $21=($20?3:1);
  $22=((HEAP32[(($2)>>2)])|0);
  $23=((HEAP32[(($start)>>2)])|0);
  $24=(($22+$23)|0);
  $25=((_strncpy((($24)|0),((7592)|0),(($21)|0)))|0);
  $26=((HEAP32[(($start)>>2)])|0);
  $27=((($26)+($21))|0);
  HEAP32[(($start)>>2)]=$27;
 }
 $29=((HEAP32[(($new_ch)>>2)])|0);
 $30=(($29+1)|0);
 HEAP32[(($new_ch)>>2)]=$30;
 $31=((HEAP32[(($start)>>2)])|0);
 HEAP32[(($label_pos)>>2)]=$31;
 $32=($is_multiline_0|0)==0;
 $_old=$flags&64;
 $_old2=($_old|0)==0;
 $33=$flags&64;
 $34=($33|0)==0;
 $35=$flags&66;
 $36=($35|0)==0;
 $37=$flags&64;
 $38=($37|0)==0;
 $39=$flags&64;
 $40=($39|0)==0;
 $41=($is_multiline_0|0)==0;
 $42=(($lexer+56)|0);
 $43=(($lexer+56)|0);
 $44=(($lexer+8)|0);
 $label_0_ph=$3;
 L8: while(1) {

  L10: while(1) {
   $45=((HEAP32[(($new_ch)>>2)])|0);
   $46=((HEAP8[($45)])|0);
   if ((((($46<<24)>>24))|0)==((10)|0)) {
    if ($40) {
     break;
    }
   } else if ((((($46<<24)>>24))|0)==((92)|0)) {
    _collect_escape($lexer,$new_ch,$label_pos,$flags);
    continue;
   }
   $68=((HEAP32[(($new_ch)>>2)])|0);
   $69=((HEAP8[($68)])|0);
   $70=(($69<<24)>>24)==34;
   do {
    if ($70) {
     if ($32) {
      if ($_old2) {
       label = 21;
       break L8;
      } else {
       break;
      }
     }
     $73=(($68+1)|0);
     $74=((HEAP8[($73)])|0);
     $75=(($74<<24)>>24)==34;
     if (!($75)) {
      break;
     }
     $77=(($68+2)|0);
     $78=((HEAP8[($77)])|0);
     $79=(($78<<24)>>24)==34;
     $or_cond3=$79&$34;
     if ($or_cond3) {
      label = 21;
      break L8;
     }
    }
   } while(0);
   $85=((HEAP32[(($new_ch)>>2)])|0);
   $86=((HEAP8[($85)])|0);
   $87=(($86<<24)>>24)==94;
   do {
    if ($87) {
     $89=(($85+1)|0);
     $90=((HEAP8[($89)])|0);
     $91=(($90<<24)>>24)!=40;
     $or_cond6=$91|$36;
     if ($or_cond6) {
      break;
     }
     if (!($38)) {
      break L8;
     }
     $94=((HEAP32[(($label_pos)>>2)])|0);
     $95=(($label_0_ph+$94)|0);
     HEAP8[($95)]=94;
     $96=((HEAP32[(($label_pos)>>2)])|0);
     $97=((($96)+(1))|0);
     $98=(($label_0_ph+$97)|0);
     HEAP8[($98)]=40;
     $99=((HEAP32[(($label_pos)>>2)])|0);
     $100=((($99)+(2))|0);
     HEAP32[(($label_pos)>>2)]=$100;
     $101=((HEAP32[(($new_ch)>>2)])|0);
     $102=(($101+2)|0);
     HEAP32[(($new_ch)>>2)]=$102;
     _scan_interpolation($lexer,$new_ch,$label_pos);
     continue L10;
    }
   } while(0);
   $104=((HEAP32[(($new_ch)>>2)])|0);
   $105=((HEAP8[($104)])|0);
   $106=(($105<<24)>>24)==0;
   if ($106) {
    break L8;
   }
   $108=((HEAP32[(($label_pos)>>2)])|0);
   $109=(($label_0_ph+$108)|0);
   HEAP8[($109)]=$105;
   $110=((HEAP32[(($label_pos)>>2)])|0);
   $111=((($110)+(1))|0);
   HEAP32[(($label_pos)>>2)]=$111;
   $112=((HEAP32[(($new_ch)>>2)])|0);
   $113=(($112+1)|0);
   HEAP32[(($new_ch)>>2)]=$113;
  }
  if ($41) {
   $51=((HEAP32[(($42)>>2)])|0);
   _lily_raise($51,1,7464,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $53=((_read_line($lexer))|0);
  $54=($53|0)==0;
  if ($54) {
   $56=((HEAP32[(($43)>>2)])|0);
   _lily_raise($56,1,7304,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$multiline_start_0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $58=((HEAP32[(($label_pos)>>2)])|0);
  $59=((($53)+(3))|0);
  $60=((($59)+($58))|0);
  _ensure_label_size($lexer,$60);
  $61=((HEAP32[(($2)>>2)])|0);
  $62=((HEAP32[(($44)>>2)])|0);
  HEAP32[(($new_ch)>>2)]=$62;
  $63=((HEAP32[(($label_pos)>>2)])|0);
  $64=(($61+$63)|0);
  HEAP8[($64)]=10;
  $65=((HEAP32[(($label_pos)>>2)])|0);
  $66=((($65)+(1))|0);
  HEAP32[(($label_pos)>>2)]=$66;
  $label_0_ph=$61;
 }
 if ((label|0) == 21) {
  $82=((HEAP32[(($new_ch)>>2)])|0);
  $83=(($82+1)|0);
  HEAP32[(($new_ch)>>2)]=$83;
 }
 $114=($is_multiline_0|0)!=0;
 if ($114) {
  $116=((HEAP32[(($new_ch)>>2)])|0);
  $117=(($116+2)|0);
  HEAP32[(($new_ch)>>2)]=$117;
 }
 if ($18) {
  $120=($114?3:1);
  $121=((HEAP32[(($2)>>2)])|0);
  $122=((HEAP32[(($label_pos)>>2)])|0);
  $123=(($121+$122)|0);
  $124=((_strncpy((($123)|0),((7592)|0),(($120)|0)))|0);
  $125=((HEAP32[(($label_pos)>>2)])|0);
  $126=((($125)+($120))|0);
  HEAP32[(($label_pos)>>2)]=$126;
 }
 $128=$flags&1;
 $129=($128|0)==0;
 if ($129) {
  $131=((HEAP32[(($label_pos)>>2)])|0);
  $132=(($label_0_ph+$131)|0);
  HEAP8[($132)]=0;
 }
 $134=$flags&16;
 $135=($134|0)==0;
 if (!($135)) {
  $147=((HEAP32[(($new_ch)>>2)])|0);
  HEAP32[(($source_ch)>>2)]=$147;
  $148=((HEAP32[(($label_pos)>>2)])|0);
  HEAP32[(($start)>>2)]=$148;
  STACKTOP=sp;return;
 }
 $137=(($lexer+52)|0);
 $138=((HEAP32[(($137)>>2)])|0);
 if ($129) {
  $140=((_lily_get_string_literal($138,$label_0_ph))|0);
  $141=(($lexer+48)|0);
  HEAP32[(($141)>>2)]=$140;
  $147=((HEAP32[(($new_ch)>>2)])|0);
  HEAP32[(($source_ch)>>2)]=$147;
  $148=((HEAP32[(($label_pos)>>2)])|0);
  HEAP32[(($start)>>2)]=$148;
  STACKTOP=sp;return;
 } else {
  $143=((HEAP32[(($label_pos)>>2)])|0);
  $144=((_lily_get_bytestring_literal($138,$label_0_ph,$143))|0);
  $145=(($lexer+48)|0);
  HEAP32[(($145)>>2)]=$144;
  $147=((HEAP32[(($new_ch)>>2)])|0);
  HEAP32[(($source_ch)>>2)]=$147;
  $148=((HEAP32[(($label_pos)>>2)])|0);
  HEAP32[(($start)>>2)]=$148;
  STACKTOP=sp;return;
 }
}


function _read_line($lex){
 $lex=($lex)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$11=0,$_0=0,label=0;

 $1=(($lex)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+16)|0);
 $4=$3;
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5&65535;
 $7=($6|0)==0;
 if ($7) {
  $9=((_read_file_line($2))|0);
  $_0=$9;

  return (($_0)|0);
 } else {
  $11=((_read_str_line($2))|0);
  $_0=$11;

  return (($_0)|0);
 }
  return 0;
}


function _scan_multiline_comment($lexer,$source_ch){
 $lexer=($lexer)|0;
 $source_ch=($source_ch)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$new_ch_0=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$_pr=0,$16=0,$17=0,$19=0,$20=0,$22=0,$24=0;
 var $26=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($lexer+16)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP32[(($source_ch)>>2)])|0);
 $4=(($3+2)|0);
 $5=(($lexer+56)|0);
 $6=(($lexer+8)|0);
 $new_ch_0=$4;
 L1: while(1) {

  $7=((HEAP8[($new_ch_0)])|0);
  $8=(($7<<24)>>24)==93;
  if ($8) {
   $10=(($new_ch_0+1)|0);
   $11=((HEAP8[($10)])|0);
   $12=(($11<<24)>>24)==35;
   if ($12) {
    break;
   }
   $_pr=((HEAP8[($new_ch_0)])|0);
   $16=$_pr;
  } else {
   $16=$7;
  }

  $17=(($16<<24)>>24)==10;
  do {
   if ($17) {
    $19=((_read_line($lexer))|0);
    $20=($19|0)==0;
    if ($20) {
     $24=((HEAP32[(($5)>>2)])|0);
     _lily_raise($24,1,8048,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$2,tempVarArgs))|0)); STACKTOP=tempVarArgs;
     break;
    } else {
     $22=((HEAP32[(($6)>>2)])|0);
     $new_ch_0=$22;
     continue L1;
    }
   }
  } while(0);
  $26=(($new_ch_0+1)|0);
  $new_ch_0=$26;
 }
 $14=(($new_ch_0+2)|0);
 HEAP32[(($source_ch)>>2)]=$14;
 STACKTOP=sp;return;
}


function _scan_quoted($lexer,$source_ch,$flags){
 $lexer=($lexer)|0;
 $source_ch=($source_ch)|0;
 $flags=($flags)|0;
 var $dummy=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $dummy=((sp)|0);
 HEAP32[(($dummy)>>2)]=0;
 _scan_quoted_raw($lexer,$source_ch,$dummy,$flags);
 STACKTOP=sp;return;
}


function _scan_number($lexer,$pos,$tok,$new_ch){
 $lexer=($lexer)|0;
 $pos=($pos)|0;
 $tok=($tok)|0;
 $new_ch=($new_ch)|0;
 var $is_integer=0,$num_pos=0,$1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$is_negative_0=0,$_0=0,$14=0,$15=0,$17=0,$18=0,$19=0,$20=0;
 var $22$0=0,$22$1=0,$24$0=0,$24$1=0,$26$0=0,$26$1=0,$28$0=0,$28$1=0,$30$0=0,$30$1=0,$integer_value_0$0=0,$integer_value_0$1=0,$32=0,$33=0,$35=0,$$etemp$0$0=0,$$etemp$0$1=0,$37=0,$39=0,$40=0;
 var $$etemp$1$0=0,$$etemp$1$1=0,$42=0,$$etemp$2$0=0,$$etemp$2$1=0,$46=0,$47=0,$yield_val_sroa_0_0$0=0,$yield_val_sroa_0_0$1=0,$49=0,$st$3$0=0,$st$4$1=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0;
 var $59=0,$60=0,$61=0,$62=0,$63=.0,$64=0,$65=0,$67=0,$68=0,$70=0,$71=0,$72=0,$73=0,$storemerge=0,$75=0,$44$0=0,$44$1=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $is_integer=((sp)|0);
 $num_pos=(((sp)+(8))|0);
 $1=((HEAP32[(($pos)>>2)])|0);
 HEAP32[(($num_pos)>>2)]=$1;
 $2=(($1)&65535);
 $3=(($lexer+24)|0);
 HEAP16[(($3)>>1)]=$2;
 HEAP32[(($is_integer)>>2)]=1;
 $4=((HEAP8[($new_ch)])|0);
 if ((((($4<<24)>>24))|0)==((45)|0)) {
  $6=((HEAP32[(($num_pos)>>2)])|0);
  $7=((($6)+(1))|0);
  HEAP32[(($num_pos)>>2)]=$7;
  $8=(($new_ch+1)|0);
  $_0=$8;$is_negative_0=1;
 } else if ((((($4<<24)>>24))|0)==((43)|0)) {
  $10=((HEAP32[(($num_pos)>>2)])|0);
  $11=((($10)+(1))|0);
  HEAP32[(($num_pos)>>2)]=$11;
  $12=(($new_ch+1)|0);
  $_0=$12;$is_negative_0=0;
 } else {
  $_0=$new_ch;$is_negative_0=0;
 }


 $14=((HEAP8[($_0)])|0);
 $15=(($14<<24)>>24)==48;
 do {
  if ($15) {
   $17=((HEAP32[(($num_pos)>>2)])|0);
   $18=((($17)+(1))|0);
   HEAP32[(($num_pos)>>2)]=$18;
   $19=(($_0+1)|0);
   $20=((HEAP8[($19)])|0);
   if ((((($20<<24)>>24))|0)==((98)|0)) {
    $22$0=((_scan_binary($num_pos,$19))|0);
    $22$1=tempRet0;
    $integer_value_0$1=$22$1;$integer_value_0$0=$22$0;
    break;
   } else if ((((($20<<24)>>24))|0)==((120)|0)) {
    $26$0=((_scan_hex($num_pos,$19))|0);
    $26$1=tempRet0;
    $integer_value_0$1=$26$1;$integer_value_0$0=$26$0;
    break;
   } else if ((((($20<<24)>>24))|0)==((99)|0)) {
    $24$0=((_scan_octal($num_pos,$19))|0);
    $24$1=tempRet0;
    $integer_value_0$1=$24$1;$integer_value_0$0=$24$0;
    break;
   } else {
    $28$0=((_scan_decimal($lexer,$num_pos,$is_integer,$19))|0);
    $28$1=tempRet0;
    $integer_value_0$1=$28$1;$integer_value_0$0=$28$0;
    break;
   }
  } else {
   $30$0=((_scan_decimal($lexer,$num_pos,$is_integer,$_0))|0);
   $30$1=tempRet0;
   $integer_value_0$1=$30$1;$integer_value_0$0=$30$0;
  }
 } while(0);


 $32=((HEAP32[(($is_integer)>>2)])|0);
 $33=($32|0)==0;
 if ($33) {
  $51=(($lexer+8)|0);
  $52=((HEAP32[(($51)>>2)])|0);
  $53=((HEAP32[(($num_pos)>>2)])|0);
  $54=((($53)-($1))|0);
  $55=(($lexer+12)|0);
  $56=((HEAP32[(($55)>>2)])|0);
  $57=(($52+$1)|0);
  $58=((_strncpy((($56)|0),(($57)|0),(($54)|0)))|0);
  $59=((HEAP32[(($55)>>2)])|0);
  $60=(($59+$54)|0);
  HEAP8[($60)]=0;
  $61=((___errno_location())|0);
  HEAP32[(($61)>>2)]=0;
  $62=((HEAP32[(($55)>>2)])|0);
  $63=(+(_strtod($62,0)));
  $64=((HEAP32[(($61)>>2)])|0);
  $65=($64|0)==34;
  if ($65) {
   $67=(($lexer+56)|0);
   $68=((HEAP32[(($67)>>2)])|0);
   _lily_raise($68,1,8520,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $70=(($lexer+52)|0);
  $71=((HEAP32[(($70)>>2)])|0);
  $72=((_lily_get_double_literal($71,$63))|0);
  $73=(($lexer+48)|0);
  HEAP32[(($73)>>2)]=$72;
  $storemerge=41;

  HEAP32[(($tok)>>2)]=$storemerge;
  $75=((HEAP32[(($num_pos)>>2)])|0);
  HEAP32[(($pos)>>2)]=$75;
  STACKTOP=sp;return;
 }
 $35=($is_negative_0|0)==0;
 do {
  if ($35) {
   $$etemp$0$0=-1;
   $$etemp$0$1=-1;
   $37=(($integer_value_0$1|0) > ($$etemp$0$1|0)) | (((($integer_value_0$1|0) == ($$etemp$0$1|0) & ($integer_value_0$0>>>0) >  ($$etemp$0$0>>>0))));
   if ($37) {
    $yield_val_sroa_0_0$1=$integer_value_0$1;$yield_val_sroa_0_0$0=$integer_value_0$0;
    break;
   }
   $39=(($lexer+56)|0);
   $40=((HEAP32[(($39)>>2)])|0);
   _lily_raise($40,1,8648,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   $yield_val_sroa_0_0$1=0;$yield_val_sroa_0_0$0=0;
  } else {
   $$etemp$1$0=1;
   $$etemp$1$1=-2147483648;
   $42=(($integer_value_0$1>>>0) < ($$etemp$1$1>>>0)) | (((($integer_value_0$1>>>0) == ($$etemp$1$1>>>0) & ($integer_value_0$0>>>0) <  ($$etemp$1$0>>>0))));
   if ($42) {
    $$etemp$2$0=0;
    $$etemp$2$1=0;
    $44$0=((_i64Subtract($$etemp$2$0,$$etemp$2$1,$integer_value_0$0,$integer_value_0$1))|0);$44$1=tempRet0;
    $yield_val_sroa_0_0$1=$44$1;$yield_val_sroa_0_0$0=$44$0;
    break;
   } else {
    $46=(($lexer+56)|0);
    $47=((HEAP32[(($46)>>2)])|0);
    _lily_raise($47,1,8648,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    $yield_val_sroa_0_0$1=0;$yield_val_sroa_0_0$0=0;
    break;
   }
  }
 } while(0);


 $49=(($lexer+32)|0);
 $st$3$0=(($49)|0);
 HEAP32[(($st$3$0)>>2)]=$yield_val_sroa_0_0$0;
 $st$4$1=(($49+4)|0);
 HEAP32[(($st$4$1)>>2)]=$yield_val_sroa_0_0$1;
 $storemerge=40;

 HEAP32[(($tok)>>2)]=$storemerge;
 $75=((HEAP32[(($num_pos)>>2)])|0);
 HEAP32[(($pos)>>2)]=$75;
 STACKTOP=sp;return;
}


function _scan_lambda($lexer,$source_ch){
 $lexer=($lexer)|0;
 $source_ch=($source_ch)|0;
 var $ch=0,$i=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$brace_depth_0_ph=0,$label_0_ph=0,$label_0_ph2=0,$10=0,$11=0,$13=0,$14=0,$15=0,$17=0;
 var $18=0,$20=0,$21=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$33=0,$34=0,$35=0,$37=0,$38=0,$39=0,$41=0,$42=0;
 var $43=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$58=0,$59=0,$62=0,$64=0,$66=0,$brace_depth_1=0,$67=0;
 var $68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+16)|0;
 $ch=((sp)|0);
 $i=(((sp)+(8))|0);
 $1=(($lexer+12)|0);
 $2=((HEAP32[(($source_ch)>>2)])|0);
 HEAP32[(($ch)>>2)]=$2;
 HEAP32[(($i)>>2)]=0;
 $3=(($lexer+16)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($lexer+20)|0);
 HEAP32[(($5)>>2)]=$4;
 $6=((HEAP32[(($1)>>2)])|0);
 $7=(($lexer+8)|0);
 $8=(($lexer+56)|0);
 $9=(($lexer+8)|0);
 $label_0_ph=$6;$brace_depth_0_ph=1;
 while(1) {


  $label_0_ph2=$label_0_ph;
  L3: while(1) {

   L5: while(1) {
    $10=((HEAP32[(($ch)>>2)])|0);
    $11=((HEAP8[($10)])|0);
    if ((((($11<<24)>>24))|0)==((35)|0)) {
     $13=(($10+1)|0);
     $14=((HEAP8[($13)])|0);
     $15=(($14<<24)>>24)==91;
     if (!($15)) {
      break;
     }
    } else if ((((($11<<24)>>24))|0)==((10)|0)) {
     break;
    }
    $33=((HEAP32[(($ch)>>2)])|0);
    $34=((HEAP8[($33)])|0);
    $35=(($34<<24)>>24)==35;
    do {
     if ($35) {
      $37=(($33+1)|0);
      $38=((HEAP8[($37)])|0);
      $39=(($38<<24)>>24)==91;
      if (!($39)) {
       break;
      }
      $41=((HEAP32[(($3)>>2)])|0);
      _scan_multiline_comment($lexer,$ch);
      $42=((HEAP32[(($3)>>2)])|0);
      $43=($42|0)==($41|0);
      if ($43) {
       continue L5;
      }
      $45=((($42)-($41))|0);
      $46=((HEAP32[(($i)>>2)])|0);
      $47=((HEAP32[(($7)>>2)])|0);
      $48=((_strlen((($47)|0)))|0);
      $49=((($45)+(3))|0);
      $50=((($49)+($46))|0);
      $51=((($50)+($48))|0);
      _ensure_label_size($lexer,$51);
      $52=((HEAP32[(($1)>>2)])|0);
      $53=((HEAP32[(($i)>>2)])|0);
      $54=(($52+$53)|0);
      _memset((((($54)|0))|0), ((((10)|0))|0), (((($45)|0))|0))|0;
      $55=((HEAP32[(($i)>>2)])|0);
      $56=((($55)+($45))|0);
      HEAP32[(($i)>>2)]=$56;
      continue L5;
     }
    } while(0);
    $58=((HEAP32[(($ch)>>2)])|0);
    $59=((HEAP8[($58)])|0);
    if ((((($59<<24)>>24))|0)==((123)|0)) {
     label = 15;
     break L3;
    } else if ((((($59<<24)>>24))|0)==((125)|0)) {
     label = 16;
     break L3;
    } else if (!((((($59<<24)>>24))|0)==((34)|0))) {
     $brace_depth_1=$brace_depth_0_ph;
     break L3;
    }
    _scan_quoted_raw($lexer,$ch,$i,52);
   }
   $17=((_read_line($lexer))|0);
   $18=($17|0)==0;
   if ($18) {
    $20=((HEAP32[(($8)>>2)])|0);
    $21=((HEAP32[(($5)>>2)])|0);
    _lily_raise($20,1,8800,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$21,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   $23=((HEAP32[(($i)>>2)])|0);
   $24=((($17)+(3))|0);
   $25=((($24)+($23))|0);
   _ensure_label_size($lexer,$25);
   $26=((HEAP32[(($1)>>2)])|0);
   $27=((HEAP32[(($9)>>2)])|0);
   HEAP32[(($ch)>>2)]=$27;
   $28=((HEAP32[(($i)>>2)])|0);
   $29=(($26+$28)|0);
   HEAP8[($29)]=10;
   $30=((HEAP32[(($i)>>2)])|0);
   $31=((($30)+(1))|0);
   HEAP32[(($i)>>2)]=$31;
   $label_0_ph2=$26;
  }
  if ((label|0) == 15) {
   label = 0;
   $62=((($brace_depth_0_ph)+(1))|0);
   $brace_depth_1=$62;
  }
  else if ((label|0) == 16) {
   label = 0;
   $64=($brace_depth_0_ph|0)==1;
   if ($64) {
    break;
   }
   $66=((($brace_depth_0_ph)-(1))|0);
   $brace_depth_1=$66;
  }

  $67=((HEAP32[(($ch)>>2)])|0);
  $68=((HEAP8[($67)])|0);
  $69=((HEAP32[(($i)>>2)])|0);
  $70=(($label_0_ph2+$69)|0);
  HEAP8[($70)]=$68;
  $71=((HEAP32[(($ch)>>2)])|0);
  $72=(($71+1)|0);
  HEAP32[(($ch)>>2)]=$72;
  $73=((HEAP32[(($i)>>2)])|0);
  $74=((($73)+(1))|0);
  HEAP32[(($i)>>2)]=$74;
  $label_0_ph=$label_0_ph2;$brace_depth_0_ph=$brace_depth_1;
 }
 $76=((HEAP32[(($i)>>2)])|0);
 $77=(($label_0_ph2+$76)|0);
 HEAP8[($77)]=125;
 $78=((HEAP32[(($i)>>2)])|0);
 $79=((($78)+(1))|0);
 $80=(($label_0_ph2+$79)|0);
 HEAP8[($80)]=0;
 $81=((HEAP32[(($ch)>>2)])|0);
 $82=(($81+1)|0);
 HEAP32[(($source_ch)>>2)]=$82;
 STACKTOP=sp;return;
}


function _setup_opened_file($lexer,$mode,$f){
 $lexer=($lexer)|0;
 $mode=($mode)|0;
 $f=($f)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;

 $1=((_get_entry($lexer))|0);
 $2=$f;
 $3=(($1+40)|0);
 HEAP32[(($3)>>2)]=$2;
 $4=(($1+16)|0);
 $5=$4;
 $6=((HEAP32[(($5)>>2)])|0);
 $7=$6&-65536;
 HEAP32[(($5)>>2)]=$7;
 _setup_entry($lexer,$1,$mode);
 return;
}


function _get_entry($lexer){
 $lexer=($lexer)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$13=0,$14=0,$15=0,$16=0,$18=0,$19=0,$21=0,$22=0,$23=0,$24=0,$26=0;
 var $27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$43=0,$44=0,$ret_entry_0=0,$46=0,$47=0,$48=0;
 var $50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$59=0,$60=0,$61=0,$62=0,$63=0,$65=0,$66=0,$new_input_0=0,$68=0,$69=0,$70=0,$71=0,$72=0;
 var $73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$ld$0$0=0;
 var $92$0=0,$ld$1$1=0,$92$1=0,$93=0,$st$2$0=0,$st$3$1=0,$95=0,label=0;

 $1=(($lexer)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 do {
  if ($3) {
   label = 4;
  } else {
   $5=(($2+40)|0);
   $6=((HEAP32[(($5)>>2)])|0);
   $7=($6|0)==0;
   if (!($7)) {
    $9=(($2+52)|0);
    $10=((HEAP32[(($9)>>2)])|0);
    $11=($10|0)==0;
    if ($11) {
     label = 4;
     break;
    }
   }
   $38=((HEAP32[(($1)>>2)])|0);
   $39=(($38+40)|0);
   $40=((HEAP32[(($39)>>2)])|0);
   $41=($40|0)==0;
   if ($41) {
    $ret_entry_0=$38;
    break;
   }
   $43=(($38+52)|0);
   $44=((HEAP32[(($43)>>2)])|0);
   $ret_entry_0=$44;
  }
 } while(0);
 if ((label|0) == 4) {
  $13=((_lily_malloc(56))|0);
  $14=$13;
  $15=((HEAP32[(($1)>>2)])|0);
  $16=($15|0)==0;
  if ($16) {
   HEAP32[(($1)>>2)]=$14;
   $18=(($13+48)|0);
   $19=$18;
   HEAP32[(($19)>>2)]=0;
  } else {
   $21=(($15+52)|0);
   HEAP32[(($21)>>2)]=$14;
   $22=((HEAP32[(($1)>>2)])|0);
   $23=(($13+48)|0);
   $24=$23;
   HEAP32[(($24)>>2)]=$22;
  }
  $26=(($13+40)|0);
  $27=$26;
  HEAP32[(($27)>>2)]=0;
  $28=(($13+44)|0);
  $29=$28;
  HEAP32[(($29)>>2)]=0;
  $30=(($13+8)|0);
  $31=$30;
  HEAP32[(($31)>>2)]=0;
  $32=(($13+12)|0);
  $33=$32;
  HEAP16[(($33)>>1)]=0;
  $34=(($13+52)|0);
  $35=$34;
  HEAP32[(($35)>>2)]=0;
  $36=$13;
  HEAP32[(($36)>>2)]=$lexer;
  $ret_entry_0=$14;
 }

 $46=(($ret_entry_0+48)|0);
 $47=((HEAP32[(($46)>>2)])|0);
 $48=($47|0)==0;
 if ($48) {
  $95=(($lexer+30)|0);
  HEAP16[(($95)>>1)]=0;
  HEAP32[(($1)>>2)]=$ret_entry_0;
  return (($ret_entry_0)|0);
 }
 $50=(($47+8)|0);
 $51=((HEAP32[(($50)>>2)])|0);
 $52=($51|0)==0;
 do {
  if ($52) {
   $54=(($lexer+28)|0);
   $55=((HEAP16[(($54)>>1)])|0);
   $56=($55&65535);
   $57=((_lily_malloc($56))|0);
   $new_input_0=$57;
  } else {
   $59=(($47+14)|0);
   $60=((HEAP16[(($59)>>1)])|0);
   $61=(($lexer+28)|0);
   $62=((HEAP16[(($61)>>1)])|0);
   $63=((($60&65535))>>>0)<((($62&65535))>>>0);
   if (!($63)) {
    $new_input_0=$51;
    break;
   }
   $65=($62&65535);
   $66=((_lily_realloc($51,$65))|0);
   $new_input_0=$66;
  }
 } while(0);

 $68=(($lexer+8)|0);
 $69=((HEAP32[(($68)>>2)])|0);
 $70=((_strcpy((($new_input_0)|0),(($69)|0)))|0);
 HEAP32[(($50)>>2)]=$new_input_0;
 $71=(($lexer+16)|0);
 $72=((HEAP32[(($71)>>2)])|0);
 $73=(($47+20)|0);
 HEAP32[(($73)>>2)]=$72;
 $74=(($lexer+30)|0);
 $75=((HEAP16[(($74)>>1)])|0);
 $76=(($47+12)|0);
 HEAP16[(($76)>>1)]=$75;
 $77=(($lexer+28)|0);
 $78=((HEAP16[(($77)>>1)])|0);
 $79=(($47+14)|0);
 HEAP16[(($79)>>1)]=$78;
 $80=(($lexer+40)|0);
 $81=((HEAP32[(($80)>>2)])|0);
 $82=(($47+16)|0);
 $83=$82;
 $84=((HEAP32[(($83)>>2)])|0);
 $85=$81<<16;
 $86=$84&65535;
 $87=$86|$85;
 HEAP32[(($83)>>2)]=$87;
 $88=(($lexer+48)|0);
 $89=((HEAP32[(($88)>>2)])|0);
 $90=(($47+4)|0);
 HEAP32[(($90)>>2)]=$89;
 $91=(($lexer+32)|0);
 $ld$0$0=(($91)|0);
 $92$0=((HEAP32[(($ld$0$0)>>2)])|0);
 $ld$1$1=(($91+4)|0);
 $92$1=((HEAP32[(($ld$1$1)>>2)])|0);
 $93=(($47+32)|0);
 $st$2$0=(($93)|0);
 HEAP32[(($st$2$0)>>2)]=$92$0;
 $st$3$1=(($93+4)|0);
 HEAP32[(($st$3$1)>>2)]=$92$1;
 HEAP32[(($71)>>2)]=0;
 $95=(($lexer+30)|0);
 HEAP16[(($95)>>1)]=0;
 HEAP32[(($1)>>2)]=$ret_entry_0;
 return (($ret_entry_0)|0);
}


function _setup_entry($lexer,$new_entry,$mode){
 $lexer=($lexer)|0;
 $new_entry=($new_entry)|0;
 $mode=($mode)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$18=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($new_entry+48)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if (!($3)) {
  $18=((_read_line($lexer))|0);
  STACKTOP=sp;return;
 }
 $5=(($lexer+44)|0);
 HEAP32[(($5)>>2)]=$mode;
 $6=((_read_line($lexer))|0);
 $7=($mode|0)==0;
 if (!($7)) {
  STACKTOP=sp;return;
 }
 $9=(($lexer+8)|0);
 $10=((HEAP32[(($9)>>2)])|0);
 $11=((_strncmp((($10)|0),((7840)|0),((5)|0)))|0);
 $12=($11|0)==0;
 if (!($12)) {
  $14=(($lexer+56)|0);
  $15=((HEAP32[(($14)>>2)])|0);
  _lily_raise($15,0,7704,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 _lily_lexer_handle_page_data($lexer);
 STACKTOP=sp;return;
}


function _collect_escape($lexer,$source_ch,$start,$flags){
 $lexer=($lexer)|0;
 $source_ch=($source_ch)|0;
 $start=($start)|0;
 $flags=($flags)|0;
 var $adjust_ch=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$or_cond=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0;
 var $23=0,$24=0,$25=0,$27=0,$28=0,$29=0,$30=0,$label_pos_0=0,$new_ch_0=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $adjust_ch=((sp)|0);
 $1=(($lexer+12)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=((HEAP32[(($source_ch)>>2)])|0);
 $4=((HEAP32[(($start)>>2)])|0);
 $5=$flags&4;
 $6=($5|0)==0;
 do {
  if ($6) {
   HEAP32[(($adjust_ch)>>2)]=2;
   $8=((_scan_escape($lexer,$3,$adjust_ch))|0);
   $9=$flags&1;
   $10=($9|0)==0;
   $11=(($8<<24)>>24)<1;
   $or_cond=$10&$11;
   if ($or_cond) {
    $13=(($lexer+56)|0);
    $14=((HEAP32[(($13)>>2)])|0);
    _lily_raise($14,1,7160,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
   }
   $16=(($2+$4)|0);
   HEAP8[($16)]=$8;
   $17=((($4)+(1))|0);
   $18=((HEAP32[(($adjust_ch)>>2)])|0);
   $19=(($3+$18)|0);
   $new_ch_0=$19;$label_pos_0=$17;
  } else {
   $21=((HEAP8[($3)])|0);
   $22=(($2+$4)|0);
   HEAP8[($22)]=$21;
   $23=((($4)+(1))|0);
   $24=(($3+1)|0);
   $25=((HEAP8[($24)])|0);
   if (!((((($25<<24)>>24))|0)==((92)|0)|(((($25<<24)>>24))|0)==((34)|0))) {
    $new_ch_0=$24;$label_pos_0=$23;
    break;
   }
   $27=((HEAP8[($24)])|0);
   $28=(($2+$23)|0);
   HEAP8[($28)]=$27;
   $29=((($4)+(2))|0);
   $30=(($3+2)|0);
   $new_ch_0=$30;$label_pos_0=$29;
  }
 } while(0);


 HEAP32[(($source_ch)>>2)]=$new_ch_0;
 HEAP32[(($start)>>2)]=$label_pos_0;
 STACKTOP=sp;return;
}


function _ensure_label_size($lexer,$at_least){
 $lexer=($lexer)|0;
 $at_least=($at_least)|0;
 var $1=0,$2=0,$3=0,$new_size_0=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,label=0;

 $1=(($lexer+26)|0);
 $2=((HEAP16[(($1)>>1)])|0);
 $3=($2&65535);
 $new_size_0=$3;
 while(1) {

  $5=($new_size_0|0)<($at_least|0);
  $6=$new_size_0<<1;
  if ($5) {
   $new_size_0=$6;
  } else {
   break;
  }
 }
 $8=(($lexer+12)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=((_lily_realloc($9,$new_size_0))|0);
 HEAP32[(($8)>>2)]=$10;
 $11=(($new_size_0)&65535);
 HEAP16[(($1)>>1)]=$11;
 return;
}


function _read_file_line($entry){
 $entry=($entry)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$i_0=0,$input_buffer_0=0,$utf8_check_0=0,$bufsize_0=0,$12=0,$13=0,$14=0,$16=0,$17=0,$18=0;
 var $input_buffer_1=0,$bufsize_1=0,$20=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$39=0,$40=0,$42=0;
 var $44=0,$45=0,$47=0,$48=0,$_utf8_check_0=0,$49=0,$i_1=0,$51=0,$53=0,$54=0,$56=0,$57=0,$58=0,$59=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($entry)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+28)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=($6&65535);
 $8=(($entry+40)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $10=$9;
 $bufsize_0=$7;$utf8_check_0=0;$input_buffer_0=$4;$i_0=0;
 while(1) {




  $12=((_fgetc((($10)|0)))|0);
  $13=((($i_0)+(2))|0);
  $14=($13|0)==($bufsize_0|0);
  if ($14) {
   _lily_grow_lexer_buffers($2);
   $16=((HEAP32[(($3)>>2)])|0);
   $17=((HEAP16[(($5)>>1)])|0);
   $18=($17&65535);
   $bufsize_1=$18;$input_buffer_1=$16;
  } else {
   $bufsize_1=$bufsize_0;$input_buffer_1=$input_buffer_0;
  }


  $20=($12|0)==-1;
  if ($20) {
   label = 5;
   break;
  }
  $31=(($12)&255);
  $32=(($input_buffer_1+$i_0)|0);
  HEAP8[($32)]=$31;
  $33=($12|0)==13;
  if (((($12|0))|0)==((13)|0)|((($12|0))|0)==((10)|0)) {
   label = 7;
   break;
  }
  $47=$12&128;
  $48=($47>>>0)>((127)>>>0);
  $_utf8_check_0=($48?1:$utf8_check_0);
  $49=((($i_0)+(1))|0);
  $bufsize_0=$bufsize_1;$utf8_check_0=$_utf8_check_0;$input_buffer_0=$input_buffer_1;$i_0=$49;
 }
 if ((label|0) == 5) {
  $22=(($input_buffer_1+$i_0)|0);
  HEAP8[($22)]=10;
  $23=((($i_0)+(1))|0);
  $24=(($input_buffer_1+$23)|0);
  HEAP8[($24)]=0;
  $25=($i_0|0)!=0;
  $26=($25&1);
  $27=(($2+16)|0);
  $28=((HEAP32[(($27)>>2)])|0);
  $29=((($28)+($26))|0);
  HEAP32[(($27)>>2)]=$29;
  $i_1=$i_0;
 }
 else if ((label|0) == 7) {
  $35=(($2+16)|0);
  $36=((HEAP32[(($35)>>2)])|0);
  $37=((($36)+(1))|0);
  HEAP32[(($35)>>2)]=$37;
  do {
   if ($33) {
    HEAP8[($32)]=10;
    $39=((_fgetc((($10)|0)))|0);
    $40=($39|0)==10;
    if ($40) {
     break;
    }
    $42=((_ungetc((($39)|0),(($10)|0)))|0);
   }
  } while(0);
  $44=((($i_0)+(1))|0);
  $45=(($input_buffer_1+$44)|0);
  HEAP8[($45)]=0;
  $i_1=$44;
 }

 $51=($utf8_check_0|0)==0;
 if ($51) {
  STACKTOP=sp;return (($i_1)|0);
 }
 $53=((_lily_is_valid_utf8($input_buffer_1))|0);
 $54=($53|0)==0;
 if (!($54)) {
  STACKTOP=sp;return (($i_1)|0);
 }
 $56=(($2+56)|0);
 $57=((HEAP32[(($56)>>2)])|0);
 $58=(($2+16)|0);
 $59=((HEAP32[(($58)>>2)])|0);
 _lily_raise($57,0,7936,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$59,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return (($i_1)|0);
}


function _read_str_line($entry){
 $entry=($entry)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$i_0=0,$bufsize_0=0,$input_buffer_0=0,$utf8_check_0=0,$ch_0=0,$11=0,$12=0,$14=0,$15=0,$16=0,$bufsize_1=0;
 var $input_buffer_1=0,$18=0,$19=0,$20=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$40=0;
 var $41=0,$_=0,$43=0,$ch_1=0,$45=0,$46=0,$48=0,$_utf8_check_0=0,$49=0,$50=0,$i_1=0,$ch_2=0,$52=0,$54=0,$55=0,$57=0,$58=0,$59=0,$60=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($entry)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($2+8)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=(($2+28)|0);
 $6=((HEAP16[(($5)>>1)])|0);
 $7=($6&65535);
 $8=(($entry+40)|0);
 $9=((HEAP32[(($8)>>2)])|0);
 $ch_0=$9;$utf8_check_0=0;$input_buffer_0=$4;$bufsize_0=$7;$i_0=0;
 while(1) {





  $11=((($i_0)+(2))|0);
  $12=($11|0)==($bufsize_0|0);
  if ($12) {
   _lily_grow_lexer_buffers($2);
   $14=((HEAP32[(($3)>>2)])|0);
   $15=((HEAP16[(($5)>>1)])|0);
   $16=($15&65535);
   $input_buffer_1=$14;$bufsize_1=$16;
  } else {
   $input_buffer_1=$input_buffer_0;$bufsize_1=$bufsize_0;
  }


  $18=((HEAP8[($ch_0)])|0);
  $19=(($18<<24)>>24)==0;
  $20=(($input_buffer_1+$i_0)|0);
  if ($19) {
   label = 5;
   break;
  }
  HEAP8[($20)]=$18;
  $30=((HEAP8[($ch_0)])|0);
  if ((((($30<<24)>>24))|0)==((13)|0)|(((($30<<24)>>24))|0)==((10)|0)) {
   label = 7;
   break;
  }
  $48=(($30<<24)>>24)<0;
  $_utf8_check_0=($48?1:$utf8_check_0);
  $49=((($i_0)+(1))|0);
  $50=(($ch_0+1)|0);
  $ch_0=$50;$utf8_check_0=$_utf8_check_0;$input_buffer_0=$input_buffer_1;$bufsize_0=$bufsize_1;$i_0=$49;
 }
 if ((label|0) == 5) {
  HEAP8[($20)]=10;
  $22=((($i_0)+(1))|0);
  $23=(($input_buffer_1+$22)|0);
  HEAP8[($23)]=0;
  $24=($i_0|0)!=0;
  $25=($24&1);
  $26=(($2+16)|0);
  $27=((HEAP32[(($26)>>2)])|0);
  $28=((($27)+($25))|0);
  HEAP32[(($26)>>2)]=$28;
  $ch_2=$ch_0;$i_1=$i_0;
 }
 else if ((label|0) == 7) {
  $32=(($2+16)|0);
  $33=((HEAP32[(($32)>>2)])|0);
  $34=((($33)+(1))|0);
  HEAP32[(($32)>>2)]=$34;
  $35=((HEAP8[($ch_0)])|0);
  $36=(($35<<24)>>24)==13;
  if ($36) {
   HEAP8[($20)]=10;
   $38=(($ch_0+1)|0);
   $39=((HEAP8[($38)])|0);
   $40=(($39<<24)>>24)==10;
   $41=(($ch_0+2)|0);
   $_=($40?$41:$38);
   $ch_1=$_;
  } else {
   $43=(($ch_0+1)|0);
   $ch_1=$43;
  }

  $45=((($i_0)+(1))|0);
  $46=(($input_buffer_1+$45)|0);
  HEAP8[($46)]=0;
  $ch_2=$ch_1;$i_1=$45;
 }


 HEAP32[(($8)>>2)]=$ch_2;
 $52=($utf8_check_0|0)==0;
 if ($52) {
  STACKTOP=sp;return (($i_1)|0);
 }
 $54=((_lily_is_valid_utf8($input_buffer_1))|0);
 $55=($54|0)==0;
 if (!($55)) {
  STACKTOP=sp;return (($i_1)|0);
 }
 $57=(($2+56)|0);
 $58=((HEAP32[(($57)>>2)])|0);
 $59=(($2+16)|0);
 $60=((HEAP32[(($59)>>2)])|0);
 _lily_raise($58,0,7936,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,HEAP32[((tempVarArgs)>>2)]=$60,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 STACKTOP=sp;return (($i_1)|0);
}


function _scan_binary($pos,$ch){
 $pos=($pos)|0;
 $ch=($ch)|0;
 var $1=0,$ch_pn=0,$num_pos_0_in=0,$num_pos_0=0,$_0=0,$3=0,$4=0,$5=0,$6=0,$switch1=0,$7=0,$num_pos_15=0,$_14=0,$num_digits_03=0,$result_02$0=0,$result_02$1=0,$8=0,$9$0=0,$9$1=0,$10$0=0;
 var $10$1=0,$$etemp$0$0=0,$$etemp$0$1=0,$13=0,$14=0,$15=0,$16=0,$switch=0,$17=0,$or_cond=0,$num_pos_1_lcssa=0,$result_0_lcssa$0=0,$result_0_lcssa$1=0,$11$0=0,$11$1=0,$12$0=0,$12$1=0,label=0;

 $1=((HEAP32[(($pos)>>2)])|0);
 $num_pos_0_in=$1;$ch_pn=$ch;
 while(1) {


  $num_pos_0=((($num_pos_0_in)+(1))|0);
  $_0=(($ch_pn+1)|0);
  $3=((HEAP8[($_0)])|0);
  $4=(($3<<24)>>24)==48;
  if ($4) {
   $num_pos_0_in=$num_pos_0;$ch_pn=$_0;
  } else {
   break;
  }
 }
 $5=((HEAP8[($_0)])|0);
 $6=$5&-2;
 $switch1=(($6<<24)>>24)==48;
 if ($switch1) {
  $result_02$1=0;$result_02$0=0;$num_digits_03=0;$_14=$_0;$num_pos_15=$num_pos_0;$7=$5;
 } else {
  $result_0_lcssa$1=0;$result_0_lcssa$0=0;$num_pos_1_lcssa=$num_pos_0;



  HEAP32[(($pos)>>2)]=$num_pos_1_lcssa;
  return (((tempRet0=$result_0_lcssa$1,$result_0_lcssa$0))|0);
 }
 while(1) {






  $8=((($num_digits_03)+(1))|0);
  $9$0=($result_02$0<<1)|(0>>>31);
  $9$1=($result_02$1<<1)|($result_02$0>>>31);
  $10$0=(($7<<24)>>24);
  $10$1=(((((($7<<24)>>24)<0))|0)?-1:0);
  $$etemp$0$0=-48;
  $$etemp$0$1=-1;
  $11$0=((_i64Add($9$0,$9$1,$$etemp$0$0,$$etemp$0$1))|0);$11$1=tempRet0;
  $12$0=((_i64Add($11$0,$11$1,$10$0,$10$1))|0);$12$1=tempRet0;
  $13=(($_14+1)|0);
  $14=((($num_pos_15)+(1))|0);
  $15=((HEAP8[($13)])|0);
  $16=$15&-2;
  $switch=(($16<<24)>>24)!=48;
  $17=($8|0)==65;
  $or_cond=$switch|$17;
  if ($or_cond) {
   $result_0_lcssa$1=$12$1;$result_0_lcssa$0=$12$0;$num_pos_1_lcssa=$14;
   break;
  } else {
   $result_02$1=$12$1;$result_02$0=$12$0;$num_digits_03=$8;$_14=$13;$num_pos_15=$14;$7=$15;
  }
 }



 HEAP32[(($pos)>>2)]=$num_pos_1_lcssa;
 return (((tempRet0=$result_0_lcssa$1,$result_0_lcssa$0))|0);
}


function _scan_octal($pos,$ch){
 $pos=($pos)|0;
 $ch=($ch)|0;
 var $1=0,$ch_pn=0,$num_pos_0_in=0,$num_pos_0=0,$_0=0,$3=0,$4=0,$5=0,$6=0,$or_cond_not3=0,$7=0,$num_pos_17=0,$_16=0,$num_digits_05=0,$result_04$0=0,$result_04$1=0,$8=0,$9$0=0,$9$1=0,$10$0=0;
 var $10$1=0,$$etemp$0$0=0,$$etemp$0$1=0,$13=0,$14=0,$15=0,$16=0,$or_cond_not=0,$17=0,$or_cond2=0,$num_pos_1_lcssa=0,$result_0_lcssa$0=0,$result_0_lcssa$1=0,$11$0=0,$11$1=0,$12$0=0,$12$1=0,label=0;

 $1=((HEAP32[(($pos)>>2)])|0);
 $num_pos_0_in=$1;$ch_pn=$ch;
 while(1) {


  $num_pos_0=((($num_pos_0_in)+(1))|0);
  $_0=(($ch_pn+1)|0);
  $3=((HEAP8[($_0)])|0);
  $4=(($3<<24)>>24)==48;
  if ($4) {
   $num_pos_0_in=$num_pos_0;$ch_pn=$_0;
  } else {
   break;
  }
 }
 $5=((HEAP8[($_0)])|0);
 $6=$5&-8;
 $or_cond_not3=(($6<<24)>>24)==48;
 if ($or_cond_not3) {
  $result_04$1=0;$result_04$0=0;$num_digits_05=0;$_16=$_0;$num_pos_17=$num_pos_0;$7=$5;
 } else {
  $result_0_lcssa$1=0;$result_0_lcssa$0=0;$num_pos_1_lcssa=$num_pos_0;



  HEAP32[(($pos)>>2)]=$num_pos_1_lcssa;
  return (((tempRet0=$result_0_lcssa$1,$result_0_lcssa$0))|0);
 }
 while(1) {






  $8=((($num_digits_05)+(1))|0);
  $9$0=($result_04$0<<3)|(0>>>29);
  $9$1=($result_04$1<<3)|($result_04$0>>>29);
  $10$0=(($7<<24)>>24);
  $10$1=(((((($7<<24)>>24)<0))|0)?-1:0);
  $$etemp$0$0=-48;
  $$etemp$0$1=-1;
  $11$0=((_i64Add($9$0,$9$1,$$etemp$0$0,$$etemp$0$1))|0);$11$1=tempRet0;
  $12$0=((_i64Add($11$0,$11$1,$10$0,$10$1))|0);$12$1=tempRet0;
  $13=((($num_pos_17)+(1))|0);
  $14=(($_16+1)|0);
  $15=((HEAP8[($14)])|0);
  $16=$15&-8;
  $or_cond_not=(($16<<24)>>24)!=48;
  $17=($8|0)==23;
  $or_cond2=$or_cond_not|$17;
  if ($or_cond2) {
   $result_0_lcssa$1=$12$1;$result_0_lcssa$0=$12$0;$num_pos_1_lcssa=$13;
   break;
  } else {
   $result_04$1=$12$1;$result_04$0=$12$0;$num_digits_05=$8;$_16=$14;$num_pos_17=$13;$7=$15;
  }
 }



 HEAP32[(($pos)>>2)]=$num_pos_1_lcssa;
 return (((tempRet0=$result_0_lcssa$1,$result_0_lcssa$0))|0);
}


function _scan_hex($pos,$new_ch){
 $pos=($pos)|0;
 $new_ch=($new_ch)|0;
 var $1=0,$new_ch_pn=0,$num_pos_0_in=0,$num_pos_0=0,$_0=0,$3=0,$4=0,$num_pos_18=0,$_17=0,$num_digits_06=0,$result_05$0=0,$result_05$1=0,$5=0,$_off=0,$6=0,$_off3=0,$8=0,$_off4=0,$10=0,$mod_0$0=0;
 var $mod_0$1=0,$12$0=0,$12$1=0,$13=0,$14$0=0,$14$1=0,$17=0,$18=0,$19=0,$20=0,$num_pos_1_lcssa=0,$result_0_lcssa$0=0,$result_0_lcssa$1=0,$15$0=0,$15$1=0,$16$0=0,$16$1=0,label=0;

 $1=((HEAP32[(($pos)>>2)])|0);
 $num_pos_0_in=$1;$new_ch_pn=$new_ch;
 while(1) {


  $num_pos_0=((($num_pos_0_in)+(1))|0);
  $_0=(($new_ch_pn+1)|0);
  $3=((HEAP8[($_0)])|0);
  $4=(($3<<24)>>24)==48;
  if ($4) {
   $num_pos_0_in=$num_pos_0;$new_ch_pn=$_0;
  } else {
   $result_05$1=0;$result_05$0=0;$num_digits_06=0;$_17=$_0;$num_pos_18=$num_pos_0;
   break;
  }
 }
 L3: while(1) {





  $5=((HEAP8[($_17)])|0);
  $_off=((($5)-(48))&255);
  $6=((($_off&255))>>>0)<((10)>>>0);
  do {
   if ($6) {
    $mod_0$1=0;$mod_0$0=48;
   } else {
    $_off3=((($5)-(97))&255);
    $8=((($_off3&255))>>>0)<((6)>>>0);
    if ($8) {
     $mod_0$1=0;$mod_0$0=87;
     break;
    }
    $_off4=((($5)-(65))&255);
    $10=((($_off4&255))>>>0)<((6)>>>0);
    if ($10) {
     $mod_0$1=0;$mod_0$0=55;
    } else {
     $result_0_lcssa$1=$result_05$1;$result_0_lcssa$0=$result_05$0;$num_pos_1_lcssa=$num_pos_18;
     label = 7;
     break L3;
    }
   }
  } while(0);


  $12$0=($result_05$0<<4)|(0>>>28);
  $12$1=($result_05$1<<4)|($result_05$0>>>28);
  $13=((HEAP8[($_17)])|0);
  $14$0=(($13<<24)>>24);
  $14$1=(((((($13<<24)>>24)<0))|0)?-1:0);
  $15$0=((_i64Subtract($12$0,$12$1,$mod_0$0,$mod_0$1))|0);$15$1=tempRet0;
  $16$0=((_i64Add($15$0,$15$1,$14$0,$14$1))|0);$16$1=tempRet0;
  $17=((($num_digits_06)+(1))|0);
  $18=((($num_pos_18)+(1))|0);
  $19=(($_17+1)|0);
  $20=($17|0)==17;
  if ($20) {
   $result_0_lcssa$1=$16$1;$result_0_lcssa$0=$16$0;$num_pos_1_lcssa=$18;
   label = 7;
   break;
  } else {
   $result_05$1=$16$1;$result_05$0=$16$0;$num_digits_06=$17;$_17=$19;$num_pos_18=$18;
  }
 }
 if ((label|0) == 7) {



  HEAP32[(($pos)>>2)]=$num_pos_1_lcssa;
  return (((tempRet0=$result_0_lcssa$1,$result_0_lcssa$0))|0);
 }
  return 0;
}


function _scan_decimal($lexer,$pos,$is_integer,$new_ch){
 $lexer=($lexer)|0;
 $pos=($pos)|0;
 $is_integer=($is_integer)|0;
 $new_ch=($new_ch)|0;
 var $num_pos=0,$1=0,$2=0,$3=0,$_08=0,$4=0,$5=0,$6=0,$7=0,$8=0,$have_dot_07=0,$_16=0,$num_digits_05=0,$result_04$0=0,$result_04$1=0,$9=0,$_off=0,$10=0,$12=0,$13=0;
 var $15=0,$$etemp$0$0=0,$$etemp$0$1=0,$17$0=0,$17$1=0,$$etemp$1$0=0,$$etemp$1$1=0,$22=0,$24=0,$25=0,$26=0,$isdigittmp=0,$isdigit=0,$result_1$0=0,$result_1$1=0,$num_digits_1=0,$have_dot_1=0,$30=0,$31=0,$32=0;
 var $33=0,$34=0,$result_02$0=0,$result_02$1=0,$35=0,$16$0=0,$16$1=0,$18$0=0,$18$1=0,$19$0=0,$19$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $num_pos=((sp)|0);
 $1=((HEAP32[(($pos)>>2)])|0);
 HEAP32[(($num_pos)>>2)]=$1;
 $2=((HEAP8[($new_ch)])|0);
 $3=(($2<<24)>>24)==48;
 if ($3) {
  $_08=$new_ch;
  while(1) {

   $4=((HEAP32[(($num_pos)>>2)])|0);
   $5=((($4)+(1))|0);
   HEAP32[(($num_pos)>>2)]=$5;
   $6=(($_08+1)|0);
   $7=((HEAP8[($6)])|0);
   $8=(($7<<24)>>24)==48;
   if ($8) {
    $_08=$6;
   } else {
    $result_04$1=0;$result_04$0=0;$num_digits_05=0;$_16=$6;$have_dot_07=0;
    break;
   }
  }
 } else {
  $result_04$1=0;$result_04$0=0;$num_digits_05=0;$_16=$new_ch;$have_dot_07=0;
 }
 L4: while(1) {





  $9=((HEAP8[($_16)])|0);
  $_off=((($9)-(48))&255);
  $10=((($_off&255))>>>0)<((10)>>>0);
  do {
   if ($10) {
    $12=((HEAP32[(($is_integer)>>2)])|0);
    $13=($12|0)==0;
    if ($13) {
     $have_dot_1=$have_dot_07;$num_digits_1=$num_digits_05;$result_1$1=$result_04$1;$result_1$0=$result_04$0;
     break;
    }
    $15=((($num_digits_05)+(1))|0);
    $$etemp$0$0=10;
    $$etemp$0$1=0;
    $16$0=((___muldi3($result_04$0,$result_04$1,$$etemp$0$0,$$etemp$0$1))|0);$16$1=tempRet0;
    $17$0=(($9<<24)>>24);
    $17$1=(((((($9<<24)>>24)<0))|0)?-1:0);
    $$etemp$1$0=-48;
    $$etemp$1$1=-1;
    $18$0=((_i64Add($16$0,$16$1,$$etemp$1$0,$$etemp$1$1))|0);$18$1=tempRet0;
    $19$0=((_i64Add($18$0,$18$1,$17$0,$17$1))|0);$19$1=tempRet0;
    $have_dot_1=$have_dot_07;$num_digits_1=$15;$result_1$1=$19$1;$result_1$0=$19$0;
   } else {
    if ((((($9<<24)>>24))|0)==((101)|0)) {
     label = 10;
     break L4;
    } else if (!((((($9<<24)>>24))|0)==((46)|0))) {
     $result_02$1=$result_04$1;$result_02$0=$result_04$0;
     break L4;
    }
    $22=($have_dot_07|0)==1;
    if ($22) {
     $result_02$1=$result_04$1;$result_02$0=$result_04$0;
     break L4;
    }
    $24=(($_16+1)|0);
    $25=((HEAP8[($24)])|0);
    $26=(($25<<24)>>24);
    $isdigittmp=((($26)-(48))|0);
    $isdigit=($isdigittmp>>>0)<((10)>>>0);
    if (!($isdigit)) {
     $result_02$1=$result_04$1;$result_02$0=$result_04$0;
     break L4;
    }
    HEAP32[(($is_integer)>>2)]=0;
    $have_dot_1=1;$num_digits_1=$num_digits_05;$result_1$1=$result_04$1;$result_1$0=$result_04$0;
   }
  } while(0);




  $30=((($num_digits_1)+(1))|0);
  $31=((HEAP32[(($num_pos)>>2)])|0);
  $32=((($31)+(1))|0);
  HEAP32[(($num_pos)>>2)]=$32;
  $33=(($_16+1)|0);
  $34=($30|0)==21;
  if ($34) {
   $result_02$1=$result_1$1;$result_02$0=$result_1$0;
   break;
  } else {
   $result_04$1=$result_1$1;$result_04$0=$result_1$0;$num_digits_05=$30;$_16=$33;$have_dot_07=$have_dot_1;
  }
 }
 if ((label|0) == 10) {
  HEAP32[(($is_integer)>>2)]=0;
  _scan_exponent($lexer,$num_pos,$_16);
  $result_02$1=$result_04$1;$result_02$0=$result_04$0;
 }


 $35=((HEAP32[(($num_pos)>>2)])|0);
 HEAP32[(($pos)>>2)]=$35;
 STACKTOP=sp;return (((tempRet0=$result_02$1,$result_02$0))|0);
}


function _scan_escape($lexer,$ch,$adjust){
 $lexer=($lexer)|0;
 $ch=($ch)|0;
 $adjust=($adjust)|0;
 var $1=0,$2=0,$_off=0,$11=0,$total_05=0,$i_04=0,$_03=0,$12=0,$_off2=0,$13=0,$extract_t6=0,$15=0,$16=0,$17=0,$18=0,$19=0,$extract_t=0,$21=0,$22=0,$23=0;
 var $extract_t7=0,$total_0_lcssa_off0=0,$i_0_lcssa=0,$25=0,$26=0,$27=0,$29=0,$30=0,$ret_0=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=(($ch+1)|0);
 $2=((HEAP8[($1)])|0);
 L1: do {
  switch ((($2<<24)>>24)) {
  case 98: {
   $ret_0=8;
   break;
  }
  case 34: {
   $ret_0=$2;
   break;
  }
  case 97: {
   $ret_0=7;
   break;
  }
  case 114: {
   $ret_0=13;
   break;
  }
  case 116: {
   $ret_0=9;
   break;
  }
  case 92: {
   $ret_0=$2;
   break;
  }
  case 39: {
   $ret_0=$2;
   break;
  }
  case 110: {
   $ret_0=10;
   break;
  }
  default: {
   $_off=((($2)-(48))&255);
   $11=((($_off&255))>>>0)<((10)>>>0);
   if ($11) {
    $_03=$1;$i_04=0;$total_05=0;
   } else {
    $29=(($lexer+56)|0);
    $30=((HEAP32[(($29)>>2)])|0);
    _lily_raise($30,1,7160,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
    $ret_0=0;
    break L1;
   }
   while(1) {



    $12=((HEAP8[($_03)])|0);
    $_off2=((($12)-(48))&255);
    $13=((($_off2&255))>>>0)>((9)>>>0);
    $extract_t6=(($total_05)&255);
    if ($13) {
     $i_0_lcssa=$i_04;$total_0_lcssa_off0=$extract_t6;
     break;
    }
    $15=(($12<<24)>>24);
    $16=((($total_05)*(10))&-1);
    $17=((($16)-(48))|0);
    $18=((($17)+($15))|0);
    $19=($18|0)>255;
    $extract_t=(($total_05)&255);
    if ($19) {
     $i_0_lcssa=$i_04;$total_0_lcssa_off0=$extract_t;
     break;
    }
    $21=((($i_04)+(1))|0);
    $22=(($_03+1)|0);
    $23=($21|0)<3;
    $extract_t7=(($18)&255);
    if ($23) {
     $_03=$22;$i_04=$21;$total_05=$18;
    } else {
     $i_0_lcssa=$21;$total_0_lcssa_off0=$extract_t7;
     break;
    }
   }


   $25=((HEAP32[(($adjust)>>2)])|0);
   $26=((($i_0_lcssa)-(1))|0);
   $27=((($26)+($25))|0);
   HEAP32[(($adjust)>>2)]=$27;
   $ret_0=$total_0_lcssa_off0;
  }
  }
 } while(0);

 STACKTOP=sp;return (($ret_0)|0);
}


function _scan_exponent($lexer,$pos,$new_ch){
 $lexer=($lexer)|0;
 $pos=($pos)|0;
 $new_ch=($new_ch)|0;
 var $1=0,$2=0,$3=0,$4=0,$6=0,$7=0,$9=0,$10=0,$_0=0,$num_pos_0=0,$12=0,$_off=0,$13=0,$15=0,$16=0,$17=0,$_off23=0,$18=0,$19=0,$num_digits_06=0;
 var $num_pos_15=0,$_14=0,$21=0,$23=0,$25=0,$26=0,$phitmp=0,$27=0,$_off2=0,$28=0,$num_pos_1_lcssa=0,label=0;
 var tempVarArgs=0;
 var sp=0;sp=STACKTOP;
 $1=((HEAP32[(($pos)>>2)])|0);
 $2=(($new_ch+1)|0);
 $3=((HEAP8[($2)])|0);
 $4=(($3<<24)>>24)==43;
 if ($4) {
  label = 3;
 } else {
  $6=((($1)+(1))|0);
  $7=(($3<<24)>>24)==45;
  if ($7) {
   label = 3;
  } else {
   $num_pos_0=$6;$_0=$2;
  }
 }
 if ((label|0) == 3) {
  $9=((($1)+(2))|0);
  $10=(($new_ch+2)|0);
  $num_pos_0=$9;$_0=$10;
 }


 $12=((HEAP8[($_0)])|0);
 $_off=((($12)-(48))&255);
 $13=((($_off&255))>>>0)>((9)>>>0);
 if ($13) {
  $15=(($lexer+56)|0);
  $16=((HEAP32[(($15)>>2)])|0);
  _lily_raise($16,1,8400,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
 }
 $17=((HEAP8[($_0)])|0);
 $_off23=((($17)-(48))&255);
 $18=((($_off23&255))>>>0)<((10)>>>0);
 if (!($18)) {
  $num_pos_1_lcssa=$num_pos_0;

  HEAP32[(($pos)>>2)]=$num_pos_1_lcssa;
  STACKTOP=sp;return;
 }
 $19=(($lexer+56)|0);
 $_14=$_0;$num_pos_15=$num_pos_0;$num_digits_06=1;
 while(1) {



  $21=($num_digits_06|0)>3;
  if ($21) {
   $23=((HEAP32[(($19)>>2)])|0);
   _lily_raise($23,1,8216,(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs))|0)); STACKTOP=tempVarArgs;
  }
  $25=((($num_pos_15)+(1))|0);
  $26=(($_14+1)|0);
  $phitmp=((($num_digits_06)+(1))|0);
  $27=((HEAP8[($26)])|0);
  $_off2=((($27)-(48))&255);
  $28=((($_off2&255))>>>0)<((10)>>>0);
  if ($28) {
   $_14=$26;$num_pos_15=$25;$num_digits_06=$phitmp;
  } else {
   $num_pos_1_lcssa=$25;
   break;
  }
 }

 HEAP32[(($pos)>>2)]=$num_pos_1_lcssa;
 STACKTOP=sp;return;
}


function _get_parser(){
 var $1=0,$2=0,label=0;

 $1=((_lily_new_default_options())|0);
 $2=((_lily_new_parse_state($1))|0);
 _lily_free_options($1);
 return (($2)|0);
}


function _run_parser($parser,$to_parse){
 $parser=($parser)|0;
 $to_parse=($to_parse)|0;
 var $1=0,label=0;

 $1=((_lily_parse_string($parser,8480,1,$to_parse))|0);
 return (($1)|0);
}


function _destroy_parser($parser){
 $parser=($parser)|0;
 var label=0;

 _lily_free_parse_state($parser);
 return;
}


function _get_parser_error($parser){
 $parser=($parser)|0;
 var $1=0,label=0;

 $1=((_lily_build_error_message($parser))|0);
 return (($1)|0);
}


function _malloc($bytes){
 $bytes=($bytes)|0;
 var $1=0,$3=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$_sum11=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$40=0,$41=0,$42=0,$43=0,$_sum1314=0,$44=0,$45=0,$46=0,$47=0;
 var $48=0,$50=0,$51=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0;
 var $71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$_sum4=0,$86=0,$87=0,$88=0,$89=0;
 var $90=0,$92=0,$93=0,$94=0,$96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$_sum67=0,$113=0;
 var $114=0,$115=0,$116=0,$117=0,$118=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$130=0,$_sum9_pre=0,$_pre=0,$_sum10=0,$132=0,$133=0;
 var $134=0,$135=0,$136=0,$_pre_phi=0,$F4_0=0,$139=0,$140=0,$141=0,$143=0,$145=0,$146=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0;
 var $157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0;
 var $rsize_0_i=0,$v_0_i=0,$t_0_i=0,$178=0,$179=0,$180=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$_rsize_0_i=0,$_v_0_i=0,$192=0,$193=0,$194=0;
 var $196=0,$197=0,$198=0,$200=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$208=0,$209=0,$211=0,$212=0,$213=0,$215=0,$216=0,$217=0,$220=0,$221=0;
 var $222=0,$224=0,$225=0,$226=0,$RP_0_i=0,$R_0_i=0,$227=0,$228=0,$229=0,$231=0,$232=0,$233=0,$235=0,$236=0,$R_1_i=0,$240=0,$242=0,$243=0,$244=0,$245=0;
 var $246=0,$cond_i=0,$248=0,$249=0,$250=0,$251=0,$252=0,$254=0,$255=0,$256=0,$258=0,$259=0,$260=0,$263=0,$266=0,$268=0,$269=0,$270=0,$272=0,$273=0;
 var $274=0,$275=0,$277=0,$278=0,$279=0,$281=0,$282=0,$285=0,$286=0,$287=0,$289=0,$290=0,$291=0,$293=0,$294=0,$298=0,$300=0,$301=0,$302=0,$_sum4_i=0;
 var $303=0,$304=0,$305=0,$306=0,$308=0,$309=0,$310=0,$_sum_i41=0,$311=0,$312=0,$_sum1_i=0,$313=0,$314=0,$315=0,$316=0,$318=0,$319=0,$320=0,$321=0,$322=0;
 var $323=0,$324=0,$325=0,$326=0,$328=0,$_sum2_pre_i=0,$_pre_i=0,$_sum3_i=0,$330=0,$331=0,$332=0,$333=0,$334=0,$_pre_phi_i=0,$F1_0_i=0,$337=0,$338=0,$339=0,$342=0,$343=0;
 var $345=0,$347=0,$348=0,$349=0,$350=0,$352=0,$353=0,$354=0,$356=0,$358=0,$359=0,$360=0,$361=0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=0,$368=0;
 var $369=0,$370=0,$371=0,$372=0,$373=0,$374=0,$375=0,$376=0,$377=0,$378=0,$379=0,$idx_0_i=0,$381=0,$382=0,$383=0,$385=0,$387=0,$388=0,$390=0,$391=0;
 var $rst_0_i=0,$sizebits_0_i=0,$t_0_i16=0,$rsize_0_i17=0,$v_0_i18=0,$393=0,$394=0,$395=0,$396=0,$397=0,$399=0,$rsize_1_i=0,$v_1_i=0,$401=0,$402=0,$403=0,$404=0,$405=0,$406=0,$407=0;
 var $or_cond21_i=0,$rst_1_i=0,$408=0,$409=0,$t_1_i=0,$rsize_2_i=0,$v_2_i=0,$410=0,$411=0,$or_cond_i=0,$413=0,$414=0,$415=0,$416=0,$417=0,$419=0,$420=0,$421=0,$422=0,$423=0;
 var $424=0,$425=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$437=0,$438=0,$439=0,$440=0,$441=0,$442=0,$443=0;
 var $t_2_ph_i=0,$444=0,$v_334_i=0,$rsize_333_i=0,$t_232_i=0,$445=0,$446=0,$447=0,$448=0,$449=0,$_rsize_3_i=0,$t_2_v_3_i=0,$450=0,$451=0,$452=0,$453=0,$454=0,$455=0,$v_3_lcssa_i=0,$rsize_3_lcssa_i=0;
 var $456=0,$458=0,$459=0,$460=0,$462=0,$463=0,$464=0,$466=0,$467=0,$468=0,$470=0,$471=0,$472=0,$473=0,$474=0,$476=0,$477=0,$478=0,$479=0,$481=0;
 var $482=0,$483=0,$485=0,$486=0,$487=0,$490=0,$491=0,$492=0,$494=0,$495=0,$496=0,$RP_0_i19=0,$R_0_i20=0,$497=0,$498=0,$499=0,$501=0,$502=0,$503=0,$505=0;
 var $506=0,$R_1_i22=0,$510=0,$512=0,$513=0,$514=0,$515=0,$516=0,$cond_i23=0,$518=0,$519=0,$520=0,$521=0,$522=0,$524=0,$525=0,$526=0,$528=0,$529=0,$530=0;
 var $533=0,$536=0,$538=0,$539=0,$540=0,$542=0,$543=0,$544=0,$545=0,$547=0,$548=0,$549=0,$551=0,$552=0,$555=0,$556=0,$557=0,$559=0,$560=0,$561=0;
 var $563=0,$564=0,$568=0,$570=0,$571=0,$572=0,$_sum19_i=0,$573=0,$574=0,$575=0,$576=0,$578=0,$579=0,$580=0,$_sum_i2540=0,$581=0,$582=0,$_sum1_i26=0,$583=0,$584=0;
 var $585=0,$586=0,$588=0,$589=0,$590=0,$591=0,$592=0,$593=0,$594=0,$596=0,$_sum15_pre_i=0,$_pre_i27=0,$_sum18_i=0,$598=0,$599=0,$600=0,$601=0,$602=0,$_pre_phi_i28=0,$F5_0_i=0;
 var $605=0,$_sum16_i=0,$606=0,$607=0,$_sum17_i=0,$608=0,$609=0,$611=0,$612=0,$613=0,$615=0,$617=0,$618=0,$619=0,$620=0,$621=0,$622=0,$623=0,$624=0,$625=0;
 var $626=0,$627=0,$628=0,$629=0,$630=0,$631=0,$632=0,$633=0,$634=0,$635=0,$636=0,$637=0,$638=0,$I7_0_i=0,$640=0,$_sum2_i=0,$641=0,$642=0,$_sum3_i29=0,$643=0;
 var $_sum4_i30=0,$644=0,$645=0,$646=0,$647=0,$648=0,$649=0,$650=0,$652=0,$653=0,$_sum5_i=0,$654=0,$655=0,$_sum6_i=0,$656=0,$657=0,$_sum7_i=0,$658=0,$659=0,$661=0;
 var $662=0,$664=0,$665=0,$667=0,$668=0,$669=0,$670=0,$671=0,$672=0,$674=0,$675=0,$676=0,$677=0,$678=0,$K12_029_i=0,$T_028_i=0,$680=0,$681=0,$682=0,$683=0;
 var $685=0,$686=0,$687=0,$_sum12_i=0,$689=0,$690=0,$_sum13_i=0,$691=0,$692=0,$_sum14_i=0,$693=0,$694=0,$T_0_lcssa_i=0,$696=0,$697=0,$698=0,$699=0,$700=0,$701=0,$702=0;
 var $or_cond26_i=0,$704=0,$_sum9_i=0,$705=0,$706=0,$_sum10_i=0,$707=0,$708=0,$_sum11_i=0,$709=0,$710=0,$712=0,$713=0,$nb_0=0,$714=0,$715=0,$717=0,$718=0,$719=0,$721=0;
 var $722=0,$723=0,$724=0,$_sum2=0,$725=0,$726=0,$727=0,$728=0,$729=0,$730=0,$732=0,$733=0,$734=0,$_sum1=0,$735=0,$736=0,$737=0,$738=0,$740=0,$741=0;
 var $743=0,$744=0,$746=0,$747=0,$748=0,$749=0,$750=0,$751=0,$_sum=0,$752=0,$753=0,$754=0,$755=0,$756=0,$757=0,$759=0,$760=0,$762=0,$763=0,$764=0;
 var $765=0,$767=0,$768=0,$769=0,$771=0,$772=0,$773=0,$774=0,$775=0,$776=0,$777=0,$779=0,$780=0,$782=0,$783=0,$784=0,$785=0,$or_cond1_i=0,$787=0,$788=0;
 var $789=0,$791=0,$792=0,$794=0,$sp_0_i_i=0,$796=0,$797=0,$798=0,$800=0,$801=0,$802=0,$803=0,$805=0,$806=0,$807=0,$808=0,$809=0,$810=0,$812=0,$813=0;
 var $814=0,$815=0,$816=0,$818=0,$819=0,$820=0,$821=0,$822=0,$ssize_0_i=0,$824=0,$825=0,$826=0,$827=0,$or_cond_i31=0,$829=0,$830=0,$832=0,$833=0,$or_cond2_i=0,$835=0;
 var $836=0,$838=0,$839=0,$840=0,$841=0,$843=0,$844=0,$845=0,$846=0,$847=0,$ssize_1_i=0,$br_0_i=0,$849=0,$br_030_i=0,$ssize_129_i=0,$850=0,$851=0,$852=0,$or_cond5_i=0,$853=0;
 var $or_cond4_i=0,$855=0,$856=0,$857=0,$858=0,$859=0,$860=0,$862=0,$863=0,$865=0,$866=0,$ssize_2_i=0,$868=0,$tsize_03141_i=0,$869=0,$870=0,$tsize_1_i=0,$872=0,$874=0,$875=0;
 var $876=0,$877=0,$or_cond3_i=0,$878=0,$or_cond6_i=0,$880=0,$881=0,$882=0,$883=0,$884=0,$_tsize_1_i=0,$tbase_245_i=0,$tsize_244_i=0,$885=0,$886=0,$887=0,$888=0,$891=0,$892=0,$894=0;
 var $895=0,$896=0,$or_cond8_i=0,$899=0,$i_02_i_i=0,$901=0,$902=0,$903=0,$_sum_i_i=0,$904=0,$_sum1_i_i=0,$905=0,$906=0,$907=0,$908=0,$909=0,$910=0,$911=0,$912=0,$914=0;
 var $915=0,$916=0,$917=0,$918=0,$919=0,$920=0,$_sum_i12_i=0,$921=0,$922=0,$_sum2_i_i=0,$923=0,$924=0,$925=0,$sp_073_i=0,$926=0,$927=0,$928=0,$929=0,$930=0,$931=0;
 var $933=0,$934=0,$935=0,$936=0,$937=0,$938=0,$939=0,$941=0,$942=0,$943=0,$or_cond47_i=0,$945=0,$946=0,$947=0,$948=0,$949=0,$950=0,$951=0,$952=0,$953=0;
 var $955=0,$956=0,$957=0,$958=0,$959=0,$960=0,$961=0,$_sum_i16_i=0,$962=0,$963=0,$_sum2_i17_i=0,$964=0,$965=0,$966=0,$967=0,$968=0,$970=0,$sp_166_i=0,$972=0,$973=0;
 var $974=0,$976=0,$977=0,$978=0,$979=0,$980=0,$981=0,$982=0,$984=0,$985=0,$986=0,$987=0,$988=0,$989=0,$990=0,$992=0,$993=0,$995=0,$996=0,$_sum102_i=0;
 var $997=0,$998=0,$999=0,$1000=0,$1002=0,$1003=0,$1005=0,$_sum103_i=0,$1006=0,$1007=0,$1008=0,$1009=0,$1010=0,$_sum_i19_i=0,$1011=0,$1012=0,$1013=0,$1014=0,$_sum1_i20_i=0,$1015=0;
 var $1016=0,$1017=0,$1018=0,$1020=0,$1021=0,$1022=0,$_sum46_i_i=0,$1023=0,$1024=0,$1026=0,$1027=0,$1029=0,$1030=0,$1031=0,$_sum44_i_i=0,$1032=0,$1033=0,$_sum45_i_i=0,$1034=0,$1035=0;
 var $_sum2_i21_i=0,$_sum104_i=0,$1037=0,$1038=0,$1039=0,$1040=0,$1041=0,$1043=0,$1044=0,$1045=0,$_sum3940_i_i=0,$_sum114_i=0,$1047=0,$1048=0,$1049=0,$_sum41_i_i=0,$_sum115_i=0,$1050=0,$1051=0,$1052=0;
 var $1053=0,$1054=0,$1055=0,$1056=0,$1058=0,$1059=0,$1060=0,$1062=0,$1063=0,$1064=0,$1065=0,$1067=0,$1068=0,$1069=0,$1070=0,$1072=0,$_pre62_i_i=0,$1074=0,$1075=0,$1076=0;
 var $1078=0,$1079=0,$1080=0,$_pre_phi63_i_i=0,$1081=0,$1083=0,$_sum34_i_i=0,$_sum105_i=0,$1084=0,$1085=0,$1086=0,$_sum5_i_i=0,$_sum106_i=0,$1087=0,$1088=0,$1089=0,$1090=0,$_sum3637_i_i=0,$_sum107_i=0,$1092=0;
 var $1093=0,$1094=0,$1095=0,$1096=0,$1097=0,$1099=0,$1100=0,$1101=0,$1103=0,$1104=0,$1105=0,$_sum67_i_i=0,$_sum112_i=0,$1108=0,$1109=0,$1110=0,$1111=0,$_sum113_i=0,$1113=0,$1114=0;
 var $1115=0,$1116=0,$RP_0_i_i=0,$R_0_i_i=0,$1117=0,$1118=0,$1119=0,$1121=0,$1122=0,$1123=0,$1125=0,$1126=0,$1127=0,$R_1_i_i=0,$1131=0,$_sum31_i_i=0,$_sum108_i=0,$1133=0,$1134=0,$1135=0;
 var $1136=0,$1137=0,$1138=0,$cond_i_i=0,$1140=0,$1141=0,$1142=0,$1143=0,$1144=0,$1146=0,$1147=0,$1148=0,$1150=0,$1151=0,$1152=0,$1155=0,$1158=0,$1160=0,$1161=0,$1162=0;
 var $1164=0,$_sum3233_i_i=0,$_sum109_i=0,$1165=0,$1166=0,$1167=0,$1168=0,$1170=0,$1171=0,$1172=0,$1174=0,$1175=0,$_sum110_i=0,$1178=0,$1179=0,$1180=0,$1181=0,$1183=0,$1184=0,$1185=0;
 var $1187=0,$1188=0,$_sum9_i_i=0,$_sum111_i=0,$1192=0,$1193=0,$1194=0,$qsize_0_i_i=0,$oldfirst_0_i_i=0,$1196=0,$1197=0,$1198=0,$1199=0,$_sum10_i_i=0,$1200=0,$1201=0,$_sum11_i_i=0,$1202=0,$1203=0,$1204=0;
 var $1205=0,$1207=0,$1208=0,$1209=0,$1210=0,$1211=0,$1212=0,$1213=0,$1215=0,$_sum27_pre_i_i=0,$_pre_i22_i=0,$_sum30_i_i=0,$1217=0,$1218=0,$1219=0,$1220=0,$1221=0,$_pre_phi_i23_i=0,$F4_0_i_i=0,$1224=0;
 var $_sum28_i_i=0,$1225=0,$1226=0,$_sum29_i_i=0,$1227=0,$1228=0,$1230=0,$1231=0,$1232=0,$1234=0,$1236=0,$1237=0,$1238=0,$1239=0,$1240=0,$1241=0,$1242=0,$1243=0,$1244=0,$1245=0;
 var $1246=0,$1247=0,$1248=0,$1249=0,$1250=0,$1251=0,$1252=0,$1253=0,$1254=0,$1255=0,$1256=0,$1257=0,$I7_0_i_i=0,$1259=0,$_sum12_i24_i=0,$1260=0,$1261=0,$_sum13_i_i=0,$1262=0,$_sum14_i_i=0;
 var $1263=0,$1264=0,$1265=0,$1266=0,$1267=0,$1268=0,$1269=0,$1271=0,$1272=0,$_sum15_i_i=0,$1273=0,$1274=0,$_sum16_i_i=0,$1275=0,$1276=0,$_sum17_i_i=0,$1277=0,$1278=0,$1280=0,$1281=0;
 var $1283=0,$1284=0,$1286=0,$1287=0,$1288=0,$1289=0,$1290=0,$1291=0,$1293=0,$1294=0,$1295=0,$1296=0,$1297=0,$K8_057_i_i=0,$T_056_i_i=0,$1299=0,$1300=0,$1301=0,$1302=0,$1304=0;
 var $1305=0,$1306=0,$_sum24_i_i=0,$1308=0,$1309=0,$_sum25_i_i=0,$1310=0,$1311=0,$_sum26_i_i=0,$1312=0,$1313=0,$T_0_lcssa_i26_i=0,$1315=0,$1316=0,$1317=0,$1318=0,$1319=0,$1320=0,$1321=0,$or_cond_i27_i=0;
 var $1323=0,$_sum21_i_i=0,$1324=0,$1325=0,$_sum22_i_i=0,$1326=0,$1327=0,$_sum23_i_i=0,$1328=0,$1329=0,$_sum1819_i_i=0,$1330=0,$1331=0,$sp_0_i_i_i=0,$1333=0,$1334=0,$1335=0,$1337=0,$1338=0,$1339=0;
 var $1340=0,$1342=0,$1343=0,$_sum_i13_i=0,$_sum1_i14_i=0,$1344=0,$1345=0,$1346=0,$1347=0,$1349=0,$1350=0,$1352=0,$_sum2_i15_i=0,$1353=0,$1354=0,$1355=0,$1356=0,$1357=0,$1358=0,$1359=0;
 var $1360=0,$1361=0,$1362=0,$1363=0,$1364=0,$1366=0,$1367=0,$1368=0,$1369=0,$1370=0,$1371=0,$1372=0,$_sum_i_i_i=0,$1373=0,$1374=0,$_sum2_i_i_i=0,$1375=0,$1376=0,$1377=0,$1378=0;
 var $1379=0,$1380=0,$1381=0,$1382=0,$1383=0,$1384=0,$1385=0,$1386=0,$1387=0,$1388=0,$1389=0,$1391=0,$1392=0,$1393=0,$1394=0,$_sum3_i_i=0,$1395=0,$1396=0,$1397=0,$1398=0;
 var $1399=0,$1400=0,$1401=0,$1402=0,$1403=0,$1405=0,$1406=0,$1407=0,$1408=0,$1409=0,$1410=0,$1411=0,$1413=0,$_sum11_pre_i_i=0,$_pre_i_i=0,$_sum12_i_i=0,$1415=0,$1416=0,$1417=0,$1418=0;
 var $1419=0,$_pre_phi_i_i=0,$F_0_i_i=0,$1422=0,$1423=0,$1424=0,$1426=0,$1427=0,$1428=0,$1430=0,$1432=0,$1433=0,$1434=0,$1435=0,$1436=0,$1437=0,$1438=0,$1439=0,$1440=0,$1441=0;
 var $1442=0,$1443=0,$1444=0,$1445=0,$1446=0,$1447=0,$1448=0,$1449=0,$1450=0,$1451=0,$1452=0,$1453=0,$I1_0_i_i=0,$1455=0,$1456=0,$I1_0_c_i_i=0,$1457=0,$1458=0,$1459=0,$1460=0;
 var $1461=0,$1462=0,$1464=0,$1465=0,$_c_i_i=0,$1466=0,$1467=0,$1469=0,$1470=0,$1472=0,$1473=0,$1475=0,$1476=0,$1477=0,$1478=0,$1479=0,$1480=0,$1482=0,$1483=0,$1484=0;
 var $1485=0,$1486=0,$K2_016_i_i=0,$T_015_i_i=0,$1488=0,$1489=0,$1490=0,$1491=0,$1493=0,$1494=0,$1495=0,$1497=0,$T_0_c8_i_i=0,$1498=0,$1499=0,$T_0_lcssa_i_i=0,$1501=0,$1502=0,$1503=0,$1504=0;
 var $1505=0,$1506=0,$1507=0,$or_cond_i_i=0,$1509=0,$1510=0,$_c7_i_i=0,$1511=0,$T_0_c_i_i=0,$1512=0,$1513=0,$1514=0,$1516=0,$1517=0,$1518=0,$1519=0,$1520=0,$1521=0,$_sum_i34=0,$1522=0;
 var $1523=0,$1524=0,$1525=0,$1526=0,$1527=0,$1528=0,$mem_0=0,label=0;

 $1=($bytes>>>0)<((245)>>>0);
 do {
  if ($1) {
   $3=($bytes>>>0)<((11)>>>0);
   if ($3) {
    $8=16;
   } else {
    $5=((($bytes)+(11))|0);
    $6=$5&-8;
    $8=$6;
   }

   $9=$8>>>3;
   $10=((HEAP32[((17928)>>2)])|0);
   $11=$10>>>($9>>>0);
   $12=$11&3;
   $13=($12|0)==0;
   if (!($13)) {
    $15=$11&1;
    $16=$15^1;
    $17=((($16)+($9))|0);
    $18=$17<<1;
    $19=((17968+($18<<2))|0);
    $20=$19;
    $_sum11=((($18)+(2))|0);
    $21=((17968+($_sum11<<2))|0);
    $22=((HEAP32[(($21)>>2)])|0);
    $23=(($22+8)|0);
    $24=((HEAP32[(($23)>>2)])|0);
    $25=($20|0)==($24|0);
    do {
     if ($25) {
      $27=1<<$17;
      $28=$27^-1;
      $29=$10&$28;
      HEAP32[((17928)>>2)]=$29;
     } else {
      $31=$24;
      $32=((HEAP32[((17944)>>2)])|0);
      $33=($31>>>0)<($32>>>0);
      if ($33) {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
      $35=(($24+12)|0);
      $36=((HEAP32[(($35)>>2)])|0);
      $37=($36|0)==($22|0);
      if ($37) {
       HEAP32[(($35)>>2)]=$20;
       HEAP32[(($21)>>2)]=$24;
       break;
      } else {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     }
    } while(0);
    $40=$17<<3;
    $41=$40|3;
    $42=(($22+4)|0);
    HEAP32[(($42)>>2)]=$41;
    $43=$22;
    $_sum1314=$40|4;
    $44=(($43+$_sum1314)|0);
    $45=$44;
    $46=((HEAP32[(($45)>>2)])|0);
    $47=$46|1;
    HEAP32[(($45)>>2)]=$47;
    $48=$23;
    $mem_0=$48;

    return (($mem_0)|0);
   }
   $50=((HEAP32[((17936)>>2)])|0);
   $51=($8>>>0)>($50>>>0);
   if (!($51)) {
    $nb_0=$8;
    break;
   }
   $53=($11|0)==0;
   if (!($53)) {
    $55=$11<<$9;
    $56=2<<$9;
    $57=(((-$56))|0);
    $58=$56|$57;
    $59=$55&$58;
    $60=(((-$59))|0);
    $61=$59&$60;
    $62=((($61)-(1))|0);
    $63=$62>>>12;
    $64=$63&16;
    $65=$62>>>($64>>>0);
    $66=$65>>>5;
    $67=$66&8;
    $68=$67|$64;
    $69=$65>>>($67>>>0);
    $70=$69>>>2;
    $71=$70&4;
    $72=$68|$71;
    $73=$69>>>($71>>>0);
    $74=$73>>>1;
    $75=$74&2;
    $76=$72|$75;
    $77=$73>>>($75>>>0);
    $78=$77>>>1;
    $79=$78&1;
    $80=$76|$79;
    $81=$77>>>($79>>>0);
    $82=((($80)+($81))|0);
    $83=$82<<1;
    $84=((17968+($83<<2))|0);
    $85=$84;
    $_sum4=((($83)+(2))|0);
    $86=((17968+($_sum4<<2))|0);
    $87=((HEAP32[(($86)>>2)])|0);
    $88=(($87+8)|0);
    $89=((HEAP32[(($88)>>2)])|0);
    $90=($85|0)==($89|0);
    do {
     if ($90) {
      $92=1<<$82;
      $93=$92^-1;
      $94=$10&$93;
      HEAP32[((17928)>>2)]=$94;
     } else {
      $96=$89;
      $97=((HEAP32[((17944)>>2)])|0);
      $98=($96>>>0)<($97>>>0);
      if ($98) {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
      $100=(($89+12)|0);
      $101=((HEAP32[(($100)>>2)])|0);
      $102=($101|0)==($87|0);
      if ($102) {
       HEAP32[(($100)>>2)]=$85;
       HEAP32[(($86)>>2)]=$89;
       break;
      } else {
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     }
    } while(0);
    $105=$82<<3;
    $106=((($105)-($8))|0);
    $107=$8|3;
    $108=(($87+4)|0);
    HEAP32[(($108)>>2)]=$107;
    $109=$87;
    $110=(($109+$8)|0);
    $111=$110;
    $112=$106|1;
    $_sum67=$8|4;
    $113=(($109+$_sum67)|0);
    $114=$113;
    HEAP32[(($114)>>2)]=$112;
    $115=(($109+$105)|0);
    $116=$115;
    HEAP32[(($116)>>2)]=$106;
    $117=((HEAP32[((17936)>>2)])|0);
    $118=($117|0)==0;
    if (!($118)) {
     $120=((HEAP32[((17948)>>2)])|0);
     $121=$117>>>3;
     $122=$121<<1;
     $123=((17968+($122<<2))|0);
     $124=$123;
     $125=((HEAP32[((17928)>>2)])|0);
     $126=1<<$121;
     $127=$125&$126;
     $128=($127|0)==0;
     do {
      if ($128) {
       $130=$125|$126;
       HEAP32[((17928)>>2)]=$130;
       $_sum9_pre=((($122)+(2))|0);
       $_pre=((17968+($_sum9_pre<<2))|0);
       $F4_0=$124;$_pre_phi=$_pre;
      } else {
       $_sum10=((($122)+(2))|0);
       $132=((17968+($_sum10<<2))|0);
       $133=((HEAP32[(($132)>>2)])|0);
       $134=$133;
       $135=((HEAP32[((17944)>>2)])|0);
       $136=($134>>>0)<($135>>>0);
       if (!($136)) {
        $F4_0=$133;$_pre_phi=$132;
        break;
       }
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     } while(0);


     HEAP32[(($_pre_phi)>>2)]=$120;
     $139=(($F4_0+12)|0);
     HEAP32[(($139)>>2)]=$120;
     $140=(($120+8)|0);
     HEAP32[(($140)>>2)]=$F4_0;
     $141=(($120+12)|0);
     HEAP32[(($141)>>2)]=$124;
    }
    HEAP32[((17936)>>2)]=$106;
    HEAP32[((17948)>>2)]=$111;
    $143=$88;
    $mem_0=$143;

    return (($mem_0)|0);
   }
   $145=((HEAP32[((17932)>>2)])|0);
   $146=($145|0)==0;
   if ($146) {
    $nb_0=$8;
    break;
   }
   $148=(((-$145))|0);
   $149=$145&$148;
   $150=((($149)-(1))|0);
   $151=$150>>>12;
   $152=$151&16;
   $153=$150>>>($152>>>0);
   $154=$153>>>5;
   $155=$154&8;
   $156=$155|$152;
   $157=$153>>>($155>>>0);
   $158=$157>>>2;
   $159=$158&4;
   $160=$156|$159;
   $161=$157>>>($159>>>0);
   $162=$161>>>1;
   $163=$162&2;
   $164=$160|$163;
   $165=$161>>>($163>>>0);
   $166=$165>>>1;
   $167=$166&1;
   $168=$164|$167;
   $169=$165>>>($167>>>0);
   $170=((($168)+($169))|0);
   $171=((18232+($170<<2))|0);
   $172=((HEAP32[(($171)>>2)])|0);
   $173=(($172+4)|0);
   $174=((HEAP32[(($173)>>2)])|0);
   $175=$174&-8;
   $176=((($175)-($8))|0);
   $t_0_i=$172;$v_0_i=$172;$rsize_0_i=$176;
   while(1) {



    $178=(($t_0_i+16)|0);
    $179=((HEAP32[(($178)>>2)])|0);
    $180=($179|0)==0;
    if ($180) {
     $182=(($t_0_i+20)|0);
     $183=((HEAP32[(($182)>>2)])|0);
     $184=($183|0)==0;
     if ($184) {
      break;
     } else {
      $185=$183;
     }
    } else {
     $185=$179;
    }

    $186=(($185+4)|0);
    $187=((HEAP32[(($186)>>2)])|0);
    $188=$187&-8;
    $189=((($188)-($8))|0);
    $190=($189>>>0)<($rsize_0_i>>>0);
    $_rsize_0_i=($190?$189:$rsize_0_i);
    $_v_0_i=($190?$185:$v_0_i);
    $t_0_i=$185;$v_0_i=$_v_0_i;$rsize_0_i=$_rsize_0_i;
   }
   $192=$v_0_i;
   $193=((HEAP32[((17944)>>2)])|0);
   $194=($192>>>0)<($193>>>0);
   if ($194) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $196=(($192+$8)|0);
   $197=$196;
   $198=($192>>>0)<($196>>>0);
   if (!($198)) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $200=(($v_0_i+24)|0);
   $201=((HEAP32[(($200)>>2)])|0);
   $202=(($v_0_i+12)|0);
   $203=((HEAP32[(($202)>>2)])|0);
   $204=($203|0)==($v_0_i|0);
   do {
    if ($204) {
     $220=(($v_0_i+20)|0);
     $221=((HEAP32[(($220)>>2)])|0);
     $222=($221|0)==0;
     if ($222) {
      $224=(($v_0_i+16)|0);
      $225=((HEAP32[(($224)>>2)])|0);
      $226=($225|0)==0;
      if ($226) {
       $R_1_i=0;
       break;
      } else {
       $R_0_i=$225;$RP_0_i=$224;
      }
     } else {
      $R_0_i=$221;$RP_0_i=$220;
     }
     while(1) {


      $227=(($R_0_i+20)|0);
      $228=((HEAP32[(($227)>>2)])|0);
      $229=($228|0)==0;
      if (!($229)) {
       $R_0_i=$228;$RP_0_i=$227;
       continue;
      }
      $231=(($R_0_i+16)|0);
      $232=((HEAP32[(($231)>>2)])|0);
      $233=($232|0)==0;
      if ($233) {
       break;
      } else {
       $R_0_i=$232;$RP_0_i=$231;
      }
     }
     $235=$RP_0_i;
     $236=($235>>>0)<($193>>>0);
     if ($236) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      HEAP32[(($RP_0_i)>>2)]=0;
      $R_1_i=$R_0_i;
      break;
     }
    } else {
     $206=(($v_0_i+8)|0);
     $207=((HEAP32[(($206)>>2)])|0);
     $208=$207;
     $209=($208>>>0)<($193>>>0);
     if ($209) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $211=(($207+12)|0);
     $212=((HEAP32[(($211)>>2)])|0);
     $213=($212|0)==($v_0_i|0);
     if (!($213)) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $215=(($203+8)|0);
     $216=((HEAP32[(($215)>>2)])|0);
     $217=($216|0)==($v_0_i|0);
     if ($217) {
      HEAP32[(($211)>>2)]=$203;
      HEAP32[(($215)>>2)]=$207;
      $R_1_i=$203;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);

   $240=($201|0)==0;
   L78: do {
    if (!($240)) {
     $242=(($v_0_i+28)|0);
     $243=((HEAP32[(($242)>>2)])|0);
     $244=((18232+($243<<2))|0);
     $245=((HEAP32[(($244)>>2)])|0);
     $246=($v_0_i|0)==($245|0);
     do {
      if ($246) {
       HEAP32[(($244)>>2)]=$R_1_i;
       $cond_i=($R_1_i|0)==0;
       if (!($cond_i)) {
        break;
       }
       $248=((HEAP32[(($242)>>2)])|0);
       $249=1<<$248;
       $250=$249^-1;
       $251=((HEAP32[((17932)>>2)])|0);
       $252=$251&$250;
       HEAP32[((17932)>>2)]=$252;
       break L78;
      } else {
       $254=$201;
       $255=((HEAP32[((17944)>>2)])|0);
       $256=($254>>>0)<($255>>>0);
       if ($256) {
        _abort(); return ((0)|0);
        return ((0)|0);
       }
       $258=(($201+16)|0);
       $259=((HEAP32[(($258)>>2)])|0);
       $260=($259|0)==($v_0_i|0);
       if ($260) {
        HEAP32[(($258)>>2)]=$R_1_i;
       } else {
        $263=(($201+20)|0);
        HEAP32[(($263)>>2)]=$R_1_i;
       }
       $266=($R_1_i|0)==0;
       if ($266) {
        break L78;
       }
      }
     } while(0);
     $268=$R_1_i;
     $269=((HEAP32[((17944)>>2)])|0);
     $270=($268>>>0)<($269>>>0);
     if ($270) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $272=(($R_1_i+24)|0);
     HEAP32[(($272)>>2)]=$201;
     $273=(($v_0_i+16)|0);
     $274=((HEAP32[(($273)>>2)])|0);
     $275=($274|0)==0;
     do {
      if (!($275)) {
       $277=$274;
       $278=((HEAP32[((17944)>>2)])|0);
       $279=($277>>>0)<($278>>>0);
       if ($279) {
        _abort(); return ((0)|0);
        return ((0)|0);
       } else {
        $281=(($R_1_i+16)|0);
        HEAP32[(($281)>>2)]=$274;
        $282=(($274+24)|0);
        HEAP32[(($282)>>2)]=$R_1_i;
        break;
       }
      }
     } while(0);
     $285=(($v_0_i+20)|0);
     $286=((HEAP32[(($285)>>2)])|0);
     $287=($286|0)==0;
     if ($287) {
      break;
     }
     $289=$286;
     $290=((HEAP32[((17944)>>2)])|0);
     $291=($289>>>0)<($290>>>0);
     if ($291) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      $293=(($R_1_i+20)|0);
      HEAP32[(($293)>>2)]=$286;
      $294=(($286+24)|0);
      HEAP32[(($294)>>2)]=$R_1_i;
      break;
     }
    }
   } while(0);
   $298=($rsize_0_i>>>0)<((16)>>>0);
   if ($298) {
    $300=((($rsize_0_i)+($8))|0);
    $301=$300|3;
    $302=(($v_0_i+4)|0);
    HEAP32[(($302)>>2)]=$301;
    $_sum4_i=((($300)+(4))|0);
    $303=(($192+$_sum4_i)|0);
    $304=$303;
    $305=((HEAP32[(($304)>>2)])|0);
    $306=$305|1;
    HEAP32[(($304)>>2)]=$306;
   } else {
    $308=$8|3;
    $309=(($v_0_i+4)|0);
    HEAP32[(($309)>>2)]=$308;
    $310=$rsize_0_i|1;
    $_sum_i41=$8|4;
    $311=(($192+$_sum_i41)|0);
    $312=$311;
    HEAP32[(($312)>>2)]=$310;
    $_sum1_i=((($rsize_0_i)+($8))|0);
    $313=(($192+$_sum1_i)|0);
    $314=$313;
    HEAP32[(($314)>>2)]=$rsize_0_i;
    $315=((HEAP32[((17936)>>2)])|0);
    $316=($315|0)==0;
    if (!($316)) {
     $318=((HEAP32[((17948)>>2)])|0);
     $319=$315>>>3;
     $320=$319<<1;
     $321=((17968+($320<<2))|0);
     $322=$321;
     $323=((HEAP32[((17928)>>2)])|0);
     $324=1<<$319;
     $325=$323&$324;
     $326=($325|0)==0;
     do {
      if ($326) {
       $328=$323|$324;
       HEAP32[((17928)>>2)]=$328;
       $_sum2_pre_i=((($320)+(2))|0);
       $_pre_i=((17968+($_sum2_pre_i<<2))|0);
       $F1_0_i=$322;$_pre_phi_i=$_pre_i;
      } else {
       $_sum3_i=((($320)+(2))|0);
       $330=((17968+($_sum3_i<<2))|0);
       $331=((HEAP32[(($330)>>2)])|0);
       $332=$331;
       $333=((HEAP32[((17944)>>2)])|0);
       $334=($332>>>0)<($333>>>0);
       if (!($334)) {
        $F1_0_i=$331;$_pre_phi_i=$330;
        break;
       }
       _abort(); return ((0)|0);
       return ((0)|0);
      }
     } while(0);


     HEAP32[(($_pre_phi_i)>>2)]=$318;
     $337=(($F1_0_i+12)|0);
     HEAP32[(($337)>>2)]=$318;
     $338=(($318+8)|0);
     HEAP32[(($338)>>2)]=$F1_0_i;
     $339=(($318+12)|0);
     HEAP32[(($339)>>2)]=$322;
    }
    HEAP32[((17936)>>2)]=$rsize_0_i;
    HEAP32[((17948)>>2)]=$197;
   }
   $342=(($v_0_i+8)|0);
   $343=$342;
   $mem_0=$343;

   return (($mem_0)|0);
  } else {
   $345=($bytes>>>0)>((4294967231)>>>0);
   if ($345) {
    $nb_0=-1;
    break;
   }
   $347=((($bytes)+(11))|0);
   $348=$347&-8;
   $349=((HEAP32[((17932)>>2)])|0);
   $350=($349|0)==0;
   if ($350) {
    $nb_0=$348;
    break;
   }
   $352=(((-$348))|0);
   $353=$347>>>8;
   $354=($353|0)==0;
   do {
    if ($354) {
     $idx_0_i=0;
    } else {
     $356=($348>>>0)>((16777215)>>>0);
     if ($356) {
      $idx_0_i=31;
      break;
     }
     $358=((($353)+(1048320))|0);
     $359=$358>>>16;
     $360=$359&8;
     $361=$353<<$360;
     $362=((($361)+(520192))|0);
     $363=$362>>>16;
     $364=$363&4;
     $365=$364|$360;
     $366=$361<<$364;
     $367=((($366)+(245760))|0);
     $368=$367>>>16;
     $369=$368&2;
     $370=$365|$369;
     $371=(((14)-($370))|0);
     $372=$366<<$369;
     $373=$372>>>15;
     $374=((($371)+($373))|0);
     $375=$374<<1;
     $376=((($374)+(7))|0);
     $377=$348>>>($376>>>0);
     $378=$377&1;
     $379=$378|$375;
     $idx_0_i=$379;
    }
   } while(0);

   $381=((18232+($idx_0_i<<2))|0);
   $382=((HEAP32[(($381)>>2)])|0);
   $383=($382|0)==0;
   L126: do {
    if ($383) {
     $v_2_i=0;$rsize_2_i=$352;$t_1_i=0;
    } else {
     $385=($idx_0_i|0)==31;
     if ($385) {
      $390=0;
     } else {
      $387=$idx_0_i>>>1;
      $388=(((25)-($387))|0);
      $390=$388;
     }

     $391=$348<<$390;
     $v_0_i18=0;$rsize_0_i17=$352;$t_0_i16=$382;$sizebits_0_i=$391;$rst_0_i=0;
     while(1) {





      $393=(($t_0_i16+4)|0);
      $394=((HEAP32[(($393)>>2)])|0);
      $395=$394&-8;
      $396=((($395)-($348))|0);
      $397=($396>>>0)<($rsize_0_i17>>>0);
      if ($397) {
       $399=($395|0)==($348|0);
       if ($399) {
        $v_2_i=$t_0_i16;$rsize_2_i=$396;$t_1_i=$t_0_i16;
        break L126;
       } else {
        $v_1_i=$t_0_i16;$rsize_1_i=$396;
       }
      } else {
       $v_1_i=$v_0_i18;$rsize_1_i=$rsize_0_i17;
      }


      $401=(($t_0_i16+20)|0);
      $402=((HEAP32[(($401)>>2)])|0);
      $403=$sizebits_0_i>>>31;
      $404=(($t_0_i16+16+($403<<2))|0);
      $405=((HEAP32[(($404)>>2)])|0);
      $406=($402|0)==0;
      $407=($402|0)==($405|0);
      $or_cond21_i=$406|$407;
      $rst_1_i=($or_cond21_i?$rst_0_i:$402);
      $408=($405|0)==0;
      $409=$sizebits_0_i<<1;
      if ($408) {
       $v_2_i=$v_1_i;$rsize_2_i=$rsize_1_i;$t_1_i=$rst_1_i;
       break;
      } else {
       $v_0_i18=$v_1_i;$rsize_0_i17=$rsize_1_i;$t_0_i16=$405;$sizebits_0_i=$409;$rst_0_i=$rst_1_i;
      }
     }
    }
   } while(0);



   $410=($t_1_i|0)==0;
   $411=($v_2_i|0)==0;
   $or_cond_i=$410&$411;
   if ($or_cond_i) {
    $413=2<<$idx_0_i;
    $414=(((-$413))|0);
    $415=$413|$414;
    $416=$349&$415;
    $417=($416|0)==0;
    if ($417) {
     $nb_0=$348;
     break;
    }
    $419=(((-$416))|0);
    $420=$416&$419;
    $421=((($420)-(1))|0);
    $422=$421>>>12;
    $423=$422&16;
    $424=$421>>>($423>>>0);
    $425=$424>>>5;
    $426=$425&8;
    $427=$426|$423;
    $428=$424>>>($426>>>0);
    $429=$428>>>2;
    $430=$429&4;
    $431=$427|$430;
    $432=$428>>>($430>>>0);
    $433=$432>>>1;
    $434=$433&2;
    $435=$431|$434;
    $436=$432>>>($434>>>0);
    $437=$436>>>1;
    $438=$437&1;
    $439=$435|$438;
    $440=$436>>>($438>>>0);
    $441=((($439)+($440))|0);
    $442=((18232+($441<<2))|0);
    $443=((HEAP32[(($442)>>2)])|0);
    $t_2_ph_i=$443;
   } else {
    $t_2_ph_i=$t_1_i;
   }

   $444=($t_2_ph_i|0)==0;
   if ($444) {
    $rsize_3_lcssa_i=$rsize_2_i;$v_3_lcssa_i=$v_2_i;
   } else {
    $t_232_i=$t_2_ph_i;$rsize_333_i=$rsize_2_i;$v_334_i=$v_2_i;
    while(1) {



     $445=(($t_232_i+4)|0);
     $446=((HEAP32[(($445)>>2)])|0);
     $447=$446&-8;
     $448=((($447)-($348))|0);
     $449=($448>>>0)<($rsize_333_i>>>0);
     $_rsize_3_i=($449?$448:$rsize_333_i);
     $t_2_v_3_i=($449?$t_232_i:$v_334_i);
     $450=(($t_232_i+16)|0);
     $451=((HEAP32[(($450)>>2)])|0);
     $452=($451|0)==0;
     if (!($452)) {
      $t_232_i=$451;$rsize_333_i=$_rsize_3_i;$v_334_i=$t_2_v_3_i;
      continue;
     }
     $453=(($t_232_i+20)|0);
     $454=((HEAP32[(($453)>>2)])|0);
     $455=($454|0)==0;
     if ($455) {
      $rsize_3_lcssa_i=$_rsize_3_i;$v_3_lcssa_i=$t_2_v_3_i;
      break;
     } else {
      $t_232_i=$454;$rsize_333_i=$_rsize_3_i;$v_334_i=$t_2_v_3_i;
     }
    }
   }


   $456=($v_3_lcssa_i|0)==0;
   if ($456) {
    $nb_0=$348;
    break;
   }
   $458=((HEAP32[((17936)>>2)])|0);
   $459=((($458)-($348))|0);
   $460=($rsize_3_lcssa_i>>>0)<($459>>>0);
   if (!($460)) {
    $nb_0=$348;
    break;
   }
   $462=$v_3_lcssa_i;
   $463=((HEAP32[((17944)>>2)])|0);
   $464=($462>>>0)<($463>>>0);
   if ($464) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $466=(($462+$348)|0);
   $467=$466;
   $468=($462>>>0)<($466>>>0);
   if (!($468)) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $470=(($v_3_lcssa_i+24)|0);
   $471=((HEAP32[(($470)>>2)])|0);
   $472=(($v_3_lcssa_i+12)|0);
   $473=((HEAP32[(($472)>>2)])|0);
   $474=($473|0)==($v_3_lcssa_i|0);
   do {
    if ($474) {
     $490=(($v_3_lcssa_i+20)|0);
     $491=((HEAP32[(($490)>>2)])|0);
     $492=($491|0)==0;
     if ($492) {
      $494=(($v_3_lcssa_i+16)|0);
      $495=((HEAP32[(($494)>>2)])|0);
      $496=($495|0)==0;
      if ($496) {
       $R_1_i22=0;
       break;
      } else {
       $R_0_i20=$495;$RP_0_i19=$494;
      }
     } else {
      $R_0_i20=$491;$RP_0_i19=$490;
     }
     while(1) {


      $497=(($R_0_i20+20)|0);
      $498=((HEAP32[(($497)>>2)])|0);
      $499=($498|0)==0;
      if (!($499)) {
       $R_0_i20=$498;$RP_0_i19=$497;
       continue;
      }
      $501=(($R_0_i20+16)|0);
      $502=((HEAP32[(($501)>>2)])|0);
      $503=($502|0)==0;
      if ($503) {
       break;
      } else {
       $R_0_i20=$502;$RP_0_i19=$501;
      }
     }
     $505=$RP_0_i19;
     $506=($505>>>0)<($463>>>0);
     if ($506) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      HEAP32[(($RP_0_i19)>>2)]=0;
      $R_1_i22=$R_0_i20;
      break;
     }
    } else {
     $476=(($v_3_lcssa_i+8)|0);
     $477=((HEAP32[(($476)>>2)])|0);
     $478=$477;
     $479=($478>>>0)<($463>>>0);
     if ($479) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $481=(($477+12)|0);
     $482=((HEAP32[(($481)>>2)])|0);
     $483=($482|0)==($v_3_lcssa_i|0);
     if (!($483)) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $485=(($473+8)|0);
     $486=((HEAP32[(($485)>>2)])|0);
     $487=($486|0)==($v_3_lcssa_i|0);
     if ($487) {
      HEAP32[(($481)>>2)]=$473;
      HEAP32[(($485)>>2)]=$477;
      $R_1_i22=$473;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);

   $510=($471|0)==0;
   L176: do {
    if (!($510)) {
     $512=(($v_3_lcssa_i+28)|0);
     $513=((HEAP32[(($512)>>2)])|0);
     $514=((18232+($513<<2))|0);
     $515=((HEAP32[(($514)>>2)])|0);
     $516=($v_3_lcssa_i|0)==($515|0);
     do {
      if ($516) {
       HEAP32[(($514)>>2)]=$R_1_i22;
       $cond_i23=($R_1_i22|0)==0;
       if (!($cond_i23)) {
        break;
       }
       $518=((HEAP32[(($512)>>2)])|0);
       $519=1<<$518;
       $520=$519^-1;
       $521=((HEAP32[((17932)>>2)])|0);
       $522=$521&$520;
       HEAP32[((17932)>>2)]=$522;
       break L176;
      } else {
       $524=$471;
       $525=((HEAP32[((17944)>>2)])|0);
       $526=($524>>>0)<($525>>>0);
       if ($526) {
        _abort(); return ((0)|0);
        return ((0)|0);
       }
       $528=(($471+16)|0);
       $529=((HEAP32[(($528)>>2)])|0);
       $530=($529|0)==($v_3_lcssa_i|0);
       if ($530) {
        HEAP32[(($528)>>2)]=$R_1_i22;
       } else {
        $533=(($471+20)|0);
        HEAP32[(($533)>>2)]=$R_1_i22;
       }
       $536=($R_1_i22|0)==0;
       if ($536) {
        break L176;
       }
      }
     } while(0);
     $538=$R_1_i22;
     $539=((HEAP32[((17944)>>2)])|0);
     $540=($538>>>0)<($539>>>0);
     if ($540) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $542=(($R_1_i22+24)|0);
     HEAP32[(($542)>>2)]=$471;
     $543=(($v_3_lcssa_i+16)|0);
     $544=((HEAP32[(($543)>>2)])|0);
     $545=($544|0)==0;
     do {
      if (!($545)) {
       $547=$544;
       $548=((HEAP32[((17944)>>2)])|0);
       $549=($547>>>0)<($548>>>0);
       if ($549) {
        _abort(); return ((0)|0);
        return ((0)|0);
       } else {
        $551=(($R_1_i22+16)|0);
        HEAP32[(($551)>>2)]=$544;
        $552=(($544+24)|0);
        HEAP32[(($552)>>2)]=$R_1_i22;
        break;
       }
      }
     } while(0);
     $555=(($v_3_lcssa_i+20)|0);
     $556=((HEAP32[(($555)>>2)])|0);
     $557=($556|0)==0;
     if ($557) {
      break;
     }
     $559=$556;
     $560=((HEAP32[((17944)>>2)])|0);
     $561=($559>>>0)<($560>>>0);
     if ($561) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      $563=(($R_1_i22+20)|0);
      HEAP32[(($563)>>2)]=$556;
      $564=(($556+24)|0);
      HEAP32[(($564)>>2)]=$R_1_i22;
      break;
     }
    }
   } while(0);
   $568=($rsize_3_lcssa_i>>>0)<((16)>>>0);
   L204: do {
    if ($568) {
     $570=((($rsize_3_lcssa_i)+($348))|0);
     $571=$570|3;
     $572=(($v_3_lcssa_i+4)|0);
     HEAP32[(($572)>>2)]=$571;
     $_sum19_i=((($570)+(4))|0);
     $573=(($462+$_sum19_i)|0);
     $574=$573;
     $575=((HEAP32[(($574)>>2)])|0);
     $576=$575|1;
     HEAP32[(($574)>>2)]=$576;
    } else {
     $578=$348|3;
     $579=(($v_3_lcssa_i+4)|0);
     HEAP32[(($579)>>2)]=$578;
     $580=$rsize_3_lcssa_i|1;
     $_sum_i2540=$348|4;
     $581=(($462+$_sum_i2540)|0);
     $582=$581;
     HEAP32[(($582)>>2)]=$580;
     $_sum1_i26=((($rsize_3_lcssa_i)+($348))|0);
     $583=(($462+$_sum1_i26)|0);
     $584=$583;
     HEAP32[(($584)>>2)]=$rsize_3_lcssa_i;
     $585=$rsize_3_lcssa_i>>>3;
     $586=($rsize_3_lcssa_i>>>0)<((256)>>>0);
     if ($586) {
      $588=$585<<1;
      $589=((17968+($588<<2))|0);
      $590=$589;
      $591=((HEAP32[((17928)>>2)])|0);
      $592=1<<$585;
      $593=$591&$592;
      $594=($593|0)==0;
      do {
       if ($594) {
        $596=$591|$592;
        HEAP32[((17928)>>2)]=$596;
        $_sum15_pre_i=((($588)+(2))|0);
        $_pre_i27=((17968+($_sum15_pre_i<<2))|0);
        $F5_0_i=$590;$_pre_phi_i28=$_pre_i27;
       } else {
        $_sum18_i=((($588)+(2))|0);
        $598=((17968+($_sum18_i<<2))|0);
        $599=((HEAP32[(($598)>>2)])|0);
        $600=$599;
        $601=((HEAP32[((17944)>>2)])|0);
        $602=($600>>>0)<($601>>>0);
        if (!($602)) {
         $F5_0_i=$599;$_pre_phi_i28=$598;
         break;
        }
        _abort(); return ((0)|0);
        return ((0)|0);
       }
      } while(0);


      HEAP32[(($_pre_phi_i28)>>2)]=$467;
      $605=(($F5_0_i+12)|0);
      HEAP32[(($605)>>2)]=$467;
      $_sum16_i=((($348)+(8))|0);
      $606=(($462+$_sum16_i)|0);
      $607=$606;
      HEAP32[(($607)>>2)]=$F5_0_i;
      $_sum17_i=((($348)+(12))|0);
      $608=(($462+$_sum17_i)|0);
      $609=$608;
      HEAP32[(($609)>>2)]=$590;
      break;
     }
     $611=$466;
     $612=$rsize_3_lcssa_i>>>8;
     $613=($612|0)==0;
     do {
      if ($613) {
       $I7_0_i=0;
      } else {
       $615=($rsize_3_lcssa_i>>>0)>((16777215)>>>0);
       if ($615) {
        $I7_0_i=31;
        break;
       }
       $617=((($612)+(1048320))|0);
       $618=$617>>>16;
       $619=$618&8;
       $620=$612<<$619;
       $621=((($620)+(520192))|0);
       $622=$621>>>16;
       $623=$622&4;
       $624=$623|$619;
       $625=$620<<$623;
       $626=((($625)+(245760))|0);
       $627=$626>>>16;
       $628=$627&2;
       $629=$624|$628;
       $630=(((14)-($629))|0);
       $631=$625<<$628;
       $632=$631>>>15;
       $633=((($630)+($632))|0);
       $634=$633<<1;
       $635=((($633)+(7))|0);
       $636=$rsize_3_lcssa_i>>>($635>>>0);
       $637=$636&1;
       $638=$637|$634;
       $I7_0_i=$638;
      }
     } while(0);

     $640=((18232+($I7_0_i<<2))|0);
     $_sum2_i=((($348)+(28))|0);
     $641=(($462+$_sum2_i)|0);
     $642=$641;
     HEAP32[(($642)>>2)]=$I7_0_i;
     $_sum3_i29=((($348)+(16))|0);
     $643=(($462+$_sum3_i29)|0);
     $_sum4_i30=((($348)+(20))|0);
     $644=(($462+$_sum4_i30)|0);
     $645=$644;
     HEAP32[(($645)>>2)]=0;
     $646=$643;
     HEAP32[(($646)>>2)]=0;
     $647=((HEAP32[((17932)>>2)])|0);
     $648=1<<$I7_0_i;
     $649=$647&$648;
     $650=($649|0)==0;
     if ($650) {
      $652=$647|$648;
      HEAP32[((17932)>>2)]=$652;
      HEAP32[(($640)>>2)]=$611;
      $653=$640;
      $_sum5_i=((($348)+(24))|0);
      $654=(($462+$_sum5_i)|0);
      $655=$654;
      HEAP32[(($655)>>2)]=$653;
      $_sum6_i=((($348)+(12))|0);
      $656=(($462+$_sum6_i)|0);
      $657=$656;
      HEAP32[(($657)>>2)]=$611;
      $_sum7_i=((($348)+(8))|0);
      $658=(($462+$_sum7_i)|0);
      $659=$658;
      HEAP32[(($659)>>2)]=$611;
      break;
     }
     $661=((HEAP32[(($640)>>2)])|0);
     $662=($I7_0_i|0)==31;
     if ($662) {
      $667=0;
     } else {
      $664=$I7_0_i>>>1;
      $665=(((25)-($664))|0);
      $667=$665;
     }

     $668=(($661+4)|0);
     $669=((HEAP32[(($668)>>2)])|0);
     $670=$669&-8;
     $671=($670|0)==($rsize_3_lcssa_i|0);
     L225: do {
      if ($671) {
       $T_0_lcssa_i=$661;
      } else {
       $672=$rsize_3_lcssa_i<<$667;
       $T_028_i=$661;$K12_029_i=$672;
       while(1) {


        $680=$K12_029_i>>>31;
        $681=(($T_028_i+16+($680<<2))|0);
        $682=((HEAP32[(($681)>>2)])|0);
        $683=($682|0)==0;
        if ($683) {
         break;
        }
        $674=$K12_029_i<<1;
        $675=(($682+4)|0);
        $676=((HEAP32[(($675)>>2)])|0);
        $677=$676&-8;
        $678=($677|0)==($rsize_3_lcssa_i|0);
        if ($678) {
         $T_0_lcssa_i=$682;
         break L225;
        } else {
         $T_028_i=$682;$K12_029_i=$674;
        }
       }
       $685=$681;
       $686=((HEAP32[((17944)>>2)])|0);
       $687=($685>>>0)<($686>>>0);
       if ($687) {
        _abort(); return ((0)|0);
        return ((0)|0);
       } else {
        HEAP32[(($681)>>2)]=$611;
        $_sum12_i=((($348)+(24))|0);
        $689=(($462+$_sum12_i)|0);
        $690=$689;
        HEAP32[(($690)>>2)]=$T_028_i;
        $_sum13_i=((($348)+(12))|0);
        $691=(($462+$_sum13_i)|0);
        $692=$691;
        HEAP32[(($692)>>2)]=$611;
        $_sum14_i=((($348)+(8))|0);
        $693=(($462+$_sum14_i)|0);
        $694=$693;
        HEAP32[(($694)>>2)]=$611;
        break L204;
       }
      }
     } while(0);

     $696=(($T_0_lcssa_i+8)|0);
     $697=((HEAP32[(($696)>>2)])|0);
     $698=$T_0_lcssa_i;
     $699=((HEAP32[((17944)>>2)])|0);
     $700=($698>>>0)>=($699>>>0);
     $701=$697;
     $702=($701>>>0)>=($699>>>0);
     $or_cond26_i=$700&$702;
     if ($or_cond26_i) {
      $704=(($697+12)|0);
      HEAP32[(($704)>>2)]=$611;
      HEAP32[(($696)>>2)]=$611;
      $_sum9_i=((($348)+(8))|0);
      $705=(($462+$_sum9_i)|0);
      $706=$705;
      HEAP32[(($706)>>2)]=$697;
      $_sum10_i=((($348)+(12))|0);
      $707=(($462+$_sum10_i)|0);
      $708=$707;
      HEAP32[(($708)>>2)]=$T_0_lcssa_i;
      $_sum11_i=((($348)+(24))|0);
      $709=(($462+$_sum11_i)|0);
      $710=$709;
      HEAP32[(($710)>>2)]=0;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);
   $712=(($v_3_lcssa_i+8)|0);
   $713=$712;
   $mem_0=$713;

   return (($mem_0)|0);
  }
 } while(0);

 $714=((HEAP32[((17936)>>2)])|0);
 $715=($714>>>0)<($nb_0>>>0);
 if (!($715)) {
  $717=((($714)-($nb_0))|0);
  $718=((HEAP32[((17948)>>2)])|0);
  $719=($717>>>0)>((15)>>>0);
  if ($719) {
   $721=$718;
   $722=(($721+$nb_0)|0);
   $723=$722;
   HEAP32[((17948)>>2)]=$723;
   HEAP32[((17936)>>2)]=$717;
   $724=$717|1;
   $_sum2=((($nb_0)+(4))|0);
   $725=(($721+$_sum2)|0);
   $726=$725;
   HEAP32[(($726)>>2)]=$724;
   $727=(($721+$714)|0);
   $728=$727;
   HEAP32[(($728)>>2)]=$717;
   $729=$nb_0|3;
   $730=(($718+4)|0);
   HEAP32[(($730)>>2)]=$729;
  } else {
   HEAP32[((17936)>>2)]=0;
   HEAP32[((17948)>>2)]=0;
   $732=$714|3;
   $733=(($718+4)|0);
   HEAP32[(($733)>>2)]=$732;
   $734=$718;
   $_sum1=((($714)+(4))|0);
   $735=(($734+$_sum1)|0);
   $736=$735;
   $737=((HEAP32[(($736)>>2)])|0);
   $738=$737|1;
   HEAP32[(($736)>>2)]=$738;
  }
  $740=(($718+8)|0);
  $741=$740;
  $mem_0=$741;

  return (($mem_0)|0);
 }
 $743=((HEAP32[((17940)>>2)])|0);
 $744=($743>>>0)>($nb_0>>>0);
 if ($744) {
  $746=((($743)-($nb_0))|0);
  HEAP32[((17940)>>2)]=$746;
  $747=((HEAP32[((17952)>>2)])|0);
  $748=$747;
  $749=(($748+$nb_0)|0);
  $750=$749;
  HEAP32[((17952)>>2)]=$750;
  $751=$746|1;
  $_sum=((($nb_0)+(4))|0);
  $752=(($748+$_sum)|0);
  $753=$752;
  HEAP32[(($753)>>2)]=$751;
  $754=$nb_0|3;
  $755=(($747+4)|0);
  HEAP32[(($755)>>2)]=$754;
  $756=(($747+8)|0);
  $757=$756;
  $mem_0=$757;

  return (($mem_0)|0);
 }
 $759=((HEAP32[((17856)>>2)])|0);
 $760=($759|0)==0;
 do {
  if ($760) {
   $762=((_sysconf(((30)|0)))|0);
   $763=((($762)-(1))|0);
   $764=$763&$762;
   $765=($764|0)==0;
   if ($765) {
    HEAP32[((17864)>>2)]=$762;
    HEAP32[((17860)>>2)]=$762;
    HEAP32[((17868)>>2)]=-1;
    HEAP32[((17872)>>2)]=-1;
    HEAP32[((17876)>>2)]=0;
    HEAP32[((18372)>>2)]=0;
    $767=((_time(((0)|0)))|0);
    $768=$767&-16;
    $769=$768^1431655768;
    HEAP32[((17856)>>2)]=$769;
    break;
   } else {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
  }
 } while(0);
 $771=((($nb_0)+(48))|0);
 $772=((HEAP32[((17864)>>2)])|0);
 $773=((($nb_0)+(47))|0);
 $774=((($772)+($773))|0);
 $775=(((-$772))|0);
 $776=$774&$775;
 $777=($776>>>0)>($nb_0>>>0);
 if (!($777)) {
  $mem_0=0;

  return (($mem_0)|0);
 }
 $779=((HEAP32[((18368)>>2)])|0);
 $780=($779|0)==0;
 do {
  if (!($780)) {
   $782=((HEAP32[((18360)>>2)])|0);
   $783=((($782)+($776))|0);
   $784=($783>>>0)<=($782>>>0);
   $785=($783>>>0)>($779>>>0);
   $or_cond1_i=$784|$785;
   if ($or_cond1_i) {
    $mem_0=0;
   } else {
    break;
   }

   return (($mem_0)|0);
  }
 } while(0);
 $787=((HEAP32[((18372)>>2)])|0);
 $788=$787&4;
 $789=($788|0)==0;
 L266: do {
  if ($789) {
   $791=((HEAP32[((17952)>>2)])|0);
   $792=($791|0)==0;
   L268: do {
    if ($792) {
     label = 181;
    } else {
     $794=$791;
     $sp_0_i_i=18376;
     while(1) {

      $796=(($sp_0_i_i)|0);
      $797=((HEAP32[(($796)>>2)])|0);
      $798=($797>>>0)>($794>>>0);
      if (!($798)) {
       $800=(($sp_0_i_i+4)|0);
       $801=((HEAP32[(($800)>>2)])|0);
       $802=(($797+$801)|0);
       $803=($802>>>0)>($794>>>0);
       if ($803) {
        break;
       }
      }
      $805=(($sp_0_i_i+8)|0);
      $806=((HEAP32[(($805)>>2)])|0);
      $807=($806|0)==0;
      if ($807) {
       label = 181;
       break L268;
      } else {
       $sp_0_i_i=$806;
      }
     }
     $808=($sp_0_i_i|0)==0;
     if ($808) {
      label = 181;
      break;
     }
     $838=((HEAP32[((17940)>>2)])|0);
     $839=((($774)-($838))|0);
     $840=$839&$775;
     $841=($840>>>0)<((2147483647)>>>0);
     if (!($841)) {
      $tsize_03141_i=0;
      break;
     }
     $843=((_sbrk((($840)|0)))|0);
     $844=((HEAP32[(($796)>>2)])|0);
     $845=((HEAP32[(($800)>>2)])|0);
     $846=(($844+$845)|0);
     $847=($843|0)==($846|0);
     if ($847) {
      $br_0_i=$843;$ssize_1_i=$840;
      label = 190;
     } else {
      $ssize_129_i=$840;$br_030_i=$843;
      label = 191;
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $809=((_sbrk(((0)|0)))|0);
     $810=($809|0)==-1;
     if ($810) {
      $tsize_03141_i=0;
      break;
     }
     $812=$809;
     $813=((HEAP32[((17860)>>2)])|0);
     $814=((($813)-(1))|0);
     $815=$814&$812;
     $816=($815|0)==0;
     if ($816) {
      $ssize_0_i=$776;
     } else {
      $818=((($814)+($812))|0);
      $819=(((-$813))|0);
      $820=$818&$819;
      $821=((($776)-($812))|0);
      $822=((($821)+($820))|0);
      $ssize_0_i=$822;
     }

     $824=((HEAP32[((18360)>>2)])|0);
     $825=((($824)+($ssize_0_i))|0);
     $826=($ssize_0_i>>>0)>($nb_0>>>0);
     $827=($ssize_0_i>>>0)<((2147483647)>>>0);
     $or_cond_i31=$826&$827;
     if (!($or_cond_i31)) {
      $tsize_03141_i=0;
      break;
     }
     $829=((HEAP32[((18368)>>2)])|0);
     $830=($829|0)==0;
     if (!($830)) {
      $832=($825>>>0)<=($824>>>0);
      $833=($825>>>0)>($829>>>0);
      $or_cond2_i=$832|$833;
      if ($or_cond2_i) {
       $tsize_03141_i=0;
       break;
      }
     }
     $835=((_sbrk((($ssize_0_i)|0)))|0);
     $836=($835|0)==($809|0);
     if ($836) {
      $br_0_i=$809;$ssize_1_i=$ssize_0_i;
      label = 190;
     } else {
      $ssize_129_i=$ssize_0_i;$br_030_i=$835;
      label = 191;
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {


     $849=($br_0_i|0)==-1;
     if ($849) {
      $tsize_03141_i=$ssize_1_i;
     } else {
      $tsize_244_i=$ssize_1_i;$tbase_245_i=$br_0_i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {


     $850=(((-$ssize_129_i))|0);
     $851=($br_030_i|0)!=-1;
     $852=($ssize_129_i>>>0)<((2147483647)>>>0);
     $or_cond5_i=$851&$852;
     $853=($771>>>0)>($ssize_129_i>>>0);
     $or_cond4_i=$or_cond5_i&$853;
     do {
      if ($or_cond4_i) {
       $855=((HEAP32[((17864)>>2)])|0);
       $856=((($773)-($ssize_129_i))|0);
       $857=((($856)+($855))|0);
       $858=(((-$855))|0);
       $859=$857&$858;
       $860=($859>>>0)<((2147483647)>>>0);
       if (!($860)) {
        $ssize_2_i=$ssize_129_i;
        break;
       }
       $862=((_sbrk((($859)|0)))|0);
       $863=($862|0)==-1;
       if ($863) {
        $866=((_sbrk((($850)|0)))|0);
        $tsize_03141_i=0;
        break L288;
       } else {
        $865=((($859)+($ssize_129_i))|0);
        $ssize_2_i=$865;
        break;
       }
      } else {
       $ssize_2_i=$ssize_129_i;
      }
     } while(0);

     $868=($br_030_i|0)==-1;
     if ($868) {
      $tsize_03141_i=0;
     } else {
      $tsize_244_i=$ssize_2_i;$tbase_245_i=$br_030_i;
      label = 201;
      break L266;
     }
    }
   } while(0);

   $869=((HEAP32[((18372)>>2)])|0);
   $870=$869|4;
   HEAP32[((18372)>>2)]=$870;
   $tsize_1_i=$tsize_03141_i;
   label = 198;
  } else {
   $tsize_1_i=0;
   label = 198;
  }
 } while(0);
 do {
  if ((label|0) == 198) {

   $872=($776>>>0)<((2147483647)>>>0);
   if (!($872)) {
    break;
   }
   $874=((_sbrk((($776)|0)))|0);
   $875=((_sbrk(((0)|0)))|0);
   $876=($874|0)!=-1;
   $877=($875|0)!=-1;
   $or_cond3_i=$876&$877;
   $878=($874>>>0)<($875>>>0);
   $or_cond6_i=$or_cond3_i&$878;
   if (!($or_cond6_i)) {
    break;
   }
   $880=$875;
   $881=$874;
   $882=((($880)-($881))|0);
   $883=((($nb_0)+(40))|0);
   $884=($882>>>0)>($883>>>0);
   $_tsize_1_i=($884?$882:$tsize_1_i);
   if ($884) {
    $tsize_244_i=$_tsize_1_i;$tbase_245_i=$874;
    label = 201;
   }
  }
 } while(0);
 do {
  if ((label|0) == 201) {


   $885=((HEAP32[((18360)>>2)])|0);
   $886=((($885)+($tsize_244_i))|0);
   HEAP32[((18360)>>2)]=$886;
   $887=((HEAP32[((18364)>>2)])|0);
   $888=($886>>>0)>($887>>>0);
   if ($888) {
    HEAP32[((18364)>>2)]=$886;
   }
   $891=((HEAP32[((17952)>>2)])|0);
   $892=($891|0)==0;
   L308: do {
    if ($892) {
     $894=((HEAP32[((17944)>>2)])|0);
     $895=($894|0)==0;
     $896=($tbase_245_i>>>0)<($894>>>0);
     $or_cond8_i=$895|$896;
     if ($or_cond8_i) {
      HEAP32[((17944)>>2)]=$tbase_245_i;
     }
     HEAP32[((18376)>>2)]=$tbase_245_i;
     HEAP32[((18380)>>2)]=$tsize_244_i;
     HEAP32[((18388)>>2)]=0;
     $899=((HEAP32[((17856)>>2)])|0);
     HEAP32[((17964)>>2)]=$899;
     HEAP32[((17960)>>2)]=-1;
     $i_02_i_i=0;
     while(1) {

      $901=$i_02_i_i<<1;
      $902=((17968+($901<<2))|0);
      $903=$902;
      $_sum_i_i=((($901)+(3))|0);
      $904=((17968+($_sum_i_i<<2))|0);
      HEAP32[(($904)>>2)]=$903;
      $_sum1_i_i=((($901)+(2))|0);
      $905=((17968+($_sum1_i_i<<2))|0);
      HEAP32[(($905)>>2)]=$903;
      $906=((($i_02_i_i)+(1))|0);
      $907=($906>>>0)<((32)>>>0);
      if ($907) {
       $i_02_i_i=$906;
      } else {
       break;
      }
     }
     $908=((($tsize_244_i)-(40))|0);
     $909=(($tbase_245_i+8)|0);
     $910=$909;
     $911=$910&7;
     $912=($911|0)==0;
     if ($912) {
      $916=0;
     } else {
      $914=(((-$910))|0);
      $915=$914&7;
      $916=$915;
     }

     $917=(($tbase_245_i+$916)|0);
     $918=$917;
     $919=((($908)-($916))|0);
     HEAP32[((17952)>>2)]=$918;
     HEAP32[((17940)>>2)]=$919;
     $920=$919|1;
     $_sum_i12_i=((($916)+(4))|0);
     $921=(($tbase_245_i+$_sum_i12_i)|0);
     $922=$921;
     HEAP32[(($922)>>2)]=$920;
     $_sum2_i_i=((($tsize_244_i)-(36))|0);
     $923=(($tbase_245_i+$_sum2_i_i)|0);
     $924=$923;
     HEAP32[(($924)>>2)]=40;
     $925=((HEAP32[((17872)>>2)])|0);
     HEAP32[((17956)>>2)]=$925;
    } else {
     $sp_073_i=18376;
     while(1) {

      $926=(($sp_073_i)|0);
      $927=((HEAP32[(($926)>>2)])|0);
      $928=(($sp_073_i+4)|0);
      $929=((HEAP32[(($928)>>2)])|0);
      $930=(($927+$929)|0);
      $931=($tbase_245_i|0)==($930|0);
      if ($931) {
       label = 213;
       break;
      }
      $933=(($sp_073_i+8)|0);
      $934=((HEAP32[(($933)>>2)])|0);
      $935=($934|0)==0;
      if ($935) {
       break;
      } else {
       $sp_073_i=$934;
      }
     }
     do {
      if ((label|0) == 213) {
       $936=(($sp_073_i+12)|0);
       $937=((HEAP32[(($936)>>2)])|0);
       $938=$937&8;
       $939=($938|0)==0;
       if (!($939)) {
        break;
       }
       $941=$891;
       $942=($941>>>0)>=($927>>>0);
       $943=($941>>>0)<($tbase_245_i>>>0);
       $or_cond47_i=$942&$943;
       if (!($or_cond47_i)) {
        break;
       }
       $945=((($929)+($tsize_244_i))|0);
       HEAP32[(($928)>>2)]=$945;
       $946=((HEAP32[((17952)>>2)])|0);
       $947=((HEAP32[((17940)>>2)])|0);
       $948=((($947)+($tsize_244_i))|0);
       $949=$946;
       $950=(($946+8)|0);
       $951=$950;
       $952=$951&7;
       $953=($952|0)==0;
       if ($953) {
        $957=0;
       } else {
        $955=(((-$951))|0);
        $956=$955&7;
        $957=$956;
       }

       $958=(($949+$957)|0);
       $959=$958;
       $960=((($948)-($957))|0);
       HEAP32[((17952)>>2)]=$959;
       HEAP32[((17940)>>2)]=$960;
       $961=$960|1;
       $_sum_i16_i=((($957)+(4))|0);
       $962=(($949+$_sum_i16_i)|0);
       $963=$962;
       HEAP32[(($963)>>2)]=$961;
       $_sum2_i17_i=((($948)+(4))|0);
       $964=(($949+$_sum2_i17_i)|0);
       $965=$964;
       HEAP32[(($965)>>2)]=40;
       $966=((HEAP32[((17872)>>2)])|0);
       HEAP32[((17956)>>2)]=$966;
       break L308;
      }
     } while(0);
     $967=((HEAP32[((17944)>>2)])|0);
     $968=($tbase_245_i>>>0)<($967>>>0);
     if ($968) {
      HEAP32[((17944)>>2)]=$tbase_245_i;
     }
     $970=(($tbase_245_i+$tsize_244_i)|0);
     $sp_166_i=18376;
     while(1) {

      $972=(($sp_166_i)|0);
      $973=((HEAP32[(($972)>>2)])|0);
      $974=($973|0)==($970|0);
      if ($974) {
       label = 223;
       break;
      }
      $976=(($sp_166_i+8)|0);
      $977=((HEAP32[(($976)>>2)])|0);
      $978=($977|0)==0;
      if ($978) {
       break;
      } else {
       $sp_166_i=$977;
      }
     }
     do {
      if ((label|0) == 223) {
       $979=(($sp_166_i+12)|0);
       $980=((HEAP32[(($979)>>2)])|0);
       $981=$980&8;
       $982=($981|0)==0;
       if (!($982)) {
        break;
       }
       HEAP32[(($972)>>2)]=$tbase_245_i;
       $984=(($sp_166_i+4)|0);
       $985=((HEAP32[(($984)>>2)])|0);
       $986=((($985)+($tsize_244_i))|0);
       HEAP32[(($984)>>2)]=$986;
       $987=(($tbase_245_i+8)|0);
       $988=$987;
       $989=$988&7;
       $990=($989|0)==0;
       if ($990) {
        $995=0;
       } else {
        $992=(((-$988))|0);
        $993=$992&7;
        $995=$993;
       }

       $996=(($tbase_245_i+$995)|0);
       $_sum102_i=((($tsize_244_i)+(8))|0);
       $997=(($tbase_245_i+$_sum102_i)|0);
       $998=$997;
       $999=$998&7;
       $1000=($999|0)==0;
       if ($1000) {
        $1005=0;
       } else {
        $1002=(((-$998))|0);
        $1003=$1002&7;
        $1005=$1003;
       }

       $_sum103_i=((($1005)+($tsize_244_i))|0);
       $1006=(($tbase_245_i+$_sum103_i)|0);
       $1007=$1006;
       $1008=$1006;
       $1009=$996;
       $1010=((($1008)-($1009))|0);
       $_sum_i19_i=((($995)+($nb_0))|0);
       $1011=(($tbase_245_i+$_sum_i19_i)|0);
       $1012=$1011;
       $1013=((($1010)-($nb_0))|0);
       $1014=$nb_0|3;
       $_sum1_i20_i=((($995)+(4))|0);
       $1015=(($tbase_245_i+$_sum1_i20_i)|0);
       $1016=$1015;
       HEAP32[(($1016)>>2)]=$1014;
       $1017=((HEAP32[((17952)>>2)])|0);
       $1018=($1007|0)==($1017|0);
       L345: do {
        if ($1018) {
         $1020=((HEAP32[((17940)>>2)])|0);
         $1021=((($1020)+($1013))|0);
         HEAP32[((17940)>>2)]=$1021;
         HEAP32[((17952)>>2)]=$1012;
         $1022=$1021|1;
         $_sum46_i_i=((($_sum_i19_i)+(4))|0);
         $1023=(($tbase_245_i+$_sum46_i_i)|0);
         $1024=$1023;
         HEAP32[(($1024)>>2)]=$1022;
        } else {
         $1026=((HEAP32[((17948)>>2)])|0);
         $1027=($1007|0)==($1026|0);
         if ($1027) {
          $1029=((HEAP32[((17936)>>2)])|0);
          $1030=((($1029)+($1013))|0);
          HEAP32[((17936)>>2)]=$1030;
          HEAP32[((17948)>>2)]=$1012;
          $1031=$1030|1;
          $_sum44_i_i=((($_sum_i19_i)+(4))|0);
          $1032=(($tbase_245_i+$_sum44_i_i)|0);
          $1033=$1032;
          HEAP32[(($1033)>>2)]=$1031;
          $_sum45_i_i=((($1030)+($_sum_i19_i))|0);
          $1034=(($tbase_245_i+$_sum45_i_i)|0);
          $1035=$1034;
          HEAP32[(($1035)>>2)]=$1030;
          break;
         }
         $_sum2_i21_i=((($tsize_244_i)+(4))|0);
         $_sum104_i=((($_sum2_i21_i)+($1005))|0);
         $1037=(($tbase_245_i+$_sum104_i)|0);
         $1038=$1037;
         $1039=((HEAP32[(($1038)>>2)])|0);
         $1040=$1039&3;
         $1041=($1040|0)==1;
         if ($1041) {
          $1043=$1039&-8;
          $1044=$1039>>>3;
          $1045=($1039>>>0)<((256)>>>0);
          L353: do {
           if ($1045) {
            $_sum3940_i_i=$1005|8;
            $_sum114_i=((($_sum3940_i_i)+($tsize_244_i))|0);
            $1047=(($tbase_245_i+$_sum114_i)|0);
            $1048=$1047;
            $1049=((HEAP32[(($1048)>>2)])|0);
            $_sum41_i_i=((($tsize_244_i)+(12))|0);
            $_sum115_i=((($_sum41_i_i)+($1005))|0);
            $1050=(($tbase_245_i+$_sum115_i)|0);
            $1051=$1050;
            $1052=((HEAP32[(($1051)>>2)])|0);
            $1053=$1044<<1;
            $1054=((17968+($1053<<2))|0);
            $1055=$1054;
            $1056=($1049|0)==($1055|0);
            do {
             if (!($1056)) {
              $1058=$1049;
              $1059=((HEAP32[((17944)>>2)])|0);
              $1060=($1058>>>0)<($1059>>>0);
              if ($1060) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1062=(($1049+12)|0);
              $1063=((HEAP32[(($1062)>>2)])|0);
              $1064=($1063|0)==($1007|0);
              if ($1064) {
               break;
              }
              _abort(); return ((0)|0);
              return ((0)|0);
             }
            } while(0);
            $1065=($1052|0)==($1049|0);
            if ($1065) {
             $1067=1<<$1044;
             $1068=$1067^-1;
             $1069=((HEAP32[((17928)>>2)])|0);
             $1070=$1069&$1068;
             HEAP32[((17928)>>2)]=$1070;
             break;
            }
            $1072=($1052|0)==($1055|0);
            do {
             if ($1072) {
              $_pre62_i_i=(($1052+8)|0);
              $_pre_phi63_i_i=$_pre62_i_i;
             } else {
              $1074=$1052;
              $1075=((HEAP32[((17944)>>2)])|0);
              $1076=($1074>>>0)<($1075>>>0);
              if ($1076) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1078=(($1052+8)|0);
              $1079=((HEAP32[(($1078)>>2)])|0);
              $1080=($1079|0)==($1007|0);
              if ($1080) {
               $_pre_phi63_i_i=$1078;
               break;
              }
              _abort(); return ((0)|0);
              return ((0)|0);
             }
            } while(0);

            $1081=(($1049+12)|0);
            HEAP32[(($1081)>>2)]=$1052;
            HEAP32[(($_pre_phi63_i_i)>>2)]=$1049;
           } else {
            $1083=$1006;
            $_sum34_i_i=$1005|24;
            $_sum105_i=((($_sum34_i_i)+($tsize_244_i))|0);
            $1084=(($tbase_245_i+$_sum105_i)|0);
            $1085=$1084;
            $1086=((HEAP32[(($1085)>>2)])|0);
            $_sum5_i_i=((($tsize_244_i)+(12))|0);
            $_sum106_i=((($_sum5_i_i)+($1005))|0);
            $1087=(($tbase_245_i+$_sum106_i)|0);
            $1088=$1087;
            $1089=((HEAP32[(($1088)>>2)])|0);
            $1090=($1089|0)==($1083|0);
            do {
             if ($1090) {
              $_sum67_i_i=$1005|16;
              $_sum112_i=((($_sum2_i21_i)+($_sum67_i_i))|0);
              $1108=(($tbase_245_i+$_sum112_i)|0);
              $1109=$1108;
              $1110=((HEAP32[(($1109)>>2)])|0);
              $1111=($1110|0)==0;
              if ($1111) {
               $_sum113_i=((($_sum67_i_i)+($tsize_244_i))|0);
               $1113=(($tbase_245_i+$_sum113_i)|0);
               $1114=$1113;
               $1115=((HEAP32[(($1114)>>2)])|0);
               $1116=($1115|0)==0;
               if ($1116) {
                $R_1_i_i=0;
                break;
               } else {
                $R_0_i_i=$1115;$RP_0_i_i=$1114;
               }
              } else {
               $R_0_i_i=$1110;$RP_0_i_i=$1109;
              }
              while(1) {


               $1117=(($R_0_i_i+20)|0);
               $1118=((HEAP32[(($1117)>>2)])|0);
               $1119=($1118|0)==0;
               if (!($1119)) {
                $R_0_i_i=$1118;$RP_0_i_i=$1117;
                continue;
               }
               $1121=(($R_0_i_i+16)|0);
               $1122=((HEAP32[(($1121)>>2)])|0);
               $1123=($1122|0)==0;
               if ($1123) {
                break;
               } else {
                $R_0_i_i=$1122;$RP_0_i_i=$1121;
               }
              }
              $1125=$RP_0_i_i;
              $1126=((HEAP32[((17944)>>2)])|0);
              $1127=($1125>>>0)<($1126>>>0);
              if ($1127) {
               _abort(); return ((0)|0);
               return ((0)|0);
              } else {
               HEAP32[(($RP_0_i_i)>>2)]=0;
               $R_1_i_i=$R_0_i_i;
               break;
              }
             } else {
              $_sum3637_i_i=$1005|8;
              $_sum107_i=((($_sum3637_i_i)+($tsize_244_i))|0);
              $1092=(($tbase_245_i+$_sum107_i)|0);
              $1093=$1092;
              $1094=((HEAP32[(($1093)>>2)])|0);
              $1095=$1094;
              $1096=((HEAP32[((17944)>>2)])|0);
              $1097=($1095>>>0)<($1096>>>0);
              if ($1097) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1099=(($1094+12)|0);
              $1100=((HEAP32[(($1099)>>2)])|0);
              $1101=($1100|0)==($1083|0);
              if (!($1101)) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1103=(($1089+8)|0);
              $1104=((HEAP32[(($1103)>>2)])|0);
              $1105=($1104|0)==($1083|0);
              if ($1105) {
               HEAP32[(($1099)>>2)]=$1089;
               HEAP32[(($1103)>>2)]=$1094;
               $R_1_i_i=$1089;
               break;
              } else {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
             }
            } while(0);

            $1131=($1086|0)==0;
            if ($1131) {
             break;
            }
            $_sum31_i_i=((($tsize_244_i)+(28))|0);
            $_sum108_i=((($_sum31_i_i)+($1005))|0);
            $1133=(($tbase_245_i+$_sum108_i)|0);
            $1134=$1133;
            $1135=((HEAP32[(($1134)>>2)])|0);
            $1136=((18232+($1135<<2))|0);
            $1137=((HEAP32[(($1136)>>2)])|0);
            $1138=($1083|0)==($1137|0);
            do {
             if ($1138) {
              HEAP32[(($1136)>>2)]=$R_1_i_i;
              $cond_i_i=($R_1_i_i|0)==0;
              if (!($cond_i_i)) {
               break;
              }
              $1140=((HEAP32[(($1134)>>2)])|0);
              $1141=1<<$1140;
              $1142=$1141^-1;
              $1143=((HEAP32[((17932)>>2)])|0);
              $1144=$1143&$1142;
              HEAP32[((17932)>>2)]=$1144;
              break L353;
             } else {
              $1146=$1086;
              $1147=((HEAP32[((17944)>>2)])|0);
              $1148=($1146>>>0)<($1147>>>0);
              if ($1148) {
               _abort(); return ((0)|0);
               return ((0)|0);
              }
              $1150=(($1086+16)|0);
              $1151=((HEAP32[(($1150)>>2)])|0);
              $1152=($1151|0)==($1083|0);
              if ($1152) {
               HEAP32[(($1150)>>2)]=$R_1_i_i;
              } else {
               $1155=(($1086+20)|0);
               HEAP32[(($1155)>>2)]=$R_1_i_i;
              }
              $1158=($R_1_i_i|0)==0;
              if ($1158) {
               break L353;
              }
             }
            } while(0);
            $1160=$R_1_i_i;
            $1161=((HEAP32[((17944)>>2)])|0);
            $1162=($1160>>>0)<($1161>>>0);
            if ($1162) {
             _abort(); return ((0)|0);
             return ((0)|0);
            }
            $1164=(($R_1_i_i+24)|0);
            HEAP32[(($1164)>>2)]=$1086;
            $_sum3233_i_i=$1005|16;
            $_sum109_i=((($_sum3233_i_i)+($tsize_244_i))|0);
            $1165=(($tbase_245_i+$_sum109_i)|0);
            $1166=$1165;
            $1167=((HEAP32[(($1166)>>2)])|0);
            $1168=($1167|0)==0;
            do {
             if (!($1168)) {
              $1170=$1167;
              $1171=((HEAP32[((17944)>>2)])|0);
              $1172=($1170>>>0)<($1171>>>0);
              if ($1172) {
               _abort(); return ((0)|0);
               return ((0)|0);
              } else {
               $1174=(($R_1_i_i+16)|0);
               HEAP32[(($1174)>>2)]=$1167;
               $1175=(($1167+24)|0);
               HEAP32[(($1175)>>2)]=$R_1_i_i;
               break;
              }
             }
            } while(0);
            $_sum110_i=((($_sum2_i21_i)+($_sum3233_i_i))|0);
            $1178=(($tbase_245_i+$_sum110_i)|0);
            $1179=$1178;
            $1180=((HEAP32[(($1179)>>2)])|0);
            $1181=($1180|0)==0;
            if ($1181) {
             break;
            }
            $1183=$1180;
            $1184=((HEAP32[((17944)>>2)])|0);
            $1185=($1183>>>0)<($1184>>>0);
            if ($1185) {
             _abort(); return ((0)|0);
             return ((0)|0);
            } else {
             $1187=(($R_1_i_i+20)|0);
             HEAP32[(($1187)>>2)]=$1180;
             $1188=(($1180+24)|0);
             HEAP32[(($1188)>>2)]=$R_1_i_i;
             break;
            }
           }
          } while(0);
          $_sum9_i_i=$1043|$1005;
          $_sum111_i=((($_sum9_i_i)+($tsize_244_i))|0);
          $1192=(($tbase_245_i+$_sum111_i)|0);
          $1193=$1192;
          $1194=((($1043)+($1013))|0);
          $oldfirst_0_i_i=$1193;$qsize_0_i_i=$1194;
         } else {
          $oldfirst_0_i_i=$1007;$qsize_0_i_i=$1013;
         }


         $1196=(($oldfirst_0_i_i+4)|0);
         $1197=((HEAP32[(($1196)>>2)])|0);
         $1198=$1197&-2;
         HEAP32[(($1196)>>2)]=$1198;
         $1199=$qsize_0_i_i|1;
         $_sum10_i_i=((($_sum_i19_i)+(4))|0);
         $1200=(($tbase_245_i+$_sum10_i_i)|0);
         $1201=$1200;
         HEAP32[(($1201)>>2)]=$1199;
         $_sum11_i_i=((($qsize_0_i_i)+($_sum_i19_i))|0);
         $1202=(($tbase_245_i+$_sum11_i_i)|0);
         $1203=$1202;
         HEAP32[(($1203)>>2)]=$qsize_0_i_i;
         $1204=$qsize_0_i_i>>>3;
         $1205=($qsize_0_i_i>>>0)<((256)>>>0);
         if ($1205) {
          $1207=$1204<<1;
          $1208=((17968+($1207<<2))|0);
          $1209=$1208;
          $1210=((HEAP32[((17928)>>2)])|0);
          $1211=1<<$1204;
          $1212=$1210&$1211;
          $1213=($1212|0)==0;
          do {
           if ($1213) {
            $1215=$1210|$1211;
            HEAP32[((17928)>>2)]=$1215;
            $_sum27_pre_i_i=((($1207)+(2))|0);
            $_pre_i22_i=((17968+($_sum27_pre_i_i<<2))|0);
            $F4_0_i_i=$1209;$_pre_phi_i23_i=$_pre_i22_i;
           } else {
            $_sum30_i_i=((($1207)+(2))|0);
            $1217=((17968+($_sum30_i_i<<2))|0);
            $1218=((HEAP32[(($1217)>>2)])|0);
            $1219=$1218;
            $1220=((HEAP32[((17944)>>2)])|0);
            $1221=($1219>>>0)<($1220>>>0);
            if (!($1221)) {
             $F4_0_i_i=$1218;$_pre_phi_i23_i=$1217;
             break;
            }
            _abort(); return ((0)|0);
            return ((0)|0);
           }
          } while(0);


          HEAP32[(($_pre_phi_i23_i)>>2)]=$1012;
          $1224=(($F4_0_i_i+12)|0);
          HEAP32[(($1224)>>2)]=$1012;
          $_sum28_i_i=((($_sum_i19_i)+(8))|0);
          $1225=(($tbase_245_i+$_sum28_i_i)|0);
          $1226=$1225;
          HEAP32[(($1226)>>2)]=$F4_0_i_i;
          $_sum29_i_i=((($_sum_i19_i)+(12))|0);
          $1227=(($tbase_245_i+$_sum29_i_i)|0);
          $1228=$1227;
          HEAP32[(($1228)>>2)]=$1209;
          break;
         }
         $1230=$1011;
         $1231=$qsize_0_i_i>>>8;
         $1232=($1231|0)==0;
         do {
          if ($1232) {
           $I7_0_i_i=0;
          } else {
           $1234=($qsize_0_i_i>>>0)>((16777215)>>>0);
           if ($1234) {
            $I7_0_i_i=31;
            break;
           }
           $1236=((($1231)+(1048320))|0);
           $1237=$1236>>>16;
           $1238=$1237&8;
           $1239=$1231<<$1238;
           $1240=((($1239)+(520192))|0);
           $1241=$1240>>>16;
           $1242=$1241&4;
           $1243=$1242|$1238;
           $1244=$1239<<$1242;
           $1245=((($1244)+(245760))|0);
           $1246=$1245>>>16;
           $1247=$1246&2;
           $1248=$1243|$1247;
           $1249=(((14)-($1248))|0);
           $1250=$1244<<$1247;
           $1251=$1250>>>15;
           $1252=((($1249)+($1251))|0);
           $1253=$1252<<1;
           $1254=((($1252)+(7))|0);
           $1255=$qsize_0_i_i>>>($1254>>>0);
           $1256=$1255&1;
           $1257=$1256|$1253;
           $I7_0_i_i=$1257;
          }
         } while(0);

         $1259=((18232+($I7_0_i_i<<2))|0);
         $_sum12_i24_i=((($_sum_i19_i)+(28))|0);
         $1260=(($tbase_245_i+$_sum12_i24_i)|0);
         $1261=$1260;
         HEAP32[(($1261)>>2)]=$I7_0_i_i;
         $_sum13_i_i=((($_sum_i19_i)+(16))|0);
         $1262=(($tbase_245_i+$_sum13_i_i)|0);
         $_sum14_i_i=((($_sum_i19_i)+(20))|0);
         $1263=(($tbase_245_i+$_sum14_i_i)|0);
         $1264=$1263;
         HEAP32[(($1264)>>2)]=0;
         $1265=$1262;
         HEAP32[(($1265)>>2)]=0;
         $1266=((HEAP32[((17932)>>2)])|0);
         $1267=1<<$I7_0_i_i;
         $1268=$1266&$1267;
         $1269=($1268|0)==0;
         if ($1269) {
          $1271=$1266|$1267;
          HEAP32[((17932)>>2)]=$1271;
          HEAP32[(($1259)>>2)]=$1230;
          $1272=$1259;
          $_sum15_i_i=((($_sum_i19_i)+(24))|0);
          $1273=(($tbase_245_i+$_sum15_i_i)|0);
          $1274=$1273;
          HEAP32[(($1274)>>2)]=$1272;
          $_sum16_i_i=((($_sum_i19_i)+(12))|0);
          $1275=(($tbase_245_i+$_sum16_i_i)|0);
          $1276=$1275;
          HEAP32[(($1276)>>2)]=$1230;
          $_sum17_i_i=((($_sum_i19_i)+(8))|0);
          $1277=(($tbase_245_i+$_sum17_i_i)|0);
          $1278=$1277;
          HEAP32[(($1278)>>2)]=$1230;
          break;
         }
         $1280=((HEAP32[(($1259)>>2)])|0);
         $1281=($I7_0_i_i|0)==31;
         if ($1281) {
          $1286=0;
         } else {
          $1283=$I7_0_i_i>>>1;
          $1284=(((25)-($1283))|0);
          $1286=$1284;
         }

         $1287=(($1280+4)|0);
         $1288=((HEAP32[(($1287)>>2)])|0);
         $1289=$1288&-8;
         $1290=($1289|0)==($qsize_0_i_i|0);
         L442: do {
          if ($1290) {
           $T_0_lcssa_i26_i=$1280;
          } else {
           $1291=$qsize_0_i_i<<$1286;
           $T_056_i_i=$1280;$K8_057_i_i=$1291;
           while(1) {


            $1299=$K8_057_i_i>>>31;
            $1300=(($T_056_i_i+16+($1299<<2))|0);
            $1301=((HEAP32[(($1300)>>2)])|0);
            $1302=($1301|0)==0;
            if ($1302) {
             break;
            }
            $1293=$K8_057_i_i<<1;
            $1294=(($1301+4)|0);
            $1295=((HEAP32[(($1294)>>2)])|0);
            $1296=$1295&-8;
            $1297=($1296|0)==($qsize_0_i_i|0);
            if ($1297) {
             $T_0_lcssa_i26_i=$1301;
             break L442;
            } else {
             $T_056_i_i=$1301;$K8_057_i_i=$1293;
            }
           }
           $1304=$1300;
           $1305=((HEAP32[((17944)>>2)])|0);
           $1306=($1304>>>0)<($1305>>>0);
           if ($1306) {
            _abort(); return ((0)|0);
            return ((0)|0);
           } else {
            HEAP32[(($1300)>>2)]=$1230;
            $_sum24_i_i=((($_sum_i19_i)+(24))|0);
            $1308=(($tbase_245_i+$_sum24_i_i)|0);
            $1309=$1308;
            HEAP32[(($1309)>>2)]=$T_056_i_i;
            $_sum25_i_i=((($_sum_i19_i)+(12))|0);
            $1310=(($tbase_245_i+$_sum25_i_i)|0);
            $1311=$1310;
            HEAP32[(($1311)>>2)]=$1230;
            $_sum26_i_i=((($_sum_i19_i)+(8))|0);
            $1312=(($tbase_245_i+$_sum26_i_i)|0);
            $1313=$1312;
            HEAP32[(($1313)>>2)]=$1230;
            break L345;
           }
          }
         } while(0);

         $1315=(($T_0_lcssa_i26_i+8)|0);
         $1316=((HEAP32[(($1315)>>2)])|0);
         $1317=$T_0_lcssa_i26_i;
         $1318=((HEAP32[((17944)>>2)])|0);
         $1319=($1317>>>0)>=($1318>>>0);
         $1320=$1316;
         $1321=($1320>>>0)>=($1318>>>0);
         $or_cond_i27_i=$1319&$1321;
         if ($or_cond_i27_i) {
          $1323=(($1316+12)|0);
          HEAP32[(($1323)>>2)]=$1230;
          HEAP32[(($1315)>>2)]=$1230;
          $_sum21_i_i=((($_sum_i19_i)+(8))|0);
          $1324=(($tbase_245_i+$_sum21_i_i)|0);
          $1325=$1324;
          HEAP32[(($1325)>>2)]=$1316;
          $_sum22_i_i=((($_sum_i19_i)+(12))|0);
          $1326=(($tbase_245_i+$_sum22_i_i)|0);
          $1327=$1326;
          HEAP32[(($1327)>>2)]=$T_0_lcssa_i26_i;
          $_sum23_i_i=((($_sum_i19_i)+(24))|0);
          $1328=(($tbase_245_i+$_sum23_i_i)|0);
          $1329=$1328;
          HEAP32[(($1329)>>2)]=0;
          break;
         } else {
          _abort(); return ((0)|0);
          return ((0)|0);
         }
        }
       } while(0);
       $_sum1819_i_i=$995|8;
       $1330=(($tbase_245_i+$_sum1819_i_i)|0);
       $mem_0=$1330;

       return (($mem_0)|0);
      }
     } while(0);
     $1331=$891;
     $sp_0_i_i_i=18376;
     while(1) {

      $1333=(($sp_0_i_i_i)|0);
      $1334=((HEAP32[(($1333)>>2)])|0);
      $1335=($1334>>>0)>($1331>>>0);
      if (!($1335)) {
       $1337=(($sp_0_i_i_i+4)|0);
       $1338=((HEAP32[(($1337)>>2)])|0);
       $1339=(($1334+$1338)|0);
       $1340=($1339>>>0)>($1331>>>0);
       if ($1340) {
        break;
       }
      }
      $1342=(($sp_0_i_i_i+8)|0);
      $1343=((HEAP32[(($1342)>>2)])|0);
      $sp_0_i_i_i=$1343;
     }
     $_sum_i13_i=((($1338)-(47))|0);
     $_sum1_i14_i=((($1338)-(39))|0);
     $1344=(($1334+$_sum1_i14_i)|0);
     $1345=$1344;
     $1346=$1345&7;
     $1347=($1346|0)==0;
     if ($1347) {
      $1352=0;
     } else {
      $1349=(((-$1345))|0);
      $1350=$1349&7;
      $1352=$1350;
     }

     $_sum2_i15_i=((($_sum_i13_i)+($1352))|0);
     $1353=(($1334+$_sum2_i15_i)|0);
     $1354=(($891+16)|0);
     $1355=$1354;
     $1356=($1353>>>0)<($1355>>>0);
     $1357=($1356?$1331:$1353);
     $1358=(($1357+8)|0);
     $1359=$1358;
     $1360=((($tsize_244_i)-(40))|0);
     $1361=(($tbase_245_i+8)|0);
     $1362=$1361;
     $1363=$1362&7;
     $1364=($1363|0)==0;
     if ($1364) {
      $1368=0;
     } else {
      $1366=(((-$1362))|0);
      $1367=$1366&7;
      $1368=$1367;
     }

     $1369=(($tbase_245_i+$1368)|0);
     $1370=$1369;
     $1371=((($1360)-($1368))|0);
     HEAP32[((17952)>>2)]=$1370;
     HEAP32[((17940)>>2)]=$1371;
     $1372=$1371|1;
     $_sum_i_i_i=((($1368)+(4))|0);
     $1373=(($tbase_245_i+$_sum_i_i_i)|0);
     $1374=$1373;
     HEAP32[(($1374)>>2)]=$1372;
     $_sum2_i_i_i=((($tsize_244_i)-(36))|0);
     $1375=(($tbase_245_i+$_sum2_i_i_i)|0);
     $1376=$1375;
     HEAP32[(($1376)>>2)]=40;
     $1377=((HEAP32[((17872)>>2)])|0);
     HEAP32[((17956)>>2)]=$1377;
     $1378=(($1357+4)|0);
     $1379=$1378;
     HEAP32[(($1379)>>2)]=27;
     HEAP32[(($1358)>>2)]=((HEAP32[((18376)>>2)])|0);HEAP32[((($1358)+(4))>>2)]=((HEAP32[((18380)>>2)])|0);HEAP32[((($1358)+(8))>>2)]=((HEAP32[((18384)>>2)])|0);HEAP32[((($1358)+(12))>>2)]=((HEAP32[((18388)>>2)])|0);
     HEAP32[((18376)>>2)]=$tbase_245_i;
     HEAP32[((18380)>>2)]=$tsize_244_i;
     HEAP32[((18388)>>2)]=0;
     HEAP32[((18384)>>2)]=$1359;
     $1380=(($1357+28)|0);
     $1381=$1380;
     HEAP32[(($1381)>>2)]=7;
     $1382=(($1357+32)|0);
     $1383=($1382>>>0)<($1339>>>0);
     if ($1383) {
      $1384=$1381;
      while(1) {

       $1385=(($1384+4)|0);
       HEAP32[(($1385)>>2)]=7;
       $1386=(($1384+8)|0);
       $1387=$1386;
       $1388=($1387>>>0)<($1339>>>0);
       if ($1388) {
        $1384=$1385;
       } else {
        break;
       }
      }
     }
     $1389=($1357|0)==($1331|0);
     if ($1389) {
      break;
     }
     $1391=$1357;
     $1392=$891;
     $1393=((($1391)-($1392))|0);
     $1394=(($1331+$1393)|0);
     $_sum3_i_i=((($1393)+(4))|0);
     $1395=(($1331+$_sum3_i_i)|0);
     $1396=$1395;
     $1397=((HEAP32[(($1396)>>2)])|0);
     $1398=$1397&-2;
     HEAP32[(($1396)>>2)]=$1398;
     $1399=$1393|1;
     $1400=(($891+4)|0);
     HEAP32[(($1400)>>2)]=$1399;
     $1401=$1394;
     HEAP32[(($1401)>>2)]=$1393;
     $1402=$1393>>>3;
     $1403=($1393>>>0)<((256)>>>0);
     if ($1403) {
      $1405=$1402<<1;
      $1406=((17968+($1405<<2))|0);
      $1407=$1406;
      $1408=((HEAP32[((17928)>>2)])|0);
      $1409=1<<$1402;
      $1410=$1408&$1409;
      $1411=($1410|0)==0;
      do {
       if ($1411) {
        $1413=$1408|$1409;
        HEAP32[((17928)>>2)]=$1413;
        $_sum11_pre_i_i=((($1405)+(2))|0);
        $_pre_i_i=((17968+($_sum11_pre_i_i<<2))|0);
        $F_0_i_i=$1407;$_pre_phi_i_i=$_pre_i_i;
       } else {
        $_sum12_i_i=((($1405)+(2))|0);
        $1415=((17968+($_sum12_i_i<<2))|0);
        $1416=((HEAP32[(($1415)>>2)])|0);
        $1417=$1416;
        $1418=((HEAP32[((17944)>>2)])|0);
        $1419=($1417>>>0)<($1418>>>0);
        if (!($1419)) {
         $F_0_i_i=$1416;$_pre_phi_i_i=$1415;
         break;
        }
        _abort(); return ((0)|0);
        return ((0)|0);
       }
      } while(0);


      HEAP32[(($_pre_phi_i_i)>>2)]=$891;
      $1422=(($F_0_i_i+12)|0);
      HEAP32[(($1422)>>2)]=$891;
      $1423=(($891+8)|0);
      HEAP32[(($1423)>>2)]=$F_0_i_i;
      $1424=(($891+12)|0);
      HEAP32[(($1424)>>2)]=$1407;
      break;
     }
     $1426=$891;
     $1427=$1393>>>8;
     $1428=($1427|0)==0;
     do {
      if ($1428) {
       $I1_0_i_i=0;
      } else {
       $1430=($1393>>>0)>((16777215)>>>0);
       if ($1430) {
        $I1_0_i_i=31;
        break;
       }
       $1432=((($1427)+(1048320))|0);
       $1433=$1432>>>16;
       $1434=$1433&8;
       $1435=$1427<<$1434;
       $1436=((($1435)+(520192))|0);
       $1437=$1436>>>16;
       $1438=$1437&4;
       $1439=$1438|$1434;
       $1440=$1435<<$1438;
       $1441=((($1440)+(245760))|0);
       $1442=$1441>>>16;
       $1443=$1442&2;
       $1444=$1439|$1443;
       $1445=(((14)-($1444))|0);
       $1446=$1440<<$1443;
       $1447=$1446>>>15;
       $1448=((($1445)+($1447))|0);
       $1449=$1448<<1;
       $1450=((($1448)+(7))|0);
       $1451=$1393>>>($1450>>>0);
       $1452=$1451&1;
       $1453=$1452|$1449;
       $I1_0_i_i=$1453;
      }
     } while(0);

     $1455=((18232+($I1_0_i_i<<2))|0);
     $1456=(($891+28)|0);
     $I1_0_c_i_i=$I1_0_i_i;
     HEAP32[(($1456)>>2)]=$I1_0_c_i_i;
     $1457=(($891+20)|0);
     HEAP32[(($1457)>>2)]=0;
     $1458=(($891+16)|0);
     HEAP32[(($1458)>>2)]=0;
     $1459=((HEAP32[((17932)>>2)])|0);
     $1460=1<<$I1_0_i_i;
     $1461=$1459&$1460;
     $1462=($1461|0)==0;
     if ($1462) {
      $1464=$1459|$1460;
      HEAP32[((17932)>>2)]=$1464;
      HEAP32[(($1455)>>2)]=$1426;
      $1465=(($891+24)|0);
      $_c_i_i=$1455;
      HEAP32[(($1465)>>2)]=$_c_i_i;
      $1466=(($891+12)|0);
      HEAP32[(($1466)>>2)]=$891;
      $1467=(($891+8)|0);
      HEAP32[(($1467)>>2)]=$891;
      break;
     }
     $1469=((HEAP32[(($1455)>>2)])|0);
     $1470=($I1_0_i_i|0)==31;
     if ($1470) {
      $1475=0;
     } else {
      $1472=$I1_0_i_i>>>1;
      $1473=(((25)-($1472))|0);
      $1475=$1473;
     }

     $1476=(($1469+4)|0);
     $1477=((HEAP32[(($1476)>>2)])|0);
     $1478=$1477&-8;
     $1479=($1478|0)==($1393|0);
     L493: do {
      if ($1479) {
       $T_0_lcssa_i_i=$1469;
      } else {
       $1480=$1393<<$1475;
       $T_015_i_i=$1469;$K2_016_i_i=$1480;
       while(1) {


        $1488=$K2_016_i_i>>>31;
        $1489=(($T_015_i_i+16+($1488<<2))|0);
        $1490=((HEAP32[(($1489)>>2)])|0);
        $1491=($1490|0)==0;
        if ($1491) {
         break;
        }
        $1482=$K2_016_i_i<<1;
        $1483=(($1490+4)|0);
        $1484=((HEAP32[(($1483)>>2)])|0);
        $1485=$1484&-8;
        $1486=($1485|0)==($1393|0);
        if ($1486) {
         $T_0_lcssa_i_i=$1490;
         break L493;
        } else {
         $T_015_i_i=$1490;$K2_016_i_i=$1482;
        }
       }
       $1493=$1489;
       $1494=((HEAP32[((17944)>>2)])|0);
       $1495=($1493>>>0)<($1494>>>0);
       if ($1495) {
        _abort(); return ((0)|0);
        return ((0)|0);
       } else {
        HEAP32[(($1489)>>2)]=$1426;
        $1497=(($891+24)|0);
        $T_0_c8_i_i=$T_015_i_i;
        HEAP32[(($1497)>>2)]=$T_0_c8_i_i;
        $1498=(($891+12)|0);
        HEAP32[(($1498)>>2)]=$891;
        $1499=(($891+8)|0);
        HEAP32[(($1499)>>2)]=$891;
        break L308;
       }
      }
     } while(0);

     $1501=(($T_0_lcssa_i_i+8)|0);
     $1502=((HEAP32[(($1501)>>2)])|0);
     $1503=$T_0_lcssa_i_i;
     $1504=((HEAP32[((17944)>>2)])|0);
     $1505=($1503>>>0)>=($1504>>>0);
     $1506=$1502;
     $1507=($1506>>>0)>=($1504>>>0);
     $or_cond_i_i=$1505&$1507;
     if ($or_cond_i_i) {
      $1509=(($1502+12)|0);
      HEAP32[(($1509)>>2)]=$1426;
      HEAP32[(($1501)>>2)]=$1426;
      $1510=(($891+8)|0);
      $_c7_i_i=$1502;
      HEAP32[(($1510)>>2)]=$_c7_i_i;
      $1511=(($891+12)|0);
      $T_0_c_i_i=$T_0_lcssa_i_i;
      HEAP32[(($1511)>>2)]=$T_0_c_i_i;
      $1512=(($891+24)|0);
      HEAP32[(($1512)>>2)]=0;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);
   $1513=((HEAP32[((17940)>>2)])|0);
   $1514=($1513>>>0)>($nb_0>>>0);
   if (!($1514)) {
    break;
   }
   $1516=((($1513)-($nb_0))|0);
   HEAP32[((17940)>>2)]=$1516;
   $1517=((HEAP32[((17952)>>2)])|0);
   $1518=$1517;
   $1519=(($1518+$nb_0)|0);
   $1520=$1519;
   HEAP32[((17952)>>2)]=$1520;
   $1521=$1516|1;
   $_sum_i34=((($nb_0)+(4))|0);
   $1522=(($1518+$_sum_i34)|0);
   $1523=$1522;
   HEAP32[(($1523)>>2)]=$1521;
   $1524=$nb_0|3;
   $1525=(($1517+4)|0);
   HEAP32[(($1525)>>2)]=$1524;
   $1526=(($1517+8)|0);
   $1527=$1526;
   $mem_0=$1527;

   return (($mem_0)|0);
  }
 } while(0);
 $1528=((___errno_location())|0);
 HEAP32[(($1528)>>2)]=12;
 $mem_0=0;

 return (($mem_0)|0);
}


function _free($mem){
 $mem=($mem)|0;
 var $1=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$_sum=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$_sum3=0;
 var $24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$_sum47=0,$35=0,$36=0,$37=0,$_sum48=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$59=0,$_pre82=0,$61=0,$62=0,$64=0,$65=0,$66=0,$_pre_phi83=0,$67=0,$69=0;
 var $_sum37=0,$70=0,$71=0,$72=0,$_sum38=0,$73=0,$74=0,$75=0,$76=0,$_sum44=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$88=0,$89=0;
 var $90=0,$_sum40=0,$93=0,$94=0,$95=0,$96=0,$_sum39=0,$98=0,$99=0,$100=0,$101=0,$RP_0=0,$R_0=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$110=0;
 var $111=0,$R_1=0,$115=0,$_sum41=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$cond=0,$124=0,$125=0,$126=0,$127=0,$128=0,$130=0,$131=0,$132=0,$134=0;
 var $135=0,$136=0,$139=0,$142=0,$144=0,$145=0,$146=0,$148=0,$_sum42=0,$149=0,$150=0,$151=0,$152=0,$154=0,$155=0,$156=0,$158=0,$159=0,$_sum43=0,$162=0;
 var $163=0,$164=0,$165=0,$167=0,$168=0,$169=0,$171=0,$172=0,$_sum4=0,$176=0,$177=0,$178=0,$179=0,$180=0,$182=0,$183=0,$184=0,$_sum35=0,$185=0,$186=0;
 var $187=0,$psize_0=0,$p_0=0,$189=0,$190=0,$_sum34=0,$192=0,$193=0,$194=0,$195=0,$phitmp=0,$197=0,$198=0,$200=0,$201=0,$203=0,$204=0,$205=0,$206=0,$207=0;
 var $208=0,$211=0,$212=0,$214=0,$215=0,$216=0,$217=0,$218=0,$219=0,$221=0,$222=0,$223=0,$224=0,$226=0,$227=0,$228=0,$_sum2829=0,$229=0,$230=0,$231=0;
 var $232=0,$233=0,$234=0,$235=0,$237=0,$238=0,$239=0,$241=0,$242=0,$243=0,$244=0,$246=0,$247=0,$248=0,$249=0,$251=0,$_pre80=0,$253=0,$254=0,$255=0;
 var $257=0,$258=0,$259=0,$_pre_phi81=0,$260=0,$262=0,$_sum6=0,$263=0,$264=0,$265=0,$_sum78=0,$266=0,$267=0,$268=0,$269=0,$271=0,$272=0,$273=0,$274=0,$275=0;
 var $276=0,$278=0,$279=0,$280=0,$282=0,$283=0,$284=0,$_sum10=0,$287=0,$288=0,$289=0,$290=0,$_sum9=0,$292=0,$293=0,$294=0,$295=0,$RP9_0=0,$R7_0=0,$296=0;
 var $297=0,$298=0,$300=0,$301=0,$302=0,$304=0,$305=0,$306=0,$R7_1=0,$310=0,$_sum21=0,$312=0,$313=0,$314=0,$315=0,$316=0,$317=0,$cond69=0,$319=0,$320=0;
 var $321=0,$322=0,$323=0,$325=0,$326=0,$327=0,$329=0,$330=0,$331=0,$334=0,$337=0,$339=0,$340=0,$341=0,$343=0,$_sum22=0,$344=0,$345=0,$346=0,$347=0;
 var $349=0,$350=0,$351=0,$353=0,$354=0,$_sum23=0,$357=0,$358=0,$359=0,$360=0,$362=0,$363=0,$364=0,$366=0,$367=0,$371=0,$372=0,$373=0,$374=0,$375=0;
 var $376=0,$379=0,$380=0,$381=0,$382=0,$383=0,$psize_1=0,$385=0,$386=0,$388=0,$389=0,$390=0,$391=0,$392=0,$393=0,$394=0,$396=0,$_sum19_pre=0,$_pre=0,$_sum20=0;
 var $398=0,$399=0,$400=0,$401=0,$402=0,$_pre_phi=0,$F16_0=0,$405=0,$406=0,$407=0,$409=0,$410=0,$411=0,$413=0,$415=0,$416=0,$417=0,$418=0,$419=0,$420=0;
 var $421=0,$422=0,$423=0,$424=0,$425=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$I18_0=0,$438=0,$439=0,$I18_0_c=0;
 var $440=0,$441=0,$442=0,$443=0,$444=0,$445=0,$447=0,$448=0,$_c=0,$449=0,$450=0,$452=0,$453=0,$455=0,$456=0,$458=0,$459=0,$460=0,$461=0,$462=0;
 var $463=0,$465=0,$466=0,$467=0,$468=0,$469=0,$K19_073=0,$T_072=0,$471=0,$472=0,$473=0,$474=0,$476=0,$477=0,$478=0,$480=0,$T_0_c16=0,$481=0,$482=0,$T_0_lcssa=0;
 var $484=0,$485=0,$486=0,$487=0,$488=0,$489=0,$490=0,$or_cond=0,$492=0,$493=0,$_c15=0,$494=0,$T_0_c=0,$495=0,$497=0,$498=0,$499=0,$sp_0_in_i=0,$sp_0_i=0,$500=0;
 var $501=0,label=0;

 $1=($mem|0)==0;
 if ($1) {
  return;
 }
 $3=((($mem)-(8))|0);
 $4=$3;
 $5=((HEAP32[((17944)>>2)])|0);
 $6=($3>>>0)<($5>>>0);
 if ($6) {
  _abort();

 }
 $8=((($mem)-(4))|0);
 $9=$8;
 $10=((HEAP32[(($9)>>2)])|0);
 $11=$10&3;
 $12=($11|0)==1;
 if ($12) {
  _abort();

 }
 $14=$10&-8;
 $_sum=((($14)-(8))|0);
 $15=(($mem+$_sum)|0);
 $16=$15;
 $17=$10&1;
 $18=($17|0)==0;
 L10: do {
  if ($18) {
   $20=$3;
   $21=((HEAP32[(($20)>>2)])|0);
   $22=($11|0)==0;
   if ($22) {
    return;
   }
   $_sum3=(((-8)-($21))|0);
   $24=(($mem+$_sum3)|0);
   $25=$24;
   $26=((($21)+($14))|0);
   $27=($24>>>0)<($5>>>0);
   if ($27) {
    _abort();

   }
   $29=((HEAP32[((17948)>>2)])|0);
   $30=($25|0)==($29|0);
   if ($30) {
    $_sum4=((($14)-(4))|0);
    $176=(($mem+$_sum4)|0);
    $177=$176;
    $178=((HEAP32[(($177)>>2)])|0);
    $179=$178&3;
    $180=($179|0)==3;
    if (!($180)) {
     $p_0=$25;$psize_0=$26;
     break;
    }
    HEAP32[((17936)>>2)]=$26;
    $182=((HEAP32[(($177)>>2)])|0);
    $183=$182&-2;
    HEAP32[(($177)>>2)]=$183;
    $184=$26|1;
    $_sum35=((($_sum3)+(4))|0);
    $185=(($mem+$_sum35)|0);
    $186=$185;
    HEAP32[(($186)>>2)]=$184;
    $187=$15;
    HEAP32[(($187)>>2)]=$26;
    return;
   }
   $32=$21>>>3;
   $33=($21>>>0)<((256)>>>0);
   if ($33) {
    $_sum47=((($_sum3)+(8))|0);
    $35=(($mem+$_sum47)|0);
    $36=$35;
    $37=((HEAP32[(($36)>>2)])|0);
    $_sum48=((($_sum3)+(12))|0);
    $38=(($mem+$_sum48)|0);
    $39=$38;
    $40=((HEAP32[(($39)>>2)])|0);
    $41=$32<<1;
    $42=((17968+($41<<2))|0);
    $43=$42;
    $44=($37|0)==($43|0);
    do {
     if (!($44)) {
      $46=$37;
      $47=($46>>>0)<($5>>>0);
      if ($47) {
       _abort();

      }
      $49=(($37+12)|0);
      $50=((HEAP32[(($49)>>2)])|0);
      $51=($50|0)==($25|0);
      if ($51) {
       break;
      }
      _abort();

     }
    } while(0);
    $52=($40|0)==($37|0);
    if ($52) {
     $54=1<<$32;
     $55=$54^-1;
     $56=((HEAP32[((17928)>>2)])|0);
     $57=$56&$55;
     HEAP32[((17928)>>2)]=$57;
     $p_0=$25;$psize_0=$26;
     break;
    }
    $59=($40|0)==($43|0);
    do {
     if ($59) {
      $_pre82=(($40+8)|0);
      $_pre_phi83=$_pre82;
     } else {
      $61=$40;
      $62=($61>>>0)<($5>>>0);
      if ($62) {
       _abort();

      }
      $64=(($40+8)|0);
      $65=((HEAP32[(($64)>>2)])|0);
      $66=($65|0)==($25|0);
      if ($66) {
       $_pre_phi83=$64;
       break;
      }
      _abort();

     }
    } while(0);

    $67=(($37+12)|0);
    HEAP32[(($67)>>2)]=$40;
    HEAP32[(($_pre_phi83)>>2)]=$37;
    $p_0=$25;$psize_0=$26;
    break;
   }
   $69=$24;
   $_sum37=((($_sum3)+(24))|0);
   $70=(($mem+$_sum37)|0);
   $71=$70;
   $72=((HEAP32[(($71)>>2)])|0);
   $_sum38=((($_sum3)+(12))|0);
   $73=(($mem+$_sum38)|0);
   $74=$73;
   $75=((HEAP32[(($74)>>2)])|0);
   $76=($75|0)==($69|0);
   do {
    if ($76) {
     $_sum40=((($_sum3)+(20))|0);
     $93=(($mem+$_sum40)|0);
     $94=$93;
     $95=((HEAP32[(($94)>>2)])|0);
     $96=($95|0)==0;
     if ($96) {
      $_sum39=((($_sum3)+(16))|0);
      $98=(($mem+$_sum39)|0);
      $99=$98;
      $100=((HEAP32[(($99)>>2)])|0);
      $101=($100|0)==0;
      if ($101) {
       $R_1=0;
       break;
      } else {
       $R_0=$100;$RP_0=$99;
      }
     } else {
      $R_0=$95;$RP_0=$94;
     }
     while(1) {


      $102=(($R_0+20)|0);
      $103=((HEAP32[(($102)>>2)])|0);
      $104=($103|0)==0;
      if (!($104)) {
       $R_0=$103;$RP_0=$102;
       continue;
      }
      $106=(($R_0+16)|0);
      $107=((HEAP32[(($106)>>2)])|0);
      $108=($107|0)==0;
      if ($108) {
       break;
      } else {
       $R_0=$107;$RP_0=$106;
      }
     }
     $110=$RP_0;
     $111=($110>>>0)<($5>>>0);
     if ($111) {
      _abort();

     } else {
      HEAP32[(($RP_0)>>2)]=0;
      $R_1=$R_0;
      break;
     }
    } else {
     $_sum44=((($_sum3)+(8))|0);
     $78=(($mem+$_sum44)|0);
     $79=$78;
     $80=((HEAP32[(($79)>>2)])|0);
     $81=$80;
     $82=($81>>>0)<($5>>>0);
     if ($82) {
      _abort();

     }
     $84=(($80+12)|0);
     $85=((HEAP32[(($84)>>2)])|0);
     $86=($85|0)==($69|0);
     if (!($86)) {
      _abort();

     }
     $88=(($75+8)|0);
     $89=((HEAP32[(($88)>>2)])|0);
     $90=($89|0)==($69|0);
     if ($90) {
      HEAP32[(($84)>>2)]=$75;
      HEAP32[(($88)>>2)]=$80;
      $R_1=$75;
      break;
     } else {
      _abort();

     }
    }
   } while(0);

   $115=($72|0)==0;
   if ($115) {
    $p_0=$25;$psize_0=$26;
    break;
   }
   $_sum41=((($_sum3)+(28))|0);
   $117=(($mem+$_sum41)|0);
   $118=$117;
   $119=((HEAP32[(($118)>>2)])|0);
   $120=((18232+($119<<2))|0);
   $121=((HEAP32[(($120)>>2)])|0);
   $122=($69|0)==($121|0);
   do {
    if ($122) {
     HEAP32[(($120)>>2)]=$R_1;
     $cond=($R_1|0)==0;
     if (!($cond)) {
      break;
     }
     $124=((HEAP32[(($118)>>2)])|0);
     $125=1<<$124;
     $126=$125^-1;
     $127=((HEAP32[((17932)>>2)])|0);
     $128=$127&$126;
     HEAP32[((17932)>>2)]=$128;
     $p_0=$25;$psize_0=$26;
     break L10;
    } else {
     $130=$72;
     $131=((HEAP32[((17944)>>2)])|0);
     $132=($130>>>0)<($131>>>0);
     if ($132) {
      _abort();

     }
     $134=(($72+16)|0);
     $135=((HEAP32[(($134)>>2)])|0);
     $136=($135|0)==($69|0);
     if ($136) {
      HEAP32[(($134)>>2)]=$R_1;
     } else {
      $139=(($72+20)|0);
      HEAP32[(($139)>>2)]=$R_1;
     }
     $142=($R_1|0)==0;
     if ($142) {
      $p_0=$25;$psize_0=$26;
      break L10;
     }
    }
   } while(0);
   $144=$R_1;
   $145=((HEAP32[((17944)>>2)])|0);
   $146=($144>>>0)<($145>>>0);
   if ($146) {
    _abort();

   }
   $148=(($R_1+24)|0);
   HEAP32[(($148)>>2)]=$72;
   $_sum42=((($_sum3)+(16))|0);
   $149=(($mem+$_sum42)|0);
   $150=$149;
   $151=((HEAP32[(($150)>>2)])|0);
   $152=($151|0)==0;
   do {
    if (!($152)) {
     $154=$151;
     $155=((HEAP32[((17944)>>2)])|0);
     $156=($154>>>0)<($155>>>0);
     if ($156) {
      _abort();

     } else {
      $158=(($R_1+16)|0);
      HEAP32[(($158)>>2)]=$151;
      $159=(($151+24)|0);
      HEAP32[(($159)>>2)]=$R_1;
      break;
     }
    }
   } while(0);
   $_sum43=((($_sum3)+(20))|0);
   $162=(($mem+$_sum43)|0);
   $163=$162;
   $164=((HEAP32[(($163)>>2)])|0);
   $165=($164|0)==0;
   if ($165) {
    $p_0=$25;$psize_0=$26;
    break;
   }
   $167=$164;
   $168=((HEAP32[((17944)>>2)])|0);
   $169=($167>>>0)<($168>>>0);
   if ($169) {
    _abort();

   } else {
    $171=(($R_1+20)|0);
    HEAP32[(($171)>>2)]=$164;
    $172=(($164+24)|0);
    HEAP32[(($172)>>2)]=$R_1;
    $p_0=$25;$psize_0=$26;
    break;
   }
  } else {
   $p_0=$4;$psize_0=$14;
  }
 } while(0);


 $189=$p_0;
 $190=($189>>>0)<($15>>>0);
 if (!($190)) {
  _abort();

 }
 $_sum34=((($14)-(4))|0);
 $192=(($mem+$_sum34)|0);
 $193=$192;
 $194=((HEAP32[(($193)>>2)])|0);
 $195=$194&1;
 $phitmp=($195|0)==0;
 if ($phitmp) {
  _abort();

 }
 $197=$194&2;
 $198=($197|0)==0;
 do {
  if ($198) {
   $200=((HEAP32[((17952)>>2)])|0);
   $201=($16|0)==($200|0);
   if ($201) {
    $203=((HEAP32[((17940)>>2)])|0);
    $204=((($203)+($psize_0))|0);
    HEAP32[((17940)>>2)]=$204;
    HEAP32[((17952)>>2)]=$p_0;
    $205=$204|1;
    $206=(($p_0+4)|0);
    HEAP32[(($206)>>2)]=$205;
    $207=((HEAP32[((17948)>>2)])|0);
    $208=($p_0|0)==($207|0);
    if (!($208)) {
     return;
    }
    HEAP32[((17948)>>2)]=0;
    HEAP32[((17936)>>2)]=0;
    return;
   }
   $211=((HEAP32[((17948)>>2)])|0);
   $212=($16|0)==($211|0);
   if ($212) {
    $214=((HEAP32[((17936)>>2)])|0);
    $215=((($214)+($psize_0))|0);
    HEAP32[((17936)>>2)]=$215;
    HEAP32[((17948)>>2)]=$p_0;
    $216=$215|1;
    $217=(($p_0+4)|0);
    HEAP32[(($217)>>2)]=$216;
    $218=(($189+$215)|0);
    $219=$218;
    HEAP32[(($219)>>2)]=$215;
    return;
   }
   $221=$194&-8;
   $222=((($221)+($psize_0))|0);
   $223=$194>>>3;
   $224=($194>>>0)<((256)>>>0);
   L112: do {
    if ($224) {
     $226=(($mem+$14)|0);
     $227=$226;
     $228=((HEAP32[(($227)>>2)])|0);
     $_sum2829=$14|4;
     $229=(($mem+$_sum2829)|0);
     $230=$229;
     $231=((HEAP32[(($230)>>2)])|0);
     $232=$223<<1;
     $233=((17968+($232<<2))|0);
     $234=$233;
     $235=($228|0)==($234|0);
     do {
      if (!($235)) {
       $237=$228;
       $238=((HEAP32[((17944)>>2)])|0);
       $239=($237>>>0)<($238>>>0);
       if ($239) {
        _abort();

       }
       $241=(($228+12)|0);
       $242=((HEAP32[(($241)>>2)])|0);
       $243=($242|0)==($16|0);
       if ($243) {
        break;
       }
       _abort();

      }
     } while(0);
     $244=($231|0)==($228|0);
     if ($244) {
      $246=1<<$223;
      $247=$246^-1;
      $248=((HEAP32[((17928)>>2)])|0);
      $249=$248&$247;
      HEAP32[((17928)>>2)]=$249;
      break;
     }
     $251=($231|0)==($234|0);
     do {
      if ($251) {
       $_pre80=(($231+8)|0);
       $_pre_phi81=$_pre80;
      } else {
       $253=$231;
       $254=((HEAP32[((17944)>>2)])|0);
       $255=($253>>>0)<($254>>>0);
       if ($255) {
        _abort();

       }
       $257=(($231+8)|0);
       $258=((HEAP32[(($257)>>2)])|0);
       $259=($258|0)==($16|0);
       if ($259) {
        $_pre_phi81=$257;
        break;
       }
       _abort();

      }
     } while(0);

     $260=(($228+12)|0);
     HEAP32[(($260)>>2)]=$231;
     HEAP32[(($_pre_phi81)>>2)]=$228;
    } else {
     $262=$15;
     $_sum6=((($14)+(16))|0);
     $263=(($mem+$_sum6)|0);
     $264=$263;
     $265=((HEAP32[(($264)>>2)])|0);
     $_sum78=$14|4;
     $266=(($mem+$_sum78)|0);
     $267=$266;
     $268=((HEAP32[(($267)>>2)])|0);
     $269=($268|0)==($262|0);
     do {
      if ($269) {
       $_sum10=((($14)+(12))|0);
       $287=(($mem+$_sum10)|0);
       $288=$287;
       $289=((HEAP32[(($288)>>2)])|0);
       $290=($289|0)==0;
       if ($290) {
        $_sum9=((($14)+(8))|0);
        $292=(($mem+$_sum9)|0);
        $293=$292;
        $294=((HEAP32[(($293)>>2)])|0);
        $295=($294|0)==0;
        if ($295) {
         $R7_1=0;
         break;
        } else {
         $R7_0=$294;$RP9_0=$293;
        }
       } else {
        $R7_0=$289;$RP9_0=$288;
       }
       while(1) {


        $296=(($R7_0+20)|0);
        $297=((HEAP32[(($296)>>2)])|0);
        $298=($297|0)==0;
        if (!($298)) {
         $R7_0=$297;$RP9_0=$296;
         continue;
        }
        $300=(($R7_0+16)|0);
        $301=((HEAP32[(($300)>>2)])|0);
        $302=($301|0)==0;
        if ($302) {
         break;
        } else {
         $R7_0=$301;$RP9_0=$300;
        }
       }
       $304=$RP9_0;
       $305=((HEAP32[((17944)>>2)])|0);
       $306=($304>>>0)<($305>>>0);
       if ($306) {
        _abort();

       } else {
        HEAP32[(($RP9_0)>>2)]=0;
        $R7_1=$R7_0;
        break;
       }
      } else {
       $271=(($mem+$14)|0);
       $272=$271;
       $273=((HEAP32[(($272)>>2)])|0);
       $274=$273;
       $275=((HEAP32[((17944)>>2)])|0);
       $276=($274>>>0)<($275>>>0);
       if ($276) {
        _abort();

       }
       $278=(($273+12)|0);
       $279=((HEAP32[(($278)>>2)])|0);
       $280=($279|0)==($262|0);
       if (!($280)) {
        _abort();

       }
       $282=(($268+8)|0);
       $283=((HEAP32[(($282)>>2)])|0);
       $284=($283|0)==($262|0);
       if ($284) {
        HEAP32[(($278)>>2)]=$268;
        HEAP32[(($282)>>2)]=$273;
        $R7_1=$268;
        break;
       } else {
        _abort();

       }
      }
     } while(0);

     $310=($265|0)==0;
     if ($310) {
      break;
     }
     $_sum21=((($14)+(20))|0);
     $312=(($mem+$_sum21)|0);
     $313=$312;
     $314=((HEAP32[(($313)>>2)])|0);
     $315=((18232+($314<<2))|0);
     $316=((HEAP32[(($315)>>2)])|0);
     $317=($262|0)==($316|0);
     do {
      if ($317) {
       HEAP32[(($315)>>2)]=$R7_1;
       $cond69=($R7_1|0)==0;
       if (!($cond69)) {
        break;
       }
       $319=((HEAP32[(($313)>>2)])|0);
       $320=1<<$319;
       $321=$320^-1;
       $322=((HEAP32[((17932)>>2)])|0);
       $323=$322&$321;
       HEAP32[((17932)>>2)]=$323;
       break L112;
      } else {
       $325=$265;
       $326=((HEAP32[((17944)>>2)])|0);
       $327=($325>>>0)<($326>>>0);
       if ($327) {
        _abort();

       }
       $329=(($265+16)|0);
       $330=((HEAP32[(($329)>>2)])|0);
       $331=($330|0)==($262|0);
       if ($331) {
        HEAP32[(($329)>>2)]=$R7_1;
       } else {
        $334=(($265+20)|0);
        HEAP32[(($334)>>2)]=$R7_1;
       }
       $337=($R7_1|0)==0;
       if ($337) {
        break L112;
       }
      }
     } while(0);
     $339=$R7_1;
     $340=((HEAP32[((17944)>>2)])|0);
     $341=($339>>>0)<($340>>>0);
     if ($341) {
      _abort();

     }
     $343=(($R7_1+24)|0);
     HEAP32[(($343)>>2)]=$265;
     $_sum22=((($14)+(8))|0);
     $344=(($mem+$_sum22)|0);
     $345=$344;
     $346=((HEAP32[(($345)>>2)])|0);
     $347=($346|0)==0;
     do {
      if (!($347)) {
       $349=$346;
       $350=((HEAP32[((17944)>>2)])|0);
       $351=($349>>>0)<($350>>>0);
       if ($351) {
        _abort();

       } else {
        $353=(($R7_1+16)|0);
        HEAP32[(($353)>>2)]=$346;
        $354=(($346+24)|0);
        HEAP32[(($354)>>2)]=$R7_1;
        break;
       }
      }
     } while(0);
     $_sum23=((($14)+(12))|0);
     $357=(($mem+$_sum23)|0);
     $358=$357;
     $359=((HEAP32[(($358)>>2)])|0);
     $360=($359|0)==0;
     if ($360) {
      break;
     }
     $362=$359;
     $363=((HEAP32[((17944)>>2)])|0);
     $364=($362>>>0)<($363>>>0);
     if ($364) {
      _abort();

     } else {
      $366=(($R7_1+20)|0);
      HEAP32[(($366)>>2)]=$359;
      $367=(($359+24)|0);
      HEAP32[(($367)>>2)]=$R7_1;
      break;
     }
    }
   } while(0);
   $371=$222|1;
   $372=(($p_0+4)|0);
   HEAP32[(($372)>>2)]=$371;
   $373=(($189+$222)|0);
   $374=$373;
   HEAP32[(($374)>>2)]=$222;
   $375=((HEAP32[((17948)>>2)])|0);
   $376=($p_0|0)==($375|0);
   if (!($376)) {
    $psize_1=$222;
    break;
   }
   HEAP32[((17936)>>2)]=$222;
   return;
  } else {
   $379=$194&-2;
   HEAP32[(($193)>>2)]=$379;
   $380=$psize_0|1;
   $381=(($p_0+4)|0);
   HEAP32[(($381)>>2)]=$380;
   $382=(($189+$psize_0)|0);
   $383=$382;
   HEAP32[(($383)>>2)]=$psize_0;
   $psize_1=$psize_0;
  }
 } while(0);

 $385=$psize_1>>>3;
 $386=($psize_1>>>0)<((256)>>>0);
 if ($386) {
  $388=$385<<1;
  $389=((17968+($388<<2))|0);
  $390=$389;
  $391=((HEAP32[((17928)>>2)])|0);
  $392=1<<$385;
  $393=$391&$392;
  $394=($393|0)==0;
  do {
   if ($394) {
    $396=$391|$392;
    HEAP32[((17928)>>2)]=$396;
    $_sum19_pre=((($388)+(2))|0);
    $_pre=((17968+($_sum19_pre<<2))|0);
    $F16_0=$390;$_pre_phi=$_pre;
   } else {
    $_sum20=((($388)+(2))|0);
    $398=((17968+($_sum20<<2))|0);
    $399=((HEAP32[(($398)>>2)])|0);
    $400=$399;
    $401=((HEAP32[((17944)>>2)])|0);
    $402=($400>>>0)<($401>>>0);
    if (!($402)) {
     $F16_0=$399;$_pre_phi=$398;
     break;
    }
    _abort();

   }
  } while(0);


  HEAP32[(($_pre_phi)>>2)]=$p_0;
  $405=(($F16_0+12)|0);
  HEAP32[(($405)>>2)]=$p_0;
  $406=(($p_0+8)|0);
  HEAP32[(($406)>>2)]=$F16_0;
  $407=(($p_0+12)|0);
  HEAP32[(($407)>>2)]=$390;
  return;
 }
 $409=$p_0;
 $410=$psize_1>>>8;
 $411=($410|0)==0;
 do {
  if ($411) {
   $I18_0=0;
  } else {
   $413=($psize_1>>>0)>((16777215)>>>0);
   if ($413) {
    $I18_0=31;
    break;
   }
   $415=((($410)+(1048320))|0);
   $416=$415>>>16;
   $417=$416&8;
   $418=$410<<$417;
   $419=((($418)+(520192))|0);
   $420=$419>>>16;
   $421=$420&4;
   $422=$421|$417;
   $423=$418<<$421;
   $424=((($423)+(245760))|0);
   $425=$424>>>16;
   $426=$425&2;
   $427=$422|$426;
   $428=(((14)-($427))|0);
   $429=$423<<$426;
   $430=$429>>>15;
   $431=((($428)+($430))|0);
   $432=$431<<1;
   $433=((($431)+(7))|0);
   $434=$psize_1>>>($433>>>0);
   $435=$434&1;
   $436=$435|$432;
   $I18_0=$436;
  }
 } while(0);

 $438=((18232+($I18_0<<2))|0);
 $439=(($p_0+28)|0);
 $I18_0_c=$I18_0;
 HEAP32[(($439)>>2)]=$I18_0_c;
 $440=(($p_0+20)|0);
 HEAP32[(($440)>>2)]=0;
 $441=(($p_0+16)|0);
 HEAP32[(($441)>>2)]=0;
 $442=((HEAP32[((17932)>>2)])|0);
 $443=1<<$I18_0;
 $444=$442&$443;
 $445=($444|0)==0;
 L199: do {
  if ($445) {
   $447=$442|$443;
   HEAP32[((17932)>>2)]=$447;
   HEAP32[(($438)>>2)]=$409;
   $448=(($p_0+24)|0);
   $_c=$438;
   HEAP32[(($448)>>2)]=$_c;
   $449=(($p_0+12)|0);
   HEAP32[(($449)>>2)]=$p_0;
   $450=(($p_0+8)|0);
   HEAP32[(($450)>>2)]=$p_0;
  } else {
   $452=((HEAP32[(($438)>>2)])|0);
   $453=($I18_0|0)==31;
   if ($453) {
    $458=0;
   } else {
    $455=$I18_0>>>1;
    $456=(((25)-($455))|0);
    $458=$456;
   }

   $459=(($452+4)|0);
   $460=((HEAP32[(($459)>>2)])|0);
   $461=$460&-8;
   $462=($461|0)==($psize_1|0);
   L205: do {
    if ($462) {
     $T_0_lcssa=$452;
    } else {
     $463=$psize_1<<$458;
     $T_072=$452;$K19_073=$463;
     while(1) {


      $471=$K19_073>>>31;
      $472=(($T_072+16+($471<<2))|0);
      $473=((HEAP32[(($472)>>2)])|0);
      $474=($473|0)==0;
      if ($474) {
       break;
      }
      $465=$K19_073<<1;
      $466=(($473+4)|0);
      $467=((HEAP32[(($466)>>2)])|0);
      $468=$467&-8;
      $469=($468|0)==($psize_1|0);
      if ($469) {
       $T_0_lcssa=$473;
       break L205;
      } else {
       $T_072=$473;$K19_073=$465;
      }
     }
     $476=$472;
     $477=((HEAP32[((17944)>>2)])|0);
     $478=($476>>>0)<($477>>>0);
     if ($478) {
      _abort();

     } else {
      HEAP32[(($472)>>2)]=$409;
      $480=(($p_0+24)|0);
      $T_0_c16=$T_072;
      HEAP32[(($480)>>2)]=$T_0_c16;
      $481=(($p_0+12)|0);
      HEAP32[(($481)>>2)]=$p_0;
      $482=(($p_0+8)|0);
      HEAP32[(($482)>>2)]=$p_0;
      break L199;
     }
    }
   } while(0);

   $484=(($T_0_lcssa+8)|0);
   $485=((HEAP32[(($484)>>2)])|0);
   $486=$T_0_lcssa;
   $487=((HEAP32[((17944)>>2)])|0);
   $488=($486>>>0)>=($487>>>0);
   $489=$485;
   $490=($489>>>0)>=($487>>>0);
   $or_cond=$488&$490;
   if ($or_cond) {
    $492=(($485+12)|0);
    HEAP32[(($492)>>2)]=$409;
    HEAP32[(($484)>>2)]=$409;
    $493=(($p_0+8)|0);
    $_c15=$485;
    HEAP32[(($493)>>2)]=$_c15;
    $494=(($p_0+12)|0);
    $T_0_c=$T_0_lcssa;
    HEAP32[(($494)>>2)]=$T_0_c;
    $495=(($p_0+24)|0);
    HEAP32[(($495)>>2)]=0;
    break;
   } else {
    _abort();

   }
  }
 } while(0);
 $497=((HEAP32[((17960)>>2)])|0);
 $498=((($497)-(1))|0);
 HEAP32[((17960)>>2)]=$498;
 $499=($498|0)==0;
 if ($499) {
  $sp_0_in_i=18384;
 } else {
  return;
 }
 while(1) {

  $sp_0_i=((HEAP32[(($sp_0_in_i)>>2)])|0);
  $500=($sp_0_i|0)==0;
  $501=(($sp_0_i+8)|0);
  if ($500) {
   break;
  } else {
   $sp_0_in_i=$501;
  }
 }
 HEAP32[((17960)>>2)]=-1;
 return;
}


function _realloc($oldmem,$bytes){
 $oldmem=($oldmem)|0;
 $bytes=($bytes)|0;
 var $1=0,$3=0,$5=0,$7=0,$9=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0;
 var $30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$mem_0=0,label=0;

 $1=($oldmem|0)==0;
 if ($1) {
  $3=((_malloc($bytes))|0);
  $mem_0=$3;

  return (($mem_0)|0);
 }
 $5=($bytes>>>0)>((4294967231)>>>0);
 if ($5) {
  $7=((___errno_location())|0);
  HEAP32[(($7)>>2)]=12;
  $mem_0=0;

  return (($mem_0)|0);
 }
 $9=($bytes>>>0)<((11)>>>0);
 if ($9) {
  $14=16;
 } else {
  $11=((($bytes)+(11))|0);
  $12=$11&-8;
  $14=$12;
 }

 $15=((($oldmem)-(8))|0);
 $16=$15;
 $17=((_try_realloc_chunk($16,$14))|0);
 $18=($17|0)==0;
 if (!($18)) {
  $20=(($17+8)|0);
  $21=$20;
  $mem_0=$21;

  return (($mem_0)|0);
 }
 $23=((_malloc($bytes))|0);
 $24=($23|0)==0;
 if ($24) {
  $mem_0=0;

  return (($mem_0)|0);
 }
 $26=((($oldmem)-(4))|0);
 $27=$26;
 $28=((HEAP32[(($27)>>2)])|0);
 $29=$28&-8;
 $30=$28&3;
 $31=($30|0)==0;
 $32=($31?8:4);
 $33=((($29)-($32))|0);
 $34=($33>>>0)<($bytes>>>0);
 $35=($34?$33:$bytes);
 (_memcpy((($23)|0), (($oldmem)|0), $35)|0);
 _free($oldmem);
 $mem_0=$23;

 return (($mem_0)|0);
}


function ___floatscan($f,$prec,$pok){
 $f=($f)|0;
 $prec=($prec)|0;
 $pok=($pok)|0;
 var $x_i=0,$bits_0_ph=0,$emin_0_ph=0,$3=0,$4=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$16=0,$17=0,$18=0,$20=0,$22=0,$23=0,$24=0,$25=0;
 var $26=0,$27=0,$29=0,$30=0,$31=0,$33=0,$sign_0=0,$c_0=0,$c_170=0,$i_069=0,$36=0,$37=0,$38=0,$39=0,$40=0,$42=0,$44=0,$45=0,$46=0,$48=0;
 var $49=0,$50=0,$52=0,$c_2=0,$54=0,$55=0,$c_1_lcssa=0,$i_0_lcssa=0,$57=0,$58=0,$or_cond5=0,$60=0,$62=0,$63=0,$65=0,$66=0,$notlhs=0,$notrhs=0,$or_cond9_not=0,$brmerge=0;
 var $i_1=0,$68=0,$69=0,$70=0,$_old8=0,$71=.0,$72=.0,$73=.0,$75=0,$c_368=0,$i_267=0,$76=0,$77=0,$78=0,$79=0,$80=0,$82=0,$84=0,$85=0,$86=0;
 var $88=0,$89=0,$90=0,$92=0,$c_4=0,$94=0,$95=0,$i_3=0,$c_5=0,$97=0,$98=0,$99=0,$101=0,$102=0,$103=0,$105=0,$107=0,$108=0,$110=0,$111=0;
 var $113=0,$114=0,$i_4=0,$115=0,$116=0,$117=0,$119=0,$120=0,$121=0,$123=0,$125=0,$126=0,$127=0,$128=0,$129=0,$or_cond=0,$131=0,$132=0,$133=0,$or_cond7=0;
 var $135=0,$137=0,$138=0,$140=0,$141=0,$143=0,$brmerge107=0,$145=0,$_in=0,$146=0,$147=0,$148=0,$149=0,$151=0,$153=0,$154=0,$156=0,$157=0,$159=0,$161=0;
 var $163=0,$164=0,$165=0,$167=0,$168=0,$169=0,$171=0,$173=0,$174=0,$175=0,$177=0,$178=0,$179=0,$181=0,$182=0,$183=0,$185=0,$gotdig_0_i=0,$c_0_i=0,$187=0;
 var $188=0,$189=0,$191=0,$192=0,$193=0,$195=0,$197=0,$198=0,$199=0,$201=0,$202=0,$203=0,$205=0,$c_1_ph_i=0,$206=0,$rp_026_i$0=0,$rp_026_i$1=0,$207=0,$208=0,$209=0;
 var $211=0,$212=0,$213=0,$215=0,$217=0,$$etemp$0$0=0,$$etemp$0$1=0,$219=0,$x_0_i=0,$y_0_i=.0,$scale_0_i=.0,$gottail_0_i=0,$gotrad_0_i=0,$gotdig_2_i=0,$rp_1_i$0=0,$rp_1_i$1=0,$dc_0_i$0=0,$dc_0_i$1=0,$c_2_i=0,$220=0;
 var $221=0,$223=0,$224=0,$225=0,$226=0,$or_cond6_i=0,$228=0,$230=0,$231=0,$__i=0,$d_0_i=0,$$etemp$1$0=0,$$etemp$1$1=0,$232=0,$234=0,$235=0,$$etemp$2$0=0,$$etemp$2$1=0,$237=0,$239=.0;
 var $240=.0,$241=.0,$242=.0,$244=0,$245=0,$or_cond_i=0,$247=.0,$248=.0,$x_1_i=0,$y_1_i=.0,$scale_1_i=.0,$gottail_1_i=0,$$etemp$3$0=0,$$etemp$3$1=0,$x_2_i=0,$y_2_i=.0,$scale_2_i=.0,$gottail_2_i=0,$gotrad_1_i=0,$gotdig_3_i=0;
 var $rp_2_i$0=0,$rp_2_i$1=0,$dc_1_i$0=0,$dc_1_i$1=0,$252=0,$253=0,$254=0,$256=0,$257=0,$258=0,$260=0,$c_2_lcssa_i=0,$262=0,$264=0,$265=0,$267=0,$268=0,$270=0,$273=0,$274=0;
 var $275=0,$277=0,$279=.0,$280=.0,$282=0,$dc_0_rp_1_i$0=0,$dc_0_rp_1_i$1=0,$$etemp$4$0=0,$$etemp$4$1=0,$283=0,$dc_219_i$0=0,$dc_219_i$1=0,$x_318_i=0,$284=0,$$etemp$5$0=0,$$etemp$5$1=0,$$etemp$6$0=0,$$etemp$6$1=0,$286=0,$x_3_lcssa_i=0;
 var $287=0,$288=0,$290$0=0,$290$1=0,$$etemp$7$0=0,$$etemp$7$1=0,$291=0,$293=0,$295=0,$296=0,$298=0,$299=0,$302=0,$303=0,$305=0,$306=0,$e2_0_i$0=0,$e2_0_i$1=0,$308$0=0,$308$1=0;
 var $$etemp$8$0=0,$$etemp$8$1=0,$311=0,$313=.0,$314=.0,$316=0,$317$0=0,$317$1=0,$318=0,$320=0,$321=.0,$322=.0,$323=.0,$325=0,$326$0=0,$326$1=0,$327=0,$328=0,$330=0,$331=.0;
 var $332=.0,$333=.0,$e2_115_i$0=0,$e2_115_i$1=0,$y_314_i=.0,$x_413_i=0,$334=0,$335=0,$337=0,$338=.0,$x_5_i=0,$_pn_i=.0,$y_4_i=.0,$$etemp$9$0=0,$$etemp$9$1=0,$341=0,$e2_1_lcssa_i$0=0,$e2_1_lcssa_i$1=0,$y_3_lcssa_i=.0,$x_4_lcssa_i=0;
 var $342$0=0,$342$1=0,$343$0=0,$343$1=0,$$etemp$10$0=0,$$etemp$10$1=0,$346=0,$348$0=0,$348=0,$349=0,$_07_i=0,$351=0,$_pre_i=.0,$_0711_i=0,$352=0,$353=.0,$354=.0,$355=.0,$_pre_phi_i=.0,$_0712_i=0;
 var $bias_0_i=.0,$357=0,$358=0,$or_cond4_i=0,$359=0,$360=0,$or_cond9_i=0,$361=0,$x_6_i=0,$y_5_i=.0,$362=.0,$363=.0,$364=.0,$365=.0,$366=.0,$367=.0,$368=0,$370=0,$372$0=0,$372=0;
 var $373=.0,$375=0,$376=0,$378=0,$379=0,$c_6=0,$381=0,$$etemp$11$0=0,$$etemp$11$1=0,$sum_i=0,$382=0,$gotdig_0_i12=0,$_012_i=0,$384=0,$385=0,$386=0,$388=0,$389=0,$390=0,$392=0;
 var $394=0,$395=0,$396=0,$398=0,$399=0,$400=0,$402=0,$_1_ph_i=0,$403=0,$lrp_0133_i$0=0,$lrp_0133_i$1=0,$$etemp$12$0=0,$$etemp$12$1=0,$405=0,$406=0,$407=0,$409=0,$410=0,$411=0,$413=0;
 var $_1_be_i=0,$414=0,$lrp_1_i$0=0,$lrp_1_i$1=0,$gotdig_2_i13=0,$gotrad_0_i14=0,$_2_i=0,$415=0,$416=0,$417=0,$418=0,$or_cond11113_i=0,$419=0,$420=0,$421=0,$_3121_i=0,$j_0120_i=0,$k_0119_i=0,$gotrad_1118_i=0,$gotdig_3117_i=0;
 var $lnz_0116_i=0,$dc_0115_i$0=0,$dc_0115_i$1=0,$lrp_2114_i$0=0,$lrp_2114_i$1=0,$cond_i=0,$423=0,$425=0,$$etemp$13$0=0,$$etemp$13$1=0,$427=0,$429$0=0,$429=0,$_lnz_0_i=0,$430=0,$431=0,$433=0,$434=0,$435=0,$436=0;
 var $storemerge_i=0,$438=0,$439=0,$440=0,$_k_0_i=0,$_14_i=0,$443=0,$444=0,$lrp_3_i$0=0,$lrp_3_i$1=0,$dc_1_i16$0=0,$dc_1_i16$1=0,$lnz_2_i=0,$gotdig_4_i=0,$gotrad_2_i=0,$k_2_i=0,$j_2_i=0,$446=0,$447=0,$448=0;
 var $450=0,$451=0,$452=0,$454=0,$_3_be_i=0,$455=0,$456=0,$457=0,$or_cond11_i=0,$_3_lcssa_i=0,$j_0_lcssa_i=0,$k_0_lcssa_i=0,$gotrad_1_lcssa_i=0,$gotdig_3_lcssa_i=0,$lnz_0_lcssa_i=0,$dc_0_lcssa_i$0=0,$dc_0_lcssa_i$1=0,$lrp_2_lcssa_i$0=0,$lrp_2_lcssa_i$1=0,$458=0;
 var $dc_0_lrp_2_i$0=0,$dc_0_lrp_2_i$1=0,$459=0,$460=0,$461=0,$or_cond16_i=0,$463$0=0,$463$1=0,$$etemp$14$0=0,$$etemp$14$1=0,$464=0,$466=0,$468=0,$469=0,$471=0,$472=0,$e10_0_i$0=0,$e10_0_i$1=0,$477=0,$j_0111_i=0;
 var $k_0107_i=0,$lnz_0101_i=0,$dc_097_i$0=0,$dc_097_i$1=0,$lrp_42527_i$0=0,$lrp_42527_i$1=0,$479=0,$480=0,$481=0,$483=0,$484=0,$j_0110_i=0,$k_0106_i=0,$lnz_0100_i=0,$dc_096_i$0=0,$dc_096_i$1=0,$486=0,$lrp_5_i$0=0,$lrp_5_i$1=0,$488=0;
 var $j_0109_i=0,$k_0105_i=0,$lnz_099_i=0,$dc_095_i$0=0,$dc_095_i$1=0,$lrp_528_i$0=0,$lrp_528_i$1=0,$490=0,$491=0,$493=.0,$494=.0,$496=0,$$etemp$15$0=0,$$etemp$15$1=0,$497=0,$or_cond_i17=0,$499=0,$500=0,$501=0,$or_cond18_i=0;
 var $503=.0,$504=.0,$505=.0,$507=0,$508$0=0,$508$1=0,$509=0,$511=0,$512=.0,$513=.0,$514=.0,$516=0,$517$0=0,$517$1=0,$518=0,$520=0,$521=.0,$522=.0,$523=.0,$525=0;
 var $526=0,$527=0,$_promoted_i=0,$529=0,$j_389_i=0,$530=0,$531=0,$532=0,$534=0,$k_3_i=0,$536$0=0,$536=0,$537=0,$539=0,$540=0,$or_cond3_i=0,$542=0,$544=.0,$545=0,$546=.0;
 var $547=.0,$549=0,$551=.0,$552=0,$553=.0,$554=.0,$555=0,$556=0,$557=0,$558=.0,$559=.0,$561=0,$_neg38_i=0,$562=0,$563=0,$_pre_i18=0,$564=0,$565=0,$or_cond186_i=0,$566=.0;
 var $567=.0,$568=.0,$569=0,$570=0,$571=0,$572=.0,$573=.0,$575=0,$576=0,$578=0,$579=0,$580=0,$581=0,$582=0,$583=0,$584=0,$585=0,$carry_081_i=0,$k_480_i=0,$a_079_i=0;
 var $rp_078_i=0,$587=0,$588=0,$589=0,$590=0,$591=0,$592=0,$593=0,$594=0,$or_cond19_i=0,$595=0,$597=0,$598=0,$rp_1_i19=0,$a_1_i=0,$599=0,$600=0,$602=0,$603=0,$rp_0_lcssa182_i=0;
 var $a_0_lcssa181_i=0,$z_0_i=0,$604=0,$605=0,$rp_2_ph56_i=0,$e2_0_ph_i=0,$z_1_ph57_i=0,$a_2_ph58_i=0,$606=0,$607=0,$608=0,$e2_0_us_i=0,$z_1_us_i=0,$609=0,$z_2_us_i=0,$k_5_in_us_i=0,$carry1_0_us_i=0,$k_5_us_i=0,$611=0,$612=0;
 var $613$0=0,$613$1=0,$614$0=0,$614$1=0,$615$0=0,$615$1=0,$$etemp$16$0=0,$$etemp$16$1=0,$617=0,$extract_t37_us_i$0=0,$extract_t37_us_i=0,$$etemp$17$0=0,$$etemp$17$1=0,$620$0=0,$620=0,$$etemp$18$0=0,$$etemp$18$1=0,$extract_t_us_i$0=0,$extract_t_us_i=0,$_sink_off0_us_i=0;
 var $carry1_1_us_i=0,$623=0,$624=0,$625=0,$626=0,$or_cond20_us_i=0,$628=0,$k_5_z_2_us_i=0,$z_3_us_i=0,$630=0,$632=0,$633=0,$e2_0_us62_i=0,$z_1_us63_i=0,$634=0,$635=0,$636=0,$z_2_us65_i=0,$k_5_in_us66_i=0,$carry1_0_us67_i=0;
 var $k_5_us68_i=0,$638=0,$639=0,$640$0=0,$640$1=0,$641$0=0,$641$1=0,$642$0=0,$642$1=0,$$etemp$19$0=0,$$etemp$19$1=0,$644=0,$extract_t37_us69_i$0=0,$extract_t37_us69_i=0,$$etemp$20$0=0,$$etemp$20$1=0,$647$0=0,$647=0,$$etemp$21$0=0,$$etemp$21$1=0;
 var $extract_t_us70_i$0=0,$extract_t_us70_i=0,$_sink_off0_us71_i=0,$carry1_1_us72_i=0,$650=0,$651=0,$652=0,$653=0,$or_cond20_us73_i=0,$655=0,$k_5_z_2_us74_i=0,$z_3_us75_i=0,$657=0,$659=0,$660=0,$carry1_1_lcssa_lcssa_i=0,$z_3_lcssa_lcssa_i=0,$_lcssa61_i=0,$661=0,$662=0;
 var $663=0,$664=0,$666=0,$667=0,$668=0,$669=0,$670=0,$671=0,$672=0,$673=0,$674=0,$z_4_i=0,$676=0,$e2_1_i=0,$a_3_i=0,$678=0,$i_043_i=0,$680=0,$681=0,$682=0;
 var $684=0,$685=0,$686=0,$687=0,$688=0,$690=0,$691=0,$i_1_i=0,$693=0,$or_cond7_i=0,$694=0,$695=0,$697=0,$698=0,$699=0,$700=0,$701=0,$carry3_048_i=0,$k_646_i=0,$a_445_i=0;
 var $rp_444_i=0,$702=0,$703=0,$704=0,$705=0,$706=0,$707=0,$708=0,$709=0,$or_cond22_i=0,$710=0,$711=0,$712=0,$rp_5_i=0,$a_5_i=0,$713=0,$714=0,$716=0,$718=0,$rp_3_ph51_i=0;
 var $e2_1_ph_i=0,$z_5_ph_i=0,$a_3_ph_i=0,$719=0,$720=0,$721=0,$722=0,$723=0,$rp_3_i_ph=0,$e2_1_i_ph=0,$a_3_i_ph=0,$724=0,$725=0,$_21_i=0,$727=0,$728=0,$730=0,$731=0,$z_7_i=0,$733=0;
 var $734=0,$735=.0,$736=0,$737=0,$738=0,$740=0,$denormal_0_i=0,$_013_i=0,$742=0,$_01332_i=0,$denormal_031_i=0,$743=0,$744=.0,$745=.0,$746=0,$747=.0,$748=.0,$749=.0,$750=.0,$_01333_i=0;
 var $denormal_030_i=0,$y_1_i23=.0,$frac_0_i=.0,$bias_0_i24=.0,$752=0,$753=0,$754=0,$756=0,$757=0,$758=0,$760=0,$762=0,$763=0,$764=0,$766=.0,$767=.0,$769=0,$771=.0,$772=.0,$774=0;
 var $775=0,$776=0,$778=.0,$779=.0,$781=.0,$782=.0,$frac_1_i=.0,$784=0,$785=0,$787=.0,$788=0,$790=.0,$frac_2_i=.0,$792=.0,$793=.0,$794=0,$795=0,$796=0,$798=.0,$799=0;
 var $801=0,$802=0,$or_cond23_i=0,$denormal_1_i=0,$803=.0,$804=0,$e2_2_i=0,$denormal_2_i=0,$y_2_i25=.0,$806=0,$807=0,$809=0,$810=0,$or_cond9_i26=0,$812=0,$e2_3_i=0,$y_3_i=.0,$814=.0,$816=0,$817=0;
 var $818=0,$819=0,$z_7_1_i=0,$821=.0,$822=0,$823=0,$824=.0,$825=.0,$826=.0,$827=.0,$828=0,$829=0,$830=0,$_0=.0,$218$0=0,$218$1=0,$250$0=0,$250$1=0,$285$0=0,$285$1=0;
 var $309$0=0,$309$1=0,$310$0=0,$310$1=0,$340$0=0,$340$1=0,$344$0=0,$344$1=0,$345$0=0,$345$1=0,$404$0=0,$404$1=0,$426$0=0,$426$1=0,$475$0=0,$475$1=0,$616$0=0,$616$1=0,$619$0=0,$619$1=0;
 var $621$0=0,$621$1=0,$643$0=0,$643$1=0,$646$0=0,$646$1=0,$648$0=0,$648$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+512)|0;
 $x_i=((sp)|0);
 if (((($prec|0))|0)==((0)|0)) {
  $emin_0_ph=-149;$bits_0_ph=24;
 } else if (((($prec|0))|0)==((1)|0)) {
  $emin_0_ph=-1074;$bits_0_ph=53;
 } else if (((($prec|0))|0)==((2)|0)) {
  $emin_0_ph=-1074;$bits_0_ph=53;
 } else {
  $_0=0.0;

  STACKTOP=sp;return (+($_0));
 }


 $3=(($f+4)|0);
 $4=(($f+100)|0);
 while(1) {
  $6=((HEAP32[(($3)>>2)])|0);
  $7=((HEAP32[(($4)>>2)])|0);
  $8=($6>>>0)<($7>>>0);
  if ($8) {
   $10=(($6+1)|0);
   HEAP32[(($3)>>2)]=$10;
   $11=((HEAP8[($6)])|0);
   $12=($11&255);
   $16=$12;
  } else {
   $14=((___shgetc($f))|0);
   $16=$14;
  }

  $17=((_isspace((($16)|0)))|0);
  $18=($17|0)==0;
  if ($18) {
   break;
  }
 }
 $20=($16|0)==45;
 do {
  if (((($16|0))|0)==((45)|0)|((($16|0))|0)==((43)|0)) {
   $22=($20&1);
   $23=$22<<1;
   $24=(((1)-($23))|0);
   $25=((HEAP32[(($3)>>2)])|0);
   $26=((HEAP32[(($4)>>2)])|0);
   $27=($25>>>0)<($26>>>0);
   if ($27) {
    $29=(($25+1)|0);
    HEAP32[(($3)>>2)]=$29;
    $30=((HEAP8[($25)])|0);
    $31=($30&255);
    $c_0=$31;$sign_0=$24;
    break;
   } else {
    $33=((___shgetc($f))|0);
    $c_0=$33;$sign_0=$24;
    break;
   }
  } else {
   $c_0=$16;$sign_0=1;
  }
 } while(0);


 $i_069=0;$c_170=$c_0;
 while(1) {


  $36=$c_170|32;
  $37=((8104+$i_069)|0);
  $38=((HEAP8[($37)])|0);
  $39=(($38<<24)>>24);
  $40=($36|0)==($39|0);
  if (!($40)) {
   $i_0_lcssa=$i_069;$c_1_lcssa=$c_170;
   break;
  }
  $42=($i_069>>>0)<((7)>>>0);
  do {
   if ($42) {
    $44=((HEAP32[(($3)>>2)])|0);
    $45=((HEAP32[(($4)>>2)])|0);
    $46=($44>>>0)<($45>>>0);
    if ($46) {
     $48=(($44+1)|0);
     HEAP32[(($3)>>2)]=$48;
     $49=((HEAP8[($44)])|0);
     $50=($49&255);
     $c_2=$50;
     break;
    } else {
     $52=((___shgetc($f))|0);
     $c_2=$52;
     break;
    }
   } else {
    $c_2=$c_170;
   }
  } while(0);

  $54=((($i_069)+(1))|0);
  $55=($54>>>0)<((8)>>>0);
  if ($55) {
   $i_069=$54;$c_170=$c_2;
  } else {
   $i_0_lcssa=$54;$c_1_lcssa=$c_2;
   break;
  }
 }


 do {
  if (((($i_0_lcssa|0))|0)==((3)|0)) {
   label = 23;
  } else if (!(((($i_0_lcssa|0))|0)==((8)|0))) {
   $57=($i_0_lcssa>>>0)>((3)>>>0);
   $58=($pok|0)!=0;
   $or_cond5=$57&$58;
   if ($or_cond5) {
    $60=($i_0_lcssa|0)==8;
    if ($60) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $75=($i_0_lcssa|0)==0;
   L34: do {
    if ($75) {
     $i_267=0;$c_368=$c_1_lcssa;
     while(1) {


      $76=$c_368|32;
      $77=((13856+$i_267)|0);
      $78=((HEAP8[($77)])|0);
      $79=(($78<<24)>>24);
      $80=($76|0)==($79|0);
      if (!($80)) {
       $c_5=$c_368;$i_3=$i_267;
       break L34;
      }
      $82=($i_267>>>0)<((2)>>>0);
      do {
       if ($82) {
        $84=((HEAP32[(($3)>>2)])|0);
        $85=((HEAP32[(($4)>>2)])|0);
        $86=($84>>>0)<($85>>>0);
        if ($86) {
         $88=(($84+1)|0);
         HEAP32[(($3)>>2)]=$88;
         $89=((HEAP8[($84)])|0);
         $90=($89&255);
         $c_4=$90;
         break;
        } else {
         $92=((___shgetc($f))|0);
         $c_4=$92;
         break;
        }
       } else {
        $c_4=$c_368;
       }
      } while(0);

      $94=((($i_267)+(1))|0);
      $95=($94>>>0)<((3)>>>0);
      if ($95) {
       $i_267=$94;$c_368=$c_4;
      } else {
       $c_5=$c_4;$i_3=$94;
       break;
      }
     }
    } else {
     $c_5=$c_1_lcssa;$i_3=$i_0_lcssa;
    }
   } while(0);


   if (((($i_3|0))|0)==((3)|0)) {
    $97=((HEAP32[(($3)>>2)])|0);
    $98=((HEAP32[(($4)>>2)])|0);
    $99=($97>>>0)<($98>>>0);
    if ($99) {
     $101=(($97+1)|0);
     HEAP32[(($3)>>2)]=$101;
     $102=((HEAP8[($97)])|0);
     $103=($102&255);
     $107=$103;
    } else {
     $105=((___shgetc($f))|0);
     $107=$105;
    }

    $108=($107|0)==40;
    if ($108) {
     $i_4=1;
    } else {
     $110=((HEAP32[(($4)>>2)])|0);
     $111=($110|0)==0;
     if ($111) {
      $_0=NaN;

      STACKTOP=sp;return (+($_0));
     }
     $113=((HEAP32[(($3)>>2)])|0);
     $114=((($113)-(1))|0);
     HEAP32[(($3)>>2)]=$114;
     $_0=NaN;

     STACKTOP=sp;return (+($_0));
    }
    while(1) {

     $115=((HEAP32[(($3)>>2)])|0);
     $116=((HEAP32[(($4)>>2)])|0);
     $117=($115>>>0)<($116>>>0);
     if ($117) {
      $119=(($115+1)|0);
      HEAP32[(($3)>>2)]=$119;
      $120=((HEAP8[($115)])|0);
      $121=($120&255);
      $125=$121;
     } else {
      $123=((___shgetc($f))|0);
      $125=$123;
     }

     $126=((($125)-(48))|0);
     $127=($126>>>0)<((10)>>>0);
     $128=((($125)-(65))|0);
     $129=($128>>>0)<((26)>>>0);
     $or_cond=$127|$129;
     if (!($or_cond)) {
      $131=((($125)-(97))|0);
      $132=($131>>>0)<((26)>>>0);
      $133=($125|0)==95;
      $or_cond7=$132|$133;
      if (!($or_cond7)) {
       break;
      }
     }
     $151=((($i_4)+(1))|0);
     $i_4=$151;
    }
    $135=($125|0)==41;
    if ($135) {
     $_0=NaN;

     STACKTOP=sp;return (+($_0));
    }
    $137=((HEAP32[(($4)>>2)])|0);
    $138=($137|0)==0;
    if (!($138)) {
     $140=((HEAP32[(($3)>>2)])|0);
     $141=((($140)-(1))|0);
     HEAP32[(($3)>>2)]=$141;
    }
    if (!($58)) {
     $145=((___errno_location())|0);
     HEAP32[(($145)>>2)]=22;
     ___shlim($f,0);
     $_0=0.0;

     STACKTOP=sp;return (+($_0));
    }
    $143=($i_4|0)==0;
    $brmerge107=$143|$138;
    if ($brmerge107) {
     $_0=NaN;

     STACKTOP=sp;return (+($_0));
    } else {
     $_in=$i_4;
    }
    while(1) {

     $146=((($_in)-(1))|0);
     $147=((HEAP32[(($3)>>2)])|0);
     $148=((($147)-(1))|0);
     HEAP32[(($3)>>2)]=$148;
     $149=($146|0)==0;
     if ($149) {
      $_0=NaN;
      break;
     } else {
      $_in=$146;
     }
    }

    STACKTOP=sp;return (+($_0));
   } else if (((($i_3|0))|0)==((0)|0)) {
    $161=($c_5|0)==48;
    do {
     if ($161) {
      $163=((HEAP32[(($3)>>2)])|0);
      $164=((HEAP32[(($4)>>2)])|0);
      $165=($163>>>0)<($164>>>0);
      if ($165) {
       $167=(($163+1)|0);
       HEAP32[(($3)>>2)]=$167;
       $168=((HEAP8[($163)])|0);
       $169=($168&255);
       $173=$169;
      } else {
       $171=((___shgetc($f))|0);
       $173=$171;
      }

      $174=$173|32;
      $175=($174|0)==120;
      if (!($175)) {
       $375=((HEAP32[(($4)>>2)])|0);
       $376=($375|0)==0;
       if ($376) {
        $c_6=48;
        break;
       }
       $378=((HEAP32[(($3)>>2)])|0);
       $379=((($378)-(1))|0);
       HEAP32[(($3)>>2)]=$379;
       $c_6=48;
       break;
      }
      $177=((HEAP32[(($3)>>2)])|0);
      $178=((HEAP32[(($4)>>2)])|0);
      $179=($177>>>0)<($178>>>0);
      if ($179) {
       $181=(($177+1)|0);
       HEAP32[(($3)>>2)]=$181;
       $182=((HEAP8[($177)])|0);
       $183=($182&255);
       $c_0_i=$183;$gotdig_0_i=0;
      } else {
       $185=((___shgetc($f))|0);
       $c_0_i=$185;$gotdig_0_i=0;
      }
      while(1) {


       if (((($c_0_i|0))|0)==((46)|0)) {
        label = 70;
        break;
       } else if (!(((($c_0_i|0))|0)==((48)|0))) {
        $c_2_i=$c_0_i;$dc_0_i$1=0;$dc_0_i$0=0;$rp_1_i$1=0;$rp_1_i$0=0;$gotdig_2_i=$gotdig_0_i;$gotrad_0_i=0;$gottail_0_i=0;$scale_0_i=1.0;$y_0_i=0.0;$x_0_i=0;
        break;
       }
       $187=((HEAP32[(($3)>>2)])|0);
       $188=((HEAP32[(($4)>>2)])|0);
       $189=($187>>>0)<($188>>>0);
       if ($189) {
        $191=(($187+1)|0);
        HEAP32[(($3)>>2)]=$191;
        $192=((HEAP8[($187)])|0);
        $193=($192&255);
        $c_0_i=$193;$gotdig_0_i=1;
        continue;
       } else {
        $195=((___shgetc($f))|0);
        $c_0_i=$195;$gotdig_0_i=1;
        continue;
       }
      }
      do {
       if ((label|0) == 70) {
        $197=((HEAP32[(($3)>>2)])|0);
        $198=((HEAP32[(($4)>>2)])|0);
        $199=($197>>>0)<($198>>>0);
        if ($199) {
         $201=(($197+1)|0);
         HEAP32[(($3)>>2)]=$201;
         $202=((HEAP8[($197)])|0);
         $203=($202&255);
         $c_1_ph_i=$203;
        } else {
         $205=((___shgetc($f))|0);
         $c_1_ph_i=$205;
        }

        $206=($c_1_ph_i|0)==48;
        if ($206) {
         $rp_026_i$1=0;$rp_026_i$0=0;
        } else {
         $c_2_i=$c_1_ph_i;$dc_0_i$1=0;$dc_0_i$0=0;$rp_1_i$1=0;$rp_1_i$0=0;$gotdig_2_i=$gotdig_0_i;$gotrad_0_i=1;$gottail_0_i=0;$scale_0_i=1.0;$y_0_i=0.0;$x_0_i=0;
         break;
        }
        while(1) {


         $207=((HEAP32[(($3)>>2)])|0);
         $208=((HEAP32[(($4)>>2)])|0);
         $209=($207>>>0)<($208>>>0);
         if ($209) {
          $211=(($207+1)|0);
          HEAP32[(($3)>>2)]=$211;
          $212=((HEAP8[($207)])|0);
          $213=($212&255);
          $217=$213;
         } else {
          $215=((___shgetc($f))|0);
          $217=$215;
         }

         $$etemp$0$0=-1;
         $$etemp$0$1=-1;
         $218$0=((_i64Add($rp_026_i$0,$rp_026_i$1,$$etemp$0$0,$$etemp$0$1))|0);$218$1=tempRet0;
         $219=($217|0)==48;
         if ($219) {
          $rp_026_i$1=$218$1;$rp_026_i$0=$218$0;
         } else {
          $c_2_i=$217;$dc_0_i$1=0;$dc_0_i$0=0;$rp_1_i$1=$218$1;$rp_1_i$0=$218$0;$gotdig_2_i=1;$gotrad_0_i=1;$gottail_0_i=0;$scale_0_i=1.0;$y_0_i=0.0;$x_0_i=0;
          break;
         }
        }
       }
      } while(0);
      L119: while(1) {











       $220=((($c_2_i)-(48))|0);
       $221=($220>>>0)<((10)>>>0);
       do {
        if ($221) {
         $d_0_i=$220;
         label = 83;
        } else {
         $223=$c_2_i|32;
         $224=((($223)-(97))|0);
         $225=($224>>>0)<((6)>>>0);
         $226=($c_2_i|0)==46;
         $or_cond6_i=$225|$226;
         if (!($or_cond6_i)) {
          $c_2_lcssa_i=$c_2_i;
          break L119;
         }
         if ($226) {
          $228=($gotrad_0_i|0)==0;
          if ($228) {
           $dc_1_i$1=$dc_0_i$1;$dc_1_i$0=$dc_0_i$0;$rp_2_i$1=$dc_0_i$1;$rp_2_i$0=$dc_0_i$0;$gotdig_3_i=$gotdig_2_i;$gotrad_1_i=1;$gottail_2_i=$gottail_0_i;$scale_2_i=$scale_0_i;$y_2_i=$y_0_i;$x_2_i=$x_0_i;
           break;
          } else {
           $c_2_lcssa_i=46;
           break L119;
          }
         } else {
          $230=($c_2_i|0)>57;
          $231=((($223)-(87))|0);
          $__i=($230?$231:$220);
          $d_0_i=$__i;
          label = 83;
          break;
         }
        }
       } while(0);
       if ((label|0) == 83) {
        label = 0;

        $$etemp$1$0=8;
        $$etemp$1$1=0;
        $232=(($dc_0_i$1|0) < ($$etemp$1$1|0)) | (((($dc_0_i$1|0) == ($$etemp$1$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$1$0>>>0))));
        do {
         if ($232) {
          $234=$x_0_i<<4;
          $235=((($d_0_i)+($234))|0);
          $gottail_1_i=$gottail_0_i;$scale_1_i=$scale_0_i;$y_1_i=$y_0_i;$x_1_i=$235;
         } else {
          $$etemp$2$0=14;
          $$etemp$2$1=0;
          $237=(($dc_0_i$1|0) < ($$etemp$2$1|0)) | (((($dc_0_i$1|0) == ($$etemp$2$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$2$0>>>0))));
          if ($237) {
           $239=(+((($d_0_i|0))|0));
           $240=($scale_0_i)*((0.0625));
           $241=($240)*($239);
           $242=($y_0_i)+($241);
           $gottail_1_i=$gottail_0_i;$scale_1_i=$240;$y_1_i=$242;$x_1_i=$x_0_i;
           break;
          }
          $244=($d_0_i|0)==0;
          $245=($gottail_0_i|0)!=0;
          $or_cond_i=$244|$245;
          if ($or_cond_i) {
           $gottail_1_i=$gottail_0_i;$scale_1_i=$scale_0_i;$y_1_i=$y_0_i;$x_1_i=$x_0_i;
           break;
          }
          $247=($scale_0_i)*((0.5));
          $248=($y_0_i)+($247);
          $gottail_1_i=1;$scale_1_i=$scale_0_i;$y_1_i=$248;$x_1_i=$x_0_i;
         }
        } while(0);




        $$etemp$3$0=1;
        $$etemp$3$1=0;
        $250$0=((_i64Add($dc_0_i$0,$dc_0_i$1,$$etemp$3$0,$$etemp$3$1))|0);$250$1=tempRet0;
        $dc_1_i$1=$250$1;$dc_1_i$0=$250$0;$rp_2_i$1=$rp_1_i$1;$rp_2_i$0=$rp_1_i$0;$gotdig_3_i=1;$gotrad_1_i=$gotrad_0_i;$gottail_2_i=$gottail_1_i;$scale_2_i=$scale_1_i;$y_2_i=$y_1_i;$x_2_i=$x_1_i;
       }










       $252=((HEAP32[(($3)>>2)])|0);
       $253=((HEAP32[(($4)>>2)])|0);
       $254=($252>>>0)<($253>>>0);
       if ($254) {
        $256=(($252+1)|0);
        HEAP32[(($3)>>2)]=$256;
        $257=((HEAP8[($252)])|0);
        $258=($257&255);
        $c_2_i=$258;$dc_0_i$1=$dc_1_i$1;$dc_0_i$0=$dc_1_i$0;$rp_1_i$1=$rp_2_i$1;$rp_1_i$0=$rp_2_i$0;$gotdig_2_i=$gotdig_3_i;$gotrad_0_i=$gotrad_1_i;$gottail_0_i=$gottail_2_i;$scale_0_i=$scale_2_i;$y_0_i=$y_2_i;$x_0_i=$x_2_i;
        continue;
       } else {
        $260=((___shgetc($f))|0);
        $c_2_i=$260;$dc_0_i$1=$dc_1_i$1;$dc_0_i$0=$dc_1_i$0;$rp_1_i$1=$rp_2_i$1;$rp_1_i$0=$rp_2_i$0;$gotdig_2_i=$gotdig_3_i;$gotrad_0_i=$gotrad_1_i;$gottail_0_i=$gottail_2_i;$scale_0_i=$scale_2_i;$y_0_i=$y_2_i;$x_0_i=$x_2_i;
        continue;
       }
      }

      $262=($gotdig_2_i|0)==0;
      if ($262) {
       $264=((HEAP32[(($4)>>2)])|0);
       $265=($264|0)==0;
       if (!($265)) {
        $267=((HEAP32[(($3)>>2)])|0);
        $268=((($267)-(1))|0);
        HEAP32[(($3)>>2)]=$268;
       }
       $270=($pok|0)==0;
       do {
        if ($270) {
         ___shlim($f,0);
        } else {
         if ($265) {
          break;
         }
         $273=((HEAP32[(($3)>>2)])|0);
         $274=((($273)-(1))|0);
         HEAP32[(($3)>>2)]=$274;
         $275=($gotrad_0_i|0)==0;
         if ($275) {
          break;
         }
         $277=((($273)-(2))|0);
         HEAP32[(($3)>>2)]=$277;
        }
       } while(0);
       $279=(+((($sign_0|0))|0));
       $280=($279)*((0.0));
       $_0=$280;

       STACKTOP=sp;return (+($_0));
      }
      $282=($gotrad_0_i|0)==0;
      $dc_0_rp_1_i$0=($282?$dc_0_i$0:$rp_1_i$0);
      $dc_0_rp_1_i$1=($282?$dc_0_i$1:$rp_1_i$1);
      $$etemp$4$0=8;
      $$etemp$4$1=0;
      $283=(($dc_0_i$1|0) < ($$etemp$4$1|0)) | (((($dc_0_i$1|0) == ($$etemp$4$1|0) & ($dc_0_i$0>>>0) <  ($$etemp$4$0>>>0))));
      if ($283) {
       $x_318_i=$x_0_i;$dc_219_i$1=$dc_0_i$1;$dc_219_i$0=$dc_0_i$0;
       while(1) {



        $284=$x_318_i<<4;
        $$etemp$5$0=1;
        $$etemp$5$1=0;
        $285$0=((_i64Add($dc_219_i$0,$dc_219_i$1,$$etemp$5$0,$$etemp$5$1))|0);$285$1=tempRet0;
        $$etemp$6$0=8;
        $$etemp$6$1=0;
        $286=(($285$1|0) < ($$etemp$6$1|0)) | (((($285$1|0) == ($$etemp$6$1|0) & ($285$0>>>0) <  ($$etemp$6$0>>>0))));
        if ($286) {
         $x_318_i=$284;$dc_219_i$1=$285$1;$dc_219_i$0=$285$0;
        } else {
         $x_3_lcssa_i=$284;
         break;
        }
       }
      } else {
       $x_3_lcssa_i=$x_0_i;
      }

      $287=$c_2_lcssa_i|32;
      $288=($287|0)==112;
      do {
       if ($288) {
        $290$0=((_scanexp($f,$pok))|0);
        $290$1=tempRet0;
        $$etemp$7$0=0;
        $$etemp$7$1=-2147483648;
        $291=(($290$0|0) == ($$etemp$7$0|0)) & (($290$1|0) == ($$etemp$7$1|0));
        if (!($291)) {
         $e2_0_i$1=$290$1;$e2_0_i$0=$290$0;
         break;
        }
        $293=($pok|0)==0;
        if ($293) {
         ___shlim($f,0);
         $_0=0.0;

         STACKTOP=sp;return (+($_0));
        } else {
         $295=((HEAP32[(($4)>>2)])|0);
         $296=($295|0)==0;
         if ($296) {
          $e2_0_i$1=0;$e2_0_i$0=0;
          break;
         }
         $298=((HEAP32[(($3)>>2)])|0);
         $299=((($298)-(1))|0);
         HEAP32[(($3)>>2)]=$299;
         $e2_0_i$1=0;$e2_0_i$0=0;
         break;
        }
       } else {
        $302=((HEAP32[(($4)>>2)])|0);
        $303=($302|0)==0;
        if ($303) {
         $e2_0_i$1=0;$e2_0_i$0=0;
         break;
        }
        $305=((HEAP32[(($3)>>2)])|0);
        $306=((($305)-(1))|0);
        HEAP32[(($3)>>2)]=$306;
        $e2_0_i$1=0;$e2_0_i$0=0;
       }
      } while(0);


      $308$0=($dc_0_rp_1_i$0<<2)|(0>>>30);
      $308$1=($dc_0_rp_1_i$1<<2)|($dc_0_rp_1_i$0>>>30);
      $$etemp$8$0=-32;
      $$etemp$8$1=-1;
      $309$0=((_i64Add($308$0,$308$1,$$etemp$8$0,$$etemp$8$1))|0);$309$1=tempRet0;
      $310$0=((_i64Add($309$0,$309$1,$e2_0_i$0,$e2_0_i$1))|0);$310$1=tempRet0;
      $311=($x_3_lcssa_i|0)==0;
      if ($311) {
       $313=(+((($sign_0|0))|0));
       $314=($313)*((0.0));
       $_0=$314;

       STACKTOP=sp;return (+($_0));
      }
      $316=(((-$emin_0_ph))|0);
      $317$0=$316;
      $317$1=0;
      $318=(($310$1|0) > ($317$1|0)) | (((($310$1|0) == ($317$1|0) & ($310$0>>>0) >  ($317$0>>>0))));
      if ($318) {
       $320=((___errno_location())|0);
       HEAP32[(($320)>>2)]=34;
       $321=(+((($sign_0|0))|0));
       $322=($321)*((1.7976931348623157e+308));
       $323=($322)*((1.7976931348623157e+308));
       $_0=$323;

       STACKTOP=sp;return (+($_0));
      }
      $325=((($emin_0_ph)-(106))|0);
      $326$0=$325;
      $326$1=((((($325|0)<0))|0)?-1:0);
      $327=(($310$1|0) < ($326$1|0)) | (((($310$1|0) == ($326$1|0) & ($310$0>>>0) <  ($326$0>>>0))));
      if ($327) {
       $330=((___errno_location())|0);
       HEAP32[(($330)>>2)]=34;
       $331=(+((($sign_0|0))|0));
       $332=($331)*((2.2250738585072014e-308));
       $333=($332)*((2.2250738585072014e-308));
       $_0=$333;

       STACKTOP=sp;return (+($_0));
      }
      $328=($x_3_lcssa_i|0)>-1;
      if ($328) {
       $x_413_i=$x_3_lcssa_i;$y_314_i=$y_0_i;$e2_115_i$1=$310$1;$e2_115_i$0=$310$0;
       while(1) {




        $334=$y_314_i<(0.5);
        $335=$x_413_i<<1;
        if ($334) {
         $_pn_i=$y_314_i;$x_5_i=$335;
        } else {
         $337=$335|1;
         $338=($y_314_i)+((-1.0));
         $_pn_i=$338;$x_5_i=$337;
        }


        $y_4_i=($y_314_i)+($_pn_i);
        $$etemp$9$0=-1;
        $$etemp$9$1=-1;
        $340$0=((_i64Add($e2_115_i$0,$e2_115_i$1,$$etemp$9$0,$$etemp$9$1))|0);$340$1=tempRet0;
        $341=($x_5_i|0)>-1;
        if ($341) {
         $x_413_i=$x_5_i;$y_314_i=$y_4_i;$e2_115_i$1=$340$1;$e2_115_i$0=$340$0;
        } else {
         $x_4_lcssa_i=$x_5_i;$y_3_lcssa_i=$y_4_i;$e2_1_lcssa_i$1=$340$1;$e2_1_lcssa_i$0=$340$0;
         break;
        }
       }
      } else {
       $x_4_lcssa_i=$x_3_lcssa_i;$y_3_lcssa_i=$y_0_i;$e2_1_lcssa_i$1=$310$1;$e2_1_lcssa_i$0=$310$0;
      }




      $342$0=$bits_0_ph;
      $342$1=0;
      $343$0=$emin_0_ph;
      $343$1=((((($emin_0_ph|0)<0))|0)?-1:0);
      $$etemp$10$0=32;
      $$etemp$10$1=0;
      $344$0=((_i64Subtract($$etemp$10$0,$$etemp$10$1,$343$0,$343$1))|0);$344$1=tempRet0;
      $345$0=((_i64Add($e2_1_lcssa_i$0,$e2_1_lcssa_i$1,$344$0,$344$1))|0);$345$1=tempRet0;
      $346=(($342$1|0) > ($345$1|0)) | (((($342$1|0) == ($345$1|0) & ($342$0>>>0) >  ($345$0>>>0))));
      if ($346) {
       $348$0=$345$0;
       $348=$348$0;
       $349=($348|0)<0;
       if ($349) {
        $_0711_i=0;
        label = 126;
       } else {
        $_07_i=$348;
        label = 124;
       }
      } else {
       $_07_i=$bits_0_ph;
       label = 124;
      }
      do {
       if ((label|0) == 124) {

        $351=($_07_i|0)<53;
        if ($351) {
         $_0711_i=$_07_i;
         label = 126;
         break;
        }
        $_pre_i=(+((($sign_0|0))|0));
        $bias_0_i=0.0;$_0712_i=$_07_i;$_pre_phi_i=$_pre_i;
       }
      } while(0);
      if ((label|0) == 126) {

       $352=(((84)-($_0711_i))|0);
       $353=(+(_scalbn(1.0,$352)));
       $354=(+((($sign_0|0))|0));
       $355=(+(_copysign((+($353)),(+($354)))));
       $bias_0_i=$355;$_0712_i=$_0711_i;$_pre_phi_i=$354;
      }



      $357=($_0712_i|0)<32;
      $358=$y_3_lcssa_i!=(0.0);
      $or_cond4_i=$357&$358;
      $359=$x_4_lcssa_i&1;
      $360=($359|0)==0;
      $or_cond9_i=$or_cond4_i&$360;
      $361=($or_cond9_i&1);
      $x_6_i=((($361)+($x_4_lcssa_i))|0);
      $y_5_i=($or_cond9_i?(0.0):$y_3_lcssa_i);
      $362=(+((($x_6_i>>>0))>>>0));
      $363=($_pre_phi_i)*($362);
      $364=($bias_0_i)+($363);
      $365=($_pre_phi_i)*($y_5_i);
      $366=($365)+($364);
      $367=($366)-($bias_0_i);
      $368=$367!=(0.0);
      if (!($368)) {
       $370=((___errno_location())|0);
       HEAP32[(($370)>>2)]=34;
      }
      $372$0=$e2_1_lcssa_i$0;
      $372=$372$0;
      $373=(+(_scalbnl($367,$372)));
      $_0=$373;

      STACKTOP=sp;return (+($_0));
     } else {
      $c_6=$c_5;
     }
    } while(0);

    $381=$x_i;
    $$etemp$11$0=512;
    $$etemp$11$1=0;

    $sum_i=((($emin_0_ph)+($bits_0_ph))|0);
    $382=(((-$sum_i))|0);
    $_012_i=$c_6;$gotdig_0_i12=0;
    while(1) {


     if (((($_012_i|0))|0)==((46)|0)) {
      label = 137;
      break;
     } else if (!(((($_012_i|0))|0)==((48)|0))) {
      $_2_i=$_012_i;$gotrad_0_i14=0;$gotdig_2_i13=$gotdig_0_i12;$lrp_1_i$1=0;$lrp_1_i$0=0;
      break;
     }
     $384=((HEAP32[(($3)>>2)])|0);
     $385=((HEAP32[(($4)>>2)])|0);
     $386=($384>>>0)<($385>>>0);
     if ($386) {
      $388=(($384+1)|0);
      HEAP32[(($3)>>2)]=$388;
      $389=((HEAP8[($384)])|0);
      $390=($389&255);
      $_012_i=$390;$gotdig_0_i12=1;
      continue;
     } else {
      $392=((___shgetc($f))|0);
      $_012_i=$392;$gotdig_0_i12=1;
      continue;
     }
    }
    do {
     if ((label|0) == 137) {
      $394=((HEAP32[(($3)>>2)])|0);
      $395=((HEAP32[(($4)>>2)])|0);
      $396=($394>>>0)<($395>>>0);
      if ($396) {
       $398=(($394+1)|0);
       HEAP32[(($3)>>2)]=$398;
       $399=((HEAP8[($394)])|0);
       $400=($399&255);
       $_1_ph_i=$400;
      } else {
       $402=((___shgetc($f))|0);
       $_1_ph_i=$402;
      }

      $403=($_1_ph_i|0)==48;
      if ($403) {
       $lrp_0133_i$1=0;$lrp_0133_i$0=0;
      } else {
       $_2_i=$_1_ph_i;$gotrad_0_i14=1;$gotdig_2_i13=$gotdig_0_i12;$lrp_1_i$1=0;$lrp_1_i$0=0;
       break;
      }
      while(1) {


       $$etemp$12$0=-1;
       $$etemp$12$1=-1;
       $404$0=((_i64Add($lrp_0133_i$0,$lrp_0133_i$1,$$etemp$12$0,$$etemp$12$1))|0);$404$1=tempRet0;
       $405=((HEAP32[(($3)>>2)])|0);
       $406=((HEAP32[(($4)>>2)])|0);
       $407=($405>>>0)<($406>>>0);
       if ($407) {
        $409=(($405+1)|0);
        HEAP32[(($3)>>2)]=$409;
        $410=((HEAP8[($405)])|0);
        $411=($410&255);
        $_1_be_i=$411;
       } else {
        $413=((___shgetc($f))|0);
        $_1_be_i=$413;
       }

       $414=($_1_be_i|0)==48;
       if ($414) {
        $lrp_0133_i$1=$404$1;$lrp_0133_i$0=$404$0;
       } else {
        $_2_i=$_1_be_i;$gotrad_0_i14=1;$gotdig_2_i13=1;$lrp_1_i$1=$404$1;$lrp_1_i$0=$404$0;
        break;
       }
      }
     }
    } while(0);





    $415=(($x_i)|0);
    HEAP32[(($415)>>2)]=0;
    $416=((($_2_i)-(48))|0);
    $417=($416>>>0)<((10)>>>0);
    $418=($_2_i|0)==46;
    $or_cond11113_i=$417|$418;
    L221: do {
     if ($or_cond11113_i) {
      $419=(($x_i+496)|0);
      $lrp_2114_i$1=$lrp_1_i$1;$lrp_2114_i$0=$lrp_1_i$0;$dc_0115_i$1=0;$dc_0115_i$0=0;$lnz_0116_i=0;$gotdig_3117_i=$gotdig_2_i13;$gotrad_1118_i=$gotrad_0_i14;$k_0119_i=0;$j_0120_i=0;$_3121_i=$_2_i;$421=$416;$420=$418;
      L223: while(1) {












       do {
        if ($420) {
         $cond_i=($gotrad_1118_i|0)==0;
         if ($cond_i) {
          $j_2_i=$j_0120_i;$k_2_i=$k_0119_i;$gotrad_2_i=1;$gotdig_4_i=$gotdig_3117_i;$lnz_2_i=$lnz_0116_i;$dc_1_i16$1=$dc_0115_i$1;$dc_1_i16$0=$dc_0115_i$0;$lrp_3_i$1=$dc_0115_i$1;$lrp_3_i$0=$dc_0115_i$0;
         } else {
          break L223;
         }
        } else {
         $425=($k_0119_i|0)<125;
         $$etemp$13$0=1;
         $$etemp$13$1=0;
         $426$0=((_i64Add($dc_0115_i$0,$dc_0115_i$1,$$etemp$13$0,$$etemp$13$1))|0);$426$1=tempRet0;
         $427=($_3121_i|0)!=48;
         if (!($425)) {
          if (!($427)) {
           $j_2_i=$j_0120_i;$k_2_i=$k_0119_i;$gotrad_2_i=$gotrad_1118_i;$gotdig_4_i=$gotdig_3117_i;$lnz_2_i=$lnz_0116_i;$dc_1_i16$1=$426$1;$dc_1_i16$0=$426$0;$lrp_3_i$1=$lrp_2114_i$1;$lrp_3_i$0=$lrp_2114_i$0;
           break;
          }
          $443=((HEAP32[(($419)>>2)])|0);
          $444=$443|1;
          HEAP32[(($419)>>2)]=$444;
          $j_2_i=$j_0120_i;$k_2_i=$k_0119_i;$gotrad_2_i=$gotrad_1118_i;$gotdig_4_i=$gotdig_3117_i;$lnz_2_i=$lnz_0116_i;$dc_1_i16$1=$426$1;$dc_1_i16$0=$426$0;$lrp_3_i$1=$lrp_2114_i$1;$lrp_3_i$0=$lrp_2114_i$0;
          break;
         }
         $429$0=$426$0;
         $429=$429$0;
         $_lnz_0_i=($427?$429:$lnz_0116_i);
         $430=($j_0120_i|0)==0;
         $431=(($x_i+($k_0119_i<<2))|0);
         if ($430) {
          $storemerge_i=$421;
         } else {
          $433=((HEAP32[(($431)>>2)])|0);
          $434=((($433)*(10))&-1);
          $435=((($_3121_i)-(48))|0);
          $436=((($435)+($434))|0);
          $storemerge_i=$436;
         }

         HEAP32[(($431)>>2)]=$storemerge_i;
         $438=((($j_0120_i)+(1))|0);
         $439=($438|0)==9;
         $440=($439&1);
         $_k_0_i=((($440)+($k_0119_i))|0);
         $_14_i=($439?0:$438);
         $j_2_i=$_14_i;$k_2_i=$_k_0_i;$gotrad_2_i=$gotrad_1118_i;$gotdig_4_i=1;$lnz_2_i=$_lnz_0_i;$dc_1_i16$1=$426$1;$dc_1_i16$0=$426$0;$lrp_3_i$1=$lrp_2114_i$1;$lrp_3_i$0=$lrp_2114_i$0;
        }
       } while(0);









       $446=((HEAP32[(($3)>>2)])|0);
       $447=((HEAP32[(($4)>>2)])|0);
       $448=($446>>>0)<($447>>>0);
       if ($448) {
        $450=(($446+1)|0);
        HEAP32[(($3)>>2)]=$450;
        $451=((HEAP8[($446)])|0);
        $452=($451&255);
        $_3_be_i=$452;
       } else {
        $454=((___shgetc($f))|0);
        $_3_be_i=$454;
       }

       $455=((($_3_be_i)-(48))|0);
       $456=($455>>>0)<((10)>>>0);
       $457=($_3_be_i|0)==46;
       $or_cond11_i=$456|$457;
       if ($or_cond11_i) {
        $lrp_2114_i$1=$lrp_3_i$1;$lrp_2114_i$0=$lrp_3_i$0;$dc_0115_i$1=$dc_1_i16$1;$dc_0115_i$0=$dc_1_i16$0;$lnz_0116_i=$lnz_2_i;$gotdig_3117_i=$gotdig_4_i;$gotrad_1118_i=$gotrad_2_i;$k_0119_i=$k_2_i;$j_0120_i=$j_2_i;$_3121_i=$_3_be_i;$421=$455;$420=$457;
       } else {
        $lrp_2_lcssa_i$1=$lrp_3_i$1;$lrp_2_lcssa_i$0=$lrp_3_i$0;$dc_0_lcssa_i$1=$dc_1_i16$1;$dc_0_lcssa_i$0=$dc_1_i16$0;$lnz_0_lcssa_i=$lnz_2_i;$gotdig_3_lcssa_i=$gotdig_4_i;$gotrad_1_lcssa_i=$gotrad_2_i;$k_0_lcssa_i=$k_2_i;$j_0_lcssa_i=$j_2_i;$_3_lcssa_i=$_3_be_i;
        label = 160;
        break L221;
       }
      }
      $423=($gotdig_3117_i|0)!=0;
      $479=$423;$lrp_42527_i$1=$lrp_2114_i$1;$lrp_42527_i$0=$lrp_2114_i$0;$dc_097_i$1=$dc_0115_i$1;$dc_097_i$0=$dc_0115_i$0;$lnz_0101_i=$lnz_0116_i;$k_0107_i=$k_0119_i;$j_0111_i=$j_0120_i;
      label = 168;
     } else {
      $lrp_2_lcssa_i$1=$lrp_1_i$1;$lrp_2_lcssa_i$0=$lrp_1_i$0;$dc_0_lcssa_i$1=0;$dc_0_lcssa_i$0=0;$lnz_0_lcssa_i=0;$gotdig_3_lcssa_i=$gotdig_2_i13;$gotrad_1_lcssa_i=$gotrad_0_i14;$k_0_lcssa_i=0;$j_0_lcssa_i=0;$_3_lcssa_i=$_2_i;
      label = 160;
     }
    } while(0);
    do {
     if ((label|0) == 160) {










      $458=($gotrad_1_lcssa_i|0)==0;
      $dc_0_lrp_2_i$0=($458?$dc_0_lcssa_i$0:$lrp_2_lcssa_i$0);
      $dc_0_lrp_2_i$1=($458?$dc_0_lcssa_i$1:$lrp_2_lcssa_i$1);
      $459=($gotdig_3_lcssa_i|0)!=0;
      $460=$_3_lcssa_i|32;
      $461=($460|0)==101;
      $or_cond16_i=$459&$461;
      if (!($or_cond16_i)) {
       $477=($_3_lcssa_i|0)>-1;
       if ($477) {
        $479=$459;$lrp_42527_i$1=$dc_0_lrp_2_i$1;$lrp_42527_i$0=$dc_0_lrp_2_i$0;$dc_097_i$1=$dc_0_lcssa_i$1;$dc_097_i$0=$dc_0_lcssa_i$0;$lnz_0101_i=$lnz_0_lcssa_i;$k_0107_i=$k_0_lcssa_i;$j_0111_i=$j_0_lcssa_i;
        label = 168;
        break;
       } else {
        $lrp_5_i$1=$dc_0_lrp_2_i$1;$lrp_5_i$0=$dc_0_lrp_2_i$0;$486=$459;$dc_096_i$1=$dc_0_lcssa_i$1;$dc_096_i$0=$dc_0_lcssa_i$0;$lnz_0100_i=$lnz_0_lcssa_i;$k_0106_i=$k_0_lcssa_i;$j_0110_i=$j_0_lcssa_i;
        label = 170;
        break;
       }
      }
      $463$0=((_scanexp($f,$pok))|0);
      $463$1=tempRet0;
      $$etemp$14$0=0;
      $$etemp$14$1=-2147483648;
      $464=(($463$0|0) == ($$etemp$14$0|0)) & (($463$1|0) == ($$etemp$14$1|0));
      do {
       if ($464) {
        $466=($pok|0)==0;
        if ($466) {
         ___shlim($f,0);
         $_0=0.0;

         STACKTOP=sp;return (+($_0));
        } else {
         $468=((HEAP32[(($4)>>2)])|0);
         $469=($468|0)==0;
         if ($469) {
          $e10_0_i$1=0;$e10_0_i$0=0;
          break;
         }
         $471=((HEAP32[(($3)>>2)])|0);
         $472=((($471)-(1))|0);
         HEAP32[(($3)>>2)]=$472;
         $e10_0_i$1=0;$e10_0_i$0=0;
         break;
        }
       } else {
        $e10_0_i$1=$463$1;$e10_0_i$0=$463$0;
       }
      } while(0);


      $475$0=((_i64Add($e10_0_i$0,$e10_0_i$1,$dc_0_lrp_2_i$0,$dc_0_lrp_2_i$1))|0);$475$1=tempRet0;
      $lrp_528_i$1=$475$1;$lrp_528_i$0=$475$0;$dc_095_i$1=$dc_0_lcssa_i$1;$dc_095_i$0=$dc_0_lcssa_i$0;$lnz_099_i=$lnz_0_lcssa_i;$k_0105_i=$k_0_lcssa_i;$j_0109_i=$j_0_lcssa_i;
     }
    } while(0);
    do {
     if ((label|0) == 168) {








      $480=((HEAP32[(($4)>>2)])|0);
      $481=($480|0)==0;
      if ($481) {
       $lrp_5_i$1=$lrp_42527_i$1;$lrp_5_i$0=$lrp_42527_i$0;$486=$479;$dc_096_i$1=$dc_097_i$1;$dc_096_i$0=$dc_097_i$0;$lnz_0100_i=$lnz_0101_i;$k_0106_i=$k_0107_i;$j_0110_i=$j_0111_i;
       label = 170;
       break;
      }
      $483=((HEAP32[(($3)>>2)])|0);
      $484=((($483)-(1))|0);
      HEAP32[(($3)>>2)]=$484;
      if ($479) {
       $lrp_528_i$1=$lrp_42527_i$1;$lrp_528_i$0=$lrp_42527_i$0;$dc_095_i$1=$dc_097_i$1;$dc_095_i$0=$dc_097_i$0;$lnz_099_i=$lnz_0101_i;$k_0105_i=$k_0107_i;$j_0109_i=$j_0111_i;
      } else {
       label = 171;
      }
     }
    } while(0);
    if ((label|0) == 170) {








     if ($486) {
      $lrp_528_i$1=$lrp_5_i$1;$lrp_528_i$0=$lrp_5_i$0;$dc_095_i$1=$dc_096_i$1;$dc_095_i$0=$dc_096_i$0;$lnz_099_i=$lnz_0100_i;$k_0105_i=$k_0106_i;$j_0109_i=$j_0110_i;
     } else {
      label = 171;
     }
    }
    if ((label|0) == 171) {
     $488=((___errno_location())|0);
     HEAP32[(($488)>>2)]=22;
     ___shlim($f,0);
     $_0=0.0;

     STACKTOP=sp;return (+($_0));
    }







    $490=((HEAP32[(($415)>>2)])|0);
    $491=($490|0)==0;
    if ($491) {
     $493=(+((($sign_0|0))|0));
     $494=($493)*((0.0));
     $_0=$494;

     STACKTOP=sp;return (+($_0));
    }
    $496=(($lrp_528_i$0|0) == ($dc_095_i$0|0)) & (($lrp_528_i$1|0) == ($dc_095_i$1|0));
    $$etemp$15$0=10;
    $$etemp$15$1=0;
    $497=(($dc_095_i$1|0) < ($$etemp$15$1|0)) | (((($dc_095_i$1|0) == ($$etemp$15$1|0) & ($dc_095_i$0>>>0) <  ($$etemp$15$0>>>0))));
    $or_cond_i17=$496&$497;
    do {
     if ($or_cond_i17) {
      $499=($bits_0_ph>>>0)>((30)>>>0);
      $500=$490>>>($bits_0_ph>>>0);
      $501=($500|0)==0;
      $or_cond18_i=$499|$501;
      if (!($or_cond18_i)) {
       break;
      }
      $503=(+((($sign_0|0))|0));
      $504=(+((($490>>>0))>>>0));
      $505=($503)*($504);
      $_0=$505;

      STACKTOP=sp;return (+($_0));
     }
    } while(0);
    $507=(((($emin_0_ph|0))/(-2))&-1);
    $508$0=$507;
    $508$1=((((($507|0)<0))|0)?-1:0);
    $509=(($lrp_528_i$1|0) > ($508$1|0)) | (((($lrp_528_i$1|0) == ($508$1|0) & ($lrp_528_i$0>>>0) >  ($508$0>>>0))));
    if ($509) {
     $511=((___errno_location())|0);
     HEAP32[(($511)>>2)]=34;
     $512=(+((($sign_0|0))|0));
     $513=($512)*((1.7976931348623157e+308));
     $514=($513)*((1.7976931348623157e+308));
     $_0=$514;

     STACKTOP=sp;return (+($_0));
    }
    $516=((($emin_0_ph)-(106))|0);
    $517$0=$516;
    $517$1=((((($516|0)<0))|0)?-1:0);
    $518=(($lrp_528_i$1|0) < ($517$1|0)) | (((($lrp_528_i$1|0) == ($517$1|0) & ($lrp_528_i$0>>>0) <  ($517$0>>>0))));
    if ($518) {
     $520=((___errno_location())|0);
     HEAP32[(($520)>>2)]=34;
     $521=(+((($sign_0|0))|0));
     $522=($521)*((2.2250738585072014e-308));
     $523=($522)*((2.2250738585072014e-308));
     $_0=$523;

     STACKTOP=sp;return (+($_0));
    }
    $525=($j_0109_i|0)==0;
    if ($525) {
     $k_3_i=$k_0105_i;
    } else {
     $526=($j_0109_i|0)<9;
     if ($526) {
      $527=(($x_i+($k_0105_i<<2))|0);
      $_promoted_i=((HEAP32[(($527)>>2)])|0);
      $j_389_i=$j_0109_i;$529=$_promoted_i;
      while(1) {


       $530=((($529)*(10))&-1);
       $531=((($j_389_i)+(1))|0);
       $532=($531|0)<9;
       if ($532) {
        $j_389_i=$531;$529=$530;
       } else {
        break;
       }
      }
      HEAP32[(($527)>>2)]=$530;
     }
     $534=((($k_0105_i)+(1))|0);
     $k_3_i=$534;
    }

    $536$0=$lrp_528_i$0;
    $536=$536$0;
    $537=($lnz_099_i|0)<9;
    do {
     if ($537) {
      $539=($lnz_099_i|0)<=($536|0);
      $540=($536|0)<18;
      $or_cond3_i=$539&$540;
      if (!($or_cond3_i)) {
       break;
      }
      $542=($536|0)==9;
      if ($542) {
       $544=(+((($sign_0|0))|0));
       $545=((HEAP32[(($415)>>2)])|0);
       $546=(+((($545>>>0))>>>0));
       $547=($544)*($546);
       $_0=$547;

       STACKTOP=sp;return (+($_0));
      }
      $549=($536|0)<9;
      if ($549) {
       $551=(+((($sign_0|0))|0));
       $552=((HEAP32[(($415)>>2)])|0);
       $553=(+((($552>>>0))>>>0));
       $554=($551)*($553);
       $555=(((8)-($536))|0);
       $556=((3920+($555<<2))|0);
       $557=((HEAP32[(($556)>>2)])|0);
       $558=(+((($557|0))|0));
       $559=($554)/($558);
       $_0=$559;

       STACKTOP=sp;return (+($_0));
      }
      $561=((($536)*(-3))&-1);
      $_neg38_i=((($bits_0_ph)+(27))|0);
      $562=((($_neg38_i)+($561))|0);
      $563=($562|0)>30;
      $_pre_i18=((HEAP32[(($415)>>2)])|0);
      $564=$_pre_i18>>>($562>>>0);
      $565=($564|0)==0;
      $or_cond186_i=$563|$565;
      if (!($or_cond186_i)) {
       break;
      }
      $566=(+((($sign_0|0))|0));
      $567=(+((($_pre_i18>>>0))>>>0));
      $568=($566)*($567);
      $569=((($536)-(10))|0);
      $570=((3920+($569<<2))|0);
      $571=((HEAP32[(($570)>>2)])|0);
      $572=(+((($571|0))|0));
      $573=($568)*($572);
      $_0=$573;

      STACKTOP=sp;return (+($_0));
     }
    } while(0);
    $575=(((($536|0))%(9))&-1);
    $576=($575|0)==0;
    if ($576) {
     $a_2_ph58_i=0;$z_1_ph57_i=$k_3_i;$e2_0_ph_i=0;$rp_2_ph56_i=$536;
    } else {
     $578=($536|0)>-1;
     $579=((($575)+(9))|0);
     $580=($578?$575:$579);
     $581=(((8)-($580))|0);
     $582=((3920+($581<<2))|0);
     $583=((HEAP32[(($582)>>2)])|0);
     $584=($k_3_i|0)==0;
     do {
      if ($584) {
       $z_0_i=0;$a_0_lcssa181_i=0;$rp_0_lcssa182_i=$536;
      } else {
       $585=(((1000000000)/(($583|0)))&-1);
       $rp_078_i=$536;$a_079_i=0;$k_480_i=0;$carry_081_i=0;
       while(1) {




        $587=(($x_i+($k_480_i<<2))|0);
        $588=((HEAP32[(($587)>>2)])|0);
        $589=(((($588>>>0))%(($583>>>0)))&-1);
        $590=(((($588>>>0))/(($583>>>0)))&-1);
        $591=((($590)+($carry_081_i))|0);
        HEAP32[(($587)>>2)]=$591;
        $592=(Math_imul($589,$585)|0);
        $593=($k_480_i|0)==($a_079_i|0);
        $594=($591|0)==0;
        $or_cond19_i=$593&$594;
        $595=((($k_480_i)+(1))|0);
        if ($or_cond19_i) {
         $597=$595&127;
         $598=((($rp_078_i)-(9))|0);
         $a_1_i=$597;$rp_1_i19=$598;
        } else {
         $a_1_i=$a_079_i;$rp_1_i19=$rp_078_i;
        }


        $599=($595|0)==($k_3_i|0);
        if ($599) {
         break;
        } else {
         $rp_078_i=$rp_1_i19;$a_079_i=$a_1_i;$k_480_i=$595;$carry_081_i=$592;
        }
       }
       $600=($592|0)==0;
       if ($600) {
        $z_0_i=$k_3_i;$a_0_lcssa181_i=$a_1_i;$rp_0_lcssa182_i=$rp_1_i19;
        break;
       }
       $602=((($k_3_i)+(1))|0);
       $603=(($x_i+($k_3_i<<2))|0);
       HEAP32[(($603)>>2)]=$592;
       $z_0_i=$602;$a_0_lcssa181_i=$a_1_i;$rp_0_lcssa182_i=$rp_1_i19;
      }
     } while(0);



     $604=(((9)-($580))|0);
     $605=((($604)+($rp_0_lcssa182_i))|0);
     $a_2_ph58_i=$a_0_lcssa181_i;$z_1_ph57_i=$z_0_i;$e2_0_ph_i=0;$rp_2_ph56_i=$605;
    }
    L315: while(1) {




     $606=($rp_2_ph56_i|0)<18;
     $607=(($x_i+($a_2_ph58_i<<2))|0);
     if ($606) {
      $z_1_us_i=$z_1_ph57_i;$e2_0_us_i=$e2_0_ph_i;
      while(1) {


       $609=((($z_1_us_i)+(127))|0);
       $carry1_0_us_i=0;$k_5_in_us_i=$609;$z_2_us_i=$z_1_us_i;
       while(1) {



        $k_5_us_i=$k_5_in_us_i&127;
        $611=(($x_i+($k_5_us_i<<2))|0);
        $612=((HEAP32[(($611)>>2)])|0);
        $613$0=$612;
        $613$1=0;
        $614$0=($613$0<<29)|(0>>>3);
        $614$1=($613$1<<29)|($613$0>>>3);
        $615$0=$carry1_0_us_i;
        $615$1=0;
        $616$0=((_i64Add($614$0,$614$1,$615$0,$615$1))|0);$616$1=tempRet0;
        $$etemp$16$0=1000000000;
        $$etemp$16$1=0;
        $617=(($616$1>>>0) > ($$etemp$16$1>>>0)) | (((($616$1>>>0) == ($$etemp$16$1>>>0) & ($616$0>>>0) >  ($$etemp$16$0>>>0))));
        $extract_t37_us_i$0=$616$0;
        $extract_t37_us_i=$extract_t37_us_i$0;
        if ($617) {
         $$etemp$17$0=1000000000;
         $$etemp$17$1=0;
         $619$0=((___udivdi3($616$0,$616$1,$$etemp$17$0,$$etemp$17$1))|0);$619$1=tempRet0;
         $620$0=$619$0;
         $620=$620$0;
         $$etemp$18$0=1000000000;
         $$etemp$18$1=0;
         $621$0=((___uremdi3($616$0,$616$1,$$etemp$18$0,$$etemp$18$1))|0);$621$1=tempRet0;
         $extract_t_us_i$0=$621$0;
         $extract_t_us_i=$extract_t_us_i$0;
         $carry1_1_us_i=$620;$_sink_off0_us_i=$extract_t_us_i;
        } else {
         $carry1_1_us_i=0;$_sink_off0_us_i=$extract_t37_us_i;
        }


        HEAP32[(($611)>>2)]=$_sink_off0_us_i;
        $623=((($z_2_us_i)+(127))|0);
        $624=$623&127;
        $625=($k_5_us_i|0)!=($624|0);
        $626=($k_5_us_i|0)==($a_2_ph58_i|0);
        $or_cond20_us_i=$625|$626;
        if ($or_cond20_us_i) {
         $z_3_us_i=$z_2_us_i;
        } else {
         $628=($_sink_off0_us_i|0)==0;
         $k_5_z_2_us_i=($628?$k_5_us_i:$z_2_us_i);
         $z_3_us_i=$k_5_z_2_us_i;
        }

        $630=((($k_5_us_i)-(1))|0);
        if ($626) {
         break;
        } else {
         $carry1_0_us_i=$carry1_1_us_i;$k_5_in_us_i=$630;$z_2_us_i=$z_3_us_i;
        }
       }
       $632=((($e2_0_us_i)-(29))|0);
       $633=($carry1_1_us_i|0)==0;
       if ($633) {
        $z_1_us_i=$z_3_us_i;$e2_0_us_i=$632;
       } else {
        $_lcssa61_i=$632;$z_3_lcssa_lcssa_i=$z_3_us_i;$carry1_1_lcssa_lcssa_i=$carry1_1_us_i;
        break;
       }
      }
     } else {
      $608=($rp_2_ph56_i|0)==18;
      if ($608) {
       $z_1_us63_i=$z_1_ph57_i;$e2_0_us62_i=$e2_0_ph_i;
      } else {
       $a_3_ph_i=$a_2_ph58_i;$z_5_ph_i=$z_1_ph57_i;$e2_1_ph_i=$e2_0_ph_i;$rp_3_ph51_i=$rp_2_ph56_i;
       break;
      }
      while(1) {


       $634=((HEAP32[(($607)>>2)])|0);
       $635=($634>>>0)<((9007199)>>>0);
       if (!($635)) {
        $a_3_ph_i=$a_2_ph58_i;$z_5_ph_i=$z_1_us63_i;$e2_1_ph_i=$e2_0_us62_i;$rp_3_ph51_i=18;
        break L315;
       }
       $636=((($z_1_us63_i)+(127))|0);
       $carry1_0_us67_i=0;$k_5_in_us66_i=$636;$z_2_us65_i=$z_1_us63_i;
       while(1) {



        $k_5_us68_i=$k_5_in_us66_i&127;
        $638=(($x_i+($k_5_us68_i<<2))|0);
        $639=((HEAP32[(($638)>>2)])|0);
        $640$0=$639;
        $640$1=0;
        $641$0=($640$0<<29)|(0>>>3);
        $641$1=($640$1<<29)|($640$0>>>3);
        $642$0=$carry1_0_us67_i;
        $642$1=0;
        $643$0=((_i64Add($641$0,$641$1,$642$0,$642$1))|0);$643$1=tempRet0;
        $$etemp$19$0=1000000000;
        $$etemp$19$1=0;
        $644=(($643$1>>>0) > ($$etemp$19$1>>>0)) | (((($643$1>>>0) == ($$etemp$19$1>>>0) & ($643$0>>>0) >  ($$etemp$19$0>>>0))));
        $extract_t37_us69_i$0=$643$0;
        $extract_t37_us69_i=$extract_t37_us69_i$0;
        if ($644) {
         $$etemp$20$0=1000000000;
         $$etemp$20$1=0;
         $646$0=((___udivdi3($643$0,$643$1,$$etemp$20$0,$$etemp$20$1))|0);$646$1=tempRet0;
         $647$0=$646$0;
         $647=$647$0;
         $$etemp$21$0=1000000000;
         $$etemp$21$1=0;
         $648$0=((___uremdi3($643$0,$643$1,$$etemp$21$0,$$etemp$21$1))|0);$648$1=tempRet0;
         $extract_t_us70_i$0=$648$0;
         $extract_t_us70_i=$extract_t_us70_i$0;
         $carry1_1_us72_i=$647;$_sink_off0_us71_i=$extract_t_us70_i;
        } else {
         $carry1_1_us72_i=0;$_sink_off0_us71_i=$extract_t37_us69_i;
        }


        HEAP32[(($638)>>2)]=$_sink_off0_us71_i;
        $650=((($z_2_us65_i)+(127))|0);
        $651=$650&127;
        $652=($k_5_us68_i|0)!=($651|0);
        $653=($k_5_us68_i|0)==($a_2_ph58_i|0);
        $or_cond20_us73_i=$652|$653;
        if ($or_cond20_us73_i) {
         $z_3_us75_i=$z_2_us65_i;
        } else {
         $655=($_sink_off0_us71_i|0)==0;
         $k_5_z_2_us74_i=($655?$k_5_us68_i:$z_2_us65_i);
         $z_3_us75_i=$k_5_z_2_us74_i;
        }

        $657=((($k_5_us68_i)-(1))|0);
        if ($653) {
         break;
        } else {
         $carry1_0_us67_i=$carry1_1_us72_i;$k_5_in_us66_i=$657;$z_2_us65_i=$z_3_us75_i;
        }
       }
       $659=((($e2_0_us62_i)-(29))|0);
       $660=($carry1_1_us72_i|0)==0;
       if ($660) {
        $z_1_us63_i=$z_3_us75_i;$e2_0_us62_i=$659;
       } else {
        $_lcssa61_i=$659;$z_3_lcssa_lcssa_i=$z_3_us75_i;$carry1_1_lcssa_lcssa_i=$carry1_1_us72_i;
        break;
       }
      }
     }



     $661=((($rp_2_ph56_i)+(9))|0);
     $662=((($a_2_ph58_i)+(127))|0);
     $663=$662&127;
     $664=($663|0)==($z_3_lcssa_lcssa_i|0);
     if ($664) {
      $666=((($z_3_lcssa_lcssa_i)+(127))|0);
      $667=$666&127;
      $668=(($x_i+($667<<2))|0);
      $669=((HEAP32[(($668)>>2)])|0);
      $670=((($z_3_lcssa_lcssa_i)+(126))|0);
      $671=$670&127;
      $672=(($x_i+($671<<2))|0);
      $673=((HEAP32[(($672)>>2)])|0);
      $674=$673|$669;
      HEAP32[(($672)>>2)]=$674;
      $z_4_i=$667;
     } else {
      $z_4_i=$z_3_lcssa_lcssa_i;
     }

     $676=(($x_i+($663<<2))|0);
     HEAP32[(($676)>>2)]=$carry1_1_lcssa_lcssa_i;
     $a_2_ph58_i=$663;$z_1_ph57_i=$z_4_i;$e2_0_ph_i=$_lcssa61_i;$rp_2_ph56_i=$661;
    }
    L346: while(1) {




     $719=((($z_5_ph_i)+(1))|0);
     $720=$719&127;
     $721=((($z_5_ph_i)+(127))|0);
     $722=$721&127;
     $723=(($x_i+($722<<2))|0);
     $a_3_i_ph=$a_3_ph_i;$e2_1_i_ph=$e2_1_ph_i;$rp_3_i_ph=$rp_3_ph51_i;
     while(1) {



      $724=($rp_3_i_ph|0)==18;
      $725=($rp_3_i_ph|0)>27;
      $_21_i=($725?9:1);
      $a_3_i=$a_3_i_ph;$e2_1_i=$e2_1_i_ph;
      while(1) {


       $i_043_i=0;
       while(1) {

        $680=((($i_043_i)+($a_3_i))|0);
        $681=$680&127;
        $682=($681|0)==($z_5_ph_i|0);
        if ($682) {
         $i_1_i=2;
         break;
        }
        $684=(($x_i+($681<<2))|0);
        $685=((HEAP32[(($684)>>2)])|0);
        $686=((3912+($i_043_i<<2))|0);
        $687=((HEAP32[(($686)>>2)])|0);
        $688=($685>>>0)<($687>>>0);
        if ($688) {
         $i_1_i=2;
         break;
        }
        $690=($685>>>0)>($687>>>0);
        $691=((($i_043_i)+(1))|0);
        if ($690) {
         $i_1_i=$i_043_i;
         break;
        }
        $678=($691|0)<2;
        if ($678) {
         $i_043_i=$691;
        } else {
         $i_1_i=$691;
         break;
        }
       }

       $693=($i_1_i|0)==2;
       $or_cond7_i=$693&$724;
       if ($or_cond7_i) {
        break L346;
       }
       $697=((($_21_i)+($e2_1_i))|0);
       $698=($a_3_i|0)==($z_5_ph_i|0);
       if ($698) {
        $a_3_i=$z_5_ph_i;$e2_1_i=$697;
       } else {
        break;
       }
      }
      $699=1<<$_21_i;
      $700=((($699)-(1))|0);
      $701=1000000000>>>($_21_i>>>0);
      $rp_444_i=$rp_3_i_ph;$a_445_i=$a_3_i;$k_646_i=$a_3_i;$carry3_048_i=0;
      while(1) {




       $702=(($x_i+($k_646_i<<2))|0);
       $703=((HEAP32[(($702)>>2)])|0);
       $704=$703&$700;
       $705=$703>>>($_21_i>>>0);
       $706=((($705)+($carry3_048_i))|0);
       HEAP32[(($702)>>2)]=$706;
       $707=(Math_imul($704,$701)|0);
       $708=($k_646_i|0)==($a_445_i|0);
       $709=($706|0)==0;
       $or_cond22_i=$708&$709;
       $710=((($k_646_i)+(1))|0);
       $711=$710&127;
       $712=((($rp_444_i)-(9))|0);
       $rp_5_i=($or_cond22_i?$712:$rp_444_i);
       $a_5_i=($or_cond22_i?$711:$a_445_i);
       $713=($711|0)==($z_5_ph_i|0);
       if ($713) {
        break;
       } else {
        $rp_444_i=$rp_5_i;$a_445_i=$a_5_i;$k_646_i=$711;$carry3_048_i=$707;
       }
      }
      $714=($707|0)==0;
      if ($714) {
       $a_3_i_ph=$a_5_i;$e2_1_i_ph=$697;$rp_3_i_ph=$rp_5_i;
       continue;
      }
      $716=($720|0)==($a_5_i|0);
      if (!($716)) {
       break;
      }
      $727=((HEAP32[(($723)>>2)])|0);
      $728=$727|1;
      HEAP32[(($723)>>2)]=$728;
      $a_3_i_ph=$a_5_i;$e2_1_i_ph=$697;$rp_3_i_ph=$rp_5_i;
     }
     $718=(($x_i+($z_5_ph_i<<2))|0);
     HEAP32[(($718)>>2)]=$707;
     $a_3_ph_i=$a_5_i;$z_5_ph_i=$720;$e2_1_ph_i=$697;$rp_3_ph51_i=$rp_5_i;
    }
    $694=$a_3_i&127;
    $695=($694|0)==($z_5_ph_i|0);
    if ($695) {
     $730=((($720)-(1))|0);
     $731=(($x_i+($730<<2))|0);
     HEAP32[(($731)>>2)]=0;
     $z_7_i=$720;
    } else {
     $z_7_i=$z_5_ph_i;
    }

    $733=(($x_i+($694<<2))|0);
    $734=((HEAP32[(($733)>>2)])|0);
    $735=(+((($734>>>0))>>>0));
    $736=((($a_3_i)+(1))|0);
    $737=$736&127;
    $738=($737|0)==($z_7_i|0);
    if ($738) {
     $816=((($z_7_i)+(1))|0);
     $817=$816&127;
     $818=((($817)-(1))|0);
     $819=(($x_i+($818<<2))|0);
     HEAP32[(($819)>>2)]=0;
     $z_7_1_i=$817;
    } else {
     $z_7_1_i=$z_7_i;
    }

    $821=($735)*((1000000000.0));
    $822=(($x_i+($737<<2))|0);
    $823=((HEAP32[(($822)>>2)])|0);
    $824=(+((($823>>>0))>>>0));
    $825=($821)+($824);
    $826=(+((($sign_0|0))|0));
    $827=($826)*($825);
    $828=((($e2_1_i)+(53))|0);
    $829=((($828)-($emin_0_ph))|0);
    $830=($829|0)<($bits_0_ph|0);
    if ($830) {
     $740=($829|0)<0;
     if ($740) {
      $denormal_031_i=1;$_01332_i=0;
      label = 244;
     } else {
      $_013_i=$829;$denormal_0_i=1;
      label = 243;
     }
    } else {
     $_013_i=$bits_0_ph;$denormal_0_i=0;
     label = 243;
    }
    if ((label|0) == 243) {


     $742=($_013_i|0)<53;
     if ($742) {
      $denormal_031_i=$denormal_0_i;$_01332_i=$_013_i;
      label = 244;
     } else {
      $bias_0_i24=0.0;$frac_0_i=0.0;$y_1_i23=$827;$denormal_030_i=$denormal_0_i;$_01333_i=$_013_i;
     }
    }
    if ((label|0) == 244) {


     $743=(((105)-($_01332_i))|0);
     $744=(+(_scalbn(1.0,$743)));
     $745=(+(_copysign((+($744)),(+($827)))));
     $746=(((53)-($_01332_i))|0);
     $747=(+(_scalbn(1.0,$746)));
     $748=(+(_fmod((+($827)),(+($747)))));
     $749=($827)-($748);
     $750=($745)+($749);
     $bias_0_i24=$745;$frac_0_i=$748;$y_1_i23=$750;$denormal_030_i=$denormal_031_i;$_01333_i=$_01332_i;
    }





    $752=((($a_3_i)+(2))|0);
    $753=$752&127;
    $754=($753|0)==($z_7_1_i|0);
    do {
     if ($754) {
      $frac_2_i=$frac_0_i;
     } else {
      $756=(($x_i+($753<<2))|0);
      $757=((HEAP32[(($756)>>2)])|0);
      $758=($757>>>0)<((500000000)>>>0);
      do {
       if ($758) {
        $760=($757|0)==0;
        if ($760) {
         $762=((($a_3_i)+(3))|0);
         $763=$762&127;
         $764=($763|0)==($z_7_1_i|0);
         if ($764) {
          $frac_1_i=$frac_0_i;
          break;
         }
        }
        $766=($826)*((0.25));
        $767=($766)+($frac_0_i);
        $frac_1_i=$767;
       } else {
        $769=($757>>>0)>((500000000)>>>0);
        if ($769) {
         $771=($826)*((0.75));
         $772=($771)+($frac_0_i);
         $frac_1_i=$772;
         break;
        }
        $774=((($a_3_i)+(3))|0);
        $775=$774&127;
        $776=($775|0)==($z_7_1_i|0);
        if ($776) {
         $778=($826)*((0.5));
         $779=($778)+($frac_0_i);
         $frac_1_i=$779;
         break;
        } else {
         $781=($826)*((0.75));
         $782=($781)+($frac_0_i);
         $frac_1_i=$782;
         break;
        }
       }
      } while(0);

      $784=(((53)-($_01333_i))|0);
      $785=($784|0)>1;
      if (!($785)) {
       $frac_2_i=$frac_1_i;
       break;
      }
      $787=(+(_fmod((+($frac_1_i)),1.0)));
      $788=$787!=(0.0);
      if ($788) {
       $frac_2_i=$frac_1_i;
       break;
      }
      $790=($frac_1_i)+((1.0));
      $frac_2_i=$790;
     }
    } while(0);

    $792=($y_1_i23)+($frac_2_i);
    $793=($792)-($bias_0_i24);
    $794=$828&2147483647;
    $795=(((-2)-($sum_i))|0);
    $796=($794|0)>($795|0);
    do {
     if ($796) {
      $798=(+(Math_abs((+($793)))));
      $799=$798<(9007199254740992.0);
      if ($799) {
       $y_2_i25=$793;$denormal_2_i=$denormal_030_i;$e2_2_i=$e2_1_i;
      } else {
       $801=($denormal_030_i|0)!=0;
       $802=($_01333_i|0)==($829|0);
       $or_cond23_i=$801&$802;
       $denormal_1_i=($or_cond23_i?0:$denormal_030_i);
       $803=($793)*((0.5));
       $804=((($e2_1_i)+(1))|0);
       $y_2_i25=$803;$denormal_2_i=$denormal_1_i;$e2_2_i=$804;
      }



      $806=((($e2_2_i)+(50))|0);
      $807=($806|0)>($382|0);
      if (!($807)) {
       $809=($denormal_2_i|0)!=0;
       $810=$frac_2_i!=(0.0);
       $or_cond9_i26=$809&$810;
       if (!($or_cond9_i26)) {
        $y_3_i=$y_2_i25;$e2_3_i=$e2_2_i;
        break;
       }
      }
      $812=((___errno_location())|0);
      HEAP32[(($812)>>2)]=34;
      $y_3_i=$y_2_i25;$e2_3_i=$e2_2_i;
     } else {
      $y_3_i=$793;$e2_3_i=$e2_1_i;
     }
    } while(0);


    $814=(+(_scalbnl($y_3_i,$e2_3_i)));
    $_0=$814;

    STACKTOP=sp;return (+($_0));
   } else {
    $153=((HEAP32[(($4)>>2)])|0);
    $154=($153|0)==0;
    if (!($154)) {
     $156=((HEAP32[(($3)>>2)])|0);
     $157=((($156)-(1))|0);
     HEAP32[(($3)>>2)]=$157;
    }
    $159=((___errno_location())|0);
    HEAP32[(($159)>>2)]=22;
    ___shlim($f,0);
    $_0=0.0;

    STACKTOP=sp;return (+($_0));
   }
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   $62=((HEAP32[(($4)>>2)])|0);
   $63=($62|0)==0;
   if (!($63)) {
    $65=((HEAP32[(($3)>>2)])|0);
    $66=((($65)-(1))|0);
    HEAP32[(($3)>>2)]=$66;
   }
   $notlhs=($pok|0)==0;
   $notrhs=($i_0_lcssa>>>0)<((4)>>>0);
   $or_cond9_not=$notrhs|$notlhs;
   $brmerge=$or_cond9_not|$63;
   if ($brmerge) {
    break;
   } else {
    $i_1=$i_0_lcssa;
   }
   while(1) {

    $68=((HEAP32[(($3)>>2)])|0);
    $69=((($68)-(1))|0);
    HEAP32[(($3)>>2)]=$69;
    $70=((($i_1)-(1))|0);
    $_old8=($70>>>0)>((3)>>>0);
    if ($_old8) {
     $i_1=$70;
    } else {
     break;
    }
   }
  }
 } while(0);
 $71=(+((($sign_0|0))|0));
 $72=($71)*(Infinity);
 $73=$72;
 $_0=$73;

 STACKTOP=sp;return (+($_0));
}


function ___shlim($f,$lim){
 $f=($f)|0;
 $lim=($lim)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$or_cond=0,$13=0,$14=0,$16=0,label=0;

 $1=(($f+104)|0);
 HEAP32[(($1)>>2)]=$lim;
 $2=(($f+8)|0);
 $3=((HEAP32[(($2)>>2)])|0);
 $4=(($f+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$3;
 $7=$5;
 $8=((($6)-($7))|0);
 $9=(($f+108)|0);
 HEAP32[(($9)>>2)]=$8;
 $10=($lim|0)!=0;
 $11=($8|0)>($lim|0);
 $or_cond=$10&$11;
 if ($or_cond) {
  $13=(($5+$lim)|0);
  $14=(($f+100)|0);
  HEAP32[(($14)>>2)]=$13;
  return;
 } else {
  $16=(($f+100)|0);
  HEAP32[(($16)>>2)]=$3;
  return;
 }
}


function ___shgetc($f){
 $f=($f)|0;
 var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$14=0,$15=0,$_phi_trans_insert=0,$_pre=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0;
 var $24=0,$25=0,$26=0,$28=0,$29=0,$30=0,$32=0,$_phi_trans_insert2=0,$_pre3=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;
 var $46=0,$_0=0,label=0;

 $1=(($f+104)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  label = 3;
 } else {
  $5=(($f+108)|0);
  $6=((HEAP32[(($5)>>2)])|0);
  $7=($6|0)<($2|0);
  if ($7) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $9=((___uflow($f))|0);
   $10=($9|0)<0;
   if ($10) {
    break;
   }
   $14=((HEAP32[(($1)>>2)])|0);
   $15=($14|0)==0;
   $_phi_trans_insert=(($f+8)|0);
   $_pre=((HEAP32[(($_phi_trans_insert)>>2)])|0);
   do {
    if ($15) {
     label = 8;
    } else {
     $17=(($f+4)|0);
     $18=((HEAP32[(($17)>>2)])|0);
     $19=$_pre;
     $20=$18;
     $21=((($19)-($20))|0);
     $22=(($f+108)|0);
     $23=((HEAP32[(($22)>>2)])|0);
     $24=((($14)-($23))|0);
     $25=((($24)-(1))|0);
     $26=($21|0)>($25|0);
     if (!($26)) {
      label = 8;
      break;
     }
     $28=(($18+$25)|0);
     $29=(($f+100)|0);
     HEAP32[(($29)>>2)]=$28;
    }
   } while(0);
   if ((label|0) == 8) {
    $30=(($f+100)|0);
    HEAP32[(($30)>>2)]=$_pre;
   }
   $32=($_pre|0)==0;
   $_phi_trans_insert2=(($f+4)|0);
   $_pre3=((HEAP32[(($_phi_trans_insert2)>>2)])|0);
   if (!($32)) {
    $34=$_pre;
    $35=$_pre3;
    $36=(($f+108)|0);
    $37=((HEAP32[(($36)>>2)])|0);
    $38=((($34)+(1))|0);
    $39=((($38)-($35))|0);
    $40=((($39)+($37))|0);
    HEAP32[(($36)>>2)]=$40;
   }
   $41=((($_pre3)-(1))|0);
   $42=((HEAP8[($41)])|0);
   $43=($42&255);
   $44=($43|0)==($9|0);
   if ($44) {
    $_0=$9;

    return (($_0)|0);
   }
   $46=(($9)&255);
   HEAP8[($41)]=$46;
   $_0=$9;

   return (($_0)|0);
  }
 } while(0);
 $12=(($f+100)|0);
 HEAP32[(($12)>>2)]=0;
 $_0=-1;

 return (($_0)|0);
}


function _scalbn($x,$n){
 $x=+($x);
 $n=($n)|0;
 var $1=0,$3=.0,$4=0,$5=0,$7=.0,$8=0,$9=0,$_=0,$11=0,$13=.0,$14=0,$15=0,$17=.0,$18=0,$19=0,$_1=0,$_0=0,$y_0=.0,$21=0,$22$0=0;
 var $22$1=0,$23$0=0,$23$1=0,$24=.0,$25=.0,label=0;

 $1=($n|0)>1023;
 do {
  if ($1) {
   $3=($x)*((8.98846567431158e+307));
   $4=((($n)-(1023))|0);
   $5=($4|0)>1023;
   if (!($5)) {
    $y_0=$3;$_0=$4;
    break;
   }
   $7=($3)*((8.98846567431158e+307));
   $8=((($n)-(2046))|0);
   $9=($8|0)>1023;
   $_=($9?1023:$8);
   $y_0=$7;$_0=$_;
  } else {
   $11=($n|0)<-1022;
   if (!($11)) {
    $y_0=$x;$_0=$n;
    break;
   }
   $13=($x)*((2.2250738585072014e-308));
   $14=((($n)+(1022))|0);
   $15=($14|0)<-1022;
   if (!($15)) {
    $y_0=$13;$_0=$14;
    break;
   }
   $17=($13)*((2.2250738585072014e-308));
   $18=((($n)+(2044))|0);
   $19=($18|0)<-1022;
   $_1=($19?-1022:$18);
   $y_0=$17;$_0=$_1;
  }
 } while(0);


 $21=((($_0)+(1023))|0);
 $22$0=$21;
 $22$1=0;
 $23$0=(0<<20)|(0>>>12);
 $23$1=($22$0<<20)|(0>>>12);
 $24=(HEAP32[((tempDoublePtr)>>2)]=$23$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$23$1, (+(HEAPF64[(tempDoublePtr)>>3])));
 $25=($y_0)*($24);
 return (+($25));
}


function _scalbnl($x,$n){
 $x=+($x);
 $n=($n)|0;
 var $1=.0,label=0;

 $1=(+(_scalbn($x,$n)));
 return (+($1));
}


function ___toread($f){
 $f=($f)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$22=0,$23=0;
 var $25=0,$27=0,$28=0,$29=0,$_0=0,label=0;

 $1=(($f+74)|0);
 $2=((HEAP8[($1)])|0);
 $3=((($2)-(1))&255);
 $4=$3|$2;
 HEAP8[($1)]=$4;
 $5=(($f+20)|0);
 $6=((HEAP32[(($5)>>2)])|0);
 $7=(($f+44)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=($6>>>0)>($8>>>0);
 if ($9) {
  $11=(($f+36)|0);
  $12=((HEAP32[(($11)>>2)])|0);
  $13=((FUNCTION_TABLE_iiii[($12)&15]($f,0,0))|0);
 }
 $15=(($f+16)|0);
 HEAP32[(($15)>>2)]=0;
 $16=(($f+28)|0);
 HEAP32[(($16)>>2)]=0;
 HEAP32[(($5)>>2)]=0;
 $17=(($f)|0);
 $18=((HEAP32[(($17)>>2)])|0);
 $19=$18&20;
 $20=($19|0)==0;
 if ($20) {
  $27=((HEAP32[(($7)>>2)])|0);
  $28=(($f+8)|0);
  HEAP32[(($28)>>2)]=$27;
  $29=(($f+4)|0);
  HEAP32[(($29)>>2)]=$27;
  $_0=0;

  return (($_0)|0);
 }
 $22=$18&4;
 $23=($22|0)==0;
 if ($23) {
  $_0=-1;

  return (($_0)|0);
 }
 $25=$18|32;
 HEAP32[(($17)>>2)]=$25;
 $_0=-1;

 return (($_0)|0);
}


function ___uflow($f){
 $f=($f)|0;
 var $c=0,$1=0,$2=0,$3=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$_0=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;
 $c=((sp)|0);
 $1=(($f+8)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=($2|0)==0;
 if ($3) {
  $5=((___toread($f))|0);
  $6=($5|0)==0;
  if ($6) {
   label = 3;
  } else {
   $_0=-1;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $8=(($f+32)|0);
   $9=((HEAP32[(($8)>>2)])|0);
   $10=((FUNCTION_TABLE_iiii[($9)&15]($f,$c,1))|0);
   $11=($10|0)==1;
   if (!($11)) {
    $_0=-1;
    break;
   }
   $13=((HEAP8[($c)])|0);
   $14=($13&255);
   $_0=$14;
  }
 } while(0);

 STACKTOP=sp;return (($_0)|0);
}


function _strtod($s,$p){
 $s=($s)|0;
 $p=($p)|0;
 var $f_i=0,$1=0,$$etemp$0$0=0,$$etemp$0$1=0,$2=0,$3=0,$4=0,$5=0,$6=.0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$17=0,$19=0;
 var $21=0,$$etemp$1$0=0,$$etemp$1$1=0,label=0;
 var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+112)|0;
 $f_i=((sp)|0);
 $1=$f_i;
 $$etemp$0$0=112;
 $$etemp$0$1=0;

 _memset((((($1)|0))|0), ((((0)|0))|0), ((((112)|0))|0))|0;
 $2=(($f_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 $3=(($f_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 $4=(($f_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 $5=(($f_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 ___shlim($f_i,0);
 $6=(+(___floatscan($f_i,1,1)));
 $7=(($f_i+108)|0);
 $8=((HEAP32[(($7)>>2)])|0);
 $9=((HEAP32[(($2)>>2)])|0);
 $10=((HEAP32[(($3)>>2)])|0);
 $11=$9;
 $12=$10;
 $13=((($11)-($12))|0);
 $14=((($13)+($8))|0);
 $15=($p|0)==0;
 if ($15) {
  $$etemp$1$0=112;
  $$etemp$1$1=0;

  STACKTOP=sp;return (+($6));
 }
 $17=($14|0)==0;
 if ($17) {
  $21=$s;
 } else {
  $19=(($s+$14)|0);
  $21=$19;
 }

 HEAP32[(($p)>>2)]=$21;
 $$etemp$1$0=112;
 $$etemp$1$1=0;

 STACKTOP=sp;return (+($6));
}


function _try_realloc_chunk($p,$nb){
 $p=($p)|0;
 $nb=($nb)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$notlhs=0,$notrhs=0,$or_cond_not=0,$9=0,$or_cond36=0,$_sum3334=0,$11=0,$12=0,$13=0,$14=0,$phitmp=0,$16=0;
 var $18=0,$20=0,$21=0,$23=0,$24=0,$25=0,$26=0,$29=0,$31=0,$32=0,$34=0,$35=0,$36=0,$37=0,$38=0,$_sum29=0,$39=0,$40=0,$41=0,$42=0;
 var $43=0,$45=0,$46=0,$48=0,$49=0,$50=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$_sum28=0,$58=0,$59=0,$60=0,$62=0,$63=0,$65=0,$66=0;
 var $67=0,$69=0,$70=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$_sum25=0,$78=0,$79=0,$80=0,$81=0,$_sum26=0,$82=0,$83=0,$84=0,$85=0,$87=0;
 var $88=0,$89=0,$_sum23=0,$90=0,$91=0,$92=0,$93=0,$storemerge27=0,$storemerge=0,$96=0,$97=0,$99=0,$100=0,$101=0,$103=0,$104=0,$105=0,$_sum17=0,$107=0,$108=0;
 var $109=0,$_sum18=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$118=0,$119=0,$121=0,$122=0,$123=0,$124=0,$126=0,$127=0,$128=0,$129=0,$131=0;
 var $_pre=0,$133=0,$134=0,$136=0,$137=0,$138=0,$_pre_phi=0,$139=0,$141=0,$_sum=0,$142=0,$143=0,$144=0,$_sum2=0,$145=0,$146=0,$147=0,$148=0,$_sum14=0,$150=0;
 var $151=0,$152=0,$153=0,$154=0,$156=0,$157=0,$158=0,$160=0,$161=0,$162=0,$_sum4=0,$165=0,$166=0,$167=0,$168=0,$_sum3=0,$170=0,$171=0,$172=0,$173=0;
 var $RP_0=0,$R_0=0,$174=0,$175=0,$176=0,$178=0,$179=0,$180=0,$182=0,$183=0,$R_1=0,$187=0,$_sum11=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$cond=0;
 var $196=0,$197=0,$198=0,$199=0,$200=0,$202=0,$203=0,$204=0,$206=0,$207=0,$208=0,$211=0,$214=0,$216=0,$217=0,$218=0,$220=0,$_sum12=0,$221=0,$222=0;
 var $223=0,$224=0,$226=0,$227=0,$228=0,$230=0,$231=0,$_sum13=0,$234=0,$235=0,$236=0,$237=0,$239=0,$240=0,$241=0,$243=0,$244=0,$248=0,$250=0,$251=0;
 var $252=0,$253=0,$_sum910=0,$254=0,$255=0,$256=0,$257=0,$259=0,$260=0,$261=0,$262=0,$263=0,$264=0,$_sum5=0,$265=0,$266=0,$267=0,$_sum78=0,$268=0,$269=0;
 var $270=0,$271=0,$newp_0=0,label=0;

 $1=(($p+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=$2&-8;
 $4=$p;
 $5=(($4+$3)|0);
 $6=$5;
 $7=((HEAP32[((17944)>>2)])|0);
 $8=$2&3;
 $notlhs=($4>>>0)>=($7>>>0);
 $notrhs=($8|0)!=1;
 $or_cond_not=$notrhs&$notlhs;
 $9=($4>>>0)<($5>>>0);
 $or_cond36=$or_cond_not&$9;
 if (!($or_cond36)) {
  _abort(); return ((0)|0);
  return ((0)|0);
 }
 $_sum3334=$3|4;
 $11=(($4+$_sum3334)|0);
 $12=$11;
 $13=((HEAP32[(($12)>>2)])|0);
 $14=$13&1;
 $phitmp=($14|0)==0;
 if ($phitmp) {
  _abort(); return ((0)|0);
  return ((0)|0);
 }
 $16=($8|0)==0;
 if ($16) {
  $18=($nb>>>0)<((256)>>>0);
  if ($18) {
   $newp_0=0;

   return (($newp_0)|0);
  }
  $20=((($nb)+(4))|0);
  $21=($3>>>0)<($20>>>0);
  do {
   if (!($21)) {
    $23=((($3)-($nb))|0);
    $24=((HEAP32[((17864)>>2)])|0);
    $25=$24<<1;
    $26=($23>>>0)>($25>>>0);
    if ($26) {
     break;
    } else {
     $newp_0=$p;
    }

    return (($newp_0)|0);
   }
  } while(0);
  $newp_0=0;

  return (($newp_0)|0);
 }
 $29=($3>>>0)<($nb>>>0);
 if (!($29)) {
  $31=((($3)-($nb))|0);
  $32=($31>>>0)>((15)>>>0);
  if (!($32)) {
   $newp_0=$p;

   return (($newp_0)|0);
  }
  $34=(($4+$nb)|0);
  $35=$34;
  $36=$2&1;
  $37=$36|$nb;
  $38=$37|2;
  HEAP32[(($1)>>2)]=$38;
  $_sum29=((($nb)+(4))|0);
  $39=(($4+$_sum29)|0);
  $40=$39;
  $41=$31|3;
  HEAP32[(($40)>>2)]=$41;
  $42=((HEAP32[(($12)>>2)])|0);
  $43=$42|1;
  HEAP32[(($12)>>2)]=$43;
  _dispose_chunk($35,$31);
  $newp_0=$p;

  return (($newp_0)|0);
 }
 $45=((HEAP32[((17952)>>2)])|0);
 $46=($6|0)==($45|0);
 if ($46) {
  $48=((HEAP32[((17940)>>2)])|0);
  $49=((($48)+($3))|0);
  $50=($49>>>0)>($nb>>>0);
  if (!($50)) {
   $newp_0=0;

   return (($newp_0)|0);
  }
  $52=((($49)-($nb))|0);
  $53=(($4+$nb)|0);
  $54=$53;
  $55=$2&1;
  $56=$55|$nb;
  $57=$56|2;
  HEAP32[(($1)>>2)]=$57;
  $_sum28=((($nb)+(4))|0);
  $58=(($4+$_sum28)|0);
  $59=$58;
  $60=$52|1;
  HEAP32[(($59)>>2)]=$60;
  HEAP32[((17952)>>2)]=$54;
  HEAP32[((17940)>>2)]=$52;
  $newp_0=$p;

  return (($newp_0)|0);
 }
 $62=((HEAP32[((17948)>>2)])|0);
 $63=($6|0)==($62|0);
 if ($63) {
  $65=((HEAP32[((17936)>>2)])|0);
  $66=((($65)+($3))|0);
  $67=($66>>>0)<($nb>>>0);
  if ($67) {
   $newp_0=0;

   return (($newp_0)|0);
  }
  $69=((($66)-($nb))|0);
  $70=($69>>>0)>((15)>>>0);
  if ($70) {
   $72=(($4+$nb)|0);
   $73=$72;
   $74=(($4+$66)|0);
   $75=$2&1;
   $76=$75|$nb;
   $77=$76|2;
   HEAP32[(($1)>>2)]=$77;
   $_sum25=((($nb)+(4))|0);
   $78=(($4+$_sum25)|0);
   $79=$78;
   $80=$69|1;
   HEAP32[(($79)>>2)]=$80;
   $81=$74;
   HEAP32[(($81)>>2)]=$69;
   $_sum26=((($66)+(4))|0);
   $82=(($4+$_sum26)|0);
   $83=$82;
   $84=((HEAP32[(($83)>>2)])|0);
   $85=$84&-2;
   HEAP32[(($83)>>2)]=$85;
   $storemerge=$73;$storemerge27=$69;
  } else {
   $87=$2&1;
   $88=$87|$66;
   $89=$88|2;
   HEAP32[(($1)>>2)]=$89;
   $_sum23=((($66)+(4))|0);
   $90=(($4+$_sum23)|0);
   $91=$90;
   $92=((HEAP32[(($91)>>2)])|0);
   $93=$92|1;
   HEAP32[(($91)>>2)]=$93;
   $storemerge=0;$storemerge27=0;
  }


  HEAP32[((17936)>>2)]=$storemerge27;
  HEAP32[((17948)>>2)]=$storemerge;
  $newp_0=$p;

  return (($newp_0)|0);
 }
 $96=$13&2;
 $97=($96|0)==0;
 if (!($97)) {
  $newp_0=0;

  return (($newp_0)|0);
 }
 $99=$13&-8;
 $100=((($99)+($3))|0);
 $101=($100>>>0)<($nb>>>0);
 if ($101) {
  $newp_0=0;

  return (($newp_0)|0);
 }
 $103=((($100)-($nb))|0);
 $104=$13>>>3;
 $105=($13>>>0)<((256)>>>0);
 L49: do {
  if ($105) {
   $_sum17=((($3)+(8))|0);
   $107=(($4+$_sum17)|0);
   $108=$107;
   $109=((HEAP32[(($108)>>2)])|0);
   $_sum18=((($3)+(12))|0);
   $110=(($4+$_sum18)|0);
   $111=$110;
   $112=((HEAP32[(($111)>>2)])|0);
   $113=$104<<1;
   $114=((17968+($113<<2))|0);
   $115=$114;
   $116=($109|0)==($115|0);
   do {
    if (!($116)) {
     $118=$109;
     $119=($118>>>0)<($7>>>0);
     if ($119) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $121=(($109+12)|0);
     $122=((HEAP32[(($121)>>2)])|0);
     $123=($122|0)==($6|0);
     if ($123) {
      break;
     }
     _abort(); return ((0)|0);
     return ((0)|0);
    }
   } while(0);
   $124=($112|0)==($109|0);
   if ($124) {
    $126=1<<$104;
    $127=$126^-1;
    $128=((HEAP32[((17928)>>2)])|0);
    $129=$128&$127;
    HEAP32[((17928)>>2)]=$129;
    break;
   }
   $131=($112|0)==($115|0);
   do {
    if ($131) {
     $_pre=(($112+8)|0);
     $_pre_phi=$_pre;
    } else {
     $133=$112;
     $134=($133>>>0)<($7>>>0);
     if ($134) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $136=(($112+8)|0);
     $137=((HEAP32[(($136)>>2)])|0);
     $138=($137|0)==($6|0);
     if ($138) {
      $_pre_phi=$136;
      break;
     }
     _abort(); return ((0)|0);
     return ((0)|0);
    }
   } while(0);

   $139=(($109+12)|0);
   HEAP32[(($139)>>2)]=$112;
   HEAP32[(($_pre_phi)>>2)]=$109;
  } else {
   $141=$5;
   $_sum=((($3)+(24))|0);
   $142=(($4+$_sum)|0);
   $143=$142;
   $144=((HEAP32[(($143)>>2)])|0);
   $_sum2=((($3)+(12))|0);
   $145=(($4+$_sum2)|0);
   $146=$145;
   $147=((HEAP32[(($146)>>2)])|0);
   $148=($147|0)==($141|0);
   do {
    if ($148) {
     $_sum4=((($3)+(20))|0);
     $165=(($4+$_sum4)|0);
     $166=$165;
     $167=((HEAP32[(($166)>>2)])|0);
     $168=($167|0)==0;
     if ($168) {
      $_sum3=((($3)+(16))|0);
      $170=(($4+$_sum3)|0);
      $171=$170;
      $172=((HEAP32[(($171)>>2)])|0);
      $173=($172|0)==0;
      if ($173) {
       $R_1=0;
       break;
      } else {
       $R_0=$172;$RP_0=$171;
      }
     } else {
      $R_0=$167;$RP_0=$166;
     }
     while(1) {


      $174=(($R_0+20)|0);
      $175=((HEAP32[(($174)>>2)])|0);
      $176=($175|0)==0;
      if (!($176)) {
       $R_0=$175;$RP_0=$174;
       continue;
      }
      $178=(($R_0+16)|0);
      $179=((HEAP32[(($178)>>2)])|0);
      $180=($179|0)==0;
      if ($180) {
       break;
      } else {
       $R_0=$179;$RP_0=$178;
      }
     }
     $182=$RP_0;
     $183=($182>>>0)<($7>>>0);
     if ($183) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      HEAP32[(($RP_0)>>2)]=0;
      $R_1=$R_0;
      break;
     }
    } else {
     $_sum14=((($3)+(8))|0);
     $150=(($4+$_sum14)|0);
     $151=$150;
     $152=((HEAP32[(($151)>>2)])|0);
     $153=$152;
     $154=($153>>>0)<($7>>>0);
     if ($154) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $156=(($152+12)|0);
     $157=((HEAP32[(($156)>>2)])|0);
     $158=($157|0)==($141|0);
     if (!($158)) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $160=(($147+8)|0);
     $161=((HEAP32[(($160)>>2)])|0);
     $162=($161|0)==($141|0);
     if ($162) {
      HEAP32[(($156)>>2)]=$147;
      HEAP32[(($160)>>2)]=$152;
      $R_1=$147;
      break;
     } else {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
    }
   } while(0);

   $187=($144|0)==0;
   if ($187) {
    break;
   }
   $_sum11=((($3)+(28))|0);
   $189=(($4+$_sum11)|0);
   $190=$189;
   $191=((HEAP32[(($190)>>2)])|0);
   $192=((18232+($191<<2))|0);
   $193=((HEAP32[(($192)>>2)])|0);
   $194=($141|0)==($193|0);
   do {
    if ($194) {
     HEAP32[(($192)>>2)]=$R_1;
     $cond=($R_1|0)==0;
     if (!($cond)) {
      break;
     }
     $196=((HEAP32[(($190)>>2)])|0);
     $197=1<<$196;
     $198=$197^-1;
     $199=((HEAP32[((17932)>>2)])|0);
     $200=$199&$198;
     HEAP32[((17932)>>2)]=$200;
     break L49;
    } else {
     $202=$144;
     $203=((HEAP32[((17944)>>2)])|0);
     $204=($202>>>0)<($203>>>0);
     if ($204) {
      _abort(); return ((0)|0);
      return ((0)|0);
     }
     $206=(($144+16)|0);
     $207=((HEAP32[(($206)>>2)])|0);
     $208=($207|0)==($141|0);
     if ($208) {
      HEAP32[(($206)>>2)]=$R_1;
     } else {
      $211=(($144+20)|0);
      HEAP32[(($211)>>2)]=$R_1;
     }
     $214=($R_1|0)==0;
     if ($214) {
      break L49;
     }
    }
   } while(0);
   $216=$R_1;
   $217=((HEAP32[((17944)>>2)])|0);
   $218=($216>>>0)<($217>>>0);
   if ($218) {
    _abort(); return ((0)|0);
    return ((0)|0);
   }
   $220=(($R_1+24)|0);
   HEAP32[(($220)>>2)]=$144;
   $_sum12=((($3)+(16))|0);
   $221=(($4+$_sum12)|0);
   $222=$221;
   $223=((HEAP32[(($222)>>2)])|0);
   $224=($223|0)==0;
   do {
    if (!($224)) {
     $226=$223;
     $227=((HEAP32[((17944)>>2)])|0);
     $228=($226>>>0)<($227>>>0);
     if ($228) {
      _abort(); return ((0)|0);
      return ((0)|0);
     } else {
      $230=(($R_1+16)|0);
      HEAP32[(($230)>>2)]=$223;
      $231=(($223+24)|0);
      HEAP32[(($231)>>2)]=$R_1;
      break;
     }
    }
   } while(0);
   $_sum13=((($3)+(20))|0);
   $234=(($4+$_sum13)|0);
   $235=$234;
   $236=((HEAP32[(($235)>>2)])|0);
   $237=($236|0)==0;
   if ($237) {
    break;
   }
   $239=$236;
   $240=((HEAP32[((17944)>>2)])|0);
   $241=($239>>>0)<($240>>>0);
   if ($241) {
    _abort(); return ((0)|0);
    return ((0)|0);
   } else {
    $243=(($R_1+20)|0);
    HEAP32[(($243)>>2)]=$236;
    $244=(($236+24)|0);
    HEAP32[(($244)>>2)]=$R_1;
    break;
   }
  }
 } while(0);
 $248=($103>>>0)<((16)>>>0);
 if ($248) {
  $250=((HEAP32[(($1)>>2)])|0);
  $251=$250&1;
  $252=$100|$251;
  $253=$252|2;
  HEAP32[(($1)>>2)]=$253;
  $_sum910=$100|4;
  $254=(($4+$_sum910)|0);
  $255=$254;
  $256=((HEAP32[(($255)>>2)])|0);
  $257=$256|1;
  HEAP32[(($255)>>2)]=$257;
  $newp_0=$p;

  return (($newp_0)|0);
 } else {
  $259=(($4+$nb)|0);
  $260=$259;
  $261=((HEAP32[(($1)>>2)])|0);
  $262=$261&1;
  $263=$262|$nb;
  $264=$263|2;
  HEAP32[(($1)>>2)]=$264;
  $_sum5=((($nb)+(4))|0);
  $265=(($4+$_sum5)|0);
  $266=$265;
  $267=$103|3;
  HEAP32[(($266)>>2)]=$267;
  $_sum78=$100|4;
  $268=(($4+$_sum78)|0);
  $269=$268;
  $270=((HEAP32[(($269)>>2)])|0);
  $271=$270|1;
  HEAP32[(($269)>>2)]=$271;
  _dispose_chunk($260,$103);
  $newp_0=$p;

  return (($newp_0)|0);
 }
  return 0;
}



function _dispose_chunk($p,$psize){
 $p=($p)|0;
 $psize=($psize)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$24=0;
 var $25=0,$_sum35=0,$27=0,$28=0,$29=0,$_sum36=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$46=0;
 var $47=0,$48=0,$49=0,$51=0,$_pre65=0,$53=0,$54=0,$56=0,$57=0,$58=0,$_pre_phi66=0,$59=0,$61=0,$_sum26=0,$62=0,$63=0,$64=0,$_sum27=0,$65=0,$66=0;
 var $67=0,$68=0,$_sum33=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$80=0,$81=0,$82=0,$_sum28=0,$_sum29=0,$85=0,$86=0,$87=0,$88=0;
 var $90=0,$91=0,$92=0,$93=0,$RP_0=0,$R_0=0,$94=0,$95=0,$96=0,$98=0,$99=0,$100=0,$102=0,$103=0,$R_1=0,$107=0,$_sum30=0,$109=0,$110=0,$111=0;
 var $112=0,$113=0,$114=0,$cond=0,$116=0,$117=0,$118=0,$119=0,$120=0,$122=0,$123=0,$124=0,$126=0,$127=0,$128=0,$131=0,$134=0,$136=0,$137=0,$138=0;
 var $140=0,$_sum31=0,$141=0,$142=0,$143=0,$144=0,$146=0,$147=0,$148=0,$150=0,$151=0,$_sum32=0,$154=0,$155=0,$156=0,$157=0,$159=0,$160=0,$161=0,$163=0;
 var $164=0,$_sum=0,$168=0,$169=0,$170=0,$171=0,$172=0,$174=0,$175=0,$176=0,$_sum24=0,$177=0,$178=0,$179=0,$_02=0,$_0=0,$182=0,$183=0,$_sum1=0,$185=0;
 var $186=0,$187=0,$188=0,$189=0,$191=0,$192=0,$194=0,$195=0,$196=0,$197=0,$198=0,$199=0,$202=0,$203=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0;
 var $211=0,$213=0,$214=0,$215=0,$216=0,$_sum20=0,$218=0,$219=0,$220=0,$_sum21=0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$229=0,$230=0,$232=0;
 var $233=0,$234=0,$235=0,$237=0,$238=0,$239=0,$240=0,$242=0,$_pre63=0,$244=0,$245=0,$247=0,$248=0,$249=0,$_pre_phi64=0,$250=0,$252=0,$_sum2=0,$253=0,$254=0;
 var $255=0,$_sum3=0,$256=0,$257=0,$258=0,$259=0,$_sum18=0,$261=0,$262=0,$263=0,$264=0,$265=0,$267=0,$268=0,$269=0,$271=0,$272=0,$273=0,$_sum5=0,$276=0;
 var $277=0,$278=0,$279=0,$_sum4=0,$281=0,$282=0,$283=0,$284=0,$RP9_0=0,$R7_0=0,$285=0,$286=0,$287=0,$289=0,$290=0,$291=0,$293=0,$294=0,$R7_1=0,$298=0;
 var $_sum15=0,$300=0,$301=0,$302=0,$303=0,$304=0,$305=0,$cond53=0,$307=0,$308=0,$309=0,$310=0,$311=0,$313=0,$314=0,$315=0,$317=0,$318=0,$319=0,$322=0;
 var $325=0,$327=0,$328=0,$329=0,$331=0,$_sum16=0,$332=0,$333=0,$334=0,$335=0,$337=0,$338=0,$339=0,$341=0,$342=0,$_sum17=0,$345=0,$346=0,$347=0,$348=0;
 var $350=0,$351=0,$352=0,$354=0,$355=0,$359=0,$360=0,$361=0,$362=0,$363=0,$364=0,$365=0,$368=0,$369=0,$370=0,$371=0,$372=0,$373=0,$_1=0,$375=0;
 var $376=0,$378=0,$379=0,$380=0,$381=0,$382=0,$383=0,$384=0,$386=0,$_sum13_pre=0,$_pre=0,$_sum14=0,$388=0,$389=0,$390=0,$391=0,$392=0,$_pre_phi=0,$F16_0=0,$395=0;
 var $396=0,$397=0,$399=0,$400=0,$401=0,$403=0,$405=0,$406=0,$407=0,$408=0,$409=0,$410=0,$411=0,$412=0,$413=0,$414=0,$415=0,$416=0,$417=0,$418=0;
 var $419=0,$420=0,$421=0,$422=0,$423=0,$424=0,$425=0,$426=0,$I19_0=0,$428=0,$429=0,$I19_0_c=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$437=0,$438=0;
 var $_c=0,$439=0,$440=0,$442=0,$443=0,$445=0,$446=0,$448=0,$449=0,$450=0,$451=0,$452=0,$453=0,$455=0,$456=0,$457=0,$458=0,$459=0,$K20_057=0,$T_056=0;
 var $461=0,$462=0,$463=0,$464=0,$466=0,$467=0,$468=0,$470=0,$T_0_c10=0,$471=0,$472=0,$T_0_lcssa=0,$474=0,$475=0,$476=0,$477=0,$478=0,$479=0,$480=0,$or_cond=0;
 var $482=0,$483=0,$_c9=0,$484=0,$T_0_c=0,$485=0,label=0;

 $1=$p;
 $2=(($1+$psize)|0);
 $3=$2;
 $4=(($p+4)|0);
 $5=((HEAP32[(($4)>>2)])|0);
 $6=$5&1;
 $7=($6|0)==0;
 L1: do {
  if ($7) {
   $9=(($p)|0);
   $10=((HEAP32[(($9)>>2)])|0);
   $11=$5&3;
   $12=($11|0)==0;
   if ($12) {
    return;
   }
   $14=(((-$10))|0);
   $15=(($1+$14)|0);
   $16=$15;
   $17=((($10)+($psize))|0);
   $18=((HEAP32[((17944)>>2)])|0);
   $19=($15>>>0)<($18>>>0);
   if ($19) {
    _abort();

   }
   $21=((HEAP32[((17948)>>2)])|0);
   $22=($16|0)==($21|0);
   if ($22) {
    $_sum=((($psize)+(4))|0);
    $168=(($1+$_sum)|0);
    $169=$168;
    $170=((HEAP32[(($169)>>2)])|0);
    $171=$170&3;
    $172=($171|0)==3;
    if (!($172)) {
     $_0=$16;$_02=$17;
     break;
    }
    HEAP32[((17936)>>2)]=$17;
    $174=((HEAP32[(($169)>>2)])|0);
    $175=$174&-2;
    HEAP32[(($169)>>2)]=$175;
    $176=$17|1;
    $_sum24=(((4)-($10))|0);
    $177=(($1+$_sum24)|0);
    $178=$177;
    HEAP32[(($178)>>2)]=$176;
    $179=$2;
    HEAP32[(($179)>>2)]=$17;
    return;
   }
   $24=$10>>>3;
   $25=($10>>>0)<((256)>>>0);
   if ($25) {
    $_sum35=(((8)-($10))|0);
    $27=(($1+$_sum35)|0);
    $28=$27;
    $29=((HEAP32[(($28)>>2)])|0);
    $_sum36=(((12)-($10))|0);
    $30=(($1+$_sum36)|0);
    $31=$30;
    $32=((HEAP32[(($31)>>2)])|0);
    $33=$24<<1;
    $34=((17968+($33<<2))|0);
    $35=$34;
    $36=($29|0)==($35|0);
    do {
     if (!($36)) {
      $38=$29;
      $39=($38>>>0)<($18>>>0);
      if ($39) {
       _abort();

      }
      $41=(($29+12)|0);
      $42=((HEAP32[(($41)>>2)])|0);
      $43=($42|0)==($16|0);
      if ($43) {
       break;
      }
      _abort();

     }
    } while(0);
    $44=($32|0)==($29|0);
    if ($44) {
     $46=1<<$24;
     $47=$46^-1;
     $48=((HEAP32[((17928)>>2)])|0);
     $49=$48&$47;
     HEAP32[((17928)>>2)]=$49;
     $_0=$16;$_02=$17;
     break;
    }
    $51=($32|0)==($35|0);
    do {
     if ($51) {
      $_pre65=(($32+8)|0);
      $_pre_phi66=$_pre65;
     } else {
      $53=$32;
      $54=($53>>>0)<($18>>>0);
      if ($54) {
       _abort();

      }
      $56=(($32+8)|0);
      $57=((HEAP32[(($56)>>2)])|0);
      $58=($57|0)==($16|0);
      if ($58) {
       $_pre_phi66=$56;
       break;
      }
      _abort();

     }
    } while(0);

    $59=(($29+12)|0);
    HEAP32[(($59)>>2)]=$32;
    HEAP32[(($_pre_phi66)>>2)]=$29;
    $_0=$16;$_02=$17;
    break;
   }
   $61=$15;
   $_sum26=(((24)-($10))|0);
   $62=(($1+$_sum26)|0);
   $63=$62;
   $64=((HEAP32[(($63)>>2)])|0);
   $_sum27=(((12)-($10))|0);
   $65=(($1+$_sum27)|0);
   $66=$65;
   $67=((HEAP32[(($66)>>2)])|0);
   $68=($67|0)==($61|0);
   do {
    if ($68) {
     $_sum28=(((16)-($10))|0);
     $_sum29=((($_sum28)+(4))|0);
     $85=(($1+$_sum29)|0);
     $86=$85;
     $87=((HEAP32[(($86)>>2)])|0);
     $88=($87|0)==0;
     if ($88) {
      $90=(($1+$_sum28)|0);
      $91=$90;
      $92=((HEAP32[(($91)>>2)])|0);
      $93=($92|0)==0;
      if ($93) {
       $R_1=0;
       break;
      } else {
       $R_0=$92;$RP_0=$91;
      }
     } else {
      $R_0=$87;$RP_0=$86;
     }
     while(1) {


      $94=(($R_0+20)|0);
      $95=((HEAP32[(($94)>>2)])|0);
      $96=($95|0)==0;
      if (!($96)) {
       $R_0=$95;$RP_0=$94;
       continue;
      }
      $98=(($R_0+16)|0);
      $99=((HEAP32[(($98)>>2)])|0);
      $100=($99|0)==0;
      if ($100) {
       break;
      } else {
       $R_0=$99;$RP_0=$98;
      }
     }
     $102=$RP_0;
     $103=($102>>>0)<($18>>>0);
     if ($103) {
      _abort();

     } else {
      HEAP32[(($RP_0)>>2)]=0;
      $R_1=$R_0;
      break;
     }
    } else {
     $_sum33=(((8)-($10))|0);
     $70=(($1+$_sum33)|0);
     $71=$70;
     $72=((HEAP32[(($71)>>2)])|0);
     $73=$72;
     $74=($73>>>0)<($18>>>0);
     if ($74) {
      _abort();

     }
     $76=(($72+12)|0);
     $77=((HEAP32[(($76)>>2)])|0);
     $78=($77|0)==($61|0);
     if (!($78)) {
      _abort();

     }
     $80=(($67+8)|0);
     $81=((HEAP32[(($80)>>2)])|0);
     $82=($81|0)==($61|0);
     if ($82) {
      HEAP32[(($76)>>2)]=$67;
      HEAP32[(($80)>>2)]=$72;
      $R_1=$67;
      break;
     } else {
      _abort();

     }
    }
   } while(0);

   $107=($64|0)==0;
   if ($107) {
    $_0=$16;$_02=$17;
    break;
   }
   $_sum30=(((28)-($10))|0);
   $109=(($1+$_sum30)|0);
   $110=$109;
   $111=((HEAP32[(($110)>>2)])|0);
   $112=((18232+($111<<2))|0);
   $113=((HEAP32[(($112)>>2)])|0);
   $114=($61|0)==($113|0);
   do {
    if ($114) {
     HEAP32[(($112)>>2)]=$R_1;
     $cond=($R_1|0)==0;
     if (!($cond)) {
      break;
     }
     $116=((HEAP32[(($110)>>2)])|0);
     $117=1<<$116;
     $118=$117^-1;
     $119=((HEAP32[((17932)>>2)])|0);
     $120=$119&$118;
     HEAP32[((17932)>>2)]=$120;
     $_0=$16;$_02=$17;
     break L1;
    } else {
     $122=$64;
     $123=((HEAP32[((17944)>>2)])|0);
     $124=($122>>>0)<($123>>>0);
     if ($124) {
      _abort();

     }
     $126=(($64+16)|0);
     $127=((HEAP32[(($126)>>2)])|0);
     $128=($127|0)==($61|0);
     if ($128) {
      HEAP32[(($126)>>2)]=$R_1;
     } else {
      $131=(($64+20)|0);
      HEAP32[(($131)>>2)]=$R_1;
     }
     $134=($R_1|0)==0;
     if ($134) {
      $_0=$16;$_02=$17;
      break L1;
     }
    }
   } while(0);
   $136=$R_1;
   $137=((HEAP32[((17944)>>2)])|0);
   $138=($136>>>0)<($137>>>0);
   if ($138) {
    _abort();

   }
   $140=(($R_1+24)|0);
   HEAP32[(($140)>>2)]=$64;
   $_sum31=(((16)-($10))|0);
   $141=(($1+$_sum31)|0);
   $142=$141;
   $143=((HEAP32[(($142)>>2)])|0);
   $144=($143|0)==0;
   do {
    if (!($144)) {
     $146=$143;
     $147=((HEAP32[((17944)>>2)])|0);
     $148=($146>>>0)<($147>>>0);
     if ($148) {
      _abort();

     } else {
      $150=(($R_1+16)|0);
      HEAP32[(($150)>>2)]=$143;
      $151=(($143+24)|0);
      HEAP32[(($151)>>2)]=$R_1;
      break;
     }
    }
   } while(0);
   $_sum32=((($_sum31)+(4))|0);
   $154=(($1+$_sum32)|0);
   $155=$154;
   $156=((HEAP32[(($155)>>2)])|0);
   $157=($156|0)==0;
   if ($157) {
    $_0=$16;$_02=$17;
    break;
   }
   $159=$156;
   $160=((HEAP32[((17944)>>2)])|0);
   $161=($159>>>0)<($160>>>0);
   if ($161) {
    _abort();

   } else {
    $163=(($R_1+20)|0);
    HEAP32[(($163)>>2)]=$156;
    $164=(($156+24)|0);
    HEAP32[(($164)>>2)]=$R_1;
    $_0=$16;$_02=$17;
    break;
   }
  } else {
   $_0=$p;$_02=$psize;
  }
 } while(0);


 $182=((HEAP32[((17944)>>2)])|0);
 $183=($2>>>0)<($182>>>0);
 if ($183) {
  _abort();

 }
 $_sum1=((($psize)+(4))|0);
 $185=(($1+$_sum1)|0);
 $186=$185;
 $187=((HEAP32[(($186)>>2)])|0);
 $188=$187&2;
 $189=($188|0)==0;
 do {
  if ($189) {
   $191=((HEAP32[((17952)>>2)])|0);
   $192=($3|0)==($191|0);
   if ($192) {
    $194=((HEAP32[((17940)>>2)])|0);
    $195=((($194)+($_02))|0);
    HEAP32[((17940)>>2)]=$195;
    HEAP32[((17952)>>2)]=$_0;
    $196=$195|1;
    $197=(($_0+4)|0);
    HEAP32[(($197)>>2)]=$196;
    $198=((HEAP32[((17948)>>2)])|0);
    $199=($_0|0)==($198|0);
    if (!($199)) {
     return;
    }
    HEAP32[((17948)>>2)]=0;
    HEAP32[((17936)>>2)]=0;
    return;
   }
   $202=((HEAP32[((17948)>>2)])|0);
   $203=($3|0)==($202|0);
   if ($203) {
    $205=((HEAP32[((17936)>>2)])|0);
    $206=((($205)+($_02))|0);
    HEAP32[((17936)>>2)]=$206;
    HEAP32[((17948)>>2)]=$_0;
    $207=$206|1;
    $208=(($_0+4)|0);
    HEAP32[(($208)>>2)]=$207;
    $209=$_0;
    $210=(($209+$206)|0);
    $211=$210;
    HEAP32[(($211)>>2)]=$206;
    return;
   }
   $213=$187&-8;
   $214=((($213)+($_02))|0);
   $215=$187>>>3;
   $216=($187>>>0)<((256)>>>0);
   L100: do {
    if ($216) {
     $_sum20=((($psize)+(8))|0);
     $218=(($1+$_sum20)|0);
     $219=$218;
     $220=((HEAP32[(($219)>>2)])|0);
     $_sum21=((($psize)+(12))|0);
     $221=(($1+$_sum21)|0);
     $222=$221;
     $223=((HEAP32[(($222)>>2)])|0);
     $224=$215<<1;
     $225=((17968+($224<<2))|0);
     $226=$225;
     $227=($220|0)==($226|0);
     do {
      if (!($227)) {
       $229=$220;
       $230=($229>>>0)<($182>>>0);
       if ($230) {
        _abort();

       }
       $232=(($220+12)|0);
       $233=((HEAP32[(($232)>>2)])|0);
       $234=($233|0)==($3|0);
       if ($234) {
        break;
       }
       _abort();

      }
     } while(0);
     $235=($223|0)==($220|0);
     if ($235) {
      $237=1<<$215;
      $238=$237^-1;
      $239=((HEAP32[((17928)>>2)])|0);
      $240=$239&$238;
      HEAP32[((17928)>>2)]=$240;
      break;
     }
     $242=($223|0)==($226|0);
     do {
      if ($242) {
       $_pre63=(($223+8)|0);
       $_pre_phi64=$_pre63;
      } else {
       $244=$223;
       $245=($244>>>0)<($182>>>0);
       if ($245) {
        _abort();

       }
       $247=(($223+8)|0);
       $248=((HEAP32[(($247)>>2)])|0);
       $249=($248|0)==($3|0);
       if ($249) {
        $_pre_phi64=$247;
        break;
       }
       _abort();

      }
     } while(0);

     $250=(($220+12)|0);
     HEAP32[(($250)>>2)]=$223;
     HEAP32[(($_pre_phi64)>>2)]=$220;
    } else {
     $252=$2;
     $_sum2=((($psize)+(24))|0);
     $253=(($1+$_sum2)|0);
     $254=$253;
     $255=((HEAP32[(($254)>>2)])|0);
     $_sum3=((($psize)+(12))|0);
     $256=(($1+$_sum3)|0);
     $257=$256;
     $258=((HEAP32[(($257)>>2)])|0);
     $259=($258|0)==($252|0);
     do {
      if ($259) {
       $_sum5=((($psize)+(20))|0);
       $276=(($1+$_sum5)|0);
       $277=$276;
       $278=((HEAP32[(($277)>>2)])|0);
       $279=($278|0)==0;
       if ($279) {
        $_sum4=((($psize)+(16))|0);
        $281=(($1+$_sum4)|0);
        $282=$281;
        $283=((HEAP32[(($282)>>2)])|0);
        $284=($283|0)==0;
        if ($284) {
         $R7_1=0;
         break;
        } else {
         $R7_0=$283;$RP9_0=$282;
        }
       } else {
        $R7_0=$278;$RP9_0=$277;
       }
       while(1) {


        $285=(($R7_0+20)|0);
        $286=((HEAP32[(($285)>>2)])|0);
        $287=($286|0)==0;
        if (!($287)) {
         $R7_0=$286;$RP9_0=$285;
         continue;
        }
        $289=(($R7_0+16)|0);
        $290=((HEAP32[(($289)>>2)])|0);
        $291=($290|0)==0;
        if ($291) {
         break;
        } else {
         $R7_0=$290;$RP9_0=$289;
        }
       }
       $293=$RP9_0;
       $294=($293>>>0)<($182>>>0);
       if ($294) {
        _abort();

       } else {
        HEAP32[(($RP9_0)>>2)]=0;
        $R7_1=$R7_0;
        break;
       }
      } else {
       $_sum18=((($psize)+(8))|0);
       $261=(($1+$_sum18)|0);
       $262=$261;
       $263=((HEAP32[(($262)>>2)])|0);
       $264=$263;
       $265=($264>>>0)<($182>>>0);
       if ($265) {
        _abort();

       }
       $267=(($263+12)|0);
       $268=((HEAP32[(($267)>>2)])|0);
       $269=($268|0)==($252|0);
       if (!($269)) {
        _abort();

       }
       $271=(($258+8)|0);
       $272=((HEAP32[(($271)>>2)])|0);
       $273=($272|0)==($252|0);
       if ($273) {
        HEAP32[(($267)>>2)]=$258;
        HEAP32[(($271)>>2)]=$263;
        $R7_1=$258;
        break;
       } else {
        _abort();

       }
      }
     } while(0);

     $298=($255|0)==0;
     if ($298) {
      break;
     }
     $_sum15=((($psize)+(28))|0);
     $300=(($1+$_sum15)|0);
     $301=$300;
     $302=((HEAP32[(($301)>>2)])|0);
     $303=((18232+($302<<2))|0);
     $304=((HEAP32[(($303)>>2)])|0);
     $305=($252|0)==($304|0);
     do {
      if ($305) {
       HEAP32[(($303)>>2)]=$R7_1;
       $cond53=($R7_1|0)==0;
       if (!($cond53)) {
        break;
       }
       $307=((HEAP32[(($301)>>2)])|0);
       $308=1<<$307;
       $309=$308^-1;
       $310=((HEAP32[((17932)>>2)])|0);
       $311=$310&$309;
       HEAP32[((17932)>>2)]=$311;
       break L100;
      } else {
       $313=$255;
       $314=((HEAP32[((17944)>>2)])|0);
       $315=($313>>>0)<($314>>>0);
       if ($315) {
        _abort();

       }
       $317=(($255+16)|0);
       $318=((HEAP32[(($317)>>2)])|0);
       $319=($318|0)==($252|0);
       if ($319) {
        HEAP32[(($317)>>2)]=$R7_1;
       } else {
        $322=(($255+20)|0);
        HEAP32[(($322)>>2)]=$R7_1;
       }
       $325=($R7_1|0)==0;
       if ($325) {
        break L100;
       }
      }
     } while(0);
     $327=$R7_1;
     $328=((HEAP32[((17944)>>2)])|0);
     $329=($327>>>0)<($328>>>0);
     if ($329) {
      _abort();

     }
     $331=(($R7_1+24)|0);
     HEAP32[(($331)>>2)]=$255;
     $_sum16=((($psize)+(16))|0);
     $332=(($1+$_sum16)|0);
     $333=$332;
     $334=((HEAP32[(($333)>>2)])|0);
     $335=($334|0)==0;
     do {
      if (!($335)) {
       $337=$334;
       $338=((HEAP32[((17944)>>2)])|0);
       $339=($337>>>0)<($338>>>0);
       if ($339) {
        _abort();

       } else {
        $341=(($R7_1+16)|0);
        HEAP32[(($341)>>2)]=$334;
        $342=(($334+24)|0);
        HEAP32[(($342)>>2)]=$R7_1;
        break;
       }
      }
     } while(0);
     $_sum17=((($psize)+(20))|0);
     $345=(($1+$_sum17)|0);
     $346=$345;
     $347=((HEAP32[(($346)>>2)])|0);
     $348=($347|0)==0;
     if ($348) {
      break;
     }
     $350=$347;
     $351=((HEAP32[((17944)>>2)])|0);
     $352=($350>>>0)<($351>>>0);
     if ($352) {
      _abort();

     } else {
      $354=(($R7_1+20)|0);
      HEAP32[(($354)>>2)]=$347;
      $355=(($347+24)|0);
      HEAP32[(($355)>>2)]=$R7_1;
      break;
     }
    }
   } while(0);
   $359=$214|1;
   $360=(($_0+4)|0);
   HEAP32[(($360)>>2)]=$359;
   $361=$_0;
   $362=(($361+$214)|0);
   $363=$362;
   HEAP32[(($363)>>2)]=$214;
   $364=((HEAP32[((17948)>>2)])|0);
   $365=($_0|0)==($364|0);
   if (!($365)) {
    $_1=$214;
    break;
   }
   HEAP32[((17936)>>2)]=$214;
   return;
  } else {
   $368=$187&-2;
   HEAP32[(($186)>>2)]=$368;
   $369=$_02|1;
   $370=(($_0+4)|0);
   HEAP32[(($370)>>2)]=$369;
   $371=$_0;
   $372=(($371+$_02)|0);
   $373=$372;
   HEAP32[(($373)>>2)]=$_02;
   $_1=$_02;
  }
 } while(0);

 $375=$_1>>>3;
 $376=($_1>>>0)<((256)>>>0);
 if ($376) {
  $378=$375<<1;
  $379=((17968+($378<<2))|0);
  $380=$379;
  $381=((HEAP32[((17928)>>2)])|0);
  $382=1<<$375;
  $383=$381&$382;
  $384=($383|0)==0;
  do {
   if ($384) {
    $386=$381|$382;
    HEAP32[((17928)>>2)]=$386;
    $_sum13_pre=((($378)+(2))|0);
    $_pre=((17968+($_sum13_pre<<2))|0);
    $F16_0=$380;$_pre_phi=$_pre;
   } else {
    $_sum14=((($378)+(2))|0);
    $388=((17968+($_sum14<<2))|0);
    $389=((HEAP32[(($388)>>2)])|0);
    $390=$389;
    $391=((HEAP32[((17944)>>2)])|0);
    $392=($390>>>0)<($391>>>0);
    if (!($392)) {
     $F16_0=$389;$_pre_phi=$388;
     break;
    }
    _abort();

   }
  } while(0);


  HEAP32[(($_pre_phi)>>2)]=$_0;
  $395=(($F16_0+12)|0);
  HEAP32[(($395)>>2)]=$_0;
  $396=(($_0+8)|0);
  HEAP32[(($396)>>2)]=$F16_0;
  $397=(($_0+12)|0);
  HEAP32[(($397)>>2)]=$380;
  return;
 }
 $399=$_0;
 $400=$_1>>>8;
 $401=($400|0)==0;
 do {
  if ($401) {
   $I19_0=0;
  } else {
   $403=($_1>>>0)>((16777215)>>>0);
   if ($403) {
    $I19_0=31;
    break;
   }
   $405=((($400)+(1048320))|0);
   $406=$405>>>16;
   $407=$406&8;
   $408=$400<<$407;
   $409=((($408)+(520192))|0);
   $410=$409>>>16;
   $411=$410&4;
   $412=$411|$407;
   $413=$408<<$411;
   $414=((($413)+(245760))|0);
   $415=$414>>>16;
   $416=$415&2;
   $417=$412|$416;
   $418=(((14)-($417))|0);
   $419=$413<<$416;
   $420=$419>>>15;
   $421=((($418)+($420))|0);
   $422=$421<<1;
   $423=((($421)+(7))|0);
   $424=$_1>>>($423>>>0);
   $425=$424&1;
   $426=$425|$422;
   $I19_0=$426;
  }
 } while(0);

 $428=((18232+($I19_0<<2))|0);
 $429=(($_0+28)|0);
 $I19_0_c=$I19_0;
 HEAP32[(($429)>>2)]=$I19_0_c;
 $430=(($_0+20)|0);
 HEAP32[(($430)>>2)]=0;
 $431=(($_0+16)|0);
 HEAP32[(($431)>>2)]=0;
 $432=((HEAP32[((17932)>>2)])|0);
 $433=1<<$I19_0;
 $434=$432&$433;
 $435=($434|0)==0;
 if ($435) {
  $437=$432|$433;
  HEAP32[((17932)>>2)]=$437;
  HEAP32[(($428)>>2)]=$399;
  $438=(($_0+24)|0);
  $_c=$428;
  HEAP32[(($438)>>2)]=$_c;
  $439=(($_0+12)|0);
  HEAP32[(($439)>>2)]=$_0;
  $440=(($_0+8)|0);
  HEAP32[(($440)>>2)]=$_0;
  return;
 }
 $442=((HEAP32[(($428)>>2)])|0);
 $443=($I19_0|0)==31;
 if ($443) {
  $448=0;
 } else {
  $445=$I19_0>>>1;
  $446=(((25)-($445))|0);
  $448=$446;
 }

 $449=(($442+4)|0);
 $450=((HEAP32[(($449)>>2)])|0);
 $451=$450&-8;
 $452=($451|0)==($_1|0);
 L194: do {
  if ($452) {
   $T_0_lcssa=$442;
  } else {
   $453=$_1<<$448;
   $T_056=$442;$K20_057=$453;
   while(1) {


    $461=$K20_057>>>31;
    $462=(($T_056+16+($461<<2))|0);
    $463=((HEAP32[(($462)>>2)])|0);
    $464=($463|0)==0;
    if ($464) {
     break;
    }
    $455=$K20_057<<1;
    $456=(($463+4)|0);
    $457=((HEAP32[(($456)>>2)])|0);
    $458=$457&-8;
    $459=($458|0)==($_1|0);
    if ($459) {
     $T_0_lcssa=$463;
     break L194;
    } else {
     $T_056=$463;$K20_057=$455;
    }
   }
   $466=$462;
   $467=((HEAP32[((17944)>>2)])|0);
   $468=($466>>>0)<($467>>>0);
   if ($468) {
    _abort();

   }
   HEAP32[(($462)>>2)]=$399;
   $470=(($_0+24)|0);
   $T_0_c10=$T_056;
   HEAP32[(($470)>>2)]=$T_0_c10;
   $471=(($_0+12)|0);
   HEAP32[(($471)>>2)]=$_0;
   $472=(($_0+8)|0);
   HEAP32[(($472)>>2)]=$_0;
   return;
  }
 } while(0);

 $474=(($T_0_lcssa+8)|0);
 $475=((HEAP32[(($474)>>2)])|0);
 $476=$T_0_lcssa;
 $477=((HEAP32[((17944)>>2)])|0);
 $478=($476>>>0)>=($477>>>0);
 $479=$475;
 $480=($479>>>0)>=($477>>>0);
 $or_cond=$478&$480;
 if (!($or_cond)) {
  _abort();

 }
 $482=(($475+12)|0);
 HEAP32[(($482)>>2)]=$399;
 HEAP32[(($474)>>2)]=$399;
 $483=(($_0+8)|0);
 $_c9=$475;
 HEAP32[(($483)>>2)]=$_c9;
 $484=(($_0+12)|0);
 $T_0_c=$T_0_lcssa;
 HEAP32[(($484)>>2)]=$T_0_c;
 $485=(($_0+24)|0);
 HEAP32[(($485)>>2)]=0;
 return;
}


function _scanexp($f,$pok){
 $f=($f)|0;
 $pok=($pok)|0;
 var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$11=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$24=0,$26=0;
 var $27=0,$28=0,$29=0,$or_cond3=0,$31=0,$32=0,$34=0,$35=0,$c_0=0,$neg_0=0,$37=0,$38=0,$40=0,$41=0,$43=0,$44=0,$x_012=0,$c_111=0,$45=0,$46=0;
 var $47=0,$48=0,$49=0,$50=0,$52=0,$53=0,$54=0,$56=0,$c_1_be=0,$57=0,$58=0,$59=0,$_=0,$phitmp$0=0,$phitmp$1=0,$61=0,$62=0,$y_0_lcssa$0=0,$y_0_lcssa$1=0,$c_2_lcssa=0;
 var $63=0,$64=0,$y_07$0=0,$y_07$1=0,$c_26=0,$$etemp$0$0=0,$$etemp$0$1=0,$66$0=0,$66$1=0,$$etemp$1$0=0,$$etemp$1$1=0,$69=0,$70=0,$71=0,$73=0,$74=0,$75=0,$77=0,$c_2_be=0,$78=0;
 var $79=0,$$etemp$2$0=0,$$etemp$2$1=0,$80=0,$or_cond5=0,$81=0,$82=0,$83=0,$85=0,$86=0,$87=0,$89=0,$c_3_be=0,$90=0,$91=0,$92=0,$93=0,$95=0,$96=0,$98=0;
 var $$etemp$3$0=0,$$etemp$3$1=0,$100$0=0,$100$1=0,$_0$0=0,$_0$1=0,$65$0=0,$65$1=0,$67$0=0,$67$1=0,$68$0=0,$68$1=0,$99$0=0,$99$1=0,label=0;

 $1=(($f+4)|0);
 $2=((HEAP32[(($1)>>2)])|0);
 $3=(($f+100)|0);
 $4=((HEAP32[(($3)>>2)])|0);
 $5=($2>>>0)<($4>>>0);
 if ($5) {
  $7=(($2+1)|0);
  HEAP32[(($1)>>2)]=$7;
  $8=((HEAP8[($2)])|0);
  $9=($8&255);
  $13=$9;
 } else {
  $11=((___shgetc($f))|0);
  $13=$11;
 }

 $14=($13|0)==45;
 do {
  if (((($13|0))|0)==((45)|0)|((($13|0))|0)==((43)|0)) {
   $15=((HEAP32[(($1)>>2)])|0);
   $16=($14&1);
   $17=((HEAP32[(($3)>>2)])|0);
   $18=($15>>>0)<($17>>>0);
   if ($18) {
    $20=(($15+1)|0);
    HEAP32[(($1)>>2)]=$20;
    $21=((HEAP8[($15)])|0);
    $22=($21&255);
    $26=$22;
   } else {
    $24=((___shgetc($f))|0);
    $26=$24;
   }

   $27=((($26)-(48))|0);
   $28=($27>>>0)>((9)>>>0);
   $29=($pok|0)!=0;
   $or_cond3=$28&$29;
   if (!($or_cond3)) {
    $neg_0=$16;$c_0=$26;
    break;
   }
   $31=((HEAP32[(($3)>>2)])|0);
   $32=($31|0)==0;
   if ($32) {
    $neg_0=$16;$c_0=$26;
    break;
   }
   $34=((HEAP32[(($1)>>2)])|0);
   $35=((($34)-(1))|0);
   HEAP32[(($1)>>2)]=$35;
   $neg_0=$16;$c_0=$26;
  } else {
   $neg_0=0;$c_0=$13;
  }
 } while(0);


 $37=((($c_0)-(48))|0);
 $38=($37>>>0)>((9)>>>0);
 if ($38) {
  $40=((HEAP32[(($3)>>2)])|0);
  $41=($40|0)==0;
  if ($41) {
   $_0$1=-2147483648;$_0$0=0;


   return (((tempRet0=$_0$1,$_0$0))|0);
  }
  $43=((HEAP32[(($1)>>2)])|0);
  $44=((($43)-(1))|0);
  HEAP32[(($1)>>2)]=$44;
  $_0$1=-2147483648;$_0$0=0;


  return (((tempRet0=$_0$1,$_0$0))|0);
 } else {
  $c_111=$c_0;$x_012=0;
 }
 while(1) {


  $45=((($x_012)*(10))&-1);
  $46=((($c_111)-(48))|0);
  $47=((($46)+($45))|0);
  $48=((HEAP32[(($1)>>2)])|0);
  $49=((HEAP32[(($3)>>2)])|0);
  $50=($48>>>0)<($49>>>0);
  if ($50) {
   $52=(($48+1)|0);
   HEAP32[(($1)>>2)]=$52;
   $53=((HEAP8[($48)])|0);
   $54=($53&255);
   $c_1_be=$54;
  } else {
   $56=((___shgetc($f))|0);
   $c_1_be=$56;
  }

  $57=((($c_1_be)-(48))|0);
  $58=($57>>>0)<((10)>>>0);
  $59=($47|0)<214748364;
  $_=$58&$59;
  if ($_) {
   $c_111=$c_1_be;$x_012=$47;
  } else {
   break;
  }
 }
 $phitmp$0=$47;
 $phitmp$1=((((($47|0)<0))|0)?-1:0);
 $61=((($c_1_be)-(48))|0);
 $62=($61>>>0)<((10)>>>0);
 if ($62) {
  $c_26=$c_1_be;$y_07$1=$phitmp$1;$y_07$0=$phitmp$0;
  while(1) {



   $$etemp$0$0=10;
   $$etemp$0$1=0;
   $65$0=((___muldi3($y_07$0,$y_07$1,$$etemp$0$0,$$etemp$0$1))|0);$65$1=tempRet0;
   $66$0=$c_26;
   $66$1=((((($c_26|0)<0))|0)?-1:0);
   $$etemp$1$0=-48;
   $$etemp$1$1=-1;
   $67$0=((_i64Add($66$0,$66$1,$$etemp$1$0,$$etemp$1$1))|0);$67$1=tempRet0;
   $68$0=((_i64Add($67$0,$67$1,$65$0,$65$1))|0);$68$1=tempRet0;
   $69=((HEAP32[(($1)>>2)])|0);
   $70=((HEAP32[(($3)>>2)])|0);
   $71=($69>>>0)<($70>>>0);
   if ($71) {
    $73=(($69+1)|0);
    HEAP32[(($1)>>2)]=$73;
    $74=((HEAP8[($69)])|0);
    $75=($74&255);
    $c_2_be=$75;
   } else {
    $77=((___shgetc($f))|0);
    $c_2_be=$77;
   }

   $78=((($c_2_be)-(48))|0);
   $79=($78>>>0)<((10)>>>0);
   $$etemp$2$0=2061584302;
   $$etemp$2$1=21474836;
   $80=(($68$1|0) < ($$etemp$2$1|0)) | (((($68$1|0) == ($$etemp$2$1|0) & ($68$0>>>0) <  ($$etemp$2$0>>>0))));
   $or_cond5=$79&$80;
   if ($or_cond5) {
    $c_26=$c_2_be;$y_07$1=$68$1;$y_07$0=$68$0;
   } else {
    $c_2_lcssa=$c_2_be;$y_0_lcssa$1=$68$1;$y_0_lcssa$0=$68$0;
    break;
   }
  }
 } else {
  $c_2_lcssa=$c_1_be;$y_0_lcssa$1=$phitmp$1;$y_0_lcssa$0=$phitmp$0;
 }



 $63=((($c_2_lcssa)-(48))|0);
 $64=($63>>>0)<((10)>>>0);
 if ($64) {
  while(1) {
   $81=((HEAP32[(($1)>>2)])|0);
   $82=((HEAP32[(($3)>>2)])|0);
   $83=($81>>>0)<($82>>>0);
   if ($83) {
    $85=(($81+1)|0);
    HEAP32[(($1)>>2)]=$85;
    $86=((HEAP8[($81)])|0);
    $87=($86&255);
    $c_3_be=$87;
   } else {
    $89=((___shgetc($f))|0);
    $c_3_be=$89;
   }

   $90=((($c_3_be)-(48))|0);
   $91=($90>>>0)<((10)>>>0);
   if (!($91)) {
    break;
   }
  }
 }
 $92=((HEAP32[(($3)>>2)])|0);
 $93=($92|0)==0;
 if (!($93)) {
  $95=((HEAP32[(($1)>>2)])|0);
  $96=((($95)-(1))|0);
  HEAP32[(($1)>>2)]=$96;
 }
 $98=($neg_0|0)!=0;
 $$etemp$3$0=0;
 $$etemp$3$1=0;
 $99$0=((_i64Subtract($$etemp$3$0,$$etemp$3$1,$y_0_lcssa$0,$y_0_lcssa$1))|0);$99$1=tempRet0;
 $100$0=($98?$99$0:$y_0_lcssa$0);
 $100$1=($98?$99$1:$y_0_lcssa$1);
 $_0$1=$100$1;$_0$0=$100$0;


 return (((tempRet0=$_0$1,$_0$0))|0);
}


function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[(dest)]=((HEAP8[(src)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[(curr)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))|0)])|0));
    return pdest|0;
}
function _memcmp(p1, p2, num) {
    p1 = p1|0; p2 = p2|0; num = num|0;
    var i = 0, v1 = 0, v2 = 0;
    while ((i|0) < (num|0)) {
      v1 = ((HEAPU8[(((p1)+(i))|0)])|0);
      v2 = ((HEAPU8[(((p2)+(i))|0)])|0);
      if ((v1|0) != (v2|0)) return ((v1|0) > (v2|0) ? 1 : -1)|0;
      i = (i+1)|0;
    }
    return 0;
}
function _saveSetjmp(env, label, table) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < 40) {
      if (((HEAP32[(((table)+((i<<2)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<2)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<2)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<2)+8))>>2)]=0;
        return 0;
      }
      i = (i+2)|0;
    }
    _putchar(116);_putchar(111);_putchar(111);_putchar(32);_putchar(109);_putchar(97);_putchar(110);_putchar(121);_putchar(32);_putchar(115);_putchar(101);_putchar(116);_putchar(106);_putchar(109);_putchar(112);_putchar(115);_putchar(32);_putchar(105);_putchar(110);_putchar(32);_putchar(97);_putchar(32);_putchar(102);_putchar(117);_putchar(110);_putchar(99);_putchar(116);_putchar(105);_putchar(111);_putchar(110);_putchar(32);_putchar(99);_putchar(97);_putchar(108);_putchar(108);_putchar(44);_putchar(32);_putchar(98);_putchar(117);_putchar(105);_putchar(108);_putchar(100);_putchar(32);_putchar(119);_putchar(105);_putchar(116);_putchar(104);_putchar(32);_putchar(97);_putchar(32);_putchar(104);_putchar(105);_putchar(103);_putchar(104);_putchar(101);_putchar(114);_putchar(32);_putchar(118);_putchar(97);_putchar(108);_putchar(117);_putchar(101);_putchar(32);_putchar(102);_putchar(111);_putchar(114);_putchar(32);_putchar(77);_putchar(65);_putchar(88);_putchar(95);_putchar(83);_putchar(69);_putchar(84);_putchar(74);_putchar(77);_putchar(80);_putchar(83);_putchar(10);
    abort(0);
    return 0;
}
function _testSetjmp(id, table) {
    id = id|0;
    table = table|0;
    var i = 0, curr = 0;
    while ((i|0) < 20) {
      curr = ((HEAP32[(((table)+((i<<2)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<2)+4))>>2)])|0);
      }
      i = (i+2)|0;
    }
    return 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[(ptr)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[(ptr)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))|0)])|0);
      HEAP8[(((pdest)+(i))|0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))|0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _tolower(chr) {
    chr = chr|0;
    if ((chr|0) < 65) return chr|0;
    if ((chr|0) > 90) return chr|0;
    return (chr - 65 + 97)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)|0)]=HEAP8[((psrc+i)|0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))|0)])|0));
    return pdest|0;
}


function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))|0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))|0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================


// EMSCRIPTEN_END_FUNCS

  function iii__fputs__wrapper(a1,a2) { a1=((a1)|0);a2=((a2)|0); ; return ((_fputs(((a1)|0),((a2)|0)))|0) }
function iii__strcmp__wrapper(a1,a2) { a1=((a1)|0);a2=((a2)|0); ; return ((_strcmp(((a1)|0),((a2)|0)))|0) }

  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&15](a1|0)|0;
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&15](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
  }


  function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    return FUNCTION_TABLE_iiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&255](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&1]();
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
  }

function b0(p0) { p0 = p0|0; abort(0); return 0 }
  function b1(p0) { p0 = p0|0; abort(1);  }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; abort(2);  }
  function b3(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(3); return 0 }
  function b4(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(4); return 0 }
  function b5(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(5);  }
  function b6() { ; abort(6);  }
  function b7(p0,p1) { p0 = p0|0;p1 = p1|0; abort(7); return 0 }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0,b0,_lily_jump_setup,b0,_maybe_catch_exception,b0,_lily_copy_value,b0,_make_cell_from,b0,b0,b0,b0,b0,b0,b0];
  
  var FUNCTION_TABLE_vi = [b1,b1,_add_call_frame,b1,_add_catch_entry,b1,_lily_deref,b1,_lily_pop_lex_entry,b1,_lily_release_jump,b1,_lily_jump_back,b1,b1,b1];
  
  var FUNCTION_TABLE_vii = [b2,b2,_return_handler,b2,_do_o_interpolation,b2,_define_handler,b2,_parser_loop,b2,_if_handler,b2,_do_o_build_enum,b2,_case_handler,b2,_do_o_create_function,b2,_do_o_build_list_tuple,b2,_match_handler,b2,_elif_handler,b2,_try_handler,b2,_raise_handler,b2,_do_o_new_instance
  ,b2,_protected_handler,b2,_grow_vm_registers,b2,_for_handler,b2,_except_handler,b2,_while_handler,b2,_enum_handler,b2,_var_handler,b2,_do_o_dynamic_cast,b2,_continue_handler,b2,_use_handler,b2,_do_handler,b2,_do_o_raise,b2,_else_handler,b2,_lily_vm_list_ensure,b2,_class_handler
  ,b2,_private_handler,b2,_break_handler,b2,_lily_assign_value,b2,_import_handler,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  
  var FUNCTION_TABLE_iiiiiii = [b3,b3,_lily_foreign_call,b3];
  
  var FUNCTION_TABLE_iiii = [b4,b4,_lily_eq_value,b4,_do_o_load_class_closure,b4,_lily_sys_loader,b4,_lily_builtin_loader,b4,b4,b4,b4,b4,b4,b4];
  
  var FUNCTION_TABLE_viii = [b5,b5,_lily_list_fill,b5,_lily_hash_size,b5,_lily_either_is_left,b5,_lily_list_size,b5,_lily_load_str,b5,_lily_hash_keys,b5,_lily_list_push,b5,_lily_list_shift,b5,_lily_string_split,b5,_do_o_build_hash,b5,_lily_hash_merge,b5,_lily_list_clear,b5,_lily_string_trim,b5,_lily_option_is_some
  ,b5,_do_o_get_item,b5,_lily_file_close,b5,_lily_dynamic_new,b5,_lily_boolean_to_i,b5,_lily_file_write,b5,_lily_boolean_to_s,b5,_lily_double_to_i,b5,_lily_option_is_none,b5,_build_hash_from_vm_list,b5,_lily_list_each_index,b5,_lily_hash_select,b5,_lily_string_rstrip,b5,_lily_list_reject,b5,_lily_option_unwrap_or,b5,_lily_list_join
  ,b5,_do_o_set_property,b5,_lily_option_map,b5,_lily_tuple_push,b5,_lily_file_open,b5,_do_o_get_property,b5,_lily_tainted_sanitize,b5,_lily_string_find,b5,_builtin_stdout_print,b5,_lily_string_starts_with,b5,_lily_list_select,b5,_do_o_set_item,b5,_lily_file_read_line,b5,_lily_string_html_encode,b5,_lily_hash_has_key,b5,_lily_either_right
  ,b5,_lily_tuple_merge,b5,_lily_string_lstrip,b5,_lily_option_and_then,b5,_lily_hash_reject,b5,_lily_either_is_right,b5,_lily_list_insert,b5,_lily_hash_clear,b5,_lily_bytestring_encode,b5,_lily_string_lower,b5,_lily_option_and,b5,_lily_list_count,b5,_lily_option_or,b5,_lily_string_parse_i,b5,_lily_string_ends_with,b5,_lily_builtin_print
  ,b5,_lily_hash_get,b5,_lily_list_unshift,b5,_lily_list_each,b5,_lily_option_unwrap_or_else,b5,_lily_builtin_calltrace,b5,_lily_string_strip,b5,_lily_string_is_space,b5,_lily_hash_each_pair,b5,_prep_registers,b5,_lily_list_delete_at,b5,_lily_option_or_else,b5,_lily_string_is_alnum,b5,_lily_list_map,b5,_lily_string_is_alpha,b5,_lily_string_is_digit
  ,b5,_lily_file_print,b5,_lily_list_fold,b5,_lily_either_left,b5,_lily_list_pop,b5,_lily_string_upper,b5,_lily_hash_map_values,b5,_lily_hash_delete,b5,_lily_vm_raise,b5,_lily_option_unwrap,b5,_lily_integer_to_d,b5,_lily_integer_to_s,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  
  var FUNCTION_TABLE_v = [b6,b6];
  
  var FUNCTION_TABLE_iii = [b7,b7,_load_file,b7,_do_o_create_closure,b7,_do_o_load_closure,b7,_load_library,b7,iii__fputs__wrapper,b7,iii__strcmp__wrapper,b7,_do_o_optarg_dispatch,b7];
  

  return { _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _strcat: _strcat, _free: _free, _memset: _memset, _get_parser: _get_parser, _realloc: _realloc, _strncpy: _strncpy, _memmove: _memmove, _tolower: _tolower, _strlen: _strlen, _memcmp: _memcmp, _malloc: _malloc, _memcpy: _memcpy, _run_parser: _run_parser, _destroy_parser: _destroy_parser, _get_parser_error: _get_parser_error, _strcpy: _strcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_ii: dynCall_ii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "invoke_ii": invoke_ii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiii": invoke_iiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iii": invoke_iii, "_strncmp": _strncmp, "_llvm_va_end": _llvm_va_end, "_dlsym": _dlsym, "_snprintf": _snprintf, "_fgetc": _fgetc, "_fclose": _fclose, "_isprint": _isprint, "_abort": _abort, "_toupper": _toupper, "_pread": _pread, "_close": _close, "_fflush": _fflush, "_fopen": _fopen, "_strchr": _strchr, "_fputc": _fputc, "___buildEnvironment": ___buildEnvironment, "_sysconf": _sysconf, "_open": _open, "___setErrNo": ___setErrNo, "__reallyNegative": __reallyNegative, "_send": _send, "_write": _write, "_fputs": _fputs, "_isalpha": _isalpha, "_sprintf": _sprintf, "_llvm_lifetime_end": _llvm_lifetime_end, "_strrchr": _strrchr, "_fabs": _fabs, "_isspace": _isspace, "_fread": _fread, "_longjmp": _longjmp, "_read": _read, "_copysign": _copysign, "__formatString": __formatString, "_ungetc": _ungetc, "_strstr": _strstr, "_dlclose": _dlclose, "_recv": _recv, "_dlopen": _dlopen, "_pwrite": _pwrite, "_putchar": _putchar, "_isalnum": _isalnum, "_fsync": _fsync, "_strerror_r": _strerror_r, "___errno_location": ___errno_location, "_llvm_lifetime_start": _llvm_lifetime_start, "_sbrk": _sbrk, "_fmod": _fmod, "_time": _time, "_islower": _islower, "_isupper": _isupper, "_strcmp": _strcmp, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stdin": _stdin, "_stderr": _stderr, "_stdout": _stdout }, buffer);
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _memset = Module["_memset"] = asm["_memset"];
var _get_parser = Module["_get_parser"] = asm["_get_parser"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _memcmp = Module["_memcmp"] = asm["_memcmp"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _run_parser = Module["_run_parser"] = asm["_run_parser"];
var _destroy_parser = Module["_destroy_parser"] = asm["_destroy_parser"];
var _get_parser_error = Module["_get_parser_error"] = asm["_get_parser_error"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    applyData(Module['readBinary'](memoryInitializer));
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      applyData(data);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



